Id,body,Score
65093963,"<p>Maybe you need just to remove all quotes and single quotes? For this reason, You don't need to iterate through Object.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let incomeJson = { ""USD"":1,""AED"":3.6721,""ARS"":81.0455,""AUD"":1.3564,""BGN"":1.6324 };

console.log( JSON.stringify(incomeJson).replace(/[""']/g, """"));</code></pre>
</div>
</div>
</p>
",7
65087060,"<p>This issue occured in d3 v5. So, I solved it using d3 v4.</p>
",-2
65106591,"<p>You could use a recursive function to collect all the values. Then use <code>reduce</code> to create a nested object from the values:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const initObject = { 
  value: 5,
  next: {
   value: 10,
   next: {
     value: 15,
     next: null
   }
  }
}

const getValues = ({ value, next }) =&gt;
  next 
    ? [value, ...getValues(next)] 
    : [value]

const createObject = values =&gt; 
  values.reduce((next, value) =&gt; ({ value, next }), null)

const output = createObject(getValues(initObject))

console.log(output)</code></pre>
</div>
</div>
</p>
",8
65124087,"<p>You should do your Firebase staff inside a lifecyle method.As your working with functionnal components you can use the <code>useEffect hook</code>:</p>
<pre><code>import React from &quot;react&quot;;
import fire from &quot;./firebase&quot;;
import firebase from &quot;firebase&quot;
import { useState } from &quot;react&quot;

    
const UserPage = ({ match }) =&gt; {
    const [user, setUser] = useState(null)
    const { params: { userId } } = match;

    useEffect(()=&gt;{
        //Put your Firebase staff here
     },[])
    
    return(
        &lt;&gt;
        &lt;h1&gt;Hey {user}&lt;/h1&gt;
        &lt;/&gt;
    )
    }
   
export default UserPage
</code></pre>
<p>I dont know what you're trying to achieve, but inside you <code>&lt;h1&gt;{user}&lt;/h1&gt;</code> i think that <code>{user}</code> is an <code>object</code> so if you want to access a specific attribute you can do something like <code>&lt;h1&gt;{user.attributeName}&lt;/h1&gt;</code>.</p>
<p>I hope that it helped</p>
",6
65149827,"<p><code>for..in</code> iterates over all enumerable properties anywhere in the prototype chain. For an HTMLCollection, this results in, <em>in addition</em> to numeric properties:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>for (const i in document.getElementsByClassName('catalogItem')) {
  console.log(i);
}</code></pre>
</div>
</div>
</p>
<p><code>length</code>, <code>item</code>, <code>namedItem</code> - the values on each of those properties are not elements (so calling <code>addEventListener</code> on them fails).</p>
<p>Use <code>for..of</code> instead, to invoke the HTMLCollection's iterator, which gives you <em>only</em> the elements:</p>
<pre><code>for (const button of catButtons) {
  button.addEventListener('click', () =&gt; {
    // ...
  });
}
</code></pre>
<p>Since you're adding listeners in a loop, make sure to declare the iteration variable (<code>i</code> or <code>button</code>) - with <code>const</code>; using <code>for(i</code> results in there only being one global binding for <code>i</code>, which will result in problems if you find you want to examine the variable inside the listener. (See the <a href=""https://stackoverflow.com/questions/750486/javascript-closure-inside-loops-simple-practical-example"">closure inside loops</a> question)</p>
",7
65132253,"<p>Create the <code>m</code> subarray inside the loop (so you have a separate subarray for each iteration), not outside of it - outside, you've only created a single array in memory that each index points to.</p>
<pre><code>let s = [];
for (let j = 0; j &lt; 9999; j++)
{
  let m = [[22,0],[53,0],[64,0],[45,0],[34,0]];
  let l = m.length;
  for(let i = 0; i &lt; m.length; i++)
  {
    let x = Math.floor(Math.random()*l);
    m[i][1] = x; 
  }
  s.push(m);
}
</code></pre>
<p>Or, more functionally and all at once with <code>Array.from</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const s = Array.from(
  { length: 2 },
  () =&gt; [[22,0],[53,0],[64,0],[45,0],[34,0]]
          .map(([num]) =&gt; [num, Math.floor(Math.random() * 5)])
);
console.log(s);</code></pre>
</div>
</div>
</p>
",6
65115136,"<p>You're partially right. <code>add</code> takes no arguments.  If you supply any, they will be ignored.</p>
<p>But when you call <code>add</code>, you get back the function</p>
<pre class=""lang-js prettyprint-override""><code>num =&gt; {
    const result = num + 10;
    return `Calculated! ${result}`;
}
</code></pre>
<p>which might be easier to recognize as a function if you wrapped its single argument in parentheses:</p>
<pre class=""lang-js prettyprint-override""><code>(num) =&gt; {
    const result = num + 10;
    return `Calculated! ${result}`;
}
</code></pre>
<p>This new function takes (presumably) a number, adds 10 to it, and returns a formatted string including that result.</p>
<p>So this:</p>
<pre class=""lang-js prettyprint-override""><code>const addFn = add()
</code></pre>
<p>simply assigns the value of <code>addFn</code> as this function returned by <code>add ()</code>, namely the function we describe above.</p>
<p>When we call it with <code>5</code>, it returns that formatted string involving  the result of <code>10 + 5</code>.</p>
<p>Does that make it any clearer?</p>
",6
65118160,"<p>An <code>onClick</code> in React expects a function. in your code you passed in the return value of <code>this.randomPerson</code> which is not a function.</p>
<p>Try this:</p>
<pre><code>class App extends Component {
  state = {
    persons: [
      { name: 'test1', num: randomNum()},
      { name: 'test2', num: randomNum()}
    ]
  }

  randomPerson =() =&gt;{
    return Math.floor(Math.random()* this.state.persons.length)
  }

  render(){
    return (
      &lt;React.Fragment&gt;
        &lt;button onClick={this.randomPerson}&gt;Switch Person&lt;/button&gt;
        {/* ^-- I changed this and removed the num declaration */}
        &lt;div&gt;
          &lt;Person name={this.state.persons[num].name} randomNum={this.state.persons[num].num} /&gt;
        &lt;/div&gt;
      &lt;/React.Fragment&gt;
    
    );
  }
}

export default App;
</code></pre>
<p>But I'm unsure what you're trying to do with the generated new random number from <code>randomPerson</code>. I assume you might want to use that number to select a random user. For that you will have to add the generated random number from <code>randomPerson</code> into state. Unfortunately I've completely forgotten how to do this in class components... So I did that for you with a functional component below:</p>
<pre><code>function App() {
    const randomPerson = () =&gt; Math.floor(Math.random() * this.state.persons.length);

    const [person, setPerson] = useState([
        { name: 'test1', num: randomNum()},
        { name: 'test2', num: randomNum()}
    ]);
    const [currentPerson, setCurrentPerson] = useState(randomPerson());

    const switchPerson = () =&gt; {
        setCurrentPerson(randomPerson());
    };

    return (
        &lt;React.Fragment&gt;
            &lt;button onClick={switchPerson}&gt;Switch Person&lt;/button&gt;
            &lt;div&gt;
                &lt;Person name={person[currentPerson].name} randomNum={person[currentPerson].num} /&gt;
            &lt;/div&gt;
        &lt;/React.Fragment&gt;
    );
}
</code></pre>
",0
65085679,"<p>It seems you're trying to send params station_id into function refreshMETAR as params to send a request when the button clicked.
there're 2 problems in your code.</p>
<ol>
<li><code>&lt;button onclick=&quot;refreshMETAR(this.innerHTML)&quot;&gt;${station_id}&lt;/button&gt;</code>
i think this in above statement will be reference to window, not button element nor stationIdCell element.</li>
<li><code>const refreshMETAR = () =&gt; { const stationElement = this.innerHTML //The value of the table cell should be read here</code>  you send (this.innerHtml) as in params ,yet this is not the way to use a in param</li>
</ol>
<p>please try this:</p>
<pre><code>stationIdCell.innerHTML = `&lt;button onclick=&quot;refreshMETAR('${stationId}')&quot;&gt;${station_id}&lt;/button&gt;`

const refreshMETAR = (stationId) =&gt; {
    const station = stationId
    console.log(`entered: ${station}`)
</code></pre>
",0
65099888,"<p>It is not currently possible to transfer a <code>BluetoothDevice</code> or any of the other associated objects to a new page during a navigation (which is what happens when you call <code>location.replace()</code>). If possible you should keep the user on the same page for the entire time that it is connected to a device.</p>
<p>There is upcoming work on <a href=""https://crbug.com/974879"" rel=""nofollow noreferrer"">Chromium issue 974879</a> which will make it possible to keep the permission the user granted your site to connect to the device across navigations and sessions but you will still have to reconnect on each page.</p>
",0
65142244,"<p>Look in the console for errors (F12)</p>
<p>Also you are hammering the DOM</p>
<p>Try this instead</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!doctype html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;title&gt;Load images&lt;/title&gt;
  &lt;script&gt;
    function myFunction(numImages) {
      const html = Array.from(Array(numImages).keys()).slice(1).map(key =&gt; {
        const id = String(key).padStart(2, '0');
        return `&lt;div class='col-sm-4 more crop col-xs-6 col-md-3 col-lg-3'&gt;
    &lt;a class=""thumbnail fancybox"" rel=""ligthbox"" href=""images/image${id}.jpg""&gt;
      &lt;img class=""img-responsive"" alt="""" src=""images/image${id}.jpg"" title=""Here would be image${id}"" /&gt;Here would be img ${id}
    &lt;/a&gt;
  &lt;/div&gt;`
      })
      document.querySelector('#images').innerHTML = html.join("""");
    }

    window.addEventListener(""load"", function() {
      myFunction(5); /* change to 50 when you are happy */
    });

  &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=""images""&gt;&lt;/div&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</p>
",0
65124991,"<p>You have a typo, use <code>plotLines</code> instead of <code>plotlines</code>:</p>
<pre><code>  xAxis: {
    plotLines: [{
      ...
    }],
    ...
  }
</code></pre>
<hr />
<p><strong>Live demo:</strong> <a href=""https://jsfiddle.net/BlackLabel/p3u8ejtb/"" rel=""nofollow noreferrer"">https://jsfiddle.net/BlackLabel/p3u8ejtb/</a></p>
<p><strong>API Reference:</strong> <a href=""https://api.highcharts.com/highcharts/xAxis.plotLines"" rel=""nofollow noreferrer"">https://api.highcharts.com/highcharts/xAxis.plotLines</a></p>
",0
65114034,"<p>As @El_Vanja pointed out. It all depends on the rules of your form.</p>
<h3>Possible Solutions</h3>
<p>I do not think PHP can redirect without a back arrow.  However, you <em>might</em> be able to replace the contents of your page in PHP (not a PHP expert).</p>
<p>Since this question is marked with &quot;javascript&quot;
I do know that you can execute this:
<code>window.location.replace(url);</code>. <a href=""https://stackoverflow.com/questions/1045845/how-to-call-a-javascript-function-from-php"">This</a> might help if you want to execute javascript with php.</p>
<h3>Suggestions</h3>
<p>I think there are better solutions (after all, you just need to enter the URL again and you are back at the form).</p>
<p>If you are very adamant they do not revisit the page. You should save whether or not they completed the form in the database for their account.
If you do not have accounts you could also track IPs, but keep in mind, this can be spoofed (then again, users can always create multiple accounts).</p>
<p>If you don't want them to revisit the page but aren't <em>that</em> worried about how many times they take the test; you can create a cookie. Just check if the cookie is set and redirect accordingly.</p>
<p>I would write code here... but I do not know the exact details of what you want to achieve.</p>
<p>However, I hope I was able to point you in the right direction.</p>
",0
65162308,"<p>If you have the data from the API, then what you need to change is the presentational layer.</p>
<p>Here's a small snippet that works with a set of data (it's a fully JavaScript solution):</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const fetchData = async() =&gt; {
  const response = await fetch('https://jsonplaceholder.typicode.com/todos')
  const json = await response.json()
  return json
}

const thead1 = document.querySelector('#table &gt; thead')
const tbody1 = document.querySelector('#table &gt; tbody')

const headerHtml = (items) =&gt; {
  let html = ''
  html += '&lt;tr&gt;&lt;th&gt;&lt;/th&gt;'
  Object.keys(items[0]).forEach(header =&gt; {
    html += `&lt;th&gt;${ header }&lt;/th&gt;`
  })
  html += '&lt;/tr&gt;'
  return html
}

const bodyHtml = (items) =&gt; {
  let html = ''
  items.forEach(item =&gt; {
    html += '&lt;tr&gt;'
    html += '&lt;td&gt;&lt;/td&gt;'
    for (let key in item) {
      html += `&lt;td&gt;${ item[key] }&lt;/td&gt;`
    }
    html += '&lt;/tr&gt;'
  })
  return html

}

(async function() {
  // get data from the API
  const response = await fetchData()

  // transform data for our requirements
  let transformed = response.reduce((a, c) =&gt; {
    if (typeof a[c.userId] === ""undefined"") a[c.userId] = 0
    a[c.userId] += 1
    return a
  }, {})

  let data = Object.entries(transformed).map(([id, val]) =&gt; ({
    id,
    val
  }))

  thead1.innerHTML = headerHtml(data)
  tbody1.innerHTML = bodyHtml(data)

  // create chart:
  Highcharts.chart('container', {
    data: {
      table: 'table'
    },
    chart: {
      type: 'column'
    },
    title: {
      text: 'Data extracted from a HTML table in the page'
    },
    yAxis: {
      allowDecimals: false,
      title: {
        text: 'Units'
      }
    },
    tooltip: {
      formatter: function() {
        return `
          &lt;b&gt;${ this.series.name }&lt;/b&gt;
        `
      }
    }
  });

})();</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>#table {
  border-collapse: collapse;
  border: 1px solid #cacaca;
  width: 200px;
}

#table tr,
#table th,
#table td {
  border: 1px solid #6f6f6f;
}

#table th {
  background: #cacaca;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://code.jquery.com/jquery-3.4.1.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://code.highcharts.com/highcharts.js""&gt;&lt;/script&gt;
&lt;script src=""https://code.highcharts.com/modules/data.js""&gt;&lt;/script&gt;
&lt;script src=""https://code.highcharts.com/modules/exporting.js""&gt;&lt;/script&gt;

&lt;script src=""https://code.highcharts.com/modules/export-data.js""&gt;&lt;/script&gt;
&lt;table id=""table""&gt;
  &lt;thead&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;hr /&gt;
&lt;div id=""container""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65126826,"<p>This component is not compatible with vue 3 although its name indicates that is compatible which is something that confused you, they say :</p>
<blockquote>
<p>... We have decided to maintain as a new project. We name it vue-tables-3 because there will also be the version for Vue.js 3 when it is ready.</p>
</blockquote>
<p>but the last publish is more than one year.</p>
<p>But you could use <a href=""https://github.com/matfish2/vue-tables-2"" rel=""nofollow noreferrer"">vue-tables-2</a> which is compatible with vue 3</p>
",0
65084387,"<p>On the first table I added &quot;EventListener&quot;. When you click on a number field, the function is called function <code>getNumbers()</code> which adds the number to the other table. So that one digit cannot be added more than once. When you click on a field with a number, &quot;EventListener&quot; is automatically removed. The function <code>getNumbers()</code> loop the fields in the second table and fills in the next blank field.</p>
<p><em>I have marked the new things in your code with a comments <code>// NEW CODE LINE</code></em></p>
<p><strong>Example:</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script&gt;
        var timerid;
        var secs = 30;
        var randomNumber;
        var mclics = 0;
        var mcorrect = 0;



        function begin() {
            randomNumber = Math.round(Math.random() * 9);

            var atable = document.getElementById(""atable"");
            for (i = 0; i &lt; atable.rows.length; i++) {
                for (j = 0; j &lt; atable.rows[i].cells.length; j++) {
                    var a = Math.ceil(Math.random() * 100);
                    atable.rows[i].cells[j].innerHTML = a;

                    // NEW CODE LINE
                    atable.rows[i].cells[j].addEventListener(""click"", function () {
                        getNumbers(this.innerText);
                        this.removeEventListener(""click"", arguments.callee);
                    });
                    // END NEW CODE LINE
                }
            }

        }

        function check(trgt) {
            if (trgt.tagName == ""TD"") {
                mclics++
                trgt.onclick = false;                 //for not happen again click//
                if ((trgt.innerHTML % randomNumber) == 0) {
                    mcorrect++                          //right clicks
                    trgt.style.backgroundColor = ""green"";
                }
                else {
                    trgt.style.backgroundColor = ""red"";
                }
            }

        }

        // NEW CODE LINE
        function getNumbers(x) {
            var target = document.getElementById('second').getElementsByTagName('td');
            for (var i = 0; i &lt; target.length; i++) {
                if (target[i].innerText.length === 0) {
                    target[i].innerText = x;
                    break;
                }
            }
        }
        // END NEW CODE LINE

    &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;input type=""button"" value=""Start"" onclick=""begin()"" style=""width: 30%""&gt;&lt;br&gt;
    &lt;p id=""anumber""&gt;&lt;/p&gt;
    &lt;table id=""atable"" border=""1"" onclick=""check(event.target)""&gt;
        &lt;tr&gt;
            &lt;td style=""width: 292px; height: 39px;""&gt; &lt;/td&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
            &lt;td style=""width: 260px; height: 39px;""&gt;

        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 292px; height: 46px;""&gt;&lt;/td&gt;
            &lt;td style=""width: 332px; height: 46px;""&gt;&lt;/td&gt;
            &lt;td style=""width: 260px; height: 46px;""&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 292px; height: 172px;""&gt;&lt;/td&gt;
            &lt;td style=""width: 332px; height: 172px;""&gt;&lt;/td&gt;
            &lt;td style=""width: 260px; height: 172px;""&gt;
        &lt;/tr&gt;

    &lt;/table&gt;

    &lt;p&gt;Remaining time: &lt;/p&gt;
    &lt;p id=""atimer""&gt;&lt;/p&gt;

    &lt;table id=""second"" border=""1""&gt;
        &lt;tr&gt;
            &lt;td style=""width: 292px; height: 39px;""&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr&gt;
            &lt;td style=""width: 292px; height: 46px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 46px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;

    &lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>
<hr />
<p><strong>Version 2:</strong></p>
<p>Does not start before pressing the &quot;Start&quot; button. Cleans the contents of both tables when the &quot;Start&quot; button is pressed again.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script&gt;
        var timerid;
        var secs = 30;
        var randomNumber;
        // var mclics = 0;
        var mcorrect = 0;

        function begin() {

            // NEW CODE LINE
            mcorrect = 0;

            var tableA = document.getElementById('atable').getElementsByTagName('td');
            for (var i = 0; i &lt; tableA.length; i++) {
                tableA[i].style.backgroundColor = '';
                tableA[i].removeEventListener(""click"", getClick);
            }

            var tableB = document.getElementById('second').getElementsByTagName('td');
            for (var i = 0; i &lt; tableB.length; i++) {
                tableB[i].innerText = '';
            }
            // END NEW CODE LINE

            randomNumber = Math.round(Math.random() * 9);

            var atable = document.getElementById(""atable"");
            for (i = 0; i &lt; atable.rows.length; i++) {
                for (j = 0; j &lt; atable.rows[i].cells.length; j++) {
                    var a = Math.ceil(Math.random() * 100);
                    atable.rows[i].cells[j].innerHTML = a;

                    // NEW CODE LINE
                    atable.rows[i].cells[j].addEventListener(""click"", getClick);
                    // END NEW CODE LINE
                }
            }

        }

        // function check(trgt) {
        //     if (trgt.tagName == ""TD"") {
        //         mclics++
        //         trgt.onclick = false;                 //for not happen again click//
        //         if ((trgt.innerHTML % randomNumber) == 0) {
        //             mcorrect++                          //right clicks
        //             trgt.style.backgroundColor = ""green"";
        //         }
        //         else {
        //             trgt.style.backgroundColor = ""red"";
        //         }
        //     }
        // }

        // NEW CODE LINE
        function getClick() {
            getNumbers(this.innerText, this);
            this.removeEventListener(""click"", getClick);
        }

        function getNumbers(x, y) {

            if ((y.innerHTML % randomNumber) == 0) {
                mcorrect++                          //right clicks
                y.style.backgroundColor = ""green"";
            }
            else {
                y.style.backgroundColor = ""red"";
            }

            var target = document.getElementById('second').getElementsByTagName('td');
            for (var i = 0; i &lt; target.length; i++) {
                if (target[i].innerText.length === 0) {
                    target[i].innerText = x;
                    break;
                }
            }
        }
        // END NEW CODE LINE

    &lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;input type=""button"" value=""Start"" onclick=""begin()"" style=""width: 30%""&gt;
    &lt;br&gt;

    &lt;p id=""anumber""&gt;&lt;/p&gt;
    &lt;table id=""atable"" border=""1""&gt;
        &lt;tr&gt;
            &lt;td style=""width: 292px; height: 39px;""&gt; &lt;/td&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
            &lt;td style=""width: 260px; height: 39px;""&gt;

        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 292px; height: 46px;""&gt;&lt;/td&gt;
            &lt;td style=""width: 332px; height: 46px;""&gt;&lt;/td&gt;
            &lt;td style=""width: 260px; height: 46px;""&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 292px; height: 172px;""&gt;&lt;/td&gt;
            &lt;td style=""width: 332px; height: 172px;""&gt;&lt;/td&gt;
            &lt;td style=""width: 260px; height: 172px;""&gt;
        &lt;/tr&gt;

    &lt;/table&gt;

    &lt;p&gt;Remaining time: &lt;/p&gt;
    &lt;p id=""atimer""&gt;&lt;/p&gt;

    &lt;table id=""second"" border=""1""&gt;
        &lt;tr&gt;
            &lt;td style=""width: 292px; height: 39px;""&gt; &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr&gt;
            &lt;td style=""width: 292px; height: 46px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 46px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;

        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td style=""width: 332px; height: 39px;""&gt;&lt;/td&gt;
        &lt;/tr&gt;

    &lt;/table&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",0
65085039,"<p>I'll extrapolate on a solution by going through the requirements you elaborated step by step.</p>
<blockquote>
<p>User can login</p>
</blockquote>
<p>This will require some system for authorization. You could perhaps use another Mongo table dedicated to this sort of thing - at the minimum it should link some authorization token to a user id.</p>
<pre class=""lang-js prettyprint-override""><code>const AuthSchema = {
  user_id: ObjectID,
  auth_token: string,
}
</code></pre>
<p>The way you get this auth token is through various means - really depends on how you auth your users, e.g. phone auth or username/password. All that's a bit beyond the scope of this answer.</p>
<blockquote>
<p>Article &quot;like&quot; will go up by 1 every time unique user likes it (no duplicate). Somebody who already liked the &quot; article&quot; can &quot;unlike&quot; it or &quot;user&quot; will see they already liked the &quot;article&quot;</p>
</blockquote>
<p>A Redis <strong>Set</strong> would model this quite well. Every time a user likes an article, add their user_id into a Redis Set for that article. The key for such set could look like this:</p>
<pre><code>article:${article_id}:likes
</code></pre>
<p>Get the number of people who liked the article by taking the size of its set (full of unique user_ids). Whenever someone unlikes an article, remove their user_id from the set.</p>
<p>Further reading:</p>
<ul>
<li><a href=""https://redis.io/topics/data-types"" rel=""nofollow noreferrer"">Redis Sets and other Redis datatypes</a></li>
<li><a href=""https://redis.io/commands/sadd"" rel=""nofollow noreferrer"">Redis sadd command</a>.</li>
</ul>
",0
65117150,"<p>The value of the property <code>system:time_start</code> must be a <em>number</em> (even though it would make sense for it to be a Date, the system design didn't end up that way). You must change calls like</p>
<pre><code>.set('system:time_start', ee.Date.fromYMD(y, m, 1))
</code></pre>
<p>to</p>
<pre><code>.set('system:time_start', ee.Date.fromYMD(y, m, 1).millis())
</code></pre>
<p>While looking, I see other possible problems here:</p>
<pre><code>    return monthly.set('year', y).set('system:time_start', ee.Date.fromYMD(y, 1, 1))
      .set('month', y).set('system:time_start', ee.Date.fromYMD(y, m, 1));
</code></pre>
<p>This is setting the <code>month</code> property value to the <code>y</code> variable (not <code>m</code>), and it's setting <code>system:time_start</code> twice (so only the second value will be used). Probably this is not what you meant. I have not looked at what you're intending to do with the collection, so you'll have to figure that part out yourself.</p>
",0
65133270,"<p>If you don't want to import image in your component then you can display image in the following way</p>
<pre><code>var imageName = require('./images/img-9.jpg')
&lt;img src={imageName} /&gt;
</code></pre>
<p>Here, require used for static &quot;imports&quot;, so you need to change your imports.</p>
<p>But you can also do this in the following way</p>
<pre><code>import imageName from './images/img-9.jpg';
&lt;img src={imageName} /&gt;
</code></pre>
<p>This is another approach to do this</p>
",0
65103187,"<p>The first problem is caused by the fact that you would have three buttons that each have an id of <code>abc</code> when doing the <code>document.getElementById(e.target.id)</code> it will <strong>always</strong> return the first it found. This issue could be resolved by passing an id in as a property so that each of your toggles has an unique id.</p>
<p>The other problem is that Svelte will remove all style declaration that are <em>not explicitely used</em> in your markup, the <code>active</code> class is nowhere used in your markup so it will be removed.</p>
<p>When using Svelte it is generally not a good idea to manipulate your DOM directly like this and instead rely on that state of your component and Svelte's internal logic to manage this for you.</p>
<p>This means that in your script you will have a variable that tracks the state of your components:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;script&gt;
  export let toggled = false
&lt;/script&gt; 
</code></pre>
<p>And you use this state to conditionally add the class to the element</p>
<pre class=""lang-html prettyprint-override""><code>&lt;div class:active={toggled}&gt;&lt;/div&gt;
</code></pre>
<p>You could go a step further and use the shorthand for the conditional class which requires the variable and the class to be same name: <code>&lt;div class:toggled&gt;&lt;/div&gt;</code></p>
<p>This gives us a full component of</p>
<pre class=""lang-html prettyprint-override""><code>&lt;style&gt;
  .butt {
    background:blue;
  }
  .butt.toggled {
    background:lightblue;
  }
&lt;/style&gt;

&lt;script&gt;
  export let toggled = false

  function toggle() {
    toggled = !toggled
  }
&lt;/script&gt;

&lt;div
  on:click={toggle}
  class=&quot;butt&quot;
  class:toggled
&gt;sample button&lt;/div&gt;
</code></pre>
",0
65085875,"<p>If you are simply trying to conditionally render the list item with the item title you don't have to use a ternary.</p>
<p><a href=""https://reactjs.org/docs/conditional-rendering.html#inline-if-with-logical--operator"" rel=""nofollow noreferrer"">Inline If with Logical &amp;&amp; Operator</a></p>
<pre><code>{item.title &amp;&amp; (
  &lt;li style={{background: &quot;#ffa50070&quot;}}&gt;
    &lt;div&gt;
      {item.title}
    &lt;/div&gt;
  &lt;/li&gt;
)}
</code></pre>
<p>And since it seems that <code>titleName</code> also conditionally renders a list item</p>
<pre><code>{item.titleName &amp;&amp; (
  &lt;li onClick={() =&gt; { this.setState({ indexDescription: index }) }}&gt;
    &lt;div className={less.sidebar_list}&gt;
      &lt;div&gt;
        &lt;FontAwesomeIcon className={less.item_icon} icon={item.iconName} /&gt;
      &lt;/div&gt;
      &lt;div className={less.titleName}&gt;
        &lt;div&gt;
          &lt;p&gt;{item.titleName}&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/li&gt;
)}
</code></pre>
<p>To also remove a bit of DOM noise (and not inject empty divs on the off-hand case that no list items are rendered), I also suggest returning the list items (<code>li</code>) in a React <code>Fragment</code>.</p>
<pre><code>const listLessons = this.props.lesson.map((item, index) =&gt; {
  return (
    &lt;Fragment key={index}&gt;
      ...
    &lt;/Fragment&gt;
  );
};
</code></pre>
",0
65150858,"<p><code>useColorScheme()</code> returns <code>string</code> or <code>null</code>. But you have next check in <code>restoreDarkModeAsync</code></p>
<pre><code>if (!parsedTodos || typeof parsedTodos !== &quot;object&quot;) return;
</code></pre>
<p>that's why it fails.</p>
<p>And here is more correct and clean way to toggle scheme</p>
<pre><code>const toggleScheme = () =&gt; {
    const nextScheme = isDark ? &quot;light&quot; : &quot;dark&quot;;
    setScheme(nextScheme);
    storeSetScheme(nextScheme);
};
</code></pre>
",0
65092440,"<p>First, I removed <code>return r;</code>. It was ending your function and you couldn't print your newly created words to <code>#pirate</code> input.</p>
<p>Second, you were using the same variable to store your changing, <code>r = r + letter;</code> and <code>r = r + 'o' + smallLetter</code>. I changed them with a new variable which name is d in the beginning on the function and returned it.</p>
<p>Note: I removed your Speech API from the answer.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).ready(function(){
    $(""#normal"").keyup(function(){

        var r = $(""#normal"").val();
      let d= """";
          let c = 'bcdfghjklmnpqrstvwxz';
          for(let letter of r){
            let smallLetter = letter.toLowerCase();
            d = d + letter;
            if(c.includes(smallLetter)){

              d = d + 'o' + smallLetter;  
           }
          }

        $(""#pirate"").val(d);

    });
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!-- Av Karwan Maryame Azar.--&gt;


&lt;html lang=""en""&gt;
&lt;head&gt;
  &lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.1.1/jquery.min.js""&gt;&lt;/script&gt;

  
  &lt;meta charset=""UTF-8""&gt;
  &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1""&gt;
  &lt;title&gt;&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
  
  &lt;h2&gt;Normal&lt;/h2&gt;
&lt;textarea id=""normal""&gt;&lt;/textarea&gt;

&lt;h2&gt;Pirates&lt;/h2&gt;
&lt;textarea id=""pirate""&gt;&lt;/textarea&gt;

&lt;p&gt;
  
&lt;input type='button' value=' Talk like a pirate' /&gt;
  

&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",0
65153572,"<p>Im going to give you an example with your code and you could work out the rest.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>    var colors = [""#2D2D2D""]; // dont know why you have an array of color but
    // i could get this to be much simpler without using array but i fallowed your example to make simpler for you
    var colorIndex = 0;
    function changeColor() {
        var col = document.getElementById(""body"");          
        if( colorIndex &gt;= colors.length ) {
            colorIndex = 0;
        }
        
        
        if (colors[colorIndex] == col.getAttribute(""currentColor"")){
            col.style.backgroundColor = null; // take the css color
            col.setAttribute(""currentColor"",col.style.backgroundColor);
          }
            else {
            col.style.backgroundColor = colors[colorIndex];
            col.setAttribute(""currentColor"",colors[colorIndex]);
          }
        
        colorIndex++;   
    } </code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>#body{
background-color:red;

}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""body""&gt;
&lt;label class=""switch""&gt;
  &lt;input id=""input"" onclick=""changeColor();"" type=""checkbox""&gt;
  &lt;span class=""slider round""&gt;&lt;/span&gt;
&lt;/label&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65109163,"<p>In your case the uname and pass are passed as request parameters. So to access them in JSP use
&lt;%= request.getParameter(&quot;uname&quot;) %&gt;
&lt;%= request.getParameter(&quot;pass&quot;) %&gt;</p>
",0
65098905,"<p>I think you can simplify your code to look like this.</p>
<pre><code>handleSubmit(event) {
  var requestOptions = {}

  const params = new URLSearchParams({
    'name': this.state.name,
    'birth': this.state.birth,
    'oscars': this.state.oscars
  });

  if (this.state.movies.length &gt; 0) {
    params.append(&quot;movies&quot;, this.state.movies)
  }

  requestOptions.method = &quot;POST&quot;;
  requestOptions.body = params;
}
</code></pre>
",0
65083226,"<p>You need to prevent the button clicking, not the actual <code>start</code> function that you need to call it from by the timer. So it's better to separate these functions:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let money = 0;
let running = false;

// when clicking the button
function onClickButton(time, val) {
  if(running) {
    console.log(""Already Growing!"");
  } else {
    running = true;
    start(time, val);
  }
}

// timer function
function start(time, val) {
  let bar = document.getElementById('progressBar1');
  bar.value = time;
  time++;
  let sim = setTimeout(() =&gt; start(time), 30);
  if (time == 100) {
    bar.value = 0;
    let id = val;
    money++;
    document.getElementById(""moneyValue"").innerHTML = money;
    clearTimeout(sim);
    running = false;
  }
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>#moneyValue::before {
  content: 'Money: ';
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""moneyValue""&gt;0&lt;/div&gt;
&lt;progress id=""progressBar1"" value=""0"" max=""100"" style=""width:150px;""&gt;&lt;/progress&gt;
&lt;button id=""restart-button"" class=""plantBtn"" onclick=""onClickButton(0, this.id)""&gt;Plant Seed&lt;/button&gt;</code></pre>
</div>
</div>
</p>
",0
65107368,"<p>You can declare your FormGroup like below.</p>
<pre><code>myForm = new FormArray([]);
addRow() {
    const group = new FormGroup({
      firstName: new FormControl(&quot;&quot;, [Validators.required]),
      value: new FormControl(&quot;&quot;, [Validators.required])
    });
    this.myForm.push(group);
}
</code></pre>
<p>and invoke this function whenever user click on Add button.
In Template to show the form. Loop through FormControl and bind it like below.</p>
<pre><code>&lt;div *ngFor=&quot;let form of myForm.controls;&quot;&gt;
    &lt;ng-container [formGroup]=&quot;form&quot;&gt;
      &lt;div&gt;
        &lt;label&gt;Name&lt;/label
        &gt;&lt;input type=&quot;text&quot; required formControlName=&quot;firstName&quot; /&gt;
      &lt;/div&gt;
      &lt;span class=&quot;text-danger&quot; *ngIf=&quot;isInValidFormControl(form,'firstName')&quot;&gt;
        Name is required
      &lt;/span&gt;
      &lt;div&gt;
        &lt;label&gt;Value&lt;/label&gt;&lt;input type=&quot;text&quot; formControlName=&quot;value&quot; /&gt;
      &lt;/div&gt;
    &lt;/ng-container&gt;
&lt;/div&gt;
</code></pre>
<p>Your validation with respect to total will be like below.</p>
<pre><code>isValidTotal() {
    var values = this.myForm.controls.map((x) =&gt;
      x ? Number(x.value.value) : 0
    );
    let sumTotal = values.reduce((a, b) =&gt; a + b);
    return sumTotal &lt;= this.total;
}
</code></pre>
<p>And you can call this from template like this.</p>
<pre><code>  &lt;button (click)=&quot;addRow()&quot; [disabled]=&quot;!isValidTotal()&quot;&gt;Add&lt;/button&gt;
  &lt;button (click)=&quot;submit()&quot; [disabled]=&quot;!isValidTotal()&quot;&gt;Submit&lt;/button&gt;
  &lt;div *ngIf=&quot;!isValidTotal()&quot;&gt;
    &lt;p&gt;{{errorMessage}}&lt;/p&gt;
  &lt;/div&gt;
</code></pre>
<p>Working sandbox</p>
<p><a href=""https://codesandbox.io/s/formarraydynamic-rqdhc?file=/src/app/app.component.html"" rel=""nofollow noreferrer"">https://codesandbox.io/s/formarraydynamic-rqdhc?file=/src/app/app.component.html</a></p>
",0
65106556,"<p>Working example how to add product quantity to category...
In <code>catalog/controller/product/category.php</code></p>
<p>find:
<code>$data['products'][] = array(</code>
add before:</p>
<pre><code>$cart_quantity = '';
if ($this-&gt;cart-&gt;hasProducts()) {
    $cart_products = $this-&gt;cart-&gt;getProducts();
        foreach ($cart_products as $cart_product) {
            if (isset($cart_product['product_id']) &amp;&amp; $result['product_id'] == $cart_product['product_id']) {
                $cart_quantity = $cart_product['quantity'];
            }
        }
    }
</code></pre>
<p>after <code>$data['products'][] = array(</code> add:</p>
<pre><code>'cart_quantity'  =&gt; $cart_quantity,
</code></pre>
<p>in corresponding template file
catalog/view/theme/default/template/product/category.twig</p>
<p>find: <code>&lt;div class=&quot;product-thumb&quot;&gt;</code>
add after:</p>
<pre><code>{% if product.cart_quantity %} &lt;div style=&quot; padding: 10px; position: absolute; z-index: 1000; color: red; font-weight: bold;&quot;&gt;In cart: {{ product.cart_quantity }} pcs.&lt;/div&gt;{% endif %}
</code></pre>
<p>To add to featured, Latest... in the corresponding files do the same.</p>
<p>To add this modifications you must  use OCMOD.
After this changes will be made, you must in admin refresh modifications and clear the cache.</p>
",0
65105645,"<p>You should add event listener on input event:</p>
<pre><code>const email = document.getElementById('email');
const label =  document.getElementById('lblemail');

email.addEventListener('input', function(e) {
  if (!e.target.value.trim()) {
    email.style.border = 'solid 1px red';
    label.style.visibility = 'visible';
  } else {
    email.style.border = 'solid 1px black';
    label.style.visibility = 'hidden';
  }
})
</code></pre>
<p>It's better to use input event because it checks input each time you <a href=""https://stackoverflow.com/questions/17047497/difference-between-change-and-input-event-for-an-input-element"">change it</a></p>
",0
65131138,"<p>You can recursively loop through the children array and push the title to another array.
Then can loop through this new array to render titles.</p>
<pre><code>export default function App() {
  const titleArray = []

  const recursive = (children) =&gt; {
    children.map((newChild) =&gt; {
      newChild.title &amp;&amp; titleArray.push(newChild.title)
      if(newChild.children) {
        recursive(newChild.children)
      }
    })
  }
  recursive(parent.children)
  return (
    &lt;div className=&quot;App&quot;&gt;
      {titleArray.map((title, index) =&gt; (
         &lt;div key={index}&gt;{title}&lt;/div&gt;
      ))}
    &lt;/div&gt;
  );
}
</code></pre>
<p>Sandbox URL: <a href=""https://codesandbox.io/s/naughty-archimedes-0hzy2?file=/src/App.js:668-1111"" rel=""nofollow noreferrer"">https://codesandbox.io/s/naughty-archimedes-0hzy2?file=/src/App.js:668-1111</a></p>
",0
65132628,"<p>You will need to create a function to track the selected rows:</p>
<pre><code>import { Component } from '@angular/core';
import { products } from './products';
import { GridDataResult, PageChangeEvent, SelectAllCheckboxState } from '@progress/kendo-angular-grid';

@Component({
    selector: 'my-app',
    template: `
        {{isBoxEnabled}}
        &lt;kendo-grid
            [data]=&quot;gridView&quot;
            [pageSize]=&quot;pageSize&quot;
            [skip]=&quot;skip&quot;
            [pageable]=&quot;true&quot;
            (pageChange)=&quot;pageChange($event)&quot;
            [height]=&quot;500&quot;
            [selectable]=&quot;{enabled: true, checkboxOnly: true }&quot;
            (selectionChange)=&quot;selectionChange($event)&quot;
            kendoGridSelectBy=&quot;ProductID&quot;&gt;
            &lt;kendo-grid-checkbox-column [width]=&quot;80&quot;&gt;
                &lt;ng-template kendoGridHeaderTemplate&gt;
                    &lt;input class=&quot;k-checkbox&quot; id=&quot;selectAllCheckboxId&quot; kendoGridSelectAllCheckbox &gt;
                    &lt;label class=&quot;k-checkbox-label&quot; for=&quot;selectAllCheckboxId&quot;&gt;Text&lt;/label&gt;
                &lt;/ng-template&gt;
            &lt;/kendo-grid-checkbox-column&gt;
            &lt;kendo-grid-column field=&quot;ProductName&quot; title=&quot;Product Name&quot; [width]=&quot;300&quot;&gt;&lt;/kendo-grid-column&gt;
            &lt;kendo-grid-column field=&quot;UnitsInStock&quot; title=&quot;Units In Stock&quot;&gt;&lt;/kendo-grid-column&gt;
            &lt;kendo-grid-column field=&quot;UnitsOnOrder&quot; title=&quot;Units On Order&quot;&gt;&lt;/kendo-grid-column&gt;
            &lt;kendo-grid-column field=&quot;ReorderLevel&quot; title=&quot;Reorder Level&quot;&gt;&lt;/kendo-grid-column&gt;
        &lt;/kendo-grid&gt;
    `
})
export class AppComponent {
    public gridView: GridDataResult;
    public items: any[] = products;
    public mySelection: number[] = [];
    public selectAllState: SelectAllCheckboxState = 'unchecked';
    public pageSize = 10;
    public skip = 0;

    public isBoxEnabled = false;

    constructor() {
        this.loadItems();
    }


    public pageChange(event: PageChangeEvent): void {
        this.skip = event.skip;
        this.loadItems();
    }

    private loadItems(): void {
        this.gridView = {
            data: this.items.slice(this.skip, this.skip + this.pageSize),
            total: this.items.length
        };
    }
    
    public selectionChange(e) {
      const selectedRowIndices = e.selectedRows.map(row =&gt; row.index)
      const deselectedRowIndices = e.deselectedRows.map(row =&gt; row.index)
      this.mySelection = this.mySelection.concat(selectedRowIndices)
      this.mySelection = this.mySelection.filter(selection =&gt; !deselectedRowIndices.includes(selection))
      this.isBoxEnabled = this.mySelection.length &gt; 0
    }
}
</code></pre>
<p>StackBlitz: <a href=""https://stackblitz.com/edit/angular-ajpix8-gj9vdu?file=app/app.component.ts"" rel=""nofollow noreferrer"">https://stackblitz.com/edit/angular-ajpix8-gj9vdu?file=app/app.component.ts</a></p>
",0
65152806,"<p>If someone wants to run JavaScript on their own browser, most browsers let them open up a inspection window where they can do just that.  I'm not sure I would be worried about them running arbitrary JavaScript themselves.  What you want to be careful of is the ability for someone else to run JavaScript on another's computer.  So if you populated the text through a GET/POST parameter that got eval'd on load, then someone could get someone to click on a link that executed their arbitrary JS in someone else's browser (as an example).</p>
<p>I'm sure I'll receive down votes for this, but those are my thoughts.</p>
",0
65155720,"<p>From the Vercel documentation found here <a href=""https://vercel.com/docs/build-step"" rel=""nofollow noreferrer"">https://vercel.com/docs/build-step</a> &quot;Vercel tries to automatically detect the frontend framework you’re using for your project and configure the project settings for you. If you’d like to override the settings or specify a different framework, you can do so from the Build &amp; Development Settings section.&quot; So Vercel did automatically make a build folder for you. This is ok, because you should always use <code>npm run build</code> to create your build folder and point your hosting to use this folder for production.</p>
",0
65106132,"<p>You need to remove display:none from your <code>.nav__list</code>, add <code>opacity:1</code> to .open and also edit your code on mobile version.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const hamburger = document.querySelector("".hamburger"");
const navbar = document.querySelector("".nav__list"");

hamburger.addEventListener(""click"", ()=&gt; {
    navbar.classList.toggle(""open"");
});


const hamburgerBtn = document.querySelector('.hamburger');
let hamburgerOpen = false;

hamburgerBtn.addEventListener('click', () =&gt; {
    if (!hamburgerOpen) {
        hamburgerBtn.classList.add('open');
        hamburgerOpen = true;
    } else {
        hamburgerBtn.classList.remove('open');
        hamburgerOpen = false;
    }
});</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>:root {
    --fw-normal: 400;
    --fw-dark: 600;
    --fw-bold: 700;

    /***Colors***/
    --clr-primary: #333;
    --clr-text: #fafafa;
    --clr-blue: #22a7ff;
    --clr-purple: #871e5f;
    --clr-green: #19a356;
    --clr-yellow: #ffff2e;
    --clr-red: #cd1a21; 
    --clr-orange: #ff4500;

    /*** Font and Typography ***/
    --ff-body: Georgia, ""Times New Roman"", Times, serif;
    --ff-header: Verdana, Arial, Helvetica, sans-serif;
    --fs-header: 4.5rem;
    --fs-header1: 2.5rem;
    --fs-header2: 1.5rem;
    --fs-header3: 1.2rem;
    --fs-lg-para: 1.1rem;
    --fs-md-para: 1rem;
    --fs--sm-para: .938rem;

    /*** z index ***/
    --z-index: 99;
}





/***************************************************
2. #Global Styles
***************************************************/

*, ::before, ::after {
    box-sizing: border-box;
}

html {
    scroll-behavior: smooth;
}

body {
    margin: 0;
    padding: 0;
    font-family: var(--ff-body);
    background: var(--clr-text);
    color: var(--clr-primary);
    font-size: var(--fs-para);
    line-height: 1.6;
}

a {
    text-decoration: none;
    cursor: pointer;
    letter-spacing: 2px;
    padding:  1.25em;
    display: inline-block;
    width: 100%;
    text-align: center;
    transition:all .5s;
}

h1, h2, h3, h4, h5, h6 {
    font-family: var(--ff-header);
    margin: 0;
}

p {
    margin: 0;
}

ul {
    margin: 0;
    padding: 0;
    list-style: none;
}

/* img {
    max-width: 100%;
    width: 100%;
    height: auto;
} */





/************************************************
3. #Typography
************************************************/

    /* Navigation Bar &amp; Hero Section*/
.bg-hero {
    position: relative;
    width: 100%;
    min-height: 100vh;
    display: flex;
    justify-content: space-between;
    align-items: center;
    background: var(--clr-blue);
    transition: .5s;
}

.navbar {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    padding-right: 2.5em;
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.nav__list {
        right: -100%;
        opacity: 0;
    }
.open{
  
        right: 0;
  opacity:1;
}

@media screen and (max-width: 48em) {
    .nav__list {
        position: fixed;
        top: 0;
        right: -100%;
        width: 80%;
        height: 80%;
        background: rgba(255,255,255, 0.3);
        backdrop-filter: blur(10px);
        z-index: var(--z-index);
        flex-direction: column;
        align-items: center;
        justify-content: center;
        transition: .2s;
        opacity: 0;
    }
}

html .open {
    right: 0;
  opacity:1;
}

.nav__link {
    color: var(--clr-text);
    font-weight: var(--fw-normal);
    font-size: var(--fs-lg-para);
}

.nav__link:hover {
    color: var(--clr-purple);
}

.shopping-cart {
    margin-right: 2em;
    color: var(--clr-text);
}

.social__media {
    display: flex;
    justify-content: center;
    align-items: center;
    padding-left: 3em;
    margin-top: 3em;
}

.sm__link {
    background: var(--clr-text);
    width: 2.7em;
    height: 2.7em;
    margin: 1em .625em;
    border-radius: 50%;
    display: flex;
    justify-content: center;
    align-items: center;
}

.sm__link i {
    transition: .1s linear;
}

.sm__link:hover i {
    transform: scale(1.5);
}

.sm__facebook {
    font-size: 1.5rem;
    color: #4267b2;
}

.sm__twitter {
    font-size: 1.5rem;
    color: #1da1f2;
}

.sm__instagram {
    font-size: 1.5rem;
    color: #000;
}

.social__contact {
    display: none;
}





/*****************************************************
4. #Components
*****************************************************/

/*4.1 Cart Basket*/
.cart-item {
    background: linear-gradient(-270deg, #ff7800 8.6%, #ff5000 99.58%, #ff5000 100%);
    border-radius: 50%;
    padding: 1px 3px 2px;
}
 /*4.2 Buttons*/
 .btn-main {
    display: inline-block;
    width: 18em;
    max-width: 100%;
    height: 3em;
    padding: .5em 1.25em;
    border-radius: 1.563em;
    margin-top: 2.5em;
    background: linear-gradient(-270deg, #ff7800 8.6%, #ff5000 99.58%, #ff5000 100%);
    color: var(--clr-text);
    font-weight: 600;
    font-size: .88rem;
}

.fa-angle-right {
    color: #ff7800;
    background: var(--clr-text);
    border-radius: 50%;
    padding: .438em;
    margin-right: -.938em;
}

.btn-main:focus,
.fa-arrow-right:focus {
    color: var(--clr-primary);
    opacity: 0.1;
}

.btn-main:hover,
.fa-arrow-right:hover {
    color: var(--clr-primary);
}

/*4.3 Hamburger*/
.hamburger {
    position: absolute;
    cursor: pointer;
    right: 2%;
    top: 50%;
    transform: translate(-5%,-50%);
    z-index: var(--z-index);
}

.hamburger-btn {
    width: 20px;
    height: 3px;
    background: var(--clr-text);
    margin: .625em;
    transition: all .5s ease-in-out;
}

.hamburger-btn::before,
.hamburger-btn::after {
    content: '';
    position: absolute;
    width:20px;
    height: 3px;
    background: var(--clr-text);
    border-radius: 5px;
    transition: all .5s ease-in-out;
}

.hamburger-btn::before {
    transform: translateY(-7px);
}

.hamburger-btn::after {
    transform: translateY(7px);
}

.hamburger.open .hamburger-btn {
    transform: translateX(-50px);
    background: transparent;
}

.hamburger.open .hamburger-btn::before {
    transform: rotate(45deg) translate(35px, -35px);
}

.hamburger.open .hamburger-btn::after {
    transform: rotate(-45deg) translate(35px, 35px);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;section class=""bg-hero""&gt;
         &lt;nav class=""navbar""&gt;
            &lt;a href=""#"" class=""company-brand""&gt;&lt;img src=""#"" alt=""#"" class=""#""&gt;&lt;span&gt;X&amp;L Limited&lt;/span&gt;&lt;/a&gt;
            &lt;ul class=""nav__list""&gt;
               &lt;li class=""nav__list-item""&gt;&lt;a href="""" class=""nav__link""&gt;&lt;/a&gt;&lt;/li&gt;
               &lt;li class=""nav__list-item""&gt;&lt;a href="""" class=""nav__link""&gt;Products&lt;/a&gt;&lt;/li&gt;
               &lt;li class=""nav__list-item""&gt;&lt;a href="""" class=""nav__link""&gt;Our Story&lt;/a&gt;&lt;/li&gt;
               &lt;li class=""nav__list-item""&gt;&lt;a href="""" class=""nav__link""&gt;Blog&lt;/a&gt;&lt;/li&gt;
               &lt;li class=""nav__list-item""&gt;&lt;a href="""" class=""nav__link""&gt;Contact Us&lt;/a&gt;&lt;/li&gt;
               &lt;div class=""social__media""&gt;
                  &lt;a href=""#"" class=""sm__link""&gt;&lt;i class=""fab fa-facebook-f sm__facebook""&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;a href=""#"" class=""sm__link""&gt;&lt;i class=""fab fa-twitter sm__twitter""&gt;&lt;/i&gt;&lt;/a&gt;
                  &lt;a href=""#"" class=""sm__link""&gt;&lt;i class=""fab fa-instagram sm__instagram""&gt;&lt;/i&gt;&lt;/a&gt;
               &lt;/div&gt;
            &lt;/ul&gt;
            &lt;div&gt;
               &lt;i class=""fas fa-shopping-cart fa-lg shopping-cart""&gt;&amp;nbsp;&lt;span class=""cart-item""&gt;0&lt;/span&gt;&lt;/i&gt;
            &lt;/div&gt;
            &lt;div class=""hamburger""&gt;
               &lt;div class=""hamburger-btn""&gt;&lt;/div&gt;
            &lt;/div&gt;
         &lt;/nav&gt;
         &lt;div class=""hero""&gt;
            &lt;div class=""contentBox""&gt;
               &lt;h1 class=""hero-title""&gt;Do you like &lt;br&gt;&lt;span&gt;Smooth Skin?&lt;/span&gt;&lt;/h1&gt;
               &lt;p class=""hero-para""&gt;Naturally, the skin is supposed to be smooth and soft, however, the only insurance for dry and oily skin is skincare products that consistently offer effective skin protection. To protect dry and oily skin, make the smart choice, because the choice is yours, and it's simple.&lt;/p&gt;
               &lt;a class=""btn-main"" href=""#""&gt;View Our Products &amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;i class=""fas fa-angle-right fa-lg""&gt;&lt;/i&gt;&lt;/a&gt;
            &lt;/div&gt;
         &lt;/div&gt;
      &lt;/section&gt;</code></pre>
</div>
</div>
</p>
",0
65093040,"<p>You don't need the script tag for assigning a class. You can do it as below.</p>
<pre><code>@foreach (var item in model)
{
    var className = item.num &gt; 5 ? &quot;blinkAction&quot; : string.Empty;
    &lt;tr id=&quot;nameoftr&quot; class=&quot;@className&quot;&gt;
        &lt;td&gt;
            asd
        &lt;/td&gt;
    &lt;/tr&gt;
}
</code></pre>
",0
65129997,"<p>The props that this component are expecting are not getting passed into component in your parent component</p>
<pre><code>const SearchMusic = ({keyword, setKeyword}) =&gt; {

    const BarStyling = {width: &quot;20rem&quot;, background: &quot;#F2F1F9&quot;, border: &quot;none&quot;, padding: &quot;0.5rem&quot;};

    return (
        &lt;input
            type=&quot;text&quot;
            style={BarStyling}
            key='random1'
            value={keyword}
            placeholder={'Search a song'}
            onChange={(e =&gt; setKeyword(e.target.value))}
        /&gt;
    );
};
</code></pre>
<p>That is assuming that the following is the above component</p>
<pre><code>&lt;SearchBar
                input={input}
                onChange={updateInput}
            /&gt;
</code></pre>
<p>How about</p>
<pre><code>&lt;SearchBar
   keyword={input}
   setKeyword={updateInput}
            /&gt;
</code></pre>
",0
65159982,"<p>The <code>var word</code> is <code>p</code> tag, so you need to get the inner text of it and compare it with the input text. Also, when replacing it, access the <code>text()</code> property of it. See below. <code>main()</code> is commented out here, but you can keep as per the need.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function textVerify(item) {

  var word = document.getElementById(($('#questionNumber').text() + 'a'));

  if (item.value.toUpperCase() === $(word).text().toUpperCase()) {
    item.style.color = ""green"";
    $(item).replaceWith(""&lt;div style='color:green;'&gt;"" + $(word).text() + ""&lt;/div&gt;"");
    //main()
  } else {
    item.style.color = ""black"";
  }
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;span class=""ihide"" id=""questionNumber""&gt;1&lt;/span&gt;
&lt;p id=""1a"" class=""ihide""&gt;Seven&lt;/p&gt;
&lt;input id=""1"" name=""Seven"" type=""text"" value="""" onkeyup=""textVerify(this)"" autofocus=""""&gt;</code></pre>
</div>
</div>
</p>
",0
65089904,"<p>Inside the function <code>refreshDataAsync()</code> you can call <code>stopdata()</code> after you are done with your operations.</p>
<p>or you can also <code>await</code> the function <code>refreshDataAsync()</code> and then call <code>stopdata()</code> inside <code>refreshDataSource()</code>.</p>
",0
65131346,"<p>Since you are using inline event bindings I would suggest two changes.</p>
<p><code>oncontextmenu=&quot;destra(this)&quot;</code></p>
<p>Pass in the element that the inline event binding is on.</p>
<pre><code>function destra(y){
  var r = confirm(&quot;Vuoi conoscere la src dell'immagine&quot;);

  if(r == true) {
    alert(y.src);
  } else {
  }
}
</code></pre>
<p>Accept the element as a method argument.</p>
",0
65119203,"<p>You can try with</p>
<pre><code>foreach(var item in Model){
  &lt;form&gt;
    &lt;input type=&quot;text&quot; id=&quot;id&quot; name=&quot;id&quot; value=&quot;item.id&quot;/&gt;
    &lt;input type=&quot;button&quot; class=&quot;btn&quot; data-id=&quot;item.id&quot; name=&quot;submit&quot; value=&quot;Delete&quot;/&gt;
  &lt;/form&gt;
}

&lt;script&gt;
  $(&quot;.btn&quot;).click(function(){
    // alert the id value
    alert($(this).attr(&quot;data-id&quot;))
  });
&lt;/script&gt;
</code></pre>
",0
65133157,"<p>You need to copy the contents of your v-model, not the input itself.</p>
<p>You can use a function like this to copy from a variable.</p>
<p>It makes a new text box, uses the copy command, then immediately removes it.  All in a single event loop so it never even renders.</p>
<pre class=""lang-js prettyprint-override""><code>const copyTextToClipboard = (text) =&gt; {
  const textArea = document.createElement('textarea')

  //
  // *** This styling is an extra step which is likely not required. ***
  //
  // Why is it here? To ensure:
  // 1. the element is able to have focus and selection.
  // 2. if element was to flash render it has minimal visual impact.
  // 3. less flakyness with selection and copying which **might** occur if
  //    the textarea element is not visible.
  //
  // The likelihood is the element won't even render, not even a flash,
  // so some of these are just precautions. However in IE the element
  // is visible whilst the popup box asking the user for permission for
  // the web page to copy to the clipboard.
  //

  // Place in top-left corner of screen regardless of scroll position.
  textArea.style.position = 'fixed'
  textArea.style.top = '0'
  textArea.style.left = '0'

  // Ensure it has a small width and height. Setting to 1px / 1em
  // doesn't work as this gives a negative w/h on some browsers.
  textArea.style.width = '2em'
  textArea.style.height = '2em'

  // We don't need padding, reducing the size if it does flash render.
  textArea.style.padding = 0

  // Clean up any borders.
  textArea.style.border = 'none'
  textArea.style.outline = 'none'
  textArea.style.boxShadow = 'none'

  // Avoid flash of white box if rendered for any reason.
  textArea.style.background = 'transparent'

  textArea.value = text

  document.body.appendChild(textArea)

  textArea.select()

  try {
    const successful = document.execCommand('copy')
    const msg = successful ? 'successful' : 'unsuccessful'
    console.log('Copying text command was ' + msg)
  } catch (err) {
    console.log('Oops, unable to copy')
  }

  document.body.removeChild(textArea)
}
</code></pre>
",0
65089577,"<p>the reason is that in html<code>&lt;div class=&quot;expandMoreContent&quot; id=&quot;showMoreContent5&quot;&gt;</code> your id's first letter is in lowercase</p>
<p>in javascript you query for an element start with capital case</p>
<p><code>data-target=&quot;ShowMoreContent5&quot;</code></p>
<p><code>const showContent = document.getElementById(this.dataset.target)</code></p>
<p>change either one , it will work.</p>
<p>plus: the code you paste here has another problem, a useless right bracket here,plese remove.</p>
<p><code>if(showContent.classList.contains('expand-more'))) { // Apparently the error is on this line, but I can't figure it out...</code></p>
",0
65105488,"<p>Jinja is escaping special characters that are control sequences for
HTML (or XML, and thus XHTML) like &amp;, &gt;, &lt;, &quot; as well as ' (see <a href=""https://flask.palletsprojects.com/en/1.1.x/templating/#controlling-autoescaping"" rel=""nofollow noreferrer"">Flask Documentation</a>).<br>
One solution is to mark it as safe like: <br></p>
<pre><code>{{code|safe}}
</code></pre>
",0
65097128,"<p>What happens is that you show the image but latter you don't make dissapear it. Try this:</p>
<pre><code>document.getElementById('right-triangle').style.display = 'none';
document.getElementById('obtuse-triangle').style.display = 'none';
document.getElementById('acute-triangle').style.display = 'none';
</code></pre>
<p>First I set all to dysplay:none; later you only have to display one:</p>
<pre><code>document.getElementById('right-triangle').style.display = 'none';
document.getElementById('obtuse-triangle').style.display = 'none';
document.getElementById('acute-triangle').style.display = 'none';
if (firstDegree + secondDegree &gt; 90) {
document.getElementById('acute-triangle').style.display = 'block';
} 
</code></pre>
",0
65144743,"<p>Kind of a life hack, but I managed to &quot;auto answer&quot; my questions in inquirer by creating a <code>defaults()</code> function that returns an object of the default values.</p>
<p>Then I can use those if my answer object is empty as you see below:</p>
<pre><code>const defaults = (project: string) =&gt; {
  return {
    name: basename(cwd()),
    project,
    path: &quot;.&quot;,
    ignore: defaultIgnores(project).ignore,
  };
};

export let config: any = {
  version,
};

export const initializeConfig = (project: string, ...args: boolean[]) =&gt; {
  prompt([
    {
      type: &quot;input&quot;,
      name: &quot;name&quot;,
      message: &quot;What is the name of the project?&quot;,
      default: defaults(project).name,
      when: () =&gt; args.every((arg) =&gt; arg === false),
    },
    {
      type: &quot;list&quot;,
      name: &quot;project&quot;,
      message: &quot;What is the type of the project?&quot;,
      choices: [&quot;Node&quot;, &quot;Python&quot;],
      default: defaults(project).project,
      when: () =&gt; args.every((arg) =&gt; arg === false),
    },
  ])
    .then((answers: Answers) =&gt; {
      const { name, project: projectName } = defaults(project);

      config = setConfig({ name: answers.name || name });
      config = setConfig({ project: answers.project || projectName });
    })
    .then(() =&gt;
      prompt([
        {
          type: &quot;input&quot;,
          name: &quot;path&quot;,
          message: &quot;Where is your project root located?&quot;,
          default: defaults(project).path,
          when: () =&gt; args.every((arg) =&gt; arg === false),
        },
        {
          type: &quot;input&quot;,
          name: &quot;ignore&quot;,
          message: &quot;What do you want to ignore? (comma separated)&quot;,
          default: defaults(project).ignore,
          when: () =&gt; args.every((arg) =&gt; arg === false),
        },
      ]).then((answers: Answers) =&gt; {
        const { ignore, path } = defaults(project);

        config = setConfig(
          ignoreFiles(config.project, (answers.ignore || ignore)!)
        );
        createConfig(answers.path || path, config);
      })
    );
};
</code></pre>
",0
65122266,"<p>Try to change as following.</p>
<pre><code>const handlestartChange = (date) =&gt; {
  setStartDate(date);
};
const handleendChange = (date) =&gt; {
  setEndDate(date);
};
const applyDateFilter = () =&gt; {
  const newLabels = [],
    newDatas = [];
  initialLevelsArr.forEach((item, index) =&gt; {
    if (item &gt;= startDate &amp;&amp; item &lt;= endDate) {
      newLabels.push(item);
      newDatas.push(initialData[index]);
    }
  });
  setLabels(newLabels);
  setDatas(newDatas);
};
</code></pre>
",0
65143808,"<p>Okay, so I solved it finally! <br/>
The answer is to <strong>reload the background script each time the recorder was stopped</strong>. This way the background script variables will be reset to their default values and the script will work as expected.</p>
<p>Here is the code to reset the background script:</p>
<pre><code>chrome.extension.getBackgroundPage().window.location.reload();
</code></pre>
",0
65142930,"<p>I've used this code to go to a page within 3 seconds. Maybe you could alter it with the onclick function so that when you press on the button, you'll immediately go to the page you want to go to. (Setting the setTimeout at 1 ms (E.G.) or completely removing it.</p>
<pre><code>  &lt;script&gt;
             setTimeout(function(){
                window.location.href = 'https://kapsalonyazanonline.nl/';
             }, 3000);
          &lt;/script&gt;
</code></pre>
",0
65150724,"<p>You need first of all configurate the database connection. There's a link that will help you: <a href=""https://kb.objectrocket.com/mongo-db/simple-mongoose-and-node-js-example-1007"" rel=""nofollow noreferrer"">https://kb.objectrocket.com/mongo-db/simple-mongoose-and-node-js-example-1007</a> .</p>
<p>If you have any other doubt let me known.</p>
",0
65105418,"<p>You're getting <em>ssId</em> from the script properties and assigning it to the <code>ssId</code> variable, but then you pass a string (<code>&quot;ssId&quot;</code>) to the <code>openById()</code> function, not the value of the variable.
Try the following please:</p>
<pre><code>const ssId = PropertiesService.getScriptProperties().getProperty('ssId');
var sheet = SpreadsheetApp.openById(ssId).getSheetByName('Sheet1');
</code></pre>
",0
65138229,"<p><code>await</code> only works with promises, and <code>page.on</code> looks to be a callback-based event listener, not something that returns a promise. If you want to be able to await it, you will need to create a promise around it.</p>
<pre><code>await new Promise((resolve) =&gt; {
  page.on('request', async (request) =&gt; {
    if(request.url().includes(baseUrl)){
      const downloadUrl = fixUrl(request.url());
      const info = await getSongInfo(page);
      downloadSong(downloadUrl, info.title);
      await tagSong(info);
      await request.abort();
      await page.close();
      resolve();
    } else {
      request.continue();
    }
  });
})
</code></pre>
",0
65145507,"<p>You can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"" rel=""nofollow noreferrer""><code>Array#reduce</code></a> with an object to store the sum for each diet.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const meals = [
    { calorie: 10,
      diet: 'Chicken',
      day: 1
    },
    { calorie: 15,
      diet: 'Soya',
      day: 2
    },
    { calorie: 20,
       diet: 'Chicken',
       day: 3
    },
    { calorie: 25,
        diet: 'Soya',
        day: 4
      }
  ];
const res = meals.reduce((acc,{calorie, diet})=&gt;
     (acc[diet]=(acc[diet] || 0) + calorie, acc),{});
for(const key in res){
  console.log(key,'=',res[key]);
}</code></pre>
</div>
</div>
</p>
",0
65154112,"<p>Create a variable of type <code>FormGroup</code> as your form contains a <code>FormArray</code>. It will hold the currently selected form. In your button click pass the current form as argument to your show method.</p>
<pre><code>&lt;button (click)=&quot;openForm(form)&quot;&gt;Show&lt;/button&gt;
 
openForm(form: FormGroup) {
     this.selectedFormGroup = form;
}
</code></pre>
<p>In your template you get show the selected form value like this.</p>
<pre><code>&lt;div *ngIf=&quot;selectedFormGroup&quot;&gt;
    {{selectedFormGroup.value | json}}
&lt;/div&gt;
</code></pre>
<p>Working CodeSandBox</p>
<p><a href=""https://codesandbox.io/s/formarraydynamic-rqdhc?file=/src/app/app.component.html"" rel=""nofollow noreferrer"">https://codesandbox.io/s/formarraydynamic-rqdhc?file=/src/app/app.component.html</a></p>
",0
65088386,"<p>Have a look at this</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const images = [{
    ""url"": ""https://picsum.photos/id/1020/367/267"",
    ""title"": ""Bear on a mountain"",
    ""description"" : ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.""
  },
  {
    ""url"": ""https://picsum.photos/id/1024/367/267"",
    ""title"": ""Eagle in flight"",
    ""description"" : ""Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.""
  },
  {
    ""url"": ""https://picsum.photos/id/1025/367/267"",
    ""title"": ""Doggie in a blanket"",
    ""description"" : ""Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.""    
  }
];
const html = images.map((img, i) =&gt; `&lt;img src=""${img.url}"" title=""${img.title}"" data-idx=""${i}""/&gt;`);
const container = document.getElementById(""container"");
const modal = document.getElementById(""modal"");
container.innerHTML = html.join("" "");
container.addEventListener(""click"", function(e) {
  const tgt = e.target;
  if (tgt.tagName == ""IMG"") {
    const idx = tgt.dataset.idx; console.log(idx, images[idx].title)
    modal.querySelector("".title"").innerHTML = images[idx].title;
    modal.querySelector("".desc"").innerHTML = images[idx].description;
    modal.classList.remove(""hide"");
  }
})
modal.querySelector("".close"").addEventListener(""click"",function() { modal.classList.add(""hide"") })</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>#modal {
  position: absolute;
  top: 100px;
  left: 100px;
  border: 1px solid red;
  height: 200px;
  overflow: auto;
  width: 300px;
  background-color: white;
  padding: 3px;
}

.hide {
  display: none;
}

#container img { cursor: pointer; }

.close { float:right; }</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""container""&gt;&lt;/div&gt;
&lt;div id=""modal"" class=""hide""&gt;&lt;div class=""close""&gt;X&lt;/div&gt;&lt;h1 class=""title""&gt;&lt;/h1&gt;&lt;div class=""desc""&gt;&lt;/div&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65132823,"<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"" rel=""nofollow noreferrer""><code>for...in</code></a> loops are for objects, but you have an array.  Try a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of"" rel=""nofollow noreferrer""><code>for...of</code></a> loop:</p>
<pre class=""lang-js prettyprint-override""><code>for (let tag of this.editDataTags) {
   console.log(tag.name)
}
</code></pre>
<p>or <code>forEach</code>:</p>
<pre class=""lang-js prettyprint-override""><code>this.editDataTags.forEach(tag =&gt; {
   console.log(tag.name);
});
</code></pre>
<p>or <code>for</code> loop:</p>
<pre class=""lang-js prettyprint-override""><code>for (let i=0; i &lt; this.editDataTags.length; i++) {
   console.log(this.editDataTags[i].name)
}
</code></pre>
",0
65158904,"<p>It looks like you'd need to make the relevant 'panel' of the carousel active when selecting a question.</p>
<p>So, if we're on 'panel 1' which contains Question 1 &amp; 2, and you select 'Question 3' from the search bar, you would need to make panel 2 'active' (via the active class) and then do what you're currently doing to focus on Question 3</p>
",0
65130119,"<blockquote>
<p>When the mouse in on the tip, an hand is displayed (why ?) and if I click then the popup is closed !?</p>
</blockquote>
<p>Precisely because <code>pointer-events: none</code> is the default for <code>.leaflet-popup-tip-container</code>. The tip does <em>not</em> trigger events, so when a user clicks on the tip, the click goes <em>straight through</em> to the underlying element (the Leaflet map), which does trigger events. Then, the default behaviour when clicking on the map itself is to close the active popup.</p>
<p>Also related: <a href=""https://stackoverflow.com/questions/43044016/suppress-right-click-on-leaflet-js-popup/43046977#43046977"">There is no such thing as &quot;disabling&quot; events</a> and <a href=""https://gis.stackexchange.com/questions/285588/why-does-the-classname-option-of-a-leaflet-popup-change-only-the-outside-of-the/285662#285662"">parts of a Leaflet popup</a>.</p>
<p>The approach here would be to apply the CSS rule <code>pointer-events: auto</code> or <code>pointer-events: initial</code> to <code>.leaflet-popup-tip</code>. Pointer interactions on the tip <em>shall</em> trigger DOM events that are not listened to and therefore <em>do nothing</em>.</p>
",0
65084701,"<p>Not sure I understand the output format you want, but guessing from your example it looks like you want to append some string after each match. Here we go:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const input = 'Some text with 1234ABC and 5678XYZ';
const regex = /([0-9]{4}[A-Z]{3})/g; // format: 0000ABC
var result = input.replace(regex, ""$1 I'm modified"");
console.log('input:  ' + input);
console.log('result: ' + result);
    </code></pre>
</div>
</div>
</p>
<p>Output:</p>
<pre><code>input:  Some text with 1234ABC and 5678XYZ
result: Some text with 1234ABC I'm modified and 5678XYZ I'm modified
</code></pre>
<p>Explanation:</p>
<ul>
<li>capture your pattern with parenthesis for later use</li>
<li>use a string <code>.replace()</code> where you can reference the captured pattern with <code>$1</code>, and prefix/append any text you want</li>
</ul>
",0
65119535,"<p>One of your issues is your calculator function.  You want it to return &quot;red&quot; if there are any red markers in the cluster, yellow if there are any yellow markers but no red ones, and blue otherwise.  Write the code to do that:</p>
<pre><code>// match cluster icon to markers
var calc = function(markers, numStyles) {
    // default to blue
    var highestPriorityColor = 1;
    for (var i = 0; i &lt; markers.length; i++) {
        if (markers[i].getIcon().indexOf(&quot;red.png&quot;) &gt; -1) {
            // if any markers are red, will be red, can return result
            return {text: markers.length, index: 3}; // index of red
        } else if (markers[i].getIcon().indexOf(&quot;yellow.png&quot;) &gt; -1) {
            // if any markers are yellow, update it to yellow if it is blue
            if (highestPriorityColor &lt; 2)
                highestPriorityColor = 2; // index of yellow
        } /* else if (markers[i].getIcon().indexOf(&quot;green.png&quot;) &gt; -1) {
            // ignore green markers (leave it whatever color it is, defaults to blue)
        } */
    }
    // return result once complete processing all the markers
    return {text: markers.length, index: highestPriorityColor}; // index of chosen cluster
}
</code></pre>
<p><strong>zoomed out</strong></p>
<p><a href=""https://i.stack.imgur.com/QWY9d.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/QWY9d.png"" alt=""zoomed all out, red cluster"" /></a></p>
<p><strong>zoom in</strong></p>
<p><a href=""https://i.stack.imgur.com/dJgDD.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/dJgDD.png"" alt=""zoom in once"" /></a></p>
<p><strong>zoom in on red &quot;17&quot; cluster</strong>
<a href=""https://i.stack.imgur.com/oupO8.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/oupO8.png"" alt=""zoom in on red 17 cluster"" /></a></p>
<p><strong>code snippet:</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function initMap() {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: new google.maps.LatLng(51, 4),
    zoom: 6,
    mapTypeControlOptions: ""roadmap""
  });

  var markers = [];

  // make random red, yellow, blue markers
  for (var i = 0; i &lt; 50; i++) {
    var latLng = new google.maps.LatLng(51.11 - Math.random(), 4.11 - Math.random());
    var marker = new google.maps.Marker({
      position: latLng,
      icon: 'http://maps.google.com/mapfiles/ms/micons/green.png',
      label: """" + i,
      map: map
    });
    markers.push(marker);
  }
  for (var i = 0; i &lt; 20; i++) {
    var latLng = new google.maps.LatLng(51.11 - Math.random(), 4.11 - Math.random());
    var marker = new google.maps.Marker({
      position: latLng,
      icon: 'http://maps.google.com/mapfiles/ms/micons/yellow.png',
      label: """" + i,
      map: map
    });
    markers.push(marker);
  }
  for (var i = 0; i &lt; 5; i++) {
    var latLng = new google.maps.LatLng(51.11 - Math.random(), 4.11 - Math.random());
    var marker = new google.maps.Marker({
      position: latLng,
      icon: 'http://maps.google.com/mapfiles/ms/micons/red.png',
      label: """" + i,
      map: map
    });
    markers.push(marker);
  }

  // match cluster icon to markers
  var calc = function(markers, numStyles) {
    // default to blue
    var highestPriorityColor = 1;
    for (var i = 0; i &lt; markers.length; i++) {
      if (markers[i].getIcon().indexOf(""red.png"") &gt; -1) {
        // if any markers are red, will be red, can return result
        return {
          text: markers.length,
          index: 3
        }; // index of red
      } else if (markers[i].getIcon().indexOf(""yellow.png"") &gt; -1) {
        // if any markers are yellow, update it to yellow if it is blue
        if (highestPriorityColor &lt; 2)
          highestPriorityColor = 2; // index of yellow
      }
      /* else if (markers[i].getIcon().indexOf(""green.png"") &gt; -1) {
                 // ignore green markers (leave it whatever color it is, defaults to blue)
             } */
    }
    // return result once complete processing all the markers
    return {
      text: markers.length,
      index: highestPriorityColor
    }; // index of chosen cluster
  }

  // define cluster icons
  var mcOptions = {
    gridSize: 50,
    maxZoom: 15,
    styles: [{
        height: 50,
        url: ""https://raw.githubusercontent.com/googlearchive/js-marker-clusterer/gh-pages/images/m1.png"",
        width: 50
      },
      {
        height: 50,
        url: ""https://raw.githubusercontent.com/googlearchive/js-marker-clusterer/gh-pages/images/m2.png"",
        width: 50
      },
      {
        height: 50,
        url: ""https://raw.githubusercontent.com/googlearchive/js-marker-clusterer/gh-pages/images/m3.png"",
        width: 50
      }
    ]
  };
  var markerCluster = new MarkerClusterer(map, markers, mcOptions);
  markerCluster.setCalculator(calc);
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>#map {
  height: 80%;
}


/* Optional: Makes the sample page fill the window. */

html,
body {
  height: 100%;
  margin: 0;
  padding: 0;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script defer src=""https://maps.googleapis.com/maps/api/js?v=3.42&amp;key=AIzaSyA4PP1O36qWCzer8K3VFyjf0uxRs4WVNFo&amp;callback=initMap""&gt;&lt;/script&gt;
&lt;script src=""https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js""&gt;&lt;/script&gt;

&lt;div id=""map""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65129706,"<p>As I mentioned in my comment, I am not quite sure what you are trying to achieve from Google Apps Script prespective.</p>
<p>However, here is the javascript part that you need to accomplish your goal:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const array1 = [
[""Item1"",""Item2"",""Item3"",""Item4""], 
[""ItemA"",""ItemB"",""ItemC"",""ItemD""]
];
const farray1 = array1[0].map((_, col) =&gt; array1.map(r =&gt; r[col]));
console.log(farray1);</code></pre>
</div>
</div>
</p>
",0
65138484,"<p>I'm assuming that nowhere else does the variable isModUp appear and that the message variable is not a set that has a function called isModUp because isModUp is not a function anyway. In that case, there is the variable isModUp is defined but the value is never used so it would be save space and computer processing power to just remove that line of code.</p>
",0
65097673,"<p>Your event may be not compatible with what application awaits.</p>
<p>Your event sends only part of what keyboard event generates (on Chrome):</p>
<pre class=""lang-js prettyprint-override""><code>KeyboardEvent {
  bubbles: true,
  cancelable: true
  charCode: 0
  code: &quot;Enter&quot;,
  key: &quot;Enter&quot;,
  keyCode: 13,
  which: 13
}
</code></pre>
<p>It depends on how chat programm handles key down, in your event some of them are missing: <code>which</code>, <code>code</code>, <code>key</code>.</p>
",0
65151815,"<p>You can provide an optional data object as the second argument to <code>stripe.createToken</code> that contains the <code>currency</code>, like this:</p>
<pre><code>stripe.createToken(cardElement, { 'currency': 'usd' }).then(function (result) {
</code></pre>
<p>Documentation: <a href=""https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement#stripe_create_token-data-currency"" rel=""nofollow noreferrer"">https://stripe.com/docs/js/tokens_sources/create_token?type=cardElement#stripe_create_token-data-currency</a></p>
",0
65112156,"<p>As my understanding you want to keep your checkboxes checked even after table closed and reopened,</p>
<p>You can do this with event binding:</p>
<pre><code>&lt;td&gt;
    input  type=&quot;checkbox&quot; id=&quot;vehicle2&quot; name=&quot;vehicle2&quot; 
      (change)=&quot;addCheckValue(i,list.isTicked)&quot;
      [checked]=&quot;list.isTicked&quot;
      [disabled]=&quot;list.isDisabled&quot;&gt;
  &lt;/td&gt;


  &lt;td *ngIf=&quot;list.isDisabled&quot;&gt;
            Already disabled
    &lt;/td&gt;



addCheckValue(index,isChecked){
    if(isChecked === undefined){
      isChecked = true
    }
    this.listes[index].isTicked = isChecked;

  }



//disabled checked boxes on close 
this.listes = this.listes.map(e =&gt; {
      if (e.isTicked === true) {
        e.isDisabled = true;
      }
      return e;
});
</code></pre>
<p><a href=""https://stackblitz.com/edit/angular-ivy-h6fbzu?file=src/app/app.component.ts"" rel=""nofollow noreferrer"">your edited repo</a></p>
",0
65095449,"<p>something like that ?</p>
<p>see <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce"" rel=""nofollow noreferrer"">Array.prototype.reduce()</a></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const items = 
  [ { group: ""group_1"", text: ""Text 1"",  value: ""1""  } 
  , { group: ""group_2"", text: ""Text 1"",  value: ""21"" } 
  , { group: ""group_1"", text: ""Text 2"",  value: ""2""  } 
  , { group: ""group_1"", text: ""Text 3"",  value: ""3""  } 
  , {                   text: ""Text 30"", value: ""30"" } 
  ] 

const groups = items.reduce((r,{group,...other})=&gt;
  {
  if (!group) return r
  let grp = r.find(x=&gt;x.some(z=&gt;z.group===group))
  if (!grp) r.push([{group,...other}])
  else grp.push( {group,...other} )
  return r
  }
  ,[])

console.log( groups ) </code></pre>
</div>
</div>
</p>
<p>Or:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const items = 
  [ { group: ""group_1"", text: ""Text 1"",  value: ""1""  } 
  , { group: ""group_2"", text: ""Text 1"",  value: ""21"" } 
  , { group: ""group_1"", text: ""Text 2"",  value: ""2""  } 
  , { group: ""group_1"", text: ""Text 3"",  value: ""3""  } 
  , {                   text: ""Text 30"", value: ""30"" } 
  ] 
       
const groups = items.reduce((r, { group, ...other})=&gt;
  {
  if (!group) return r
  let grp = r.find(x=&gt;x.group===group)
  if (!grp) 
    {
    grp = { group, elements:[] }
    r.push(grp)
    }
  grp.elements.push({...other})
  return r
  }
  ,[]);

console.log(  groups )</code></pre>
</div>
</div>
</p>
",0
65118520,"<p>Through the use of the header and footer callback manipulation functions provided by DataTables (headerCallback and footerCallback).</p>
<p>in HTML, by exemple</p>
<pre><code>&lt;tfoot&gt;
 &lt;tr&gt;
  &lt;th colspan=&quot;4&quot; style=&quot;text-align:right&quot;&gt;CONTRAT PROD :&lt;/th&gt;
  &lt;th&gt;&lt;/th&gt;
 &lt;/tr&gt;
&lt;/tfoot&gt;
</code></pre>
<p>DataTable</p>
<pre><code>$('#example').DataTable( {
 &quot;footerCallback&quot;: function ( row, data, start, end, display ) {
  let api = this.api(), data;
  ...

  $( api.column( 4 ).footer() ).html(
     your_DATA 
  );
</code></pre>
",0
65134419,"<p>What you can do is, use <code>.map()</code> again, but using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"" rel=""nofollow noreferrer""><code>Object.keys(obj).map()</code></a>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var graphs = [
  {
    graph: {
      name: ""Praveen Kumar"",
      age: 27,
      space: ""YouTube""
    }
  }, {
    graph: {
      name: ""Cat Techie"",
      age: 25,
      gender: ""Female""
    }
  }
];
console.log(graphs.map(item =&gt; {
  return `The value of ${item.graph.name}'s values are:
` + Object.keys(item.graph).map(key =&gt; {
    return `- ${key}: ${item.graph[key]}`;
  }).join(""\n"");
}));</code></pre>
</div>
</div>
</p>
<p>On the console, I get this way:</p>
<pre class=""lang-none prettyprint-override""><code>The value of Praveen Kumar's values are:
- name: Praveen Kumar
- age: 27
- space: YouTube
The value of Cat Techie's values are:
- name: Cat Techie
- age: 25
- gender: Female
</code></pre>
<p>The above two objects have different properties: <code>space</code> and <code>gender</code> and you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys"" rel=""nofollow noreferrer""><code>Object.keys()</code></a> to get them and their values. You can also use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries"" rel=""nofollow noreferrer""><code>Object.entries()</code></a> too.</p>
<p>This is the basic idea. You can implement this one in React too. If you need a React solution, I am happy to provide the same.</p>
",0
65117650,"<p>So the number next to the array in the DevTools in chrome is just there to tell you how many items are in the array.</p>
<p>it's not the actual array</p>
<p>if you want to edit the array or just access the elements there are multiple ways</p>
<h2>See this example:</h2>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let someArray = [
[1,""a"",2.3],
[2,""b"",7.8],
[3,""c"",4.5],
]

// if you want to change the items inside the array

//Array.map

someArray = someArray.map(innerArray =&gt;{
  return innerArray.map(element =&gt; {
    //Do any thing to the element lets say that we want to convert all values to strings
    
    return String(element);
  })
})

console.log(someArray);

console.log('##################################');
//if you don't want to change the items inside the arreay you can:
// 1. remove the return statement from the Array.map function above

// 2. use any type of loop for, while loop

for(let i = 0; i &lt; someArray.length; i++){
  for(let j = 0; j &lt; someArray[i].length; j++){
      // Do any thing with the array item lets say you want to print it
      console.log(someArray[i][j]);
      
  }

}</code></pre>
</div>
</div>
</p>
",0
65115906,"<p>if I understood correctly, use <a href=""https://developer.chrome.com/extensions/content_scripts"" rel=""nofollow noreferrer"">content script</a><br />
or execute script that add the iframe dynamically via the <a href=""https://developer.chrome.com/extensions/tabs#method-executeScript"" rel=""nofollow noreferrer""><code>chrome.tabs.executeScript()</code></a>  method</p>
<p>Running javascript from contentscript is the best way to manipulate the DOM</p>
",0
65085750,"<p>You're intent is right the code is wrong. You were defining and pushing data into arrays instead of creating a JSON object. Try this.</p>
<pre><code>var to_json_linebyline = function to_json_linebyline(wb){
    var sheet = wb.Sheets['Sheet1'];
    var results = [];
    var range = XLSX.utils.decode_range(sheet['!ref']);
    for(let rowNum = (range.s.r+1); rowNum &lt;= range.e.r; rowNum++){
       let thisRow = {},
           thisNode = '';
       
       for(let colNum=range.s.c; colNum&lt;=range.e.c; colNum++){
          var thisHeader = sheet[XLSX.utils.encode_cell({r: 0, c: colNum})].w
          var thisCell = sheet[XLSX.utils.encode_cell({r: rowNum, c: colNum})].w
          if(colNum === 0){ 
            thisNode = thisCell;
          }
          thisRow[thisHeader] = thisCell;
       }
       thisResult = {};
       thisResult[thisNode] = [thisRow]
       results.push(thisResult)
    }
    return JSON.stringify(results);
}
</code></pre>
",0
65158300,"<p>The error is indeed caused by the request being interrupted, in this case by the observable being unsubscribed from before it can even finish making the request to the backend. The issue happens in the <code>createTimestamp()</code> function of my componen. I left out the callback-functions in subscribe to emphasize my point::</p>
<pre><code> this.timestampService.createTimestamp(this.timestamp_model).subscribe(...).unsubscribe();
</code></pre>
<p>The lesson:</p>
<p><strong>Do not unsubscribe from an observable immediately after subscribing to it</strong>. That <strong>will</strong> interrupt your call.</p>
<p>If you want a single use Observable that is unsubscribed from after you get the first value, use the default method that is recommended everywhere: use the rxjs <code>pipe</code> method with the <code>first()</code> operator.</p>
<pre><code>  createTimestamp(timestampTimeInput: any, timestampNameInput: any){
    this.timestamp_model.time = this.stringToTime(timestampTimeInput.value);
    this.timestamp_model.name = timestampNameInput.value;
    //session_audio is set during initialization of this.timestamp_model

    this.timestampService.createTimestamp(this.timestamp_model).pipe(first()).subscribe(timestamp =&gt; {
      this.timestamps.unshift(timestamp);
      this.timestampCreateState = false;
    }, error =&gt; console.log(error));
  }
</code></pre>
",0
65142351,"<p>After adding my previous comment I've been playing with this and you can also do this (which was already catered for):</p>
<pre><code>data: '6,5,7,3,7,9,10'.split(','),
</code></pre>
<p>This just splits the string into an array and the values are then converted to numbers by RGraph.</p>
<p>In the next version of RGraph (v5.27) you won't need the call to split().</p>
<p>There's a demo here which calls the split() function on the data:</p>
<p><a href=""https://www.rgraph.net/demos/bar-basic.html"" rel=""nofollow noreferrer"">https://www.rgraph.net/demos/bar-basic.html</a></p>
<p>The code of which is this:</p>
<pre><code>new RGraph.Bar({
    id: 'cvs',
    data: '12,18,10,9,6,20,18'.split(','),
    options: {
        yaxisScaleUnitsPost: 'k',
        colors: ['red'],
        title: 'A basic Bar chart using accessible text',
        titleBold: true,
        xaxis: false,
        yaxis: false,
        marginLeft: 50,
        tooltips: '%{key}',
        tooltipsFormattedUnitsPost: '%',
        tooltipsCss: {
            fontSize: '26pt'
        },
        tooltipsFormattedKeyLabels: ['Dave','John'],
        tooltipsEvent: 'mousemove'
    }
}).draw().responsive([
    {maxWidth:900,width:400,height:150,options: {textSize:10,xaxisLabels:['Mon\n(yuck!)','Tue','Wed','Thu','Fri\n(woo!)','Sat','Sun'],marginInner: 10}},
    {maxWidth:null,width:750,height:250,options: {textSize:14,xaxisLabels: ['Monday\n(yuck!)','Tuesday','Wednesday','Thursday','Friday\n(woo!)','Saturday','Sunday'],marginInner: 20}}
]);
</code></pre>
",0
65119797,"<p>First of all, <code>client.on('messageReactionAdd')</code> fires for all reactions, and doesn't stop, it keeps firing until you stop the bot, so you need to use a <a href=""https://discord.js.org/#/docs/main/stable/class/ReactionCollector"" rel=""nofollow noreferrer"">Reaction Collector</a> and to edit embed, you need to change the embeds field and edit the message itself.</p>
<pre><code>execute(client, connection, message, args) {
message.channel.send(client.helpers.get('CreateEmptyEmbed').execute(&quot;Poll&quot;, client, false)
    .setTitle('test')
    .addField(`0`)
).then(embedMessage =&gt; {
    embedMessage.react(`✅`)
    embedMessage.react(`❎`)
    const filter = (reaction, user) =&gt; user.bot!; //Ignores bot reactions
    collector = embedMessage.createReactionCollector(filter,{time:15000)) //The time parameter (in milliseconds) specified for how much time the reactionCollector collects reactions
    collector.on('collect',(reaction,user)=&gt;{ //When a reaction is collected
         const embed = embedMessage.embeds[0] // Get the embed that you want to edit.
         embed.fields[0] = {name : 'The name of the new field' , value : 'Value of new field'}
         await embedMessage.edit(embed)
         })
    collector.on('end',()=&gt;{ //When the time we specified earlier is over
        //Do stuff
         })
    
})
</code></pre>
",0
65146420,"<p>You can use the <code>change</code> event.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('input:radio[name=""date-range""]').on('change', function () {

    alert(""test: "" + $(this).val());

    switch ($(this).val()) {
        case '30-days':
            //ajax GET function
            break;

        case '60-days':
            //ajax GET function
            break;

        case '90-days':
            //ajax GET function
            break;
    }
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;ul class=""choose-date-range""&gt;
    &lt;li&gt;
        &lt;input type=""radio"" id=""30-days"" name=""date-range"" value=""30-days""&gt;
        &lt;label for=""30-days""&gt;30 days&lt;/label&gt;
    &lt;/li&gt;
    &lt;li&gt;
        &lt;input type=""radio"" id=""60-days"" name=""date-range"" value=""60-days""&gt;
        &lt;label for=""60-days""&gt;60 days&lt;/label&gt;
    &lt;/li&gt;
    &lt;li&gt;
       &lt;input type=""radio"" id=""90-days"" name=""date-range"" value=""90-days""&gt;
       &lt;label for=""90-days""&gt;90 days&lt;/label&gt;
    &lt;/li&gt;
&lt;/ul&gt;</code></pre>
</div>
</div>
</p>
",0
65154999,"<p>You are retreiving props incorrectly on your tab component,</p>
<p>here is the below code to help you understand on how to pass props. You can either destructure your props and pass it inside the jsx or get the props directly and use props.label(etc.)</p>
<pre><code>function Tab({label, accessibilityState} ) //&lt;== Destructed props.
{
        const active = accessibilityState.selected;
        const icon = !active ? Images.icons[label] : Images.icons[ `${label}Active` ];
        return(
            &lt;Container&gt;
                &lt;Background&gt;
                    &lt;Icon source={icon}/&gt;
                    &lt;Label&gt;{label}&lt;/Label&gt;
                &lt;/Background&gt;
            &lt;/Container&gt;
        );
    }
    
    export default Tab;
</code></pre>
<p>Props is a single object where you can pass all your properties inside.</p>
<p>Alternative would be,</p>
<pre><code>function Tab(props ) //&lt;== props.
{
        const active = props.accessibilityState.selected;
        const icon = !active ? Images.icons[label] : Images.icons[ `${props.label}Active` ];
        return(
            &lt;Container&gt;
                &lt;Background&gt;
                    &lt;Icon source={icon}/&gt;
                    &lt;Label&gt;{props.label}&lt;/Label&gt;
                &lt;/Background&gt;
            &lt;/Container&gt;
        );
    }

    export default Tab;
</code></pre>
",0
65157072,"<p>You need to use <a href=""https://developers.google.com/maps/documentation/javascript/reference/event#event.addListenerOnce"" rel=""nofollow noreferrer"">addListenerOnce</a> and refactor your code a bit. Something like this</p>
<pre><code>var locationsCoordinates = [{lat: 12.84, lng: 122.89}, {lat: 12.80, lng: 122.93}, {lat: 12.74, lng: 122.85}];

var markers = [];

for (let i = 0; i &lt; locationsCoordinates.length; i++) {
    var marker = new google.maps.Marker({
        position: locationsCoordinates[i],
        map
    });
    
    google.maps.event.addListenerOnce(marker, &quot;click&quot;, () =&gt; {
        console.log(&quot;marker&quot;, i, &quot;clicked&quot;);
    });
    
    markers.push(marker);
}

google.maps.event.addListener(map, 'zoom_changed', function() {
    let zoom = map.getZoom();
    if (zoom &lt; 12) {
        for (let i = 0; i &lt; markers.length; i++) {
            markers[i].setVisible(false);
        }
    } else {
        for (let i = 0; i &lt; markers.length; i++) {
            markers[i].setVisible(true);
        }
    }
})
</code></pre>
",0
65127521,"<p>Your error already gave you an answer, you should use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"" rel=""nofollow noreferrer"">destructuring assignment</a> for <code>balance</code></p>
<pre class=""lang-js prettyprint-override""><code>const calculateTotalBalance = array =&gt; array.reduce((totalBalance, { balance }) =&gt; totalBalance + balance , 0);
</code></pre>
",0
65105676,"<p>The state hook (useState) is available with functional React Components, but in your case you are using a Class component. Functional React components normally don't have states out of the box, but <code>useState</code> is a new feature that will let you work around that</p>
<p>You can either change this to functional component, or keep it as a class component and use the state differently
E.g :</p>
<ul>
<li><code>!this.state.open</code> instead of <code>!open</code>
and</li>
<li><code>this.setState({open: false})</code> instead of <code>setOpen(false)</code></li>
</ul>
<p><a href=""https://reactjs.org/docs/hooks-state.html"" rel=""nofollow noreferrer"">https://reactjs.org/docs/hooks-state.html</a></p>
",0
65127121,"<p>You cannot use a class component with a functional component inside of it. Because they work different, for example. Inside a class based component you have the <strong>render</strong> method that returns an html.</p>
<pre><code>import React, { Component } from &quot;react&quot;;

class ClassComponent extends Component {
 render() {
   return &lt;h1&gt;Hello, world&lt;/h1&gt;;
 }
} 

</code></pre>
<p>And in a functional component the <strong>return of the function</strong> is and html.</p>
<pre><code>import React from &quot;react&quot;;

function FunctionalComponent() {
 return &lt;h1&gt;Hello, world&lt;/h1&gt;;
}
</code></pre>
<p>You can also declare a <strong>functional component</strong> through a anonymous function</p>
<pre><code>import React from &quot;react&quot;;
 
const FunctionalComponent = () =&gt; {
 return &lt;h1&gt;Hello, world&lt;/h1&gt;;
};

</code></pre>
<p>For further information you can check <a href=""https://www.twilio.com/blog/react-choose-functional-components"" rel=""nofollow noreferrer"">here</a> or the <a href=""https://reactjs.org/"" rel=""nofollow noreferrer"">documentation</a></p>
",0
65121942,"<p>Please put all the private variable inside your constructor.</p>
<pre class=""lang-js prettyprint-override""><code>class Animal {
  constructor() {
    let privateAttribute = 'default';

    this.setPrivateAttribute = newValue =&gt; {
      privateAttribute = newValue
    }

    this.getPrivateAttribute = () =&gt; privateAttribute;
  }
}

let newAnimal = new Animal()
// get variable value
newAnimal.getPrivateAttribute()

// Set new Value
newAnimal.setPrivateAttribute('New Value')
</code></pre>

",0
65114433,"<p><a href=""https://i.stack.imgur.com/G4QPP.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/G4QPP.png"" alt=""enter image description here"" /></a>
As you can see here you are using news api as developer plan.
You can see <a href=""https://newsapi.org/pricing"" rel=""nofollow noreferrer"">https://newsapi.org/pricing</a> and know CORS is not enabled on deployed site, only enabled on localhost if you are using developer plan.</p>
<p>So two ways to fix this.</p>
<ul>
<li>You buy package rather than developer plan to simply use newsapi on your frontend.</li>
<li>If you dont want to purchase then think about using a backend. I had the same problem and the easiest way around it was making a firebase cloud function which calls news api there and returns customized result which you will use on frontend.</li>
</ul>
",0
65130512,"<p>Be sure to call <a href=""https://firebase.google.com/docs/reference/admin/node/admin.app.App-1#delete"" rel=""nofollow noreferrer"">delete()</a> on the Firebase app object you previously initialized.  Only call this after you are completely done with it for the process.  As the API docs state:</p>
<blockquote>
<p>this method must be called to ensure graceful termination of the process</p>
</blockquote>
",0
65154817,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const paragraphs = document.querySelectorAll('p');

for(let item of Array.from(paragraphs)) {
  const hr = document.createElement(""hr"");                
  item.appendChild(hr)
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;h3&gt;What is Lorem Ipsum?&lt;/h3&gt;
&lt;p&gt;First&lt;/p&gt;
&lt;h3&gt;Where does it come from?&lt;/h3&gt;
&lt;p&gt;Second&lt;/p&gt;
&lt;h3&gt;Why do we use it?&lt;/h3&gt;
&lt;p&gt;Third&lt;/p&gt;</code></pre>
</div>
</div>
</p>
",0
65127577,"<p>.get will get the FIRST entry</p>
<p>Move this to after the loop so you only set the value once</p>
<pre><code>formData.append(&quot;DisplayOrder&quot;, imageFile.length);           
</code></pre>
<p>You can do <a href=""https://developer.mozilla.org/en-US/docs/Web/API/FormData/getAll"" rel=""nofollow noreferrer"">getAll</a> to get all the DisplayOrder entries</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const formData = new FormData(document.querySelector(""form""))

const imageFile = new Array(4);

for (var i = 0; i &lt; imageFile.length; i++){                      
   formData.append(""DisplayOrder"", i);                                                 
   console.log(""fromData DisplayOrder"",formData.get('DisplayOrder'));  //this is returning the same number each time
}
console.log(formData.getAll(""DisplayOrder""))</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;form&gt;&lt;/form&gt;</code></pre>
</div>
</div>
</p>
",0
65151517,"<p>Use <code>Array.map</code>:</p>
<pre><code>const array1 = ['1', '2', '3', '4', '5']
const array2 = ['a', 'b' ,'3', '2', 'c']

let n = array1.map(e =&gt; array2.includes(e)?'replacement':e)

console.log(n)
</code></pre>
",0
65088737,"<p>For your request, you need to copy paste the following code into your MenuBarGame.js (Don't forget to import <code>useRef</code> and <code>useEffect</code>):</p>
<pre><code>function MenuBarGame(props) {
  const [click, setClick] = useState(false);
  const dropdown = useRef();
  const btn = useRef();

  useEffect(() =&gt; {
    if (click)
      btn.current.style.marginBottom = `${dropdown.current.offsetHeight}px`;
    else btn.current.style.marginBottom = 0;
  }, [click]);

  function handleDropdown() {
    setClick(!click);
  }

  return (
    &lt;&gt;
      &lt;div&gt;
        &lt;li&gt;
          &lt;button className=&quot;gameButton&quot; onClick={handleDropdown} ref={btn}&gt;
            &lt;img src={Logo} /&gt; {props.data.name}
          &lt;/button&gt;
          {click ? (
            &lt;div className=&quot;dropdown-content&quot; ref={dropdown}&gt;
              &lt;button&gt;* Duel&lt;/button&gt;
              &lt;button&gt;* Events&lt;/button&gt;
              &lt;button&gt;* Leaderboard&lt;/button&gt;
            &lt;/div&gt;
          ) : null}
        &lt;/li&gt;
      &lt;/div&gt;
    &lt;/&gt;
  );
}
export default MenuBarGame;
</code></pre>
<p><a href=""https://codesandbox.io/s/menubargame-xydy4?file=/src/MenuBarGame.js:92-954"" rel=""nofollow noreferrer"">Here is a working example</a> in codesandbox.</p>
<p>The reason that the second button covered the first dropdown was because you set <code>position: absolute</code> on dropdown content. That makes the elements below it ignore its height and overlap on it. In my solution, I set bottom margin on the first button, and the value of that depends on the first dropdown's height.</p>
",0
65105618,"<p>I solved it by setting the favicon <code>href</code> attribute using the following code after the code in my question.</p>
<pre><code>var favi=document.querySelector('[rel=&quot;shortcut icon&quot;]');
favi.setAttribute(&quot;href&quot;,favi.getAttribute(&quot;href&quot;));
</code></pre>
",0
65162820,"<p>Your <code>return batch.commit()</code> does return a single promise, but it doesn't return a promise from the top level of the entire function.  It's returning the promise from inside the callback function that you passed to <code>requesting</code>.  That's not going to be propagated out of the top level function.</p>
<p>I suggest looking into an alternative for <code>requesting</code> that lets you work with promises instead of callbacks.  A popular option is axios.  Whatever you use, it should return a promise with the result of the query and let you chain the results in a form like this:</p>
<pre><code>return request(...)
.then(result =&gt; {
    // work with the result to add data to Firestore
    return batch.commit()
})
</code></pre>
",0
65113016,"<p>You can't get what servers a person is in, for privacy reasons.</p>
",0
65128473,"<p>I think that to solve this problem, you need to break it down into smaller pieces.</p>
<p>First of all, we know that at some point, based on the current time, we'll want to know when to trigger the next call. If we get a timestamp which gives us the current time in ms and we want to get the number of ms before the next hour, here's how we can do it:</p>
<pre><code>const timeToNextHourInMs = (currentTimestampMs) =&gt; {
  const timestampSeconds = currentTimestampMs / 1000;

  const numberOfSecondsIntoTheCurrentHour = timestampSeconds % 3600;

  const numberOfSecondsToTheNextHour = 3600 - numberOfSecondsIntoTheCurrentHour;

  return numberOfSecondsToTheNextHour * 1000;
};
</code></pre>
<p>I hope that the variable names are explicit enough that I do not need to comment but let me know otherwise.</p>
<p>Next, we want to tackle the stream issue:</p>
<ul>
<li>We want to trigger an HTTP call straight away</li>
<li>Get the emitted value straight away</li>
<li>Do all the above again every time a new hour start (1:00, 2:00, 3:00, etc..)</li>
</ul>
<p>Here's how you can do this:</p>
<pre><code>this.http.get(`/update`).pipe(
  timestamp(),
  switchMap(({ timestamp, value }) =&gt;
    concat(
      of(value),
      EMPTY.pipe(delay(timeToNextHourInMs(timestamp)))
    )
  ),
  repeat()
);
</code></pre>
<p>Let's go through the above logic:</p>
<ul>
<li>First, we make the HTTP call straight away</li>
<li>Once the HTTP call is done, we get the current timestamp (to later on based on that find out when we want to do the next call)</li>
<li>We do a <code>switchMap</code> but as our HTTP call is only ever going to return 1 value it doesn't really matter in this very specific case. We could use <code>flatMap</code> or <code>concatMap</code> too</li>
<li>Inside the <code>switchMap</code>, we use <code>concat</code> to first of all send the value that we just got from the HTTP call but also keep that observable alive until the end of the current our (by using the function we created earlier)</li>
<li>At the end of the current hour, the stream will therefore complete. BUT, as we've got a <code>retry</code>, as soon as the stream completes, we'll subscribe to it again (and as a reminder, the stream will only complete at the very beginning of a new hour!)</li>
</ul>
<p>One thing I'd suggest to add here but which isn't a requirement of the initial issue would be to have some error handling so that if something goes wrong when you make that call, it automatically retries it a few seconds after. Otherwise imagine when the polling kicks in if your network doesn't work for 5s at that exact time your stream will error straight away.</p>
<p>For this, you can refer to this <a href=""https://stackoverflow.com/a/44911567/2398593"">brilliant answer</a> and do that in a reusable custom operator:</p>
<pre><code>const RETRY_DELAY = 2000;
const MAX_RETRY_FOR_ONE_HTTP_CALL = 3;

const automaticRetry = () =&gt; (obs$) =&gt;
  obs$.pipe(
    retryWhen((error$) =&gt;
      error$.pipe(
        concatMap((error, index) =&gt;
          iif(
            () =&gt; index &gt;= MAX_RETRY_FOR_ONE_HTTP_CALL,
            throwError(error),
            of(error).pipe(delay(RETRY_DELAY))
          )
        )
      )
    )
  );
</code></pre>
<p>This will retry the observable 3 times with a delay between each retry. After 3 times, the stream will error by throwing the last emitted error.</p>
<p>Now, we can just add this custom operator to our stream:</p>
<pre><code>this.http.get(`/update`).pipe(
  automaticRetry(),
  timestamp(),
  switchMap(({ timestamp, value }) =&gt;
    concat(
      of(value),
      EMPTY.pipe(delay(timeToNextHourInMs(timestamp)))
    )
  ),
  repeat()
);
</code></pre>
<p>I haven't actually tested the code above so please do that on your side and let me know how it goes. But if my logic is correct here's how things should go:</p>
<ul>
<li>Imagine you start your app at 2:40</li>
<li>An HTTP call is made straight away</li>
<li>You get the response pretty much instantly</li>
<li>The stream is set to be kept open for 20mn</li>
<li>At 3:00, the stream is completed and the retry kicks in: We do another HTTP call</li>
<li>This time, the server got re-deployed and was not available for a few seconds</li>
<li>Internally, the stream errors but thanks to our custom operator <code>automaticRetry</code> it waits for 3 seconds then retries the HTTP call once, still nothing. It waits another 3 seconds and this time it's fine, the result is passed downstream</li>
<li>Repeat this indefinitely :)</li>
</ul>
<p>Let me know how it goes</p>
",0
65134139,"<p>Using <code>async/await</code> and your disliked nested promises you could simplify your code to something like this, which should always await all results. I made the assumption that your problem is the <code>fromFile</code> method, which feels like it is itself asynchronous since it uses a <code>then</code> that you are not awaiting.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>async function matchReport(shop, arr) {
    
    const matches = await Promise.all(arr.map(async filename =&gt; {
       
        const reportData = await csv().fromFile( filename );

        if( reportData[0]['Work'].match(shop.productRegex) ){
        
            return filename;
            
        }
        
    }));
    
    return {
        'shop': shop.name,
        'reports': matches.filter( Boolean )
    };
    
}</code></pre>
</div>
</div>
</p>
",0
65099388,"<p>It seems there is a small bug with <code>styleOptions</code>, at the moment. In the mean time, you can do the following to achieve hiding the upload button.</p>
<pre class=""lang-js prettyprint-override""><code>styleSet.uploadButton = {
  ...styleSet.uploadButton,
  display:
    &quot;none&quot;,
};
</code></pre>
<p>Hope of help!</p>
",0
65134309,"<p>Generally with this kind of approach when calling an API <code>&quot;onChange&quot;</code> I personally tend to use <code>debounce</code> since I find it simpler.</p>
<p>As far as why your cancellation is not working, you should pass the <code>cancelToken</code> instead of <code>cancelPrevRequest</code>.</p>
<p>Make sure to read more on request <a href=""https://github.com/axios/axios#cancellation"" rel=""nofollow noreferrer"">cancellation</a>.</p>
",0
65155414,"<p>This is expected, the required argument is a function. If you instead pass a statement, it will be interpreted immediately (potentially you could have called a function which actually returns a function that you want to call on mouseover!). You can instead write a function that will then call <code>activateProTip</code> with the argument.</p>
<pre><code>$(&quot;.pro-tip-1&quot;).mouseover(() =&gt; activateProTip(1));
</code></pre>
",0
65136426,"<p><code>formFields</code> isn't an array, should modify your <code>formFields</code> state to this:</p>
<pre class=""lang-js prettyprint-override""><code>const [formFields, setFormFields] = useState([
  {
    id: 0,
    firstName: &quot;&quot;,
    lastName: &quot;&quot;,
  }
])
</code></pre>
",0
65131119,"<p>The following set of tests include everything you mentioned. Using HereticMonkeys syntax just because it looks good.</p>
<p>regex 101 <a href=""https://www.w3schools.com/jsref/jsref_obj_regexp.asp"" rel=""nofollow noreferrer"">https://www.w3schools.com/jsref/jsref_obj_regexp.asp</a></p>
<pre><code>if(!/\d/.test(r.newPassword)){
    console.log('A password must contain at least one number');
}
if(!/[a-z]/.test(r.newPassword)){
    console.log('A password must contain at least lower case letter');
}
if(!/[A-Z]/.test(r.newPassword)){
    console.log('A password must contain at least upper case letter');
}
if(!/[!#=@$%&amp;*)(_-]/.test(r.newPassword)){
    console.log('A password must contain at least one special character');
}
if(r.newPassword.length &lt; 8){
    console.log('A password must be at least 8 characters long');
}
</code></pre>
",0
65099497,"<p>The problem that you are having is when you add an event handler it attaches to the elements that are available at that point.</p>
<p>What you want to do is use event delegation so it will attach to future items.</p>
<pre><code>$(&quot;#recipe&quot;).on(&quot;click&quot;,&quot;.ingredient&quot;,function () {
</code></pre>
",0
65101156,"<p>You do not initialize &quot;currentOperand&quot;.</p>
<pre><code> constructor(previousOperandTextElement, currentOperandTextElement) {
    this.previousOperandTextElement = previousOperandTextElement;
    this.currentOperandTextElement = currentOperandTextElement;
    this.currentOperand = &quot;&quot;;
    this.clear();
  }
</code></pre>
",0
65104863,"<p>I created header a small component that showcase what I talked about here you have no value and when you start to pick it had the component.
if you want to start with someone checked add <code>checked</code> and in the state add his value</p>
<pre><code>const Radios = () =&gt; {
      const [value, setValue] = React.useState(&quot;&quot;);
      return (
        &lt;div&gt;
          &lt;div&gt;
            &lt;input
              type=&quot;radio&quot;
              id=&quot;huey&quot;
              name=&quot;drone&quot;
              value=&quot;huey&quot;
              onChange={(e) =&gt; setValue(e.target.value)}
            /&gt;
            &lt;label for=&quot;huey&quot;&gt;Huey&lt;/label&gt;
          &lt;/div&gt;
    
          &lt;div&gt;
            &lt;input
              type=&quot;radio&quot;
              id=&quot;dewey&quot;
              name=&quot;drone&quot;
              value=&quot;dewey&quot;
              onChange={(e) =&gt; setValue(e.target.value)}
            /&gt;
            &lt;label for=&quot;dewey&quot;&gt;Dewey&lt;/label&gt;
          &lt;/div&gt;
    
          &lt;div&gt;
            &lt;input
              type=&quot;radio&quot;
              id=&quot;louie&quot;
              name=&quot;drone&quot;
              value=&quot;louie&quot;
              onChange={(e) =&gt; setValue(e.target.value)}
            /&gt;
            &lt;label for=&quot;louie&quot;&gt;Louie&lt;/label&gt;
          &lt;/div&gt;
    
          {value === &quot;huey&quot; ? (
            &lt;h1&gt;Huey&lt;/h1&gt;
          ) : value === &quot;dewey&quot; ? (
            &lt;h1&gt;Dewey&lt;/h1&gt;
          ) : value === &quot;louie&quot; ? (
            &lt;h1&gt;Louie&lt;/h1&gt;
          ) : null}
        &lt;/div&gt;
      );
    };
</code></pre>
",0
65105661,"<p>You should use <a href=""https://sequelize.org/v5/class/lib/model.js%7EModel.html#instance-method-get"" rel=""nofollow noreferrer"">instance.get</a> method to get <code>dataValues</code>.</p>
<blockquote>
<p>Model instances operate with the concept of a <code>dataValues</code> property, which stores the actual values represented by the instance.</p>
</blockquote>
<p>Then, you need to define <code>alias: 'tags'</code> for the model association since the graphql type object - <code>service</code> has the <code>tags</code> field.  Make sure they are mapped correctly.</p>
<p>A working example using <code>&quot;sequelize&quot;: &quot;^5.21.3&quot;</code> and <code>&quot;apollo-server&quot;: &quot;^2.19.0&quot;</code>.</p>
<p><code>model.ts</code></p>
<pre class=""lang-js prettyprint-override""><code>import { sequelize } from '../../db';
import { Model, DataTypes } from 'sequelize';

class Service extends Model {}
Service.init(
  {
    id: {
      primaryKey: true,
      type: DataTypes.INTEGER,
      autoIncrement: true,
      allowNull: false,
    },
    name: DataTypes.STRING,
    slug: DataTypes.STRING,
  },
  { sequelize },
);

class Tag extends Model {}
Tag.init(
  {
    id: {
      primaryKey: true,
      type: DataTypes.INTEGER,
      autoIncrement: true,
      allowNull: false,
    },
    name: DataTypes.STRING,
  },
  { sequelize },
);

Service.belongsToMany(Tag, { through: 'Service_Tag', as: 'tags' });
Tag.belongsToMany(Service, { through: 'Service_Tag', as: 'services' });

(async function test() {
  try {
    await sequelize.sync({ force: true });
    //seed
    await Service.bulkCreate(
      [
        { name: 'Restaurant X', slug: 'a', tags: [{ name: 'restaurant' }, { name: 'b' }] },
        { name: 'Restaurant Y', slug: 'b', tags: [{ name: 'c' }] },
        { name: 'Restaurant Z', slug: 'c', tags: [{ name: 'restaurant' }] },
      ],
      { include: [{ model: Tag, as: 'tags' }] },
    );
  } catch (error) {
    console.log(error);
  }
})();

export { Service, Tag };
</code></pre>
<p><code>app.ts</code>:</p>
<pre class=""lang-js prettyprint-override""><code>import { ApolloServer, gql } from 'apollo-server';
import * as models from './model';

const typeDefs = gql`
  type Tag {
    id: ID!
    name: String!
  }

  type Service {
    id: ID!
    name: String!
    slug: String!
    tags: [Tag!]!
  }

  type Query {
    findServicesByTag(tag: String!): [Service]!
  }
`;

const resolvers = {
  Query: {
    async findServicesByTag(_, { tag }, { models }) {
      const res = await models.Service.findAll({
        where: {
          '$tags.name$': tag,
        },
        include: [
          {
            model: models.Tag,
            as: 'tags',
          },
        ],
      });
      const data = res.map((v) =&gt; v.get({ plain: true }));
      return data;
    },
  },
};

const server = new ApolloServer({
  typeDefs,
  resolvers,
  context: {
    models,
  },
});

server.listen().then(({ url }) =&gt; {
  console.log(`  Server ready at ${url}`);
});
</code></pre>
<p>Test GraphQl query using <code>curl</code>:</p>
<pre><code> ⚡  curl 'http://localhost:4000/graphql' -H 'Accept-Encoding: gzip, deflate, br' -H 'Content-Type: application/json' -H 'Accept: application/json' -H 'Connection: keep-alive' -H 'Origin: chrome-extension://flnheeellpciglgpaodhkhmapeljopja' --data-binary '{&quot;query&quot;:&quot;\nquery{\n  findServicesByTag(tag: \&quot;restaurant\&quot;){\n    id\n    name\n    slug\n    tags {\n      \tname\n\t\t}\n  }\n}&quot;,&quot;variables&quot;:{}}' --compressed
{&quot;data&quot;:{&quot;findServicesByTag&quot;:[{&quot;id&quot;:&quot;1&quot;,&quot;name&quot;:&quot;Restaurant X&quot;,&quot;slug&quot;:&quot;a&quot;,&quot;tags&quot;:[{&quot;name&quot;:&quot;restaurant&quot;}]},{&quot;id&quot;:&quot;3&quot;,&quot;name&quot;:&quot;Restaurant Z&quot;,&quot;slug&quot;:&quot;c&quot;,&quot;tags&quot;:[{&quot;name&quot;:&quot;restaurant&quot;}]}]}}
</code></pre>
<p>Data records in the database:</p>
<pre><code>node-sequelize-examples=# select * from &quot;Service&quot;;
 id |     name     | slug 
----+--------------+------
  1 | Restaurant X | a
  2 | Restaurant Y | b
  3 | Restaurant Z | c
(3 rows)

node-sequelize-examples=# select * from &quot;Tag&quot;;
 id |    name    
----+------------
  1 | restaurant
  2 | b
  3 | c
  4 | restaurant
(4 rows)
node-sequelize-examples=# select * from &quot;Service_Tag&quot;;
 ServiceId | TagId 
-----------+-------
         1 |     1
         1 |     2
         2 |     3
         3 |     4
(4 rows)
</code></pre>
",0
65132514,"<p>Firebase can use Google Cloud Platform Services, you can integrate <a href=""https://cloud.google.com/secret-manager"" rel=""nofollow noreferrer"">GCP Secret Manager</a> on your functions with this service you can store your raw keys (these will be encrypted) and retrieved by your code function, this carries the benefit that you can restrict the access via  <a href=""https://cloud.google.com/iam"" rel=""nofollow noreferrer"">Cloud IAM</a> and service accounts.</p>
<p>This can help you to define which members of your projects or which service accounts can access to the API keys(secrets)</p>
<p>The permissions over the secrets can be configured so that even developers cannot see production environment keys, by <a href=""https://cloud.google.com/secret-manager/docs/access-control"" rel=""nofollow noreferrer"">assigning access permissions</a> to secrets, but allowing that the function can get the secret (because the service account associated to your function can read the secret).</p>
<p>In this document you can find a <a href=""https://cloud.google.com/secret-manager/docs/quickstart#secretmanager-quickstart-nodejs"" rel=""nofollow noreferrer"">code example</a> about how to use GCP Secret Manager</p>
",0
65118215,"<p>If you're using the <code>mongoose-unique-validator</code> plugin with <code>findOneAndUpdate</code> and related methods, you need to set the <code>context</code> option to <code>'query'</code> to set the value of <code>this</code> to the <code>query</code> object in validators.</p>
<pre><code>Person.findByIdAndUpdate(request.params.id, person, {
  new: true, 
  runValidators: true,
  context: 'query',
})
</code></pre>
<p><a href=""https://github.com/blakehaswell/mongoose-unique-validator#find--updates"" rel=""nofollow noreferrer"">https://github.com/blakehaswell/mongoose-unique-validator#find--updates</a></p>
",0
65100878,"<pre><code>export const limitVideos = (videosList, index, limit = 3) =&gt; {
    let least = index - Math.floor(limit / 2);
    
    let len = videosList.length
    if(least + limit &gt; len)
        least = len - limit

    least = (least &lt; 0) ? 0 : least;
    
    return videosList.slice(least, least + limit);
};
</code></pre>
<p>The reason of returning result [250, 300] instead of [200, 300] that's because the least is set 250 as you know, so I add the if-state for handling when the index is at the end of videosList</p>
",0
65115056,"<p>Your selector doesn't match the attribute value. It should be <code>userId</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(""#logForm"").on(""submit"", function(e) {
  e.preventDefault();
  let textInput = $('input[name=""userId""]');
  let userName = textInput.val();
  console.log(userName);
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;

&lt;form id=""logForm""&gt;
  &lt;input type=""text"" name=""userId""&gt;
  &lt;button type=""submit""&gt;ENTER&lt;/button&gt;
&lt;/form&gt;</code></pre>
</div>
</div>
</p>
",0
65164496,"<p>Some advice:</p>
<ul>
<li>use native JS function <code>setInterval()</code> to run a given function every x milliseconds</li>
<li>you will need to store the number in state if you want to trigger a re-render every time it changes.</li>
</ul>
<p><strong>Working example:</strong></p>
<pre><code>import React, { Component } from &quot;react&quot;;

class App extends Component {
  constructor() {
    super();
    this.state = {
      web3: &quot;&quot;,
      number: 0
    };
    this.getNumber = this.getNumber.bind(this);
  }

  componentDidMount() {
    setInterval(this.getNumber, 10000);
  }

  getNumber() {
    this.setState({ number: this.state.number + 1 });
  }

  render() {
    return (
      &lt;&gt;
        &lt;div&gt;Number: {this.state.number}&lt;/div&gt;
        &lt;span&gt;This will update every 10 seconds&lt;/span&gt;
      &lt;/&gt;
    );
  }
}

export default App;
</code></pre>
<p><a href=""https://codesandbox.io/s/vigorous-snow-w4tlf?file=/src/App.js:0-542"" rel=""nofollow noreferrer"">Live Demo</a></p>
",0
65123660,"<p>Although images can't be animated like the way you are seeking for, but we can use a hack. The hack is - adding a fading animation when the image changes.</p>
<p>In the below snippet, there is an example of the effect -</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>setTimeout(function(){
  document.querySelector("".img1"").classList.add(""t1"");
document.querySelector("".img1"").src=""https://images.unsplash.com/photo-1579546929518-9e396f3cc809?ixlib=rb-1.2.1&amp;ixid=MXwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHw%3D&amp;auto=format&amp;fit=crop&amp;w=750&amp;q=80"";
}, 2000);</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.img1{
  height: 150px;
  width: 150px;
}

@keyframes fade{ /*The animation*/
  0%{
    opacity: 1;
  }
  50%{
    opacity: 0.1;
  }
  100%{
    opacity: 1;
  }
}

.t1{ /*The class which has animation*/
  animation: fade 1 2s; /*Animation will only run once*/
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;img src=""https://images.pexels.com/photos/1591447/pexels-photo-1591447.jpeg?auto=compress&amp;cs=tinysrgb&amp;dpr=1&amp;w=500"" class=""img1"" /&gt;</code></pre>
</div>
</div>
</p>
<p>Most of the code in above snippet is just for demonstration purpose, but in you app, you can add the class while changing the image -</p>
<pre><code>function getImage = () =&gt; {
  isOpen ? &lt;img src={url1} className=&quot;t1&quot; /&gt; : &lt;img src={url2} className=&quot;t1&quot; /&gt; ;
}
</code></pre>
<p>Where t1 is the css class which has the animation attached.</p>
<p>Although I am not a react guy, but I believe that the code should work for your react app as well.</p>
",0
65093279,"<p>You can paste your file into the <code>public</code> folder and then you can access that file using</p>
<p>let fileurl = location.origin+'/'+ your-filename-here</p>
<p>in your case put your address.json file in the public folder and then you can access that file using <code>location.origin+'/address.json'</code> url.</p>
<p><code>location.origin</code> will give you the name of host and port</p>
",0
65094488,"<p>Shameless reference to a smarter user than me. <a href=""https://stackoverflow.com/questions/24758817/javascript-number-tolocalestring-with-4-digits-after-separator"">JavaScript Number.toLocaleString() with 4 digits after separator</a></p>
<pre class=""lang-js prettyprint-override""><code>console.log(Number(&quot;5000.00&quot;).toLocaleString(&quot;en&quot;, { minimumFractionDigits: 2 }))
</code></pre>
",0
65089760,"<blockquote>
<p>Initially, as your script is imported in <code>&lt;head&gt;</code>, it's trying to find your button even when it's not rendered yet! So, you need to either take your script down in the body or some mechanism to run your script on document ready.</p>
</blockquote>
<p>So, using your script in the body solves your problem -</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let button = document.getElementById('button');
let text = document.getElementById('text');
let body = document.querySelector('body');
let number = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'A', 'B', 'C', 'D', 'E', 'F'];

button.addEventListener('click', colorChange);

function colorChange() {
  let hex = '#';

  for (let i = 0; i &lt; 6; i++) {
    const index = Math.floor(Math.random() * number.length);
    hex += number[index];
  }
  text.textContent = hex;
  body.style.backgroundColor = hex;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;

&lt;html lang=""en""&gt;

&lt;body&gt;
    &lt;h1 id=""text""&gt;Background Color&lt;/h1&gt;
    &lt;button id=""button""&gt;Change BG-Color&lt;/button&gt;
    &lt;script src=""script.js""&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
<p><strong>And, just a minor update in the tag is to make <code>hmtl</code> as <code>html</code></strong></p>
<p><strong><a href=""https://stackoverflow.com/questions/14028959/why-does-jquery-or-a-dom-method-such-as-getelementbyid-not-find-the-element"">Here</a></strong>'s the more reference about similar context for you.</p>
",0
65105559,"<p>Here is your entire program.</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=&quot;utf-8&quot;&gt;
  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;
  &lt;title&gt;&lt;/title&gt;
  &lt;meta name=&quot;description&quot; content=&quot;&quot;&gt;
  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;
  &lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/homestyle.css&quot;&gt; --&gt;
  &lt;!-- &lt;link rel=&quot;stylesheet&quot; href=&quot;./css/content.css&quot;&gt; --&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://use.fontawesome.com/releases/v5.15.1/css/all.css&quot; integrity=&quot;sha384-vp86vTRFVJgpjF9jiIGPEEqYqlDwgyBgEF109VFjmqGmIY/Y4HV4d3Gp2irVfcrp&quot; crossorigin=&quot;anonymous&quot;&gt;
  &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css&quot; integrity=&quot;sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2&quot; crossorigin=&quot;anonymous&quot;&gt;
&lt;/head&gt;

&lt;body onload=&quot;myFunction()&quot;&gt;
  &lt;!-- CONTENT--&gt;
  &lt;section class=&quot;content&quot;&gt;
    &lt;div class=&quot;left-content&quot;&gt;
      &lt;div class=&quot;left-two&quot;&gt;
        &lt;section class=&quot;pt-5 pb-5&quot;&gt;
          &lt;div class=&quot;container&quot;&gt;
            &lt;div class=&quot;row&quot;&gt;
              &lt;div class=&quot;col-6&quot;&gt;
                &lt;h3 class=&quot;mb-3&quot;&gt;Carousel cards title &lt;/h3&gt;
              &lt;/div&gt;
              &lt;div class=&quot;col-6 text-right&quot;&gt;
                &lt;a class=&quot;btn btn-dark mb-3 mr-1&quot; href=&quot;#carouselExampleIndicators2&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt;
                  &lt;i class=&quot;fa fa-arrow-left&quot;&gt;&lt;/i&gt;
                &lt;/a&gt;
                &lt;a class=&quot;btn btn-dark mb-3 &quot; href=&quot;#carouselExampleIndicators2&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt;
                  &lt;i class=&quot;fa fa-arrow-right&quot;&gt;&lt;/i&gt;
                &lt;/a&gt;
              &lt;/div&gt;
              &lt;div class=&quot;col-12&quot;&gt;
                &lt;div id=&quot;carouselExampleIndicators2&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;

                  &lt;div class=&quot;carousel-inner&quot;&gt;
                    &lt;div class=&quot;carousel-item active&quot;&gt;
                      &lt;div id=&quot;row-one&quot; class=&quot;row&quot;&gt;

                        &lt;div class=&quot;col-md-4 mb-3&quot;&gt;
                          &lt;div class=&quot;card&quot;&gt;
                            &lt;img id=&quot;ci1&quot; class=&quot;img-fluid&quot; alt=&quot;100%x280&quot;&gt;
                            &lt;div class=&quot;card-body&quot;&gt;
                              &lt;h4 id=&quot;ct1&quot; class=&quot;card-title&quot;&gt;Image 1&lt;/h4&gt;

                            &lt;/div&gt;

                          &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div class=&quot;col-md-4 mb-3&quot;&gt;
                          &lt;div class=&quot;card&quot;&gt;
                            &lt;img id=&quot;ci2&quot; class=&quot;img-fluid&quot; alt=&quot;100%x280&quot;&gt;
                            &lt;div class=&quot;card-body&quot;&gt;
                              &lt;h4 id=&quot;ct2&quot; class=&quot;card-title&quot;&gt;Image 2&lt;/h4&gt;

                            &lt;/div&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div class=&quot;col-md-4 mb-3&quot;&gt;
                          &lt;div class=&quot;card&quot;&gt;
                            &lt;img id=&quot;ci3&quot; class=&quot;img-fluid&quot; alt=&quot;100%x280&quot;&gt;
                            &lt;div class=&quot;card-body&quot;&gt;
                              &lt;h4 id=&quot;ct3&quot; class=&quot;card-title&quot;&gt;Image 3&lt;/h4&gt;

                            &lt;/div&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;

                      &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;carousel-item&quot;&gt;
                      &lt;div class=&quot;row&quot;&gt;

                        &lt;div class=&quot;col-md-4 mb-3&quot;&gt;
                          &lt;div class=&quot;card&quot;&gt;
                            &lt;img id=&quot;ci4&quot; class=&quot;img-fluid&quot; alt=&quot;100%x280&quot;&gt;
                            &lt;div class=&quot;card-body&quot;&gt;
                              &lt;h4 id=&quot;ct4&quot; class=&quot;card-title&quot;&gt;Image 4&lt;/h4&gt;

                            &lt;/div&gt;

                          &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div class=&quot;col-md-4 mb-3&quot;&gt;
                          &lt;div class=&quot;card&quot;&gt;
                            &lt;img id=&quot;ci5&quot; class=&quot;img-fluid&quot; alt=&quot;100%x280&quot;&gt;
                            &lt;div class=&quot;card-body&quot;&gt;
                              &lt;h4 id=&quot;ct5&quot; class=&quot;card-title&quot;&gt;Image 5&lt;/h4&gt;

                            &lt;/div&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div class=&quot;col-md-4 mb-3&quot;&gt;
                          &lt;div class=&quot;card&quot;&gt;
                            &lt;img id=&quot;ci6&quot; class=&quot;img-fluid&quot; alt=&quot;100%x280&quot;&gt;
                            &lt;div class=&quot;card-body&quot;&gt;
                              &lt;h4 id=&quot;ct6&quot; class=&quot;card-title&quot;&gt;Image 6&lt;/h4&gt;

                            &lt;/div&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;

                      &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div class=&quot;carousel-item&quot;&gt;
                      &lt;div class=&quot;row&quot;&gt;

                        &lt;div class=&quot;col-md-4 mb-3&quot;&gt;
                          &lt;div class=&quot;card&quot;&gt;
                            &lt;img id=&quot;ci7&quot; class=&quot;img-fluid&quot; alt=&quot;100%x280&quot;&gt;
                            &lt;div class=&quot;card-body&quot;&gt;
                              &lt;h4 id=&quot;ct7&quot; class=&quot;card-title&quot;&gt;Image 7&lt;/h4&gt;

                            &lt;/div&gt;

                          &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div class=&quot;col-md-4 mb-3&quot;&gt;
                          &lt;div class=&quot;card&quot;&gt;
                            &lt;img id=&quot;ci8&quot; class=&quot;img-fluid&quot; alt=&quot;100%x280&quot;&gt;
                            &lt;div class=&quot;card-body&quot;&gt;
                              &lt;h4 id=&quot;ct8&quot; class=&quot;card-title&quot;&gt;Image 8&lt;/h4&gt;

                            &lt;/div&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div class=&quot;col-md-4 mb-3&quot;&gt;
                          &lt;div class=&quot;card&quot;&gt;
                            &lt;img id=&quot;ci9&quot; class=&quot;img-fluid&quot; alt=&quot;100%x280&quot;&gt;
                            &lt;div class=&quot;card-body&quot;&gt;
                              &lt;h4 id=&quot;ct9&quot; class=&quot;card-title&quot;&gt;Image 9&lt;/h4&gt;
                            &lt;/div&gt;
                          &lt;/div&gt;
                        &lt;/div&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/section&gt;
      &lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;right-content&quot;&gt;&lt;/div&gt;
  &lt;/section&gt;

  &lt;!-- &lt;script src=&quot;./myscript.js&quot; async defer&gt;&lt;/script&gt; --&gt;
  &lt;!-- &lt;script src=&quot;./js/s-cards.js&quot; async defer&gt;&lt;/script&gt; --&gt;
  &lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.slim.min.js&quot; integrity=&quot;sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
  &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js&quot; integrity=&quot;sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx&quot; crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
  &lt;script&gt;

  function myFunction(){
      var employees = '{ &quot;employees&quot; : [{ &quot;title&quot;:&quot;John&quot; , &quot;name&quot;:&quot;Doe&quot;,&quot;src&quot;:&quot;https://images.unsplash.com/photo-1532763303805-529d595877c5?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1080&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;amp;s=5ee4fd5d19b40f93eadb21871757eda6&quot; }, { &quot;title&quot;:&quot;Anna&quot; , &quot;name&quot;:&quot;Smith&quot;, &quot;src&quot;:&quot;https://images.unsplash.com/photo-1532715088550-62f09305f765?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1080&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;amp;s=ebadb044b374504ef8e81bdec4d0e840&quot; }, { &quot;title&quot;:&quot;Peter&quot; , &quot;name&quot;:&quot;Jones&quot;,&quot;src&quot;:&quot;https://images.unsplash.com/photo-1506197603052-3cc9c3a201bd?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1080&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;amp;s=0754ab085804ae8a3b562548e6b4aa2e&quot; }, { &quot;title&quot;:&quot;Peter&quot; , &quot;name&quot;:&quot;Jones&quot;,&quot;src&quot;:&quot;https://images.unsplash.com/photo-1532771098148-525cefe10c23?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1080&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;amp;s=3f317c1f7a16116dec454fbc267dd8e4&quot; }, { &quot;title&quot;:&quot;Peter&quot; , &quot;name&quot;:&quot;Jones&quot;,&quot;src&quot;:&quot;https://images.unsplash.com/photo-1532715088550-62f09305f765?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1080&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;amp;s=ebadb044b374504ef8e81bdec4d0e840&quot; }, { &quot;title&quot;:&quot;Peter&quot; , &quot;name&quot;:&quot;Jones&quot;,&quot;src&quot;:&quot;https://images.unsplash.com/photo-1506197603052-3cc9c3a201bd?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1080&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;amp;s=0754ab085804ae8a3b562548e6b4aa2e&quot; }, { &quot;title&quot;:&quot;Peter&quot; , &quot;name&quot;:&quot;Jones&quot;,&quot;src&quot;:&quot;https://images.unsplash.com/photo-1507525428034-b723cf961d3e?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1080&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;amp;s=ee8417f0ea2a50d53a12665820b54e23&quot; }, { &quot;title&quot;:&quot;Peter&quot; , &quot;name&quot;:&quot;Jones&quot;,&quot;src&quot;:&quot;https://images.unsplash.com/photo-1532777946373-b6783242f211?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1080&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;amp;s=8ac55cf3a68785643998730839663129&quot; }, { &quot;title&quot;:&quot;Peter&quot; , &quot;name&quot;:&quot;Jones&quot;,&quot;src&quot;:&quot;https://images.unsplash.com/photo-1532763303805-529d595877c5?ixlib=rb-0.3.5&amp;amp;q=80&amp;amp;fm=jpg&amp;amp;crop=entropy&amp;amp;cs=tinysrgb&amp;amp;w=1080&amp;amp;fit=max&amp;amp;ixid=eyJhcHBfaWQiOjMyMDc0fQ&amp;amp;s=5ee4fd5d19b40f93eadb21871757eda6&quot; } ]}';

      var obj = JSON.parse(employees);
      var j=0;
      for(var i=1;i&lt;=9;i++){
        document.getElementById(&quot;ct&quot;+i).innerHTML = obj.employees[j].title;
        document.getElementById(&quot;ci&quot;+i).innerHTML = obj.employees[j].name;
        document.getElementById(&quot;ci&quot;+i).src = obj.employees[j].src;
        console.log(obj.employees[j].src);
        j++;
      }


    };

    /*---Cards Homepage---*/

  &lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;
</code></pre>
",0
65093623,"<p>I have found the solution!
From the <a href=""https://joi.dev/api/?v=17.3.0#alternativestryschemas"" rel=""nofollow noreferrer"">https://joi.dev/api/?v=17.3.0#alternativestryschemas</a> you can find out how to do so:</p>
<pre><code>address: Joi.alternatives().try(Joi.string().uri(),Joi.string().ip)
</code></pre>
<p>Instead of checking if the address is a string you verify two options: if it's a string and it's an uri or if it's a string and it's an ipv4.</p>
",0
65100869,"<p>you have 2 typos: <code>showImgage()</code> in your button should be <code>showImage()</code> and   <code>diaplay:none</code> in your image should be <code>display: none</code></p>
<p>Here's it working with jsut those 2 chages (and a cat image added in place of your image)</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;HTML&gt;
&lt;head&gt;
&lt;style&gt; 

  body {
  background-image: url(""a2_page_3.JPG"");
  background-size: cover;
  background-attachment: fixed;
  margin: 0;
  padding: 0;
}
&lt;/style&gt;
&lt;script&gt;
  function showImage() {
    document.getElementById(""stipends"").style.display="""";
  }
&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
  &lt;img id=""stipends"" src=""https://external-content.duckduckgo.com/iu/?u=http%3A%2F%2Fgetwallpapers.com%2Fwallpaper%2Ffull%2Ff%2F3%2Fa%2F807159-download-funny-cats-wallpapers-1920x1200-meizu.jpg&amp;f=1&amp;nofb=1"" style=""display:none;""/&gt;
  &lt;input type=button value=""Produce Stipends"" onclick=""showImage()""/&gt;
&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",0
65139263,"<p>To get the value from Form and show it in UI. You can create a getter property in component which will return the value from that particular field like this.</p>
<pre><code>get values() {
    return this.myForm.value.map(x =&gt; x.value);
};
</code></pre>
<p>Add then bind this variable into your UI like this.</p>
<pre><code>&lt;p&gt;result:{{values}}&lt;/p&gt;
</code></pre>
<p>As your form is an formArray you will get your result in an array type.</p>
",0
65133895,"<p>I don’t know how your login system works, but if a user successfully log in, you should store a <strong>token</strong> that identify the user, and is unique. I recommend you <a href=""https://youtu.be/2jqok-WgelIj"" rel=""nofollow noreferrer"">this video</a> if this isn’t what you have done.</p>
<p>Then, when a user request the <code>/menu</code> route, you should check that there is a token in the local storage, or wherever you want to store it, and most inportantly, check that the token is valid, that it is not a fake one.</p>
",0
65150744,"<p>You can use a combination of <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split"" rel=""nofollow noreferrer""><code>split</code></a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice"" rel=""nofollow noreferrer""><code>slice</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/join"" rel=""nofollow noreferrer""><code>join</code></a> to achieve what you want.</p>
<p><em>Click on the links above to learn more about them</em>, but basically:</p>
<ul>
<li><code>str.split(separator)</code> will convert a String to an Array, split on a given separator</li>
<li><code>arr.slice(start[, end])</code> will extract a portion of an Array</li>
<li><code>arr.join(separator)</code> will convert an Array to a String, joining it with a separator</li>
</ul>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>console.log( cleanupFilename(""Fashion_Yellow_Beach.jpg"") );
console.log( cleanupFilename(""Architecture_On_a_hill.jpg"") );

function cleanupFilename(str) {
  return str            // ""Fashion_Yellow_Beach.jpg""
         .split('.')[0] // ""Fashion_Yellow_Beach""
         .split('_')    // [""Fashion"", ""Yellow"", ""Beach""]
         .slice(1)      // [""Yellow"", ""Beach""]
         .join(' ');    // ""Yellow Beach""
}</code></pre>
</div>
</div>
</p>
",0
65138930,"<p>I was able to fix this by changing the DNS to Google's 8888 8844. I followed <a href=""https://www.youtube.com/watch?v=F9u5ULrRt3Y"" rel=""nofollow noreferrer"">this</a> video.</p>
",0
65143445,"<p>I do not recomend using negative pixel values for margins, but it works.</p>
<p>HTML:</p>
<pre><code>&lt;div class=&quot;flex-container&quot;&gt;
  &lt;div class=&quot;download&quot;&gt;
    &lt;span&gt;Download&lt;/span&gt;
    // your icon here
  &lt;/div&gt;

 &lt;div class=&quot;print&quot;&gt;
    &lt;span&gt;Print&lt;/span&gt;
    // your icon here
 &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>CSS:</p>
<pre><code>flex-container {
    display: flex;
    }

    .download, 
    .print {
    border: 2px solid blue;
    display: inline-block;
    align-items: center;
    }
    .print{
      margin-left:-6px;
    }
</code></pre>
",0
65115019,"<p>You can do like this (i commented the code).</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('.wf-btn').click(function() {
  $('.wf-btn').removeClass('active');  // we remove class for all btn
  $(this).addClass('active');  // we add class to the current btn
  
  // we set all img src btn with _blue.png to _grey.png
  $('.wf-btn').each(function() { 
    var SRCLoop = $(this).find('img').attr('src');
    
    if (SRCLoop.substr(SRCLoop.length-9) == '_blue.png') {
     var newSRCLoop = SRCLoop.replace('_blue.png','');
     $(this).find('img').attr('src', newSRCLoop + '_grey.png');
    }
  });

  var btnSRC = $(this).find('img').attr('src'); // we get the src of the current img btn
  
  // we change src img btn
  if (btnSRC.substr(btnSRC.length-9) != '_blue.png') {
   var newSRC = btnSRC.replace('_grey.png','');
   $(this).find('img').attr('src', newSRC + '_blue.png'); 
  } else {
   var newSRC = btnSRC.replace('_blue.png','');
   $(this).find('img').attr('src', newSRC + '_grey.png');   
  }
})</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div id=""worldfilter""&gt;
    &lt;button class=""wf-btn active""&gt;&lt;img src=""world_blue.png""&gt; Welt &lt;/button&gt;
    &lt;button class=""wf-btn""&gt;&lt;img src=""europe_grey.png""&gt;&lt;/button&gt;
    &lt;button class=""wf-btn""&gt;&lt;img src=""north_america_grey.png""&gt;&lt;/button&gt;
    &lt;button class=""wf-btn""&gt;&lt;img src=""south_america_grey.png""&gt;&lt;/button&gt;
    &lt;button class=""wf-btn""&gt;&lt;img src=""africa_grey.png""&gt;&lt;/button&gt;
    &lt;button class=""wf-btn""&gt;&lt;img src=""orient_grey.png""&gt;&lt;/button&gt;
    &lt;button class=""wf-btn""&gt;&lt;img src=""asia_grey.png""&gt;&lt;/button&gt;
    &lt;button class=""wf-btn""&gt;&lt;img src=""oceania_grey.png""&gt;&lt;/button&gt;
  &lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65122056,"<p>You can use a single regex to replace the url. Here is the code with a bunch of urls to test:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const urls = [
  'https://localhost:8000/api/users/available/23342?name=john',
  'https://example.com/api/users/available/23342?name=john',
  'https://example.com/api/users/available/23342',
  'https://example.com/api/users/available?name=john',
];
const regex = /^[a-z]+:\/\/[^:\/]+(:[0-9]+)?\/(.*?)(\/[0-9]+)?(\?.*)?$/;
urls.forEach((url) =&gt; {
  var result = url.replace(regex, '$2');
  console.log(url + ' ==&gt; ' + result);
});</code></pre>
</div>
</div>
</p>
<p>Output:</p>
<pre><code>https://localhost:8000/api/users/available/23342?name=john ==&gt; api/users/available
https://example.com/api/users/available/23342?name=john ==&gt; api/users/available
https://example.com/api/users/available/23342 ==&gt; api/users/available
https://example.com/api/users/available?name=john ==&gt; api/users/available
</code></pre>
<p>Explanation of the regex search and replace:</p>
<ul>
<li><code>^</code> ... <code>$</code> - anchor at start and end</li>
<li><code>[a-z]+:\/\/</code> - scan over protocol and <code>://</code></li>
<li><code>[^:\/]+</code> - scan over domain name (anything before <code>:</code> or <code>/</code></li>
<li><code>(:[0-9]+)?</code> - scan over port number (the <code>?</code> makes the preceding capture optional)</li>
<li><code>\/</code> - scan over <code>/</code> (first char of url path)</li>
<li><code>(.*?)</code> - non-greedily scan and capture over anything until:</li>
<li><code>(\/[0-9]+)?</code> - scan over a <code>/</code> and number chars, if any</li>
<li><code>(\?.*)?</code> - scan over query params, if any</li>
<li>replace: <code>'$2'</code>, e.g. use the second capture only, which us the url path excluding number</li>
</ul>
",0
65112206,"<p>Try adding optional chaining</p>
<pre><code>types[rowData.cardTypeId]?.name
</code></pre>
<p>Or</p>
<p>Make a loader, so once two apis got resolved show the table.</p>
<pre><code>!loading &amp;&amp; &lt;Table /&gt;
</code></pre>
<p>And in your <code>useEffect setLoader(true)</code>, when api call starts and when either in <code>.then or .catch make setLoader(false)</code></p>
<p>Hope this will give you a better understanding</p>
",0
65133016,"<p>You should be cautious about nesting code. Your code will be much easier to read and understand if you write functions and call them from your event handlers.</p>
<p>The issue you face is that you've missed a <code>)</code> in your code. Here is a version written as I suggest:</p>
<pre class=""lang-js prettyprint-override""><code>editUser.addEventListener('click', retrieveAndSendUpdate);

function retriveAndSendUpdate() {
  const username = document.getElementById('username');
  const phone = document.getElementById('editPhone');
  const city = document.getElementById('newCity');
  const zip = document.getElementById('newZip');
  const address = document.getElementById('newAddress');
  const email = document.getElementById('newEmail');
  const password = document.getElementById('newPassword');

  var data = {
    username: username.value,
    phone: phone.value,
    city: city.value,
    zip: zip.value,
    address: address.value,
    email: email.value,
    password: password.value,
  }

  sendUpdate(data);
}

function sendUpdate(data) {
  const xhr = new XMLHttpRequest();
  xhr.responseType = &quot;json&quot;
  xhr.addEventListener(&quot;readystatechange&quot;, processResponse);
  xhr.open(&quot;PUT&quot;, &quot;http://localhost:2500/editProfile&quot;, true);
  xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);
  xhr.send(JSON.stringify(data));
}

function processResponse(e) {
  if (e.readyState === 4) {
    var allUsers = e.response;
    for (i = 0; i &lt; allUsers.length; i++) {
      if (allUsers[i].username === username) {
        allUsers.splice(i, 1);
        console.log(allUsers)
      }
    }
  }
}
</code></pre>

<p>You should also consider testing if you actually got any users back from the server before processing them.</p>
",0
65092492,"<p>You can create the table using the object using the code below</p>
<pre><code>let mountains = [
  { name: &quot;Monte Falco&quot;, height: 1658, place: &quot;Parco Foreste Casentinesi&quot; },
  { name: &quot;Monte Falterona&quot;, height: 1654, place: &quot;Parco Foreste Casentinesi&quot; },
  { name: &quot;Poggio Scali&quot;, height: 1520, place: &quot;Parco Foreste Casentinesi&quot; },
  { name: &quot;Pratomagno&quot;, height: 1592, place: &quot;Parco Foreste Casentinesi&quot; },
  { name: &quot;Monte Amiata&quot;, height: 1738, place: &quot;Siena&quot; }
];

function generateTableHead(table, data) {
  let thead = table.createTHead();
  let row = thead.insertRow();
  for (let key of data) {
    let th = document.createElement(&quot;th&quot;);
    let text = document.createTextNode(key);
    th.appendChild(text);
    row.appendChild(th);
  }
}

function generateTable(table, data) {
  for (let element of data) {
    let row = table.insertRow();
    for (key in element) {
      let cell = row.insertCell();
      let text = document.createTextNode(element[key]);
      cell.appendChild(text);
    }
  }
}

let table = document.querySelector(&quot;table&quot;);
let data = Object.keys(mountains[0]);
generateTableHead(table, data);
generateTable(table, mountains);
</code></pre>
",0
65087435,"<p>Yes its possible add this code in your functions.php file . In the below code &quot;fifty&quot; is the name of coupon used. Create a % based coupon in woo commerce.</p>
<pre><code>add_filter('woocommerce_coupon_get_discount_amount', 'woocommerce_discount_from_the_original_price', 10, 5 );

function woocommerce_discount_from_the_original_price( $discount, $discounting_amount, $cart_item, $single, $coupon ) {

  if ($coupon-&gt;discount_type == 'percent' &amp;&amp; $coupon-&gt;code == 'fifty') {

    $discount_percentage = $coupon-&gt;amount / 100;
    $item                = wc_get_product($cart_item['product_id']);

    if ($item) {
      if ( $item-&gt;is_type( 'simple' ) ) {
        $sale_price    = $item-&gt;sale_price;
        $regular_price = $item-&gt;regular_price;
        if ( ($sale_price &amp;&amp; $regular_price) &amp;&amp; ($sale_price !==  $regular_price) ) {
          $discount_from_regular_price = $regular_price * $discount_percentage; 
          $discount = $discounting_amount - ($discount_from_regular_price * $cart_item['quantity']); 
        }

      } elseif ( $item-&gt;is_type( 'variable' ) ) {
        $variable_product = new WC_Product_Variation( $cart_item[&quot;variation_id&quot;] );
        $sale_price    = $variable_product-&gt;sale_price;
        $regular_price = $variable_product-&gt;regular_price;
        
        if ( ($sale_price &amp;&amp; $regular_price) &amp;&amp; ($sale_price !==  $regular_price) ) {
          $discount_from_regular_price = $regular_price * $discount_percentage;
          $discount = $discounting_amount - ($discount_from_regular_price * $cart_item['quantity']);
        }

      }
    }

  }
  return $discount;
}
</code></pre>
",0
65132689,"<p>Maybe that <code>dataText[i].length</code> should be <code>dataText.length</code> of your <code>line 33</code>. Because you are checking for the words , not the letters in the words.</p>
<p>would be helpful if you can post a codepen of your project or something similar.</p>
",0
65143958,"<p>The <code>cube</code> component needs to define a prop for <code>dragstartHandler</code> so that it receives it from the parent for passing it on to the div.  The same is true of the <code>style</code> and <code>class</code> bindings, which are also not working as you expect, but you don't see an error there because those are built-in bindings which get transferred to the root element.</p>
<p><strong>Cube.vue</strong></p>
<pre class=""lang-js prettyprint-override""><code>  render() {
     ...
  },
  props: {
    dragstartHandler: {
      type: Function,
    },
  }
</code></pre>
",0
65092502,"<p>It's caused by <code>regEx.test(userText)</code>. This should work:</p>
<pre><code>function checkUser() {
  // userField.setAttribute('class', 'user');
  let userText = userField.value.substring(0, userField.value.length);
  let expr = userText.match(regEx);
  if (expr &amp;&amp; userText.length &gt; 0) {
    userField.setAttribute('class', 'user test');
  } else {
    userField.setAttribute('class', 'user');
  }
}
</code></pre>
",0
65103901,"<p>It is valid syntax.</p>
<p>But also note that there's a few more variants:</p>
<p>First of all, you can switch on values as well, one of the most common is <code>switch(true)</code>.</p>
<pre><code>switch(true) {
  case a === &quot;hello&quot;:
    return &quot;first case&quot;;
  case a === &quot;byebye&quot;:
    return &quot;second case&quot;;
  default:
    return &quot;default case&quot;;
}
</code></pre>
<p>Since it will evaluate in order, returning the first one that evalues to true, it will operate the same as the following code:</p>
<pre><code>if (a === &quot;hello&quot;) {
  return &quot;first case&quot;;
} else if (a === &quot;byebye&quot;) {
  return &quot;second case&quot;;
} else {
  return &quot;default case&quot;;
}
</code></pre>
<p>Javascript also allows no break for leaking into the next case (often discouraged) and not including default cases (often discouraged).</p>
<p>You can also pass object or function references both as the variable being tested and the cases. In this case, switch will compare the references, not the content of the objects (this includes arrays).</p>
",0
65096505,"<p>Use <code>Promises chaining</code> or <code>Chaining</code></p>
<p>For example,</p>
<pre class=""lang-js prettyprint-override""><code>// Make a request for user.json
fetch('http://localhost/article/promise-chaining/user.json')
  // Load it as json
  .then(response =&gt; response.json())
  // Make a request to GitHub
  .then(user =&gt; fetch(`https://api.github.com/users/${user.name}`))
  // Load the response as json
  .then(response =&gt; response.json());
</code></pre>
",0
65099492,"<p>You can either make them global or pass them to the next function</p>
<pre><code>var un, pw1, pw2
var urlencodedParser = bodyparser.urlencoded({extended: false});
app.post('/', urlencodedParser, function(req, res) {
    console.log(req.body);
    un = req.body.username;
    pw1 = req.body.pwd1;
    pw2 = req.body.pwd2;
});
</code></pre>
<p>Or passing them on:</p>
<pre><code>var urlencodedParser = bodyparser.urlencoded({extended: false});
app.post('/', urlencodedParser, function(req, res) {
    console.log(req.body);
    doSomething(req.body.username, req.body.pw1, req.body.pw2);
});

function doSomething(un, pw1, pw2) {
    ...
}
</code></pre>
",0
65100069,"<p>As <a href=""https://stackoverflow.com/users/1586174/taplar"">Taplar</a> commented above the problem was <code>&lt;ajQueryObject&gt;[#]</code> removes the option to access jQuery methods. The solution is to use <code>.eq(position)</code> instead.</p>
<p>Here is the edited code:</p>
<pre><code>var bannerImages= $(&quot;.slider_image&quot;);
var position= 0;
var numberOfImages= bannerImages.length;
function NextImage(){
    if(position+1 &gt;= brojSlika){
        bannerImages.eq(position).css('display', &quot;none&quot;);
        position= 0;
        bannerImages.eq(position).css('display', &quot;block&quot;);
    }
    else{
        bannerImages.eq(position).css('display', &quot;none&quot;);
        position+= 1;
        bannerImages.eq(position).css('display', &quot;block&quot;);
    }
}
</code></pre>
",0
65130943,"<p>Your code is good, you just need to do the same thing you did in</p>
<pre><code>  var ulList = document.getElementsByTagName(&quot;li&quot;);
  var i;
  for (i = 0; i &lt; ulList.length; i++) {
    var span = document.createElement(&quot;span&quot;);
    var xBtn = document.createTextNode(&quot;\u00D7&quot;);
    span.className = &quot;Done&quot;;
    span.appendChild(xBtn);

    ulList[i].appendChild(span);
  }
</code></pre>
<p>in <code>btnFunction()</code> (with the exception of the <code>for</code> loop, which isn't needed in the function, as only one element is added at a time). The reason for this is your code only runs when the page is loaded, or when it is specifically told to run (in your case, on a button click). if you just create an element the js doesn't know to update it with an <code>x</code>, you have to tell it to do so.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>//Adds li element with input from a textbox
function btnFunction() {
  var cLi = document.createElement(""li"");
  var inpList = document.getElementById(""inputForList"").value;
  var txtNode = document.createTextNode(inpList);
  cLi.appendChild(txtNode);

  //Check to see if anything is filled in, otherwise send message. And 'appends' it to the list item
  if (inpList === '') {
    alert(""Voeg wat toe!"");
  } else {
    document.getElementById(""ulSection"").appendChild(cLi);
    var ulList = document.getElementsByTagName(""li"");
      var span = document.createElement(""span"");
      var xBtn = document.createTextNode(""\u00D7"");
      span.className = ""Done"";
      span.appendChild(xBtn);
      ulList[ulList.length-1].appendChild(span);
    }
    // Reset value of Textbox to """"
    document.getElementById(""inputForList"").value = """";
  }

  //Sets a 'x' on every element.
  var ulList = document.getElementsByTagName(""li"");
  var i;
  for (i = 0; i &lt; ulList.length; i++) {
    var span = document.createElement(""span"");
    var xBtn = document.createTextNode(""\u00D7"");
    span.className = ""Done"";
    span.appendChild(xBtn);

    ulList[i].appendChild(span);
  }</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;

&lt;head&gt;
  &lt;title&gt;To Do App!&lt;/title&gt;
  &lt;link rel=""stylesheet"" type=""text/css"" href=""CSS/stylesheet.css""&gt;

&lt;/head&gt;

&lt;body&gt;
  &lt;div id=""h1Div""&gt;
    &lt;h1&gt; To-do app! &lt;/h1&gt;
    &lt;input type=""text"" id=""inputForList""&gt;
    &lt;input type=""button"" id=""btnInput"" value=""Add me!"" onclick=""btnFunction()""&gt;
  &lt;/div&gt;

  &lt;ul id=""ulSection""&gt;
    &lt;li&gt;Test 1&lt;/li&gt;
    &lt;li&gt;Test 2&lt;/li&gt;
  &lt;/ul&gt;
  &lt;script src=""Scripts/javascript.js""&gt;&lt;/script&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</p>
",0
65139926,"<p>You should check <code>sex</code> value in the timing of returning <code>0</code> value for sort function, which means <code>id</code> is same.</p>
<pre><code>  return ((aName &lt; bName) ? -1 : ((aName &gt; bName) ? 1 : (a.sex &lt; b.sex) ? -1 : (a.sex &gt; b.sex) ? 1 : 0));
</code></pre>
",0
65154632,"<p>You can fix this with css.<br />
You don't really need the <code>quote-vl-active</code> class. Remove it.<br />
You can refer to the vertical line when it's active using <code>option-active</code> since it's the child of that element.</p>
<pre><code>.option-active &gt; .quote-vl {
  border-left: 2px solid white;
    height: 116px;
}
</code></pre>
<p>See this fiddle: <a href=""https://jsfiddle.net/29r1v0Lo/"" rel=""nofollow noreferrer"">https://jsfiddle.net/29r1v0Lo/</a></p>
",0
65146263,"<p>As far as I know there isn't a standard or better way to do this, it very much depends on the visual effect you are trying to achieve.</p>
<p>I have a solution here and I have stripped out most of the CSS that is not needed for the top/bottom transition.</p>
<p>I also have a jump in opacity that may be helpful while developing as it shows you exactly when the class is added or removed.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const revealNav = () =&gt; {
  const hamburger = document.querySelector('.hamburger');
  const nav = document.querySelector('.nav-links');

  hamburger.addEventListener('click', () =&gt; {
    nav.classList.toggle('is-active');
  });
}

revealNav();</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>nav {
  overflow: hidden;
}

.nav-links {
  opacity: 1; /* only to show when class is added */
  background-color: orange;
  margin: 0;
  padding: 0;
  list-style: none;
  transition: transform 1s;
  transform: translateY(-100%);
}

.nav-links.is-active {
  opacity: 1; /* only to show when class is added */
  transform: translateY(0);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;header&gt;
  &lt;button class=""hamburger hamburger--squeeze"" type=""button""&gt;
    &lt;span class=""hamburger-box""&gt;
        &lt;span class=""hamburger-inner""&gt;hamburger&lt;/span&gt;
    &lt;/span&gt;
  &lt;/button&gt;
  &lt;nav&gt;
    &lt;ul class=""nav-links""&gt;
      &lt;li&gt;&lt;a href=""index.html""&gt;home&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""shop.html""&gt;shop&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""sport.html""&gt;sport&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""read.html""&gt;read&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=""about.html""&gt;about&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/nav&gt;
&lt;/header&gt;</code></pre>
</div>
</div>
</p>
",0
65147290,"<p>Your reducers are mutating state:</p>
<pre class=""lang-js prettyprint-override""><code>case SELECT_VEHICLE.REPLACE:
      return {
        ...state,
        vehicleArray: state.vehicleArray.map((vehicle) =&gt; {
          if (vehicle.name === action.previousVehicleName) {
            // this mutates the existing object - don't do this!
            vehicle[&quot;total_no&quot;] += 1;
            vehicle.selected = false;
          } else if (vehicle.name === action.newVehicleName) {
            vehicle[&quot;total_no&quot;] -= 1;
            vehicle.selected = true;
          }
          return vehicle;
        })
      };
</code></pre>
<p>This is the #1 most frequent bug with Redux - <a href=""https://redux.js.org/style-guide/style-guide#do-not-mutate-state"" rel=""nofollow noreferrer"">reducers must <em>never</em> mutate state!</a>, and mutations will usually cause your UI to think that nothing has changed and skip updating.  You need to rework this code to use immutable updates.</p>
<p>The best way to do this is to switch to using <a href=""https://redux-toolkit.js.org"" rel=""nofollow noreferrer"">our official Redux Toolkit package</a>, which is our recommended approach for writing Redux logic.  It uses Immer inside to let you write &quot;mutating&quot; syntax that is turned into safe and correct immutable updates, which both simplifies your code <em>and</em> prevents accidental mutations.</p>
<p>See how to switch to using RTK in the Redux docs &quot;Redux Fundamentals&quot; tutorial here:</p>
<p><a href=""https://redux.js.org/tutorials/fundamentals/part-8-modern-redux"" rel=""nofollow noreferrer"">https://redux.js.org/tutorials/fundamentals/part-8-modern-redux</a></p>
",0
65130756,"<p>You seem to have assumed that clients/tokens are automatically subscribed to <code>/topics/all</code>, which is no the case. There is no such thing as a default topic.</p>
<p>You'll have to subscribe each client/token to the topic, which (in the case of a web client) means you'll have to set up server-side code to do so securely as shown <a href=""https://firebase.google.com/docs/cloud-messaging/js/topic-messaging#subscribe_the_client_app_to_a_topic"" rel=""nofollow noreferrer"">here</a>.</p>
",0
65124296,"<p>check if you are at end, clear interval and set it again reverse</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var boo = document.getElementById(""boo"");
function move() {
  boo.scrollLeft += 1;
  if(boo.scrollLeft &gt;= (1600 - boo.offsetWidth)){
    clearInterval(interval);
    interval = setInterval(moveReverse,5);
  }
}
function moveReverse() {
  boo.scrollLeft -= 1;
  if(boo.scrollLeft &lt;= 0){
    clearInterval(interval);
  }
}
interval = setInterval(move, 5)</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>p {
width: 1600px;
}

div {
overflow: scroll;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""boo""&gt;
&lt;p&gt;Lorem ipsum dolor sit, amet consectetur adipisicing elit. Atque consequuntur quas libero voluptatem recusandae necessitatibus inventore, velit aperiam, incidunt ut eos distinctio, ducimus magnam veritatis tenetur autem debitis iusto dolorum?&lt;/p&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65133926,"<p>Looking at <a href=""https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/contrib/auto-render.js"" rel=""nofollow noreferrer"">unminified version</a> of the code I've found the default settings that are applied. The following delimeters should be used:</p>
<ul>
<li><code>$$</code></li>
<li><code>\\(</code></li>
<li><code>\\)</code></li>
<li><code>\\[</code></li>
<li><code>\\]</code></li>
</ul>
<p>I was able to make the first formula work by changing <code>$</code> to <code>$$</code> on both sides of the formula.</p>
<pre><code>&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;Inline math $$p^{k}(1-p)^{n-k}$$ is what this is&lt;/p&gt;
</code></pre>
<p>I was able to make the second formula work by changing <code>$</code> to <code>$$</code> on both sides and adding <code> \\</code> to the end of each line.</p>
<pre><code>&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;$$\begin{aligned} \\
  x &amp;= 2\ \\
  &amp;= \frac{3}{2} \\
  \end{aligned}$$
&lt;/p&gt;
</code></pre>
",0
65132359,"<pre><code>const submitButton = document.querySelector(&quot;#noteSubmit&quot;);
submitButton.addEventListener(&quot;click&quot;, createNote);

function createNote(e){
const noteLi = document.createElement(&quot;li&quot;);
let text = document.createTextNode(document.querySelector('#noteText').value);
noteLi.appendChild(text);
document.querySelector(&quot;ul&quot;).appendChild(noteLi);
}
</code></pre>
<p>This code works fine.</p>
<p>The new list element should be created everytime you run the submit function.</p>
",0
65085695,"<p>I think argument passing need to change</p>
<pre><code>observer((props.todoList) =&gt; {})

to

observer((props) =&gt; {})
</code></pre>
",0
65125724,"<p>change your onreadystatechange method to this and it will work:</p>
<pre><code>http.onreadystatechange = function () {
  // rest of your code
}
</code></pre>
<p>This is a template you can refer back to if needed:</p>
<pre><code> const http = new XMLHttpRequest();
 http.open(&quot;post&quot;, &quot;https://example.com/auth/login&quot;);
 http.setRequestHeader(&quot;Content-type&quot;, &quot;application/json&quot;);
 http.onreadystatechange = function () {  // change this line
  if (http.readyState === 4 &amp;&amp; http.status === 200) {
    console.log(http.responseText);
  }
  else {
    console.error(&quot;Error in submitting or receiving response.&quot;);
  }
};
http.send(JSON.stringify({ username, password }));
</code></pre>
<p>if this answer helps solving the issue, <strong>consider</strong> accepting the answer or upvoting it. Thank you.</p>
",0
65094871,"<p>You can use some events to do this, but I'm not sure that free-jqGrtid has these. This is not supported version.</p>
<p>In the supported <a href=""http://guriddo.net/"" rel=""nofollow noreferrer"">Guriddo jqGrid</a> you can use beforeSaveCell to signal the start of saving and then use this in your condition. Set signal in afterSubmitCell back to false.</p>
<p>Like this:</p>
<pre><code>var savestart = false;   
$(&quot;#jqGrid&quot;).jqGrid({
    beforeSubmitCell : function( id, name, val, irow,icol) {
        savestart = true;
    },
    afterSubmitCell : function() {
        savestart = false; 
        return [true,&quot;&quot;];
    },
    ....
 });
</code></pre>
<p>in your code add this</p>
<pre><code>if (e.type == &quot;focusout&quot; &amp;&amp; isValidate &amp;&amp; globalVar.irow != null &amp;&amp; globalVar.icol != null &amp;&amp; !savestart) {
  $(&quot;#GridEditConfiguration&quot;).saveCell(globalVar.irow, globalVar.icol);
  ...
}
</code></pre>
<p>Again you should check if these events are available in free-jqGrid</p>
",0
65121827,"<p>I'm not sure how to flag as duplicate but you can find your answer here:
<a href=""https://stackoverflow.com/questions/39758136/render-html-string-as-real-html-in-a-react-component"">Render HTML string as real HTML in a React component</a></p>
<p>Basically you want to render a string as HTML, which is a dangerous practice so beware.</p>
<pre class=""lang-js prettyprint-override""><code>const x = {
        titleName: &quot;Indorction&quot;,
        heading: 'Welcome to JavaScript',
        iconName: faDotCircle,
        description: [
            `
            Do we even need to introduce &lt;p&gt;HTML element&lt;/p&gt;? It’s one of the most popular programming 
            languages on the planet!
            Ever visited a website that made you think…&quot;Hey, this website is really cool and
            `
        ],
    },

</code></pre>
<p>And inside your render function:</p>
<pre><code>&lt;div dangerouslySetInnerHTML={{ __html: x.description }}&gt;&lt;/div&gt;
</code></pre>
",0
65105185,"<p>Inside your <code>addLi</code> function, add the following:</p>
<pre class=""lang-js prettyprint-override""><code>delbutton.addEventListener('click', () =&gt; list.removeChild(listeditem));
</code></pre>
<p>When the <code>delbutton</code> is clicked, this will remove the list item from the list using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Node/removeChild"" rel=""nofollow noreferrer""><code>Node.removeChild()</code></a>.</p>
",0
65099364,"<p>I would run a sum starting from <code>0</code>, then keep track of the minimum value. Then take your offset and subtract the minimum value. This should leave you with a value that does never dip below the given offset for the given array of integers.</p>
<p>Since your question says:</p>
<blockquote>
<p>the running sum must never get <strong>below 1</strong></p>
</blockquote>
<p>I have picked the offset <code>1</code>, however this does not match the expected example result. You then in the comments say:</p>
<blockquote>
<p>anything less than a value of 4 would have dropped the sum to <strong>1 or less</strong></p>
</blockquote>
<p>Those are two very different statements. If you don't want to drop under <code>2</code> you can easily change the <code>1</code> into a <code>2</code> in the snippet below.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function minX(integers) {
  let sum = 0;
  let min = 0;
  for (const integer of integers) {
    sum += integer;
    if (sum &lt; min) min = sum;
  }
  return 1 - min;
}

console.log(minX([-2,3,1,5]));
console.log(minX([3,-2,-4,7]));</code></pre>
</div>
</div>
</p>
",0
65094629,"<p>It's working by adding class attribute on the SlideType side and using <code>form_row</code> on the template side:</p>
<p>My SlideType:</p>
<pre><code>    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            -&gt;add('title', TextType::class, [
                'row_attr' =&gt; [
                    'class' =&gt; 'form-group'
                ],
                'attr' =&gt; [
                    'class' =&gt; 'form-control'
                ],
                'required' =&gt; false
            ])
            -&gt;add('url', UrlType::class, [
                'row_attr' =&gt; [
                    'class' =&gt; 'form-group'
                ],
                'attr' =&gt; [
                    'class' =&gt; 'form-control'
                ],
                'required' =&gt; false
            ])
            -&gt;add('file', FileType::class, [
                'row_attr' =&gt; [
                    'class' =&gt; 'form-group'
                ],
                'attr' =&gt; [
                    'class' =&gt; 'form-control'
                ]
            ]);
    }
</code></pre>
<p>My carousel_edit.html.twig:</p>
<pre><code>{% block body %}
    &lt;div class=&quot;row&quot;&gt;
        &lt;div class=&quot;col-lg-12&quot;&gt;
            &lt;div class=&quot;card card-default&quot;&gt;
                &lt;div class=&quot;card-body&quot;&gt;
                    {{ form_start(form) }}
                        &lt;div class=&quot;slides&quot; data-prototype=&quot;{{ form_widget(form.slides.vars.prototype)|e('html_attr') }}&quot;&gt;
                            {% for slide in form.slides %}
                                &lt;div class=&quot;slide&quot;&gt;
                                    {{ form_row(slide.title) }}
                                    {{ form_row(slide.url) }}
                                    {{ form_row(slide.file) }}
                                &lt;/div&gt;
                            {% endfor %}
                        &lt;/div&gt;

                    &lt;button type=&quot;button&quot; class=&quot;btn btn-success add_item_link&quot; data-collection-holder-class=&quot;slides&quot;&gt;+&lt;/button&gt;
                    &lt;button type=&quot;button&quot; class=&quot;btn btn-danger remove_item_link&quot; data-collection-holder-class=&quot;slides&quot;&gt;-&lt;/button&gt;

                    &lt;div class=&quot;form-footer pt-4 pt-5 mt-4 border-top&quot;&gt;
                        &lt;button type=&quot;submit&quot; class=&quot;btn btn-primary btn-default&quot;&gt;Save&lt;/button&gt;
                    &lt;/div&gt;

                    {{ form_end(form) }}
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
{% endblock %}
</code></pre>
",0
65134295,"<p>I had a look at the code.</p>
<p>In the example the action of clicking on the slide changes the CSS property &quot;display&quot; of the slide from &quot;none&quot; to &quot;block&quot;.</p>
<pre><code>  slides[slideIndex-1].style.display = &quot;block&quot;;  
</code></pre>
<p>Unfortunately this property does not allow to add smooth transitions.</p>
<p>Check out this article that explains how to create that sliding carousel effect <a href=""https://css-tricks.com/css-only-carousel/"" rel=""nofollow noreferrer"">https://css-tricks.com/css-only-carousel/</a></p>
",0
65101664,"<p>Missing the Header, try this..</p>
<pre><code>function apiCreate(url, product) {
      try {
        fetch(url, {
            method: 'POST',
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            body: JSON.stringify(product)
        })
        .then(response =&gt; response.json())
        .then(data =&gt; console.log(data))
        .catch(error =&gt; console.log(error))  
      } catch (err) {
        console.log(err)
      }
}
</code></pre>
<p>Receiving...</p>
<pre><code>router.post('/create', (req, res) =&gt; {
    console.log('catalog product create Called.');

    console.log('addProduct Called..');
    console.log(`req ${body.req}`);
</code></pre>
",0
65111006,"<p>When you are using getters you are able to modify the output. You cant do this if you only read the property itself. Imagine you would have method to get a name out of a property. You could use the getter to capitalize the first char.</p>
",0
65110705,"<pre><code>m.createReactionCollector(filter, { max: 1, time: 5 * 60 * 1000 })
</code></pre>
<p>the max value you have specified here is the maximum amount of reactions to collect. You can increase the max value to a high amount or just remove the option if you don't want to limit the maximum amount of reactions.</p>
<p>You might also want to add a collecter2.on('end') and remove all the reactions and edit the embed to reflect that it has stopped collecting reactions.</p>
",0
65112044,"<p>You could use Javascripts inbuild Array <code>sort()</code> function with a custom <code>compare function</code>.</p>
<p><a href=""https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/sort"" rel=""nofollow noreferrer"">https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Array/sort</a></p>
<p>a compare function for you could look like this:</p>
<pre><code>cCompare (a,b){
 if(a.rating &lt; b.rating){
   return 1; 
 }
 if(arating &gt; b.rating){
   return -1;
 }
   return 0; 
}
</code></pre>
",0
65084042,"<p>You can use <code>play()</code> and <code>pause()</code></p>
<pre><code>document.getElementById('myVideo').play(); // &lt;-- PLAY
</code></pre>
<pre><code>document.getElementById('myVideo').pause(); // &lt;-- PAUSE
</code></pre>
<p>In the example, I have commented on the places where I added these new lines</p>
<p><strong>Example:</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
    &lt;meta charset=""UTF-8""&gt;
    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1.0""&gt;
    &lt;title&gt;Document&lt;/title&gt;

    &lt;link rel=""preconnect"" href=""https://fonts.gstatic.com""&gt;
    &lt;link href=""https://fonts.googleapis.com/css2?family=Work+Sans&amp;display=swap"" rel=""stylesheet""&gt;

    &lt;style&gt;
        body,
        button {
            font-family: 'Work Sans', sans-serif;
        }

        /* The Modal (background) */
        .modal {
            display: none;
            /* Hidden by default */
            position: fixed;
            /* Stay in place */
            z-index: 1;
            /* Sit on top */
            padding-top: 7px;
            /* Location of the box */
            left: 0;
            top: 0;
            width: 100%;
            /* Full width */
            height: 100%;
            /* Full height */
            overflow: auto;
            /* Enable scroll if needed */
            background-color: rgb(0, 0, 0);
            /* Fallback color */
            background-color: rgba(0, 0, 0, 0.4);
            /* Black w/ opacity */
        }

        /* Modal Content */
        .modal-content {
            position: relative;
            background-color: #fefefe;
            margin: auto;
            padding: 0;
            border: 1px solid #888;
            width: 80%;
            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
            -webkit-animation-name: animatetop;
            -webkit-animation-duration: 0.4s;
            animation-name: animatetop;
            animation-duration: 0.4s
        }

        /* Add Animation */
        @-webkit-keyframes animatetop {
            from {
                top: -300px;
                opacity: 0
            }

            to {
                top: 0;
                opacity: 1
            }
        }

        @keyframes animatetop {
            from {
                top: -300px;
                opacity: 0
            }

            to {
                top: 0;
                opacity: 1
            }
        }

        /* The Close Button */
        .close {
            color: black;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

        .modal-header {
            padding: 2px 16px;
            height: 30px;
            background-color: white;
            color: white;
        }

        .modal-body {
            padding: 2px 16px;
        }

        .modal-footer {
            padding: 2px 16px;
            background-color: #004F9E;
            color: white;
        }

        div.parent {
            text-align: center;
        }

        ul {
            display: inline-block;
            text-align: left;
        }

        button {
            background-color: #004F9E;
            /* Green */
            border: 2px solid #004F9E;
            border-radius: 5px;
            color: white;
            padding: 5px 10px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 14px;
        }

        button {
            transition-duration: 0.4s;
        }

        button:hover {
            background-color: white;
            color: black;
            border: 2px solid #004F9E;
        }

        /* #myBtn {
            display: flex;
            justify-content: center;
            border: none;
        } */
    &lt;/style&gt;

&lt;/head&gt;
&lt;body&gt;

    &lt;h2 style='text-align:center'&gt;Titulo&lt;/h2&gt;

    &lt;div class=""parent""&gt;
        &lt;ul&gt;
            &lt;li&gt;order1.&lt;/li&gt;

            &lt;li&gt;order2.&lt;/li&gt;

            &lt;li&gt;orde3.&lt;/li&gt;
        &lt;/ul&gt;
    &lt;/div&gt;

    &lt;!-- Trigger/Open The Modal --&gt;
    &lt;div class=""parent""&gt;
        &lt;button id=""myBtn""&gt;Ver Video&lt;/button&gt;
    &lt;/div&gt;

    &lt;!-- The Modal --&gt;
    &lt;div id=""myModal"" class=""modal""&gt;

        &lt;!-- Modal content --&gt;
        &lt;div class=""modal-content""&gt;
            &lt;div class=""modal-body""&gt;
                &lt;span class=""close""&gt;&amp;times;&lt;/span&gt;
                &lt;div style='text-align:center'&gt;
                    &lt;video id=""myVideo"" width=""100%"" height=""95%"" controls&gt;
                        &lt;source src=""https://www.learningcontainer.com/wp-content/uploads/2020/05/sample-mp4-file.mp4""
                            type=""video/mp4""&gt;
                        Your browser does not support the video tag.
                    &lt;/video&gt;
                &lt;/div&gt;
            &lt;/div&gt;


        &lt;/div&gt;
    &lt;/div&gt;

    &lt;/div&gt;

    &lt;script&gt;
        // Get the modal
        var modal = document.getElementById(""myModal"");

        // Get the button that opens the modal
        var btn = document.getElementById(""myBtn"");

        // Get the &lt;span&gt; element that closes the modal
        var span = document.getElementsByClassName(""close"")[0];

        // When the user clicks the button, open the modal 
        btn.onclick = function () {
            modal.style.display = ""block""
            document.getElementById('myVideo').play(); // &lt;-- PLAY
        }

        // When the user clicks on &lt;span&gt; (x), close the modal
        span.onclick = function () {
            modal.style.display = ""none"";
            document.getElementById('myVideo').pause(); // &lt;-- PAUSE
        }

        // When the user clicks anywhere outside of the modal, close it
        window.onclick = function (event) {
            if (event.target == modal) {
                modal.style.display = ""none"";
                document.getElementById('myVideo').pause(); // &lt;-- PAUSE
            }
        }
    &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",0
65137839,"<p>its quite a simple fix really change your nextlevel to</p>
<pre><code>function nextLevel(event){
  event.stopPropagation();
  numberOfFaces += 5;
  generateFaces();
}
</code></pre>
",0
65108907,"<p>You almost have the fix ! Simply add a return statement to avoid to set the active calss to the first progress element.</p>
<pre class=""lang-js prettyprint-override""><code>if (current) {
    const currentIndex = progress.indexOf(current);
    if (currentIndex &lt; progress.length) {
      next = progress[currentIndex+1];
    }
    current.classList.remove('active');
    current.classList.add('passed');
    
    if (!next) {
     $('.progress-container div').addClass('passed');
      return;
   }
  } 
</code></pre>
",0
65089236,"<p>you can try to listen for scrolling a child element.</p>
<p>and using getBoundClientRect:</p>
<pre><code>&lt;template&gt;
  &lt;div id=&quot;app&quot;&gt;
    &lt;nav&gt;navbar&lt;/nav&gt;
    &lt;main id=&quot;listen&quot;&gt;main&lt;/main&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script&gt;
export default {
  name: &quot;App&quot;,
  created() {
    document.addEventListener(&quot;scroll&quot;, this.listenScroll);
  },
  destroyed() { // remember to remove the listener when destroy the components
    document.removeEventListener(&quot;scroll&quot;, this.listenScroll);
  },
  methods: {
    listenScroll() {
      let myScroll = document.querySelector(&quot;#listen&quot;).getBoundingClientRect()
        .top;
      console.log(myScroll);
    },
  },
};
&lt;/script&gt;

&lt;style&gt;
nav {
  height: 100px;
}
main {
  height: 700px;
}
&lt;/style&gt;

</code></pre>
<p>here there is a codesandbox <a href=""https://codesandbox.io/s/great-hill-x3wb1?file=/src/App.vue:0-560"" rel=""nofollow noreferrer"">https://codesandbox.io/s/great-hill-x3wb1?file=/src/App.vue:0-560</a></p>
",0
65133314,"<p>I figured it out.</p>
<p>In the JSON file I was passing in the path to image as a string. Rather what I needed to do was in the JSON file import the image and then pass the import into the field like you see below.</p>
<pre><code>import forest from './images/forest.PNG';
import desert from './images/desert.PNG';
import city from './images/city.PNG';


'img1':{forest},
'img2':{desert},
'img3':{city}
</code></pre>
<p>then over in the Item page that was trying to display the read in values the src needed to be</p>
<p>src={Object.values(this.imgX)}</p>
<p>With the X being the number I was trying to display.</p>
<p>The two links below go more in depth with how this works. Thanks for everyone's help.</p>
<p><a href=""https://stackoverflow.com/questions/50310782/images-in-react-is-it-possible-to-use-a-string-from-an-imported-object-as-the-s"">Images in React: is it possible to use a string from an imported object as the source path for an image?</a></p>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/values</a></p>
",0
65132972,"<p><code>client.guilds.fetch(guildID)</code> is a promise, what you would need is:</p>
<p><code>client.guilds.fetch(guildID).then(guild =&gt; guild.channels.cache.get(channelID).send('HI!'))</code></p>
<p>of if you wanna go 100% secure</p>
<pre><code>client.guilds.fetch(guildID)
    .then(guild =&gt; 
        guild.channels.fetch(channelID)
            .then(channel =&gt; 
                 channel.send('HI!')
));
</code></pre>
",0
65153682,"<p>You need to know how much animation last i.e. one second so:</p>
<pre class=""lang-js prettyprint-override""><code>function fullMotion() {
  setTimeout(()=&gt;moveRight(365),0);
  setTimeout(()=&gt;moveUp(300), 1000);
  setTimeout(()=&gt;moveRight(570), 2000)
  setTimeout(()=&gt;moveDown(300), 3000);
  setTimeout(()=&gt;moveRight(365),4000);
}
</code></pre>
",0
65116473,"<p>You are using params of readFileSync instead of readSync</p>
<p><a href=""https://nodejs.org/api/fs.html#fs_fs_readsync_fd_buffer_offset_length_position"" rel=""nofollow noreferrer"">https://nodejs.org/api/fs.html#fs_fs_readsync_fd_buffer_offset_length_position</a></p>
<pre><code> fs.open('your-file', 'r', (err, fd) =&gt; {
   const data = fs.readSync(fd, buffer, bytesRead, size, bytesRead)
 })
</code></pre>
",0
65139459,"<p>You dont need to call new Date() since you have the date string already and Date object you have used is javascript object. Tryout this code. Dates are hardcoded here</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script language=""js""&gt;&lt;![CDATA[var log = mc.getServiceLog(); 
            log.info(""Logging inside Script Mediator""); 

            var startDate = '2020-12-01';
            var endDate = '2020-12-31';   
            var nextStartDate=addNextDay(startDate);
            mc.setProperty(""nextStartDate"", nextStartDate);
            var nextEndDate=addNextDay(endDate);
             mc.setProperty(""nextEndDate"", nextEndDate);
            log.info(""startDate:  "" + startDate);
            log.info(""endDate:  "" + endDate);
            function addNextDay(dateString) {
            var  simpleDateFormat = Packages.java.text.SimpleDateFormat;
            var fomatter = new simpleDateFormat(""yyyy-MM-dd"");
            var currentDate = dateString;
            
            var calendar = Packages.java.util.Calendar.getInstance();
            calendar.setTime(fomatter.parse(currentDate));
            var daysToAdd = mc.getProperty(""days"");
            calendar.add(Packages.java.util.Calendar.DATE, 1);
            var destDate = fomatter.format(calendar.getTime()); 
            log.info(""Destination date : "" + destDate );
            return destDate;
            }]]&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
",0
65126311,"<p>you are using the wrong for loop.
Try changing it to:</p>
<pre><code>printGraph(){
  for (let node of this.nodes){
    console.log(node.nodeId);
  }   
} 
</code></pre>
<p>A for..of loop should loop over the node the way you want.
<br>
Result:</p>
<pre><code>1
2
3
</code></pre>
",0
65129228,"<h2>Short Answer</h2>
<p>When <code>aria-invalid</code> changes to false most screen readers will announce this, worst case they will announce it when the input is focused again.</p>
<p>There is nothing else you need to do to tell a screen reader user a field is valid as this is expected behaviour.</p>
<h2>Long Answer</h2>
<p>You do not need to do anything special here, but implementing <code>aria-invalid</code> in the correct way is important.</p>
<p>The field should start without the attribute, the last thing you want is every field saying it is invalid when it is empty on page load as this can cause confusion.</p>
<p>Additionally do not use this on <strong>required</strong> fields to indicate they need to be filled in as that is what the <code>required</code> attribute is for!</p>
<p>Then as the user types you update the value accordingly (so add it on first key press and then change it when the field becomes valid, <code>aria-invalid=&quot;true&quot;</code> to <code>aria-invalid=&quot;false&quot;</code> when correct).</p>
<p><strong>Most screen readers will announce changes to <code>aria-invalid</code> instantly, worst case they will announce it when the field receives focus.</strong></p>
<p>The key to accessibility is expected behaviour. It is expected behaviour for some screen reader users to refocus a field to check validity if their screen reader does not announce the <code>aria-invalid</code> change live. Sometimes you can make accessibility worse by trying to fix something like this as users get confused.</p>
<p>What is more important is making sure there are easy ways to know what errors there are on a form when a user tries to submit it and making it easy to identify and navigate to fields that need correcting.</p>
<p>I have tried not to stray from the question in hand but make sure you use techniques such as:</p>
<ul>
<li>intercepting <code>onsubmit</code> on a form rather than intercepting the submit button key press when there are errors (as keyboard users will probably submit using <kbd>Enter</kbd>)</li>
<li>using <code>aria-decribedby</code> to provide additional information (and also more meaningful error notifications on a field)</li>
<li>placing all errors at the top of the form and the number of errors</li>
<li>using <code>role=&quot;alert&quot;</code> or <code>aria-live</code> to announce the errors in the first place and explain what needs to be fixed.</li>
</ul>
<h2>If you really want to announce fields are valid</h2>
<p>The above advice covers 99% of scenarios but I am sure there is an edge case somewhere that needs you to announce when a field is valid live.</p>
<p>As such you should use an <code>aria-live</code> region and update it with the current field validity (with some throttling so it doesn't flood the announce queue).</p>
<p>I would go for something like &quot;first name - error - too short&quot; and change it to &quot;first name - correct&quot; or &quot;first name - valid&quot;.</p>
<p>As I said I cannot think of a scenario where this would be needed but that is how you <em>could</em> handle this.</p>
",0
65125924,"<p>Discord recently added privileged gateway intents, to receive member data and events you need to go and enable the Member intent in the <a href=""https://discord.com/developers/applications"" rel=""nofollow noreferrer"">Developer Portal</a>. Your app should work fine after that. If you don't wish to do that you need to enable partials for the member class, but be wary you may receive incomplete data.</p>
<p>To enable partials</p>
<pre><code>client = new Client({partials: 'MEMBER'})

client.on('guildMemberAdd', async (member) =&gt; {
    //Since we may receive partial data
    if(member.partial) await member.fetch() //Fetches the member and loads it to cache.
    //Do your stuff here
})
</code></pre>
",0
65144749,"<p>The number <code>21</code> is a primitive value, but it doesn't change.</p>
<p><code>age</code> is a variable and does get a new value assigned by the <code>++</code> operator. It's equivalent to writing</p>
<pre><code>let age = 21;
let newAge = age; age = age + 1;
let newerAge = (age = age + 1); // newerAge = (age += 1)
</code></pre>
<p>If you don't want to mutate the <code>age</code> variable, don't use the <code>++</code> operator but write for example</p>
<pre><code>let age = 21;
let newAge = age + 1;
let newerAge = 1 + age;
</code></pre>
<p>To understand what <code>++</code> does in details, see also <a href=""https://stackoverflow.com/q/3469885/1048572"">++someVariable vs. someVariable++ in JavaScript</a>. It's pretty confusing for beginners, so it is recommended not to use it in assignments.</p>
",0
65162041,"<p><code>props.children === undefined</code> because you're rendering</p>
<pre><code>&lt;div&gt;
  &lt;Nav /&gt;
&lt;/div&gt;
</code></pre>
<p>and <code>&lt;Nav /&gt;</code> has no child element in it.</p>
<p>If you change it to something like</p>
<pre><code>&lt;Nav myProp=&quot;Hello&quot;&gt;
  World!
&lt;/Nav&gt;
</code></pre>
<p>then <code>console.log(props.myProp, props.children)</code> will print &quot;Hello World!&quot; in the console.</p>
",0
65122950,"<p>here is the corrected version of your code ( you can also go with @vlad katz 's version if you are looking for something shorter ) but this one is just made by extending your code</p>
<pre class=""lang-js prettyprint-override""><code>let days = {
    1: 'Monday',
    2: 'Tuesday',
    3: 'Wednesday',
    4: 'Thursday',
    5: 'Friday',
    6: 'Saturday',
    7: 'Sunday'
}

function retunDay(params) {
    if (params &lt; 1 || params &gt; 7) {
        return null;
    }
    return days[params];
}
</code></pre>
",0
65112383,"<p>Have to  learn some JS tricks...</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>  const Cinemas = 
      [ { branchName: ""City Cinema - New York""
        , movies: 
          [ { id: 1, shows: 
              [ { index: 1, datetime: ""8 Nov, Sun - 9:00am"",   house: 3 } 
              , { index: 2, datetime: ""10 Nov, Tue - 11:00am"", house: 3 } 
              ] 
            } 
          , { id: 2, shows: 
              [ { index: 3, datetime: ""9 Nov, Mon - 2:00pm"",   house: 1 } 
          ] } ] 
        } 
      , { branchName: ""City Cinema - Los Angeles""
        , movies: 
          [ { id: 2, shows: 
              [ { index: 4, datetime: ""11 Nov, Wed - 9:00am"",  house: 4 } 
              , { index: 5, datetime: ""11 Nov, Wed - 11:00am"", house: 2 } 
          ] } ] 
        } 
      , { branchName: ""City Cinema - Wisconsin""
        , movies:
          [ { id: 1, shows: 
              [ { index: 6, datetime: ""11 Nov, Wed - 9:00am"", house: 4} 
      ] } ] } ] 


  const Movies = 
    [ { id        : 1
      , type      : ""now""
      , thumbnail : ""../xx.png""
      , src       : ""../yy.mp4""
      , name      : ""Casablanca""
      , cast      : ""Humphrey Bogart, Ingrid Bergmen""
      , director  : ""Michael Curtiz""
      , duration  : 120
      } 
    , { id        : 2
      , type      : ""now""
      , thumbnail : ""../xx.png""
      , src       : ""../xx.mp4""
      , name      : ""Chocalate""
      , cast      : ""Christiano Roland, Wayne Beckman""
      , director  : ""Alex Curtis""
      , duration  : 110
      } 
    , { id        : 3
      , type      : ""now""
      , thumbnail : ""../xx.png""
      , src       : ""../xx.mp4""
      , name      : ""Wildlife""
      , cast      : ""Marcus Randford""
      , director  : ""David De Geek""
      , duration  : 100
      } 
    , { id        : 4
      , type      : ""upcoming""
      , thumbnail : ""../xx.png""
      , src       : ""../xx.mp4""
      , name      : ""Barbecue""
      , cast      : ""Taylor Watson""
      , director  : ""Rolando Broom""
      , duration  : 105
      } 
    , { id        : 5
      , type      : ""upcoming""
      , thumbnail : ""../xx.png""
      , src       : ""../xx.mp4""
      , name      : ""BigBuck""
      , cast      : ""Mark Hughes""
      , director  : ""Tim Carlton""
      , duration  : 115
      } 
    , { id        : 6               // &lt;--
      , type      : ""upcoming""
      , thumbnail : ""../xx.png""     // &lt;--
      , src       : ""../xx.mp4""
      , name      : ""Nature""
      , cast      : ""Benjamin Crook""
      , director  : ""Memphis Delan""
      , duration  : 100
      } 
    ] 

const DomParser  = new DOMParser()
  ,   cinemaSlct = document.getElementById(""cinemaSelect"")
  ,   div_lm     = document.querySelector('div#lm')

Cinemas.forEach((cinema,index) =&gt;
  { cinemaSlct.add( new Option( cinema.branchName, index )) });

cinemaSlct.onchange = () =&gt;
  {
  div_lm.innerHTML = """"
  Cinemas[cinemaSlct.value].movies.forEach(movieC=&gt;
    {
    movieC.shows.forEach(show=&gt;
      {
      let movie = Movies.find(x=&gt;x.id===show.index)
      if (!movie) throw 'no movie reference' 

      let newSection = `
  &lt;section&gt;
    &lt;hr&gt;
    &lt;img src=""${movie.thumbnail}"" alt=""${movie.name}""&gt;
    &lt;p&gt;name : ${movie.name} &lt;br&gt;
      cast : ${movie.cast} &lt;br&gt;
      director : ${movie.director} &lt;/p&gt;
    &lt;hr&gt;
    &lt;p&gt; datetime:${show.datetime} &lt;br&gt;   house:${show.house} &lt;/p&gt;
    &lt;hr&gt;
  &lt;/section&gt;`;
      div_lm.appendChild( (DomParser.parseFromString( newSection, 'text/html')).body.firstChild )
      })
    })
  }</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""Cinema""&gt;
  &lt;form id=""cin"" method=""get"" action=""""&gt;
    &lt;fieldset&gt;
      &lt;legend&gt;Cinema&lt;/legend&gt;
      &lt;select id=""cinemaSelect""&gt;
        &lt;option value="""" selected disabled&gt; select one&lt;/option&gt;
      &lt;/select&gt;
    &lt;/fieldset&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;div id=""lm""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65153932,"<p>The <a href=""https://github.com/Callum9362/temp-converter/blob/41fba86/src/App.vue#L83"" rel=""nofollow noreferrer""><code>result</code> in <code>convert()</code></a> is passed as an argument value (not a reference to the component's data prop). To change the component's <code>result</code>, use <code>this.result</code>:</p>
<pre class=""lang-js prettyprint-override""><code>export default {
  methods: {
    convert(fromValue, option, result) {
      this.result = /* new value */
    }
  }
}
</code></pre>
",0
65089957,"<p>I pasted your code into js fiddle.
There was a \u200b hidden character at the end of the 2nd line. Once I removed that it looks like it worked.
<a href=""https://jsfiddle.net/mightypie/b1dmgtw2/9/"" rel=""nofollow noreferrer"">https://jsfiddle.net/mightypie/b1dmgtw2/9/</a></p>
<pre><code>form.addEventListener('submit', (e) =&gt; {
</code></pre>
",0
65101690,"<p>The original question used a <code>payload</code> key for specifying the body, and later on <code>data</code>.</p>
<p>However, to send a raw HTTP request body with the Meteor HTTP client, <code>content</code> must be used:</p>
<pre class=""lang-js prettyprint-override""><code>  const authOptions = {
    content: 'grant_type=password&amp;username=myemail&amp;password=mypassword',
    headers: {
      Authorization: 'Basic ' + secrets,
      'Content-Type': 'application/x-www-form-urlencoded',
    },
  };
</code></pre>
",0
65104369,"<p>Remove <code>onclick</code> since you can handle the setState with <code>onChange</code> itself also use <code>checked</code> attribute for radio button and generate the radio buttons through iteration like below.</p>
<pre class=""lang-js prettyprint-override""><code>const Options = this.props.giftDetails.variations.map((v) =&gt; {
      return (
        &lt;React.Fragment key={v.variation_id}&gt;
          &lt;input
            type=&quot;radio&quot;
            value={v.variation_id}
            checked={v.variation_id == this.state.giftCard}
            onChange={(e) =&gt; {
              this.setState({
                giftCard: e.target.value,
                giftDescription: v.reward_description,
              });
            }}
          /&gt;
          {v.reward_text}
        &lt;/React.Fragment&gt;
      );
    });

    return (
      &lt;React.Fragment&gt;
        {Options}
        &lt;p&gt;{this.state. giftDescription}&lt;/p&gt;
      &lt;/React.Fragment&gt;
    );
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""false"" data-babel=""true"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class Hello extends React.Component {
  constructor() {
    super();
    this.state = { giftCard: null, giftDescription: null };
  }

  render() {
    console.log(""this.state"", this.state);
    const variants = {
      variations: [
        {
          variation_id: 1,
          variation_name: ""210kr"",
          price: ""210"",
          reward_text: ""200kr. Price"",
          reward_description:
            ""Med et gavekort til Sendentanke.dk kan du vælge mellem gavekort til hundredevis af butikker og oplevelser ét sted."",
        },
        {
          variation_id: 2,
          variation_name: ""400kro"",
          price: ""400"",
          reward_text: ""400 Price"",
          reward_description: ""Earn a reward"",
        },
      ],
    };

    const Options = variants.variations.map((v) =&gt; {
      return (
        &lt;React.Fragment&gt;
          &lt;input
            key={v.variation_id}
            type=""radio""
            value={v.variation_id}
            checked={v.variation_id == this.state.giftCard}
            onChange={(e) =&gt; {
              this.setState({
                giftCard: e.target.value,
                giftDescription: v.reward_description,
              });
            }}
          /&gt;
          {v.reward_text}
        &lt;/React.Fragment&gt;
      );
    });

    return (
      &lt;React.Fragment&gt;
        {Options}
        &lt;p&gt;{this.state.giftDescription}&lt;/p&gt;
      &lt;/React.Fragment&gt;
    );
  }
}

ReactDOM.render(&lt;Hello name=""World"" /&gt;, document.getElementById(""container""));</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js""&gt;&lt;/script&gt;
&lt;div id=""container""&gt;
    &lt;!-- This element's contents will be replaced with your component. --&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65123770,"<p>There is a simple logic error here - you are overwriting the value of <code>$data</code> every time your loop runs, so you'll only ever end up encoding the value of whatever the last entry in your data was.</p>
<p>Instead you need to declare an array, and then add items to that array each time you loop:</p>
<pre><code>$result = $stmt-&gt;fetchAll();     
$list = array();

foreach($result as $data =&gt; $value) {         
  $list[] = array('value' =&gt; $value[&quot;category_id&quot;], 'text' =&gt; $value[&quot;category&quot;]);     
}     

$category_list = json_encode($list);
</code></pre>
<p>And then in the JavaScript, simply write:</p>
<pre><code>source: &lt;?php echo $category_list; ?&gt;
</code></pre>
",0
65088567,"<p>i took your code and improved it a little beat i hope this will help you</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>    var m3 = document.getElementById('m3')
    var m1 = document.getElementById('m1')
    var m2 = document.getElementById('m2')
        
    var m1Top = 300
    var m1left =50

    var m1TopTemp
    var m1leftTemp

    var m1Verif = false
    var m2Verif = false
    var m3Verif = false

    
    var m2Top = 100
    var m2Transform =-30
    var m2left =150

    var m3Top = 100
    var m3left =450

    var hoverFrame
    var leaveFrame
    function hover() {
        clearInterval(leaveFrame);
        m1Verif=false
        m2Verif=false
        m3Verif=false
        hoverFrame = setInterval(frame, 5);
    }
    function leave() {
        clearInterval(hoverFrame);
        m1Verif=true
        m2Verif=true
        m3Verif=true
        leaveFrame = setInterval(frameReverse, 5);
    }
      function frame() {
        if(m1Top == 100 &amp;&amp; m1left==250){
            m1Verif = true
        }else{
            if(m1left!=250){m1left++;}  
            if(m1Top!=100){m1Top--;}  
            m1.style.left = m1left + 'px';
            m1.style.top = m1Top + 'px'; 
        }

        if(m2Top == 100 &amp;&amp; m2left == 550 &amp;&amp; m2Transform == 0){
            m2Verif=true
        }else{
            if(m2left!=550){m2left++;}  
            if(m2Transform!=0){m2Transform++;} 
            m2.style.left = m2left + 'px';
            m2.style.transform = 'rotate('+m2Transform+'deg)'; 
        }

        if(m3Top == 100 &amp;&amp; m3left == 895){
            m3Verif=true
        }else{
            if(m3left!=8950){m3left++;} 
            m3.style.left = m3left + 'px'; 
        }
        if(m1Verif==true &amp;&amp; m2Verif == true &amp;&amp; m3Verif == true){clearInterval(hoverFrame);}
    }
    
    function frameReverse() {
        if(m1Top == 300 &amp;&amp; m1left==50){
            m1Verif = false
        }else{
            if(m1left!=50){m1left--;}  
            if(m1Top!=300){m1Top++;}  
            m1.style.left = m1left + 'px';
            m1.style.top = m1Top + 'px'; 
        }
        if(m2Top == 100 &amp;&amp; m2left == 150 &amp;&amp; m2Transform == -30){
            m2Verif=false
        }else{
            if(m2left!=150){m2left--;}  
            if(m2Transform!=-30){m2Transform--;} 
            m2.style.left = m2left + 'px';
            m2.style.transform = 'rotate('+m2Transform+'deg)'; 
        }
        if(m3Top == 100 &amp;&amp; m3left == 450){
            m3Verif = false
        }else{
            if(m3left!=450){m3left--;} 
            m3.style.left = m3left + 'px'; 
        }
        if(m1Verif == false &amp;&amp; m2Verif ==false &amp;&amp; m3Verif == false){clearInterval(leaveFrame);}
    }</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>   .milktea {
      background: url(""https://my-test-11.slatic.net/p/89d20ca95994d8a252a6430c7b27e6fc.jpg"") no-repeat center center;
      display: table;
      height: auto;
      position: relative;
      width: 100%;
      background-size: cover;
      padding: 0;
      margin: 0;
    }

    .mtitle {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        color: white;
        font-size: xx-large;
        font-family: brandon-grotesque, sans-serif;
        font-weight: bold;
        font-style: normal;
    }
    .mtitle:hover {
        color:rgba(30, 144, 255,0.7);
        cursor: pointer;
    }
    .m1 {
      position: absolute;
      width: 150px;
      height: auto;
      top: 300px;
      left: 50px;
    }

    .m2 {
      position: absolute;
      width: 250px;
      height: auto;
      top: 100px;
      left: 150px;
      transform: rotate(-30deg);
    }

    .m3 {
      position: absolute;
      width: 250px;
      height: auto;
      top: 100px;
      left: 450px;
    }
    .m3A{
        background-color: red;
        animation-name: example;
        animation-duration: 4s;
    }
    @keyframes m3{
        100%{
            top:102px;
            left: 30%;
        }
    }</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""row""&gt;
      &lt;div class=""milktea col-lg-6 p-0"" style=""height: 800px;""&gt;

        &lt;div class=""m3"" id=""m3""&gt;&lt;img src=""https://cdn.shopify.com/s/files/1/0026/7947/2175/products/jazzy-boba-avatar_2310088d-5c68-455c-810f-357227f83d3c_300x300.jpg"" alt="""" /&gt;&lt;/div&gt;
        &lt;div class=""mtitle"" id=""mtitle"" onmouseover=""hover()"" onmouseleave=""leave()""&gt;MILKTEA&lt;/div&gt;
        &lt;div class=""m1"" ID=""m1""&gt;&lt;img src=""https://images-na.ssl-images-amazon.com/images/I/61ECxeh86rL._CR0,179,921,921_UX256.jpg"" alt="""" /&gt;&lt;/div&gt;
        &lt;div class=""m2"" ID=""m2""&gt;&lt;img src=""https://images-na.ssl-images-amazon.com/images/I/61iMmwHrY5L._CR0,204,1224,1224_UX256.jpg"" alt="""" /&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65121336,"<p>You should not need a function to assign an event handler. Also you have not told us when you call get_alert. Calling get_alert will NOT show the alert, only assign the handler</p>
<p>Here I run on load of the page</p>
<p>If the <code>removeactive</code>  element is dynamic, you need to change to</p>
<pre><code>$(document).on('click','#removeactive', function(e) {
</code></pre>
<p>or better:</p>
<pre><code>$(document).on('click','.removeactive', function(e) {
</code></pre>
<p>so any element with that class can call the alert</p>
<p>You also need to remove active where you know the status of the isConfirm</p>
<p>Here is a working example</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(function() { // on page load
  $('#removeactive').on('click', function(e) {
    e.preventDefault();
    var message = $(this).data('confirm');

    //pop up
    swal({
        title: ""Are you sure ??"",
        text: message,
        icon: ""warning"",
        buttons: true,
        dangerMode: true,
      })
      .then(function(isConfirm) {
        console.log(""confirmed?"", isConfirm);
        if (isConfirm) console.log(""deleting""); // here you delete
        else console.log(""cancelled""); // here you do whatever or nothing
        // You cannot return anything  
      });
  });
})</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/sweetalert/2.1.2/sweetalert.min.js""&gt;&lt;/script&gt;

&lt;button id=""removeactive"" data-confirm=""This will remove the active widget from the sprocket"" type=""button""&gt;Click&lt;/button&gt;</code></pre>
</div>
</div>
</p>
",0
65104042,"<p>Finally i solved my issue by making a recursive function call without using loop.</p>
<pre><code>var customers=[&quot;customer1&quot;,&quot;customer2&quot;];
var currentIndex=0;
private function main()
{
  if(customers[currentIndex]){
   function1().done(function(data) {
     console.log(&quot;a&quot;);
      function2().done(function(data) {
        console.log(&quot;b&quot;);
        function3().done(function(data) {
          console.log(&quot;c&quot;);
           currentIndex++; 
           main();
        });
      });
   });
   
  }
}
private function1()
{
  return  $.ajax({
                type: &quot;POST&quot;,
                url: url1,
                data: {},
                dataType: 'JSON'
            });
}
private function2()
{
  return  $.ajax({
                type: &quot;POST&quot;,
                url: url2,
                data: {},
                dataType: 'JSON'
            });
}
private function3()
{
  return  $.ajax({
                type: &quot;POST&quot;,
                url: url3,
                data: {},
                dataType: 'JSON'
            });
}
</code></pre>
<p>And current output is</p>
<pre><code>a
b
c
a
b
c
</code></pre>
",0
65112870,"<p>Json isn't correct...put quotation for string type value-&quot;A&quot;, &quot;B&quot;, &quot;C&quot;</p>
<pre><code>data: [{ id: 1, type: &quot;A&quot; }, { id: 1, type: &quot;B&quot; }, { id: 1, type: &quot;C&quot; }]
</code></pre>
<p>JSX</p>
<pre><code>class App extends Component {
  state = {
    data: [{ id: 1, type: &quot;A&quot; }, { id: 1, type: &quot;B&quot; }, { id: 1, type: &quot;C&quot; }]
  };
  handleChange = e =&gt; {
    console.log(e.target.value);
  };
  render() {
    return (
      &lt;div&gt;
        &lt;select className=&quot;form-control&quot; onChange={this.handleChange}&gt;
          &lt;option&gt;Select data&lt;/option&gt;
          {this.state.data.map((i, h) =&gt; (
            &lt;option key={h} value={i.type}&gt;
              {i.type}
            &lt;/option&gt;
          ))}
        &lt;/select&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>
",0
65090489,"<p>Rather than:</p>
<pre><code>&lt;div class=&quot;home&quot;&gt; HOME &lt;/div&gt;
&lt;div class=&quot;about&quot;&gt; ABOUT &lt;/div&gt;
</code></pre>
<p>You can use a <em>custom data attribute</em> like <code>data-page</code>:</p>
<pre><code>&lt;div data-page=&quot;home&quot;&gt; HOME &lt;/div&gt;
&lt;div data-page=&quot;about&quot;&gt; ABOUT &lt;/div&gt;
</code></pre>
<p>Then, if you want to do something more dynamic than straightforward CSS styling, you can script the following:</p>
<pre><code>const myDiv = document.querySelector('[data-page]');

switch (myDiv.dataset.page) {

  case ('home') : [... DO SOMETHING... ] ; break;
  case ('about') : [... DO SOMETHING... ] ; break;
}
</code></pre>
<hr />
<p><strong>N.B.</strong> When using this setup, where you <strong>do</strong> only want to apply CSS styling, then <em>definitely</em> use CSS:</p>
<pre><code>[data-page=&quot;home&quot;] {
  color: red;
}

[data-page=&quot;about&quot;] {
  color: green;
}
</code></pre>
<hr />
<p><strong>Further Reading:</strong></p>
<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes</a></li>
</ul>
",0
65090233,"<p>This is a loaded question, as there are <em>many</em> ways to solve this.</p>
<ol>
<li>Create a custom admin area so your client can manage products (probably a lot of additional work + authentication)</li>
<li>Give the client access to the database (not recommended, even if they're competent with the technology)</li>
<li>Implement one of the many e-commerce frameworks available that come with all of these problems already solved.</li>
</ol>
<p>As I said, there are a lot of other solutions to this. I'd almost always go for solution 3 to keep costs and maintenance down.</p>
",0
65126872,"<p>You want to filter your data first before you map it so that allStaff is filtered down where the branch names match. I have provided the code to do so below.</p>
<pre><code>allStaff.filter((staff) =&gt; staff.branch.name === contributor.branch.name)
  .map((filteredStaff) =&gt; (
    &lt;option key={staff._id} value={staff._id}&gt;
      {staff.name}
    &lt;/option&gt;
));
</code></pre>
",0
65154765,"<p>You are mutating the same object repeatedly before pushing a reference to it into the <code>list</code> array.</p>
<p>Either declare a new <code>details</code> object inside the forEach callback each iteration...</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let sections = ['A', 'B', 'C', 'D']
const list = []

sections.forEach((value) =&gt; {
  const details = {}
  details.nickname = value
  list.push(details)
});

console.log(list)</code></pre>
</div>
</div>
</p>
<p>...or if the above is not possible, push a clone of the <code>details</code> object into <code>list</code> instead of a reference to the original <code>details</code> object.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let sections = ['A', 'B', 'C', 'D']
const list = []
const details = {}

sections.forEach((value) =&gt; {
  details.nickname = value
  list.push({...details})
});

console.log(list)</code></pre>
</div>
</div>
</p>
",0
65149246,"<p>Yeah, based on <a href=""https://github.com/SheetJS/sheetjs#array-of-objects-input"" rel=""nofollow noreferrer"">this</a> part of the documentation, it seems you need to flatten the object to make it work.
Check out its example:</p>
<pre class=""lang-js prettyprint-override""><code>var ws = XLSX.utils.json_to_sheet([
  { S:1, h:2, e:3, e_1:4, t:5, J:6, S_1:7 },
  { S:2, h:3, e:4, e_1:5, t:6, J:7, S_1:8 }
], {header:[&quot;S&quot;,&quot;h&quot;,&quot;e&quot;,&quot;e_1&quot;,&quot;t&quot;,&quot;J&quot;,&quot;S_1&quot;]});
</code></pre>
<p>Have in mind the order of the columns is based on <code>Object.keys()</code>.</p>
<p>Hope this helps. :fingers_crossed:</p>
",0
65158522,"<p>As your dates are display in <code>dd-mm-yyyy</code> so easy way to get month is to use <code>split</code> method then once we get month we need to loop through <code>trs</code> to hide all month expect the first one and also add <code>odd</code> class to it.</p>
<p>Then, onclick of <code>tr</code> just get the month from <code>td</code> and then loop through trs with same month add <code>up</code> class to that td and show same tr.</p>
<p><em><strong>Demo code</strong></em>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>//when tr is clicked
$(document).on(""click"", ""#report tr.odd"", function() {
  //get month 
  var mnth = $(this).find(""td:eq(0)"").text().trim().split(""-"")[1]
  //loop thorough tr to find same month tr
  $(""tbody &gt;  tr"").not(this).each(function() {
    var mnth_other = $(this).find(""td:eq(0)"").text().trim().split(""-"")[1]
    if (mnth == mnth_other) {
      $(this).toggle();
      $(this).find("".arrow"").toggleClass(""up"");
    }

  });
});
var date_current;
//loop through tr
$(""tbody &gt;  tr"").each(function() {
  //get month
  var dates = $(this).find(""td:eq(0)"").text().trim().split(""-"")[1];
  //check if not equal
  if (date_current != dates) {
    $(this).addClass(""odd"");
    $(this).find("".arrow"").addClass(""down"");
    date_current = dates;
  } else {
    //hide other tr
    $(this).hide()
  }

})</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.up {
  transform: rotate(-135deg);
  -webkit-transform: rotate(-135deg);
}

.down {
  transform: rotate(45deg);
  -webkit-transform: rotate(45deg);
}

.arrow {
  border: solid black;
  border-width: 0 3px 3px 0;
  display: inline-block;
  padding: 3px;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;table id=""report"" class=""table table-striped table-bordered table-sm text-center"" style=""width:35%; margin:auto;""&gt;

  &lt;thead class=""text-center table-info""&gt;
    &lt;tr&gt;
      &lt;th&gt;Date&lt;/th&gt;
      &lt;th&gt;Calls&lt;/th&gt;
      &lt;th&gt;Sales&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;

    &lt;tr class=""text-center""&gt;
      &lt;td id=""id""&gt;
        27-11-2020
      &lt;/td&gt;
      &lt;td id=""database""&gt;
        22
      &lt;/td&gt;
      &lt;td id=""total""&gt;
        1
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class=""arrow""&gt;&lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=""text-center""&gt;
      &lt;td id=""id""&gt;
        27-11-2020
      &lt;/td&gt;
      &lt;td id=""database""&gt;
        22
      &lt;/td&gt;
      &lt;td id=""total""&gt;
        1
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class=""arrow""&gt;&lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=""text-center""&gt;
      &lt;td id=""id""&gt;
        21-11-2020
      &lt;/td&gt;
      &lt;td id=""database""&gt;
        22
      &lt;/td&gt;
      &lt;td id=""total""&gt;
        12
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class=""arrow""&gt;&lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=""text-center""&gt;
      &lt;td id=""id""&gt;
        20-12-2020
      &lt;/td&gt;
      &lt;td id=""database""&gt;
        222
      &lt;/td&gt;
      &lt;td id=""total""&gt;
        21
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class=""arrow""&gt;&lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=""text-center""&gt;
      &lt;td id=""id""&gt;
        27-12-2020
      &lt;/td&gt;
      &lt;td id=""database""&gt;
        22
      &lt;/td&gt;
      &lt;td id=""total""&gt;
        1
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class=""arrow""&gt;&lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=""text-center""&gt;
      &lt;td id=""id""&gt;
        27-12-2020
      &lt;/td&gt;
      &lt;td id=""database""&gt;
        22
      &lt;/td&gt;
      &lt;td id=""total""&gt;
        1
      &lt;/td&gt;
      &lt;td&gt;
        &lt;div class=""arrow""&gt;&lt;/div&gt;
      &lt;/td&gt;
    &lt;/tr&gt;

  &lt;/tbody&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</p>
",0
65136044,"<p>The <a href=""https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fillRect"" rel=""nofollow noreferrer""><code>fillRect</code></a> function uses the parameters as follows: <code>void ctx.fillRect(x, y, width, height);</code></p>
<p>So in your case you're calling the <code>square</code> function with <code>40</code> and <code>20</code> which will translate (according to your function) to the coordinates x = <code>30</code> and y = <code>10</code> with a width of <code>50</code> and a height of <code>30</code>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var c = document.getElementById(""mycanvas"").getContext(""2d"");
c.fillStyle = ""blue"";
c.fillRect (0,0,500,350);

function square(x,y) {
    var leftX = (x - 10); // x = 30
    var leftY = (y - 10); // y = 10
    var width = (x + 10); // width = 50
    var height = (y + 10); // height = 30
    c.fillStyle = ""red"";
    c.fillRect (leftX,leftY,width,height);
}

square(40,20);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;canvas id=""mycanvas"" width=""1000"" height=""1000""&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>
</p>
<p>If you want a square you should do something like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var c = document.getElementById(""mycanvas"").getContext(""2d"");
c.fillStyle = ""blue"";
c.fillRect (0,0,500,350);

function square(x,y) {
    var leftX = (x - 10); // x = 30
    var leftY = (y - 10); // y = 10
    c.fillStyle = ""red"";
    c.fillRect (leftX,leftY,20,20);
}

square(40,20);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;canvas id=""mycanvas"" width=""1000"" height=""1000""&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>
</p>
",0
65117095,"<p>This is because you <code>map</code> over both <code>trackList</code> and <code>searchRes</code>.</p>
<p>You may want to set <code>searchRes</code> equal to the array in <code>trackList</code> when the page renders like this</p>
<pre><code> const [searchRes, setSearchRes] = useState(trackList)
</code></pre>
<p>And then use it in your map like this</p>
<pre><code>{searchRes.map(item =&gt; {
    return (&lt;Row className='mt-1' style={{padding: '5px', border: '1px solid #000', display: 'flex', justifyContent: 'flex-start', alignItems: 'center'}}&gt;
...
</code></pre>
<p>And remove this</p>
<pre><code>&lt;ul&gt;
    { searchRes.map(i =&gt; (
        &lt;li&gt;{i}&lt;/li&gt;

    )) }
&lt;/ul&gt;
</code></pre>
<p>Let me know if you need any more explanation.</p>
",0
65164577,"<p>Facetiously not using Object.keys() - you can use Object.entries() and map() and to create an array of the first item in the key : value pairings.</p>
<p>Presumably this is some sort of homework or teaching activity - the reason for my post is to show that there are many ways to achieve the outcome and some are just different ways of saying the same thing.</p>
<p>The obvious answer is to use a loop as per your attempt and the other solutions - but my solution is intended to invite you to see things in a different way. And putting arbitary limits on the way you can achieve something forces you to adopt either inefficient proactise or prevents you from using newer methodologies.</p>
<p>Rather than forcing you to use a loop - a better teaching activity would be to get you to use the newer javascript methods- especially map(), reduce() and filter().</p>
<p>There are definitely reasons to get you to learn loops - but doing so in an exercise to get the keys of an object limits your ability to use current code approaches and is just wrong. IMO.</p>
<p>FYI - I am an ex-teacher and believe in using the right learning activity and the right learning tools to achieve the learning.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const keys = (obj) =&gt; {
  return Object.entries(obj).map(item =&gt; item[0]);
};

const obj = {a: 1, b: 2, c: 3};


console.log(keys(obj)); // gives [""a"", ""b"", ""c""]</code></pre>
</div>
</div>
</p>
",0
65126257,"<p>Because you asked for an image not founded in the <code>src</code> folder! maybe you're trying to access the images in the <code>public</code> folder at your React project.</p>
<p>My Friend life is easy, <strong>React converts the png images to base64</strong> then replaces the URL to the base64... like this</p>
<p><a href=""https://i.stack.imgur.com/alIph.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/alIph.png"" alt=""enter image description here"" /></a></p>
<p>So, you need to make an <code>assets</code> folder  inside the <code>src</code> folder that contains all your images, then import the link in your CSS</p>
<pre><code>  background-image: url(&quot;./assets/logo512.png&quot;);
</code></pre>
<p>Again, React will convert the image to bases64! That will make the image not depend on the folder Path.</p>
",0
65164202,"<h2>Explanation:</h2>
<p>You can create a json object with mappings between emails and initials:</p>
<pre><code>const initials = {
    &quot;email1&quot;:&quot;initials1&quot;,
    &quot;email2&quot;:&quot;initials2&quot;,
    &quot;email3&quot;:&quot;initials3&quot;
};
</code></pre>
<p>and then get the initials like that:</p>
<p><code>e.range.offset(0,6).setValue(initials[Session.getEffectiveUser().getEmail()]);</code></p>
<h2>Solution:</h2>
<pre><code>function onEdit(e) {

  const initials = {
    &quot;email1&quot;:&quot;initials1&quot;,
    &quot;email2&quot;:&quot;initials2&quot;,
    &quot;email3&quot;:&quot;initials3&quot;
  };
  
  var sheet = e.source.getActiveSheet();
  var i = ['Sheet 1', 'Sheet 2'].indexOf(sheet.getName());
  if (e.range.getValue()!='' &amp;&amp; i &gt; -1 &amp;&amp; e.range.columnStart === 1) {
    e.range.offset(0,4).setValue(Utilities.formatDate(new Date(), &quot;GMT+8&quot;, &quot;MM/dd/yyyy&quot;));
    e.range.offset(0,6).setValue(initials[Session.getEffectiveUser().getEmail()]); 
  }
}
</code></pre>
<p><strong>Side Notes:</strong></p>
<p>Indeed <code>Session.getEffectiveUser().getUsername()</code> does not seem to be supported on <code>V8</code>, but if it works for you (you use <code>Rhino</code> maybe) then use my solution and replace <code>Session.getEffectiveUser().getEmail()</code> with <code>Session.getEffectiveUser().getUsername()</code>. The point of my answer is to use a json object to do the mappings. Also try <code>Session.getActiveUser()</code> which is equivalent to <code>Session.getEffectiveUser()</code> for simple triggers.</p>
",0
65123697,"<blockquote>
<p>.map is not a function</p>
</blockquote>
<p>is thrown becouse you are calling map on data that is an object.
Try to call map on <code>data.movies</code></p>
",0
65153179,"<p>just parse the value to integer because it is a string</p>
<pre><code>this.setState({InputAmount: +e.target.value*this.state.weiConversion});
</code></pre>
",0
65112460,"<p><strong>Output:</strong></p>
<p><a href=""https://i.stack.imgur.com/G06rX.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/G06rX.gif"" alt=""enter image description here"" /></a></p>
<p>Here is the full working example, here when you click on the FlatList Item, that that item will be copied to the clipboard.
I have converted the Copy button to the Paste button to show paste functionality.</p>
<p>One more suggestion if you are using Expo for making app, <code>@react-native-community/clipboard</code> is still not supported by Expo so use <code>Clipboard</code> provided in <code>react-native</code> libraries instead, that's what I have done in the following example.</p>
<pre><code>import React, { useEffect, useState } from 'react';
import {
  ActivityIndicator,
  FlatList,
  StyleSheet,
  View,
  Text,
  Button,
  TouchableOpacity,
  TextInput,
  Clipboard,
} from 'react-native';

const App = () =&gt; {
  const [isLoading, setLoading] = useState(true);
  const [data, setData] = useState([]);
  const [refetch, setRefetch] = useState(false);
  const [selectedText, setSelectedText] = useState('');

  const [copiedText, setCopiedText] = useState(
    'Nothing to show, copy by clicking on FlatList Text, and paste it by clicking Paste button'
  );

  const copyToClipboard = (text) =&gt; {
    Clipboard.setString(text);
    console.log('copied to Clipboard');
    fetchCopiedText();
    console.log('copied text: ', copiedText);
  };

  const fetchCopiedText = async () =&gt; {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  useEffect(() =&gt; {
    fetch('https://jsonplaceholder.typicode.com/posts')
      .then((response) =&gt; response.json())
      .then((json) =&gt; setData(json))
      .catch((error) =&gt; console.error(error))
      .finally(() =&gt; setLoading(false));
  }, [refetch]);

  return (
    &lt;&gt;
      &lt;View style={styles.container}&gt;
        &lt;TextInput
          style={{
            padding: 10,
            backgroundColor: 'white',
            width: 300,
            color: 'black',
            height: 100,
          }}
        /&gt;
        {isLoading ? (
          &lt;ActivityIndicator /&gt;
        ) : (
          &lt;FlatList
            data={data}
            keyExtractor={({ id }, index) =&gt; id}
            renderItem={({ item }) =&gt; (
              &lt;TouchableOpacity
                onPress={() =&gt; {
                  Clipboard.setString(item.title);
                  console.log('selected text:', selectedText);
                }}&gt;
                &lt;Text style={styles.content}&gt;❝ {item.title} ❞&lt;/Text&gt;
              &lt;/TouchableOpacity&gt;
            )}
          /&gt;
        )}
      &lt;/View&gt;
      &lt;View style={{ width: 300, height: 100 }}&gt;
        &lt;Text&gt;{copiedText}&lt;/Text&gt;
      &lt;/View&gt;
      &lt;View&gt;
        &lt;View style={styles.buttonStyle}&gt;
          &lt;Button
            title=&quot;New&quot;
            onPress={() =&gt; setRefetch(!refetch)}
            style={styles.buttonCopy}
            color=&quot;#134074&quot;
          /&gt;
        &lt;/View&gt;
        &lt;View style={styles.buttonStyle}&gt;
          &lt;Button
            title=&quot;Paste&quot;
            onPress={() =&gt; {
              fetchCopiedText();
            }}
            style={styles.buttonCopy}
            color=&quot;#aa4465&quot;
          /&gt;
        &lt;/View&gt;
      &lt;/View&gt;
    &lt;/&gt;
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    backgroundColor: '#001524',
    padding: 30,
    flexDirection: 'column',
    alignItems: 'center',
  },
  content: {
    fontSize: 25,
    textAlign: 'left',
    color: '#ffecd1',
  },
  QuotesMark: {
    color: '#ffffff',
    fontSize: 10,
  },
  buttonStyle: {
    padding: 10,
    alignItems: 'center',
    backgroundColor: '#001524',
  },
});

export default App;
</code></pre>
<p>Working <a href=""https://snack.expo.io/@xeteke8423/mature-stroopwafel"" rel=""nofollow noreferrer"">Expo Snack Demo</a></p>
",0
65148604,"<p>I quess you are supposed to pass <code>Search</code> to the state and not the <code>Search[0]</code>, which is the object and not <code>map</code>, the reason <code>map</code> function is not working on it.</p>
<pre><code>axios(this.state.apiurl+ &quot;&amp;s=&quot;+s).then(response =&gt; 
        this.setState({results: response.data.Search}));
        console.log(this.state.results)
</code></pre>
<p>Coincidently, I have created an app using same movie API, you can find it here: <a href=""https://github.com/TheKetan2/movie-app-react-starckoverflow-answer"" rel=""nofollow noreferrer"">Github Repo, Movie App</a></p>
",0
65094717,"<p>Your current regular expression checks of the string <strong>contains</strong> the sample. What you want to do is ensure that it complete matches it with:</p>
<pre><code>var letters = /^[0-9a-zA-Z]+$/;
</code></pre>
<p>By using the <code>^</code> and <code>$</code> you ensure that the regular expression must match the entire string for it to succeed, instead of also succeeding on a substring.</p>
",0
65084662,"<p>Try this</p>
<pre><code>let myurl = &quot;/BlogMaint/BlogsForMaintIndex/?blogCategoryId=&quot; + blogCategoryId;

window.location.href = myurl;

</code></pre>
",0
65112062,"<p>I'm not totally sure what you want to accomplish but I think you can get rid of the sendData-state and the UseEffect-hook.</p>
<p>Just set the state of lineaData in handleClick like so:</p>
<pre class=""lang-js prettyprint-override""><code>const handleClick = () =&gt; {
    setLineaData({
        name: &quot;new Name&quot;,
        age: 33,
    });
    alert(&quot;new Name - 33&quot;);
};
</code></pre>
<p>Besides you don't need to spread lineaData when you set all props.</p>
",0
65133033,"<p>You can start from the vertex of U1 and from there you can go to all his friends using <code>out</code> step, then filter them with <code>where</code> step.</p>
<pre><code>g.V().hasLabel('U1').out('Friend').
  where(out('Member', 'Invited').
    hasLabel('Group A'))
</code></pre>
<p>example: <a href=""https://gremlify.com/1o0chgjomi6/1"" rel=""nofollow noreferrer"">https://gremlify.com/1o0chgjomi6/1</a></p>
<p><strong>EDIT</strong></p>
<p>for this type of result you can do:</p>
<pre><code>g.V().hasLabel('U1').out('Friend').
    as('friend').
  outE('Member', 'Invited').where(inV().
    hasLabel('Group A')).
  group().
    by(select('friend').label()).
    by(label())
</code></pre>
<p>example: <a href=""https://gremlify.com/4qnd7wi1rnv"" rel=""nofollow noreferrer"">https://gremlify.com/4qnd7wi1rnv</a></p>
",0
65087602,"<pre><code>function sweetAlertConfirmationMessage(message) {
    return Swal.fire({
        title: T('SWEETALERT_GENERAL_CONFIRMATION_TITLE'),
        text: message,
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: T('SWEETALERT_CONFIRM_BUTTON_COLOR'),
        cancelButtonColor: T('SWEETALERT_CANCEL_BUTTON_COLOR'),
        cancelButtonText: T('SWEETALERT_CANCEL_BUTTON_TEXT'),
        confirmButtonText: T('SWEETALERT_CONFIRM_BUTTON_TEXT'),
    })
}
</code></pre>
<p>Just return the promise from your function. You can use this like this:</p>
<pre><code>sweetAlertConfirmationMessage('msg').then(x =&gt; {})
</code></pre>
<p>Read more about Promisechaining:
<a href=""https://javascript.info/promise-chaining"" rel=""nofollow noreferrer"">https://javascript.info/promise-chaining</a></p>
",0
65132112,"<p>If you are going to publish and subscribe to the same topic then your message must include an identifier that allows you to filter out messages that you've published when they invariably come back to you.</p>
<p>An example of this would be (pseudo code):</p>
<pre><code>const MY_IDENTIFIER = generateSomeIdentifierUniqueToThisClient();

publish({
   identifier:MY_IDENTIFIER,
   data: // the actual content of your message
});

handleIncoming = data =&gt; {
  // this was a message you sent
  if(data.identifier === MY_IDENTIFIER) return;

  // handle it
}

</code></pre>
<p>An alternative solution is to publish to say, demo/someUniqueClientIdentifier and subscribe to demo/+</p>
<p>When you receive a message, you can use the topic name to see which client it came from and filter it out that way - a variation on the exact same thing as above.</p>
",0
65114475,"<p>You can get it by this</p>
<pre><code>result.rows[0].pword
</code></pre>
",0
65100480,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>//I just set an interval for every second to check the time again
var s=setInterval(()=&gt;{
  var today = new Date();
  var time = today.getHours() + "":"" + today.getMinutes() + "":"" + today.getSeconds();
  var dayLight = 0900;
  var lightMode = 1700;


  if (time &gt;= dayLight &amp;&amp; time &lt;= lightMode) {
      document.body.style.backgroundColor = ""white"";
      document.querySelector(""h1.example"").style.color = ""black"";
      //console.log(time + "" "" + ""="" + "" "" + ""Light Mode!"");
  } else {
      document.body.style.backgroundColor = ""black"";
      document.querySelector(""h1.example"").style.color = ""white"";
      //console.log(time + "" "" + ""="" + "" "" + ""Dark Mode!"");
  }
},1000)</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;

    &lt;head&gt;
        &lt;meta charset=""UTF-8""&gt;
        &lt;title&gt;Dark Mode Example&lt;/title&gt;
    &lt;/head&gt;

    &lt;body&gt;
       
        &lt;h1 class=""example""&gt;Dark Mode Example&lt;/h1&gt;
   
        &lt;p&gt;Test Paragraph&lt;/p&gt;
    &lt;/body&gt;
    &lt;script src=""script.js""&gt;&lt;/script&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",0
65132372,"<p>You can use <code>Array#map</code> to apply the transformation over each object, using <code>Math.abs</code> to find the absolute difference.</p>
<p>We can use destructuring to remove the <code>prev_year_food_cost</code> from the object.</p>
<p>This can be made more configurable by using the bracket syntax:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let clientData = [{ client: 'Pizza Hutt', food_cost: 400.00, prev_year_food_cost: 450.00, }, { client: 'Pizza World', food_cost: 500.00, prev_year_food_cost: 650.00, }];

const difference = (arr, key) =&gt; {
  return arr.map(o =&gt; {
    const { [""prev_year_"" + key]: prev, ...rest} = o;
    return { ...rest,
       difference: Math.abs(o[""prev_year_"" + key] - o[key])
    }
  });
}
console.log(difference(clientData, ""food_cost""));

clientData = [{ client: 'Pizza Hutt', water_cost: 400.00, prev_year_water_cost: 450.00, }, { client: 'Pizza World', water_cost: 500.00, prev_year_water_cost: 650.00, }];

console.log(difference(clientData, ""water_cost""));</code></pre>
</div>
</div>
</p>
",0
65089330,"<p>The problem is that only elements inside the target element are shown in fullscreen.</p>
<p>So you need to replace this line</p>
<pre><code>document.body.appendChild(tt);
</code></pre>
<p>with</p>
<pre><code>document.getElementById('map_canvas').firstChild.appendChild(tt);
</code></pre>
",0
65126671,"<p>The <code>calendar</code> variable you're using for <code>calendar.addEventSource</code> refers to a different FullCalendar instance than the one which is shown on your page. You have created a completely new calendar - but then didn't render it to the page. That's why you don't get errors, but also nothing useful happens.</p>
<p>The original <code>calendar</code> is defined and populated inside your <code>document.addEventListener('DOMContentLoaded', function() {</code> block, but you tried to create a new one inside your <code>jQuery(document).ready(function($) {</code> block. You need to use the existing reference to <code>calendar</code> - but of course it's out of scope when you need it, because you're in a different code block.</p>
<p>Now, <code>document.addEventListener('DOMContentLoaded', function() {</code> and <code>jQuery(document).ready(function($) {</code> are essentially equivalent, it's just that one is written in native JS and one is jQuery syntax. They basically do the same task - i.e. delay execution of the code until the DOM is completely loaded. Therefore it doesn't make much sense or add any value to have both of them in the page at the same time. Just use one block to include all of your code, and then you won't have any scope problems regardless.</p>
<p>As well as that, for similar reasons it also makes no sense to have another <code>document.addEventListener('DOMContentLoaded', function() {</code> <em>within</em> the jQuery &quot;ready&quot; block! You simply don't need it. I can only assume you didn't understand what that code did and thought it was part of fullCalendar - it's not.</p>
<p>And</p>
<pre><code>var i = calendar.initialEvents();
console.log(i);    
</code></pre>
<p>makes no sense. There's no method called initialEvents in fullCalendar and you don't seem to be trying to use <code>i</code> for anything anyway, so you can just remove these lines.</p>
<p>e.g.</p>
<pre><code>jQuery(document).ready(function($) {
  var calendarEl = document.getElementById('calendar');
  var calendar = new FullCalendar.Calendar(calendarEl, {
    //...etc
  });
  calendar.render();

  $('.holiday').on('click', function() {
    calendar.addEventSource({
      events: [ // put the array in the `events` property
      {
        title: 'Test-Event',
        start: '2020-11-11',
        overlap: false,
        display: 'background',
        color: '#ff9f89'
      }
    ]
  });
});
</code></pre>
<p>Demo: <a href=""https://jsfiddle.net/32w4kLvg/"" rel=""nofollow noreferrer"">https://jsfiddle.net/32w4kLvg/</a></p>
",0
65104315,"<p>Please look into Express Routing <a href=""https://expressjs.com/en/guide/routing.html"" rel=""nofollow noreferrer"">https://expressjs.com/en/guide/routing.html</a></p>
<p>In your case route can be.</p>
<pre class=""lang-js prettyprint-override""><code>app.get(&quot;/user/:username&quot;, function(request, response) {
   const {username} = request.params;
  response.send(&quot;Welcome to the homepage!&quot;);
});

</code></pre>
",0
65118824,"<p>After a long wait searching for an answer, I finally found the answer.</p>
<p>In my custom route, I was using a <code>component</code> prop instead of <code>render</code> prop which resulted in <code>UNMOUNTING</code> the component on the specified <code>Route</code> and deleting the states of the children.</p>
<blockquote>
<p>When you use component (instead of render or children, below) the router uses React.createElement to create a new React element from the given component. That means if you provide an inline function to the componentprop, you would create a new component every render. This results in the existing component unmounting and the new component mounting instead of just updating the existing component.</p>
</blockquote>
<p>in my old custom route</p>
<pre><code> // I used component prop before
&lt;Route 
      {...rest}
      component={(props) =&gt; {
        return &lt;Component {...props} app={app} /&gt;
      }}
    /&gt;
</code></pre>
<p>To <strong>solve</strong> this problem, I used <code>render</code> prop instead of <code>component</code> prop, like so:</p>
<pre><code>&lt;Route 
      {...rest}
      render={(props) =&gt; {
        return &lt;Component {...props} app={app} /&gt; 
      }}
    /&gt;
</code></pre>
",0
65112412,"<p>You don't need to specifically set the circle to white (class <code>.colorebianco</code>).  Instead just add a CSS rule that makes the circle white if it is in the <code>.active</code> span.</p>
<pre><code>.tab-buttons&gt;span.active path {
  fill: #ffffff!important;
}
</code></pre>
<p>Then everything works automatically for you.</p>
",0
65128214,"<p>I believe you want something like this:</p>
<pre class=""lang-js prettyprint-override""><code>import React, { useState } from &quot;react&quot;;

export const Checkboxes = () =&gt; {
  const [checkedIds, setCheckedIds] = useState(new Set([&quot;everywhere&quot;]));

  const handleCheck = ({ id, checked }) =&gt; {
    if (checked) {
      if (id === &quot;everywhere&quot;) {
        checkedIds.clear();
      } else {
        checkedIds.delete(&quot;everywhere&quot;);
      }
      checkedIds.add(id);
    } else {
      checkedIds.delete(id);
    }
    setCheckedIds(new Set(checkedIds));
  };

  return (
    &lt;form&gt;
      &lt;label&gt;
        &lt;input
          id=&quot;everywhere&quot;
          type=&quot;checkbox&quot;
          checked={checkedIds.has(&quot;everywhere&quot;)}
          onChange={(e) =&gt; handleCheck(e.target)}
        /&gt;{&quot; &quot;}
        Search everywhere
      &lt;/label&gt;

      &lt;label&gt;
        &lt;input
          id=&quot;option-1&quot;
          type=&quot;checkbox&quot;
          checked={checkedIds.has(&quot;option-1&quot;)}
          onChange={(e) =&gt; handleCheck(e.target)}
        /&gt;{&quot; &quot;}
        Option 1
      &lt;/label&gt;

      &lt;label&gt;
        &lt;input
          id=&quot;option-2&quot;
          type=&quot;checkbox&quot;
          checked={checkedIds.has(&quot;option-2&quot;)}
          onChange={(e) =&gt; handleCheck(e.target)}
        /&gt;{&quot; &quot;}
        Option 2
      &lt;/label&gt;
    &lt;/form&gt;
  );
};
</code></pre>
<p><a href=""https://codesandbox.io/s/clever-fermat-bh0tp?file=/src/Checkboxes.js"" rel=""nofollow noreferrer"">Test case at codesandbox.io</a></p>
",0
65116606,"<p>The <code>value</code> property is a string, so the test <code>type(reqJson['Amount']) is not int</code> is succeeding and you're reporting an error.</p>
<p>Convert the amount to an integer when creating the JSON:</p>
<pre><code>shop.Amount = parseInt(form.querySelector('input[name=&quot;Amount&quot;]').value)
</code></pre>
",0
65084674,"<p><code>.concat()</code> only shallow clones the array. Any updates to nested items will refer to the same item as on the original. Deep clone the original array to avoid the mutation.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var arr = [
  {
    links: [
        {
      id:1, 
      name:""Name1""
      },
      {
      id:2, 
      name:""Name2"",
      links: [{
        name:""name2"",
        url:""url2""
      }]
      },
      {
      id:3, 
      name:""Name3"",
      links: [{
        name:""name3"",
        url:""url3""
      }]
      }
    ],
    
  }
]

var updatedIndexAt1 = {
                id:""1.1"",
        name: ""UpdatedName1.1"",
        links: {
        name:""name1.1"",
        url:""url1.1""
        }
      };
var cloneArr = JSON.parse(JSON.stringify(arr)); // deep clone
var lastArr = cloneArr[0].links.splice(1, 0, updatedIndexAt1);
console.log(arr)</code></pre>
</div>
</div>
</p>
",0
65116088,"<p><strong>Edit</strong></p>
<p>getElementsByClassName return an array of element with class clear
so you need to get the first one or your function will never get call</p>
<pre><code>const clearAll = document.getElementsByClassName(&quot;clear&quot;)[0];
clearAll.addEventListener('click', clearCells);
</code></pre>
<p>First fix</p>
<pre><code>cells[i].className = 'cell'
</code></pre>
",0
65138665,"<p>There are a number of things that you need to change -</p>
<p>First thing - If you want to get the value of input, use <code>.value</code>.</p>
<p>Second - Declare the <code>input</code> inside the <code>evenOrOdd</code> function. If you don't do so, then the value of input will not be changed every time you click the button.</p>
<p>Third - The output of <code>.value</code> is a string, but to find whether a number is even or odd, we need to convert the string to a number using <code>Number()</code>.</p>
<p>Fourth - When you check for a number to be even or odd, you change the value of the <code>result</code> variable to <code>even</code> or <code>odd</code>. <code>even</code> and <code>odd</code> are variables, not strings. So, whatever the value of <code>result</code> is, it is always going to be <code>undefined</code> since <code>even</code> and <code>odd</code> are undefined. Change the value of <code>result</code> to strings <code>&quot;even&quot;</code> or <code>&quot;odd&quot;</code>.</p>
<p>Fifth - When you check for even numbers, you do <code>(input % 2)</code>. If the number is even, then <code>(input % 2)</code> will evaluate to <code>0</code>. 0 means false. So, even if your number is even, you will get &quot;odd&quot;. Change the if condition to <code>(input % 2 == 0)</code></p>
<p>All these changes are applied in the below snippet. Check the snippet's code -</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let button = document.getElementById('submitButton');
button.addEventListener('click', evenOrOdd);

function evenOrOdd () {
    //Declare the input inside the function and use .value to get the value and Number() to convert the string to number.
    let input = Number(document.getElementById('textInput').value);
    let result;
    
    //Change the condition
    if (input % 2 == 0) {
        result = ""even"";//Change to strings, not variables
    } else {
        result = ""odd"";
    }
    document.getElementById('para').textContent = input + "" is an "" + result + ""number."";
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=""number"" id=""textInput"" /&gt;
&lt;button id=""submitButton""&gt;Submit&lt;/button&gt;
&lt;p id=""para""&gt;&lt;/p&gt;</code></pre>
</div>
</div>
</p>
",0
65095869,"<p>Using scroll event listener you should be able to achieve what you are seeking.</p>
<ul>
<li><p>inside <code>useEffect</code> define an event scroll listener</p>
<pre><code>document.addEventListener('scroll', function(e) {

       // your logic goes here
      });
</code></pre>
</li>
</ul>
",0
65161770,"<p>You can take all items with ID &quot;y&quot; + consecutive number prefix on this way <code>document.getElementById('y' + i).value;</code></p>
<p><em>Do not use &quot;Add&quot; for function name and Functions do not have to start with capital letters!</em></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>calckStart();

function calckStart() {
    const items = document.getElementById(""items"");
    for (var i = 1; i &lt; 3; i++) {
        const inpt = document.createElement(""input"");
        inpt.setAttribute(""type"", ""text"");
        inpt.setAttribute(""style"", ""margin:5px;"");
        inpt.setAttribute(""id"", ""y"" + i);
        inpt.setAttribute(""value"", """");
        const newline = document.createElement(""br"");
        items.appendChild(inpt);
        items.appendChild(newline);
    }

    var button = document.createElement('button');
    button.innerHTML = 'ClickMe'
    items.appendChild(button);

    button.addEventListener('click', calculateVal);
}

function calculateVal() {
    var res = 0;
    for (var i = 1; i &lt; 3; i++) {
        res = res + +document.getElementById('y' + i).value;
    }

    var items = document.getElementById(""items"");
    var result = document.createElement('div');
    result.innerHTML = res;
    items.appendChild(result);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""items""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>A better way is ...</p>
<p>When you create elements, you can assign them a CLASS attribute that is one for all input elements. You can then take the values from all elements with this class.</p>
<p><strong>Example:</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>        
calckStart();

function calckStart() {
    const items = document.getElementById(""items"");
    for (var i = 1; i &lt; 3; i++) {
        const inpt = document.createElement(""input"");
        inpt.setAttribute(""type"", ""text"");
        inpt.setAttribute(""style"", ""margin:5px;"");
        // inpt.setAttribute(""id"", ""y"" + i);
        inpt.setAttribute(""value"", """");
        inpt.setAttribute(""class"", ""numbers"");  //&lt;-- Set class
        const newline = document.createElement(""br"");
        items.appendChild(inpt);
        items.appendChild(newline);
    }

    var button = document.createElement('button');
    button.innerHTML = 'ClickMe'
    items.appendChild(button);

    button.addEventListener('click', calculateVal);
}

function calculateVal() {
    var list = document.getElementsByClassName('numbers'); //&lt;-- Get by class
    var res = 0;
    for (var i = 0; i &lt; list.length; i++) {
        res = res + +list[i].value;
    }

    var items = document.getElementById(""items"");
    var result = document.createElement('div');
    result.innerHTML = res;
    items.appendChild(result);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""items""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65109541,"<p><a href=""https://jsfiddle.net/chille1987/s35qz4wf/"" rel=""nofollow noreferrer"">https://jsfiddle.net/chille1987/s35qz4wf/</a></p>
<p>Javascript</p>
<pre><code>const jsonFile = { 
    &quot;photographers&quot;: [
        {
            &quot;name&quot;: &quot;jonna&quot;,
            &quot;id&quot;: 125,
            &quot;city&quot;: &quot;paris&quot;,
            &quot;country&quot;: &quot;UK&quot;,
            &quot;tags&quot;: [&quot;portrait&quot;, &quot;events&quot;, &quot;travel&quot;, &quot;animals&quot;],
            &quot;tagline&quot;: &quot;Doing my best&quot;,
            &quot;price&quot;: 400,
            &quot;portrait&quot;: &quot;MimiKeel.jpg&quot;
        }
     ]
};


var cardsection = document.getElementsByClassName(&quot;cardsection&quot;)[0];

var items = jsonFile;
console.log(items.photographers.length);

for(var i = 0; i &lt; items.photographers.length; i++) {
  
  var card = document.createElement(&quot;div&quot;);
  card.classList.add('card');
  card.setAttribute(&quot;aria-label&quot;, &quot;Photographe card&quot;);
  cardsection.appendChild(card);
  
  var photoandname = document.createElement(&quot;div&quot;);
  photoandname.classList.add('photoandname');
  photoandname.setAttribute(&quot;aria-label&quot;, &quot;Profil photo and name section&quot;);
  photoandname.innerHTML = items.photographers[i].portrait;
  card.appendChild(photoandname);
  
  var profilphoto = document.createElement(&quot;img&quot;);
  profilphoto.src = items.photographers[i].portrait;
  profilphoto.alt = &quot;Photographer's profil image&quot;;
  profilphoto.classList.add('profilphoto');
  photoandname.appendChild(profilphoto);
  
  var photographerName = document.createElement(&quot;H2&quot;);
  photographerName.classList.add('name');
  photographerName.textContent = items.photographers[i].name;
  photoandname.appendChild(photographerName);
  
  var informations = document.createElement(&quot;div&quot;);
  informations.classList.add('informations');
  card.appendChild(informations);
  
  var caption = document.createElement(&quot;p&quot;);
  caption.classList.add('caption');
  caption.textContent = items.photographers[i].tagline;
  informations.appendChild(caption);
  
  var price = document.createElement(&quot;p&quot;);
  price.classList.add('price');
  price.innerHTML = items.photographers[i].price; 
  informations.appendChild(price);
  
  var tags = document.createElement(&quot;div&quot;);
  tags.classList.add('tags');
  
    var tagItems = items.photographers[i].tags;
  console.log(tagItems)
  for(var j = 0; j &lt; tagItems.length; j++) {
    
    var tagButton = document.createElement('button');
    tagButton.classList.add('tagButton');
    tagButton.id = tagItems[j]; /*ID needs to be the tag itself for a further filter functionality*/
    tagButton.textContent = tagItems[j]; /*And setting the innerhtml of the button as the tag itself*/
    tags.appendChild(tagButton);

  }   
  card.appendChild(tags);
}
</code></pre>
",0
65153220,"<pre><code>// DOM (Document Object Model) fully Loaded and parsed
window.addEventListener('DOMContentLoaded', (event) =&gt; {
// Changed Peach to PeachPuff &amp; aliceblue to AliceBlue to match HTML Color codes. Note that the AliceBlue might not be fully visible to distinguish between it and the whit background colour
var colour = ['blue', 'green', 'yellow', 'purple', 'PeachPuff', 
            'pink', 'orange', 'magenta', 'black', 'AliceBlue'];

var divContainer = document.getElementById('container');
// Used query selectorAll to return array of nodes with class name. And the . before the class name
var divS = document.querySelectorAll('.innerDiv');

for (let i = 0; i &lt; divS.length; i++)
{
    console.log(divS[i]);
    divS[i].addEventListener('mouseover', function() {
        this.style.background = colour[i];

        
    });
    divS[i].addEventListener('mouseout', function() {
        this.style.background = &quot;white&quot;;
    });
}
});
</code></pre>
",0
65108520,"<p>that easy just follow this ways.
you just have to add a class <code>clicked</code> for the <code>td</code> and in javascript set a condition to if <code>td</code> has class don't do any job;</p>
<pre class=""lang-js prettyprint-override""><code>var tdTag = document.querySelectorAll(&quot;#tab tr td&quot;);

for(var i = 0; i &lt; tdTag.length; i++){
  tdTag[i].addEventListener('click', clickedFunction);
}

function clickedFunction(){
  if(!this.classList.contains('clicked')){
      this.classList.add('clicked');
      this.style.background = &quot;red&quot;;
  }
}


</code></pre>
",0
65104516,"<p>Yes you can just create an object with all the <code>keys</code> and <code>datatypes</code>. After that you can just loop over the object and check it against your data.</p>
<p>Be aware that you can't check the difference between <code>floats</code> and <code>integers</code> with the use of <code>typeof</code>. For that you need a custom check.</p>
<p>Though i suggest something like <a href=""https://www.typescriptlang.org/"" rel=""nofollow noreferrer"">typescript</a> for type checking since it has lots of build in functionality for it.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const personInterface = {
  name: ""string"",
  age: ""number"",
};

const persons = [
  {
    name: ""bob"",
    age: 18,
  },
  {
    name: ""karen"",
    age: ""50"",
  }
];

for(const person of persons) {
  for(const [key, value] of Object.entries(personInterface)) {
    if(typeof person?.[key] === value) {
      console.log(`${person[key]} matches ${value}`);
    } else {
      console.log(`${person[key]} does not match ${value}`);
    }
  }
}</code></pre>
</div>
</div>
</p>
",0
65138092,"<p>This should work.</p>
<pre class=""lang-js prettyprint-override""><code>function GetReferrals(member_id) {
  return knex.select('member_id').from('users').where({referred_by: 
  member_id}).then((referrals) =&gt; {
    const referralIds = referrals.map(element =&gt; element.member_id)
    return Promise.all(referralIds.map(GetReferrals)).then(referralsReferrals =&gt; {
      return referralsReferrals.reduce((final, arr) =&gt; final.concat(arr), referralIds)
    })
  })
}

app.get('/api/calculateReferralTotals', (req, res) =&gt; {
    const member_id = req.body.member_id;
    GetReferrals(member_id).then(final_referral_list =&gt; {
      // do something with the global_referral_array
      res.status(200).send({final_referral_list})
    }).catch((error) =&gt; {
      console.log(&quot;Error in select &quot; + error);
    })
});
</code></pre>
",0
65147163,"<p>Try this:</p>
<pre><code>$('#some-input').keypress(function(event){
  if(event.keyCode == 13){
    $('#my-button').click();
  }
});
</code></pre>
",0
65088834,"<p>One possibility is to drop the <code>async</code> and change it to this:</p>
<pre><code>   donglePaired() {
        return new Promise( function(resolve, reject) { 
            if (Platform.OS !=='ios'){
              var pairedDevices = await BluetoothScanner.getPairedDevices();
              console.log('Sending........');
              let data={
                  data:pairedDevices,
              };
              new Api().fetch(&quot;bluetoothCheck&quot;,{devices:JSON.stringify(data),userid:this.state.probe.UID},(result) =&gt; {
                  if (!result.err) reject(false);
                  console.log(&quot;Dongle already paired&quot;);
                  resolve(true);
                  //logNetworkState
              });
            }
            reject(false);
        });  
     }
</code></pre>
<p>And:</p>
<pre><code>this.props.app.donglePaired().then( (response) =&gt; { 
  // do something here, this will only run if the response is true
});
</code></pre>
",0
65107227,"<p>You've said you're using <code>axios.get</code> to get the image from the server. What you'll presumably get back will be a <code>Buffer</code> or <code>ArrayBuffer</code> or <code>Blob</code>, etc., but it depends on what you do with the response you get from <code>axios</code>.</p>
<p>I don't use <code>axios</code> (never felt the need to), but you can readily get a <code>data</code> URI for binary data from the server via <code>fetch</code>:</p>
<pre><code>// 1.
const response = await fetch(&quot;/path/to/resource&quot;);
// 2.
if (!response.ok) {
    throw new Error(&quot;HTTP error &quot; + response.status);
}
// 3.
const buffer = await response.arrayBuffer();
// 4.
const byteArray = new Uint8Array(buffer);
// 5.
const charArray = Array.from(byteArray, byte =&gt; String.fromCharCode(byte));
// 6.
const binaryString = charArray.join(&quot;&quot;);
// 7.
const theImage = btoa(binaryString);
</code></pre>
<p>Or more concisely:</p>
<pre><code>const response = await fetch(&quot;/path/to/resource&quot;);
if (!response.ok) {
    throw new Error(&quot;HTTP error &quot; + response.status);
}
const buffer = await response.arrayBuffer();
const binaryString = Array.from(new Uint8Array(buffer), byte =&gt; String.fromCharCode(byte)).join(&quot;&quot;);
const theImage = btoa(binaryString);
</code></pre>
<p>Here's how that works:</p>
<ol>
<li>We request the image data.</li>
<li>We check that the request worked (<code>fetch</code> only rejects its promise on <em>network</em> errors, not HTTP errors; those are reported via the <code>status</code> and <code>ok</code> props.</li>
<li>We read the body of the response into an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer"" rel=""nofollow noreferrer""><code>ArrayBuffer</code></a>; the buffer will have the binary image data.</li>
<li>We want to convert that buffer data into a <a href=""https://developer.mozilla.org/en-US/docs/Web/API/DOMString/Binary"" rel=""nofollow noreferrer""><em>binary string</em></a>. To do that, we need to access the bytes individually, so we create a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array"" rel=""nofollow noreferrer""><code>Uint8Array</code></a> (using that buffer) to access them.</li>
<li>To convert that byte array into a binary string, we need to convert each byte into its equivalent character, and join those together into a string.  Let's do that by using <code>Array.from</code> and in its mapping function (called for each byte), we'll use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode"" rel=""nofollow noreferrer""><code>String.fromCharCode</code></a> to convert the byte to a character. (It's not really much of a conversion. The byte 25 [for instance] becomes the character with character code 25 in the string.)</li>
<li>Now we create the binary string by joining the characters in that array together into one string.</li>
<li>Finally, we convert that string to Base64.</li>
</ol>
<hr />
<p>Looking at the docs, it looks like <code>axios</code> lets you provide the option <code>responseType: &quot;arraybuffer&quot;</code> to get an array buffer. If I'm reading right, you could use <code>axios</code> like this:</p>
<pre><code>const response = await axios.get(&quot;/path/to/resource&quot;, {responseType: &quot;arraybuffer&quot;});
const binaryString = Array.from(new Uint8Array(response.body), v =&gt; String.fromCharCode(v)).join(&quot;&quot;);
const theImage = btoa(binaryString);
</code></pre>
",0
65109857,"<p>To achieve this I would use flex. The closest to what you have would be to make the input div a flex display with flex-direction set to column. Additionally I  used box-sizing: border-box on the floated divs so that their widths are actually 40%. Read more here:</p>
<p><a href=""https://stackoverflow.com/questions/40197341/why-does-my-float-elements-not-working-properly-at-40-60-width-settings"">Why does my float elements not working properly at 40% + 60% width settings?</a></p>
<p>It's not perfect but it's a start:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {
  display: inline;
  font-family: ""Bradley's Hand"", cursive
}

#left {
  float: left;
  width: 40%;
  line-height: 450px;
  box-sizing: border-box;
}

#right {
  float: right;
  width: 40%;
  line-height: 450px;
  box-sizing: border-box;
}

#input {
  display: flex;
  flex-direction: column;
  width: 18%;
  box-sizing: border-box;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=""utf-8""&gt;
  &lt;meta name=""viewport"" content=""width=device-width""&gt;
  &lt;title&gt;repl.it&lt;/title&gt;
  &lt;link href=""html.css"" rel=""stylesheet"" type=""text/css"" /&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;br&gt;
  &lt;div style=""position: relative""&gt;
  &lt;fieldset id=""left""&gt;
    &lt;p id=""output""&gt;TEST&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;fieldset id=""right""&gt;
    &lt;p id=""lesson""&gt;TEST&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;div id=""input""&gt;
    &lt;input type=""button"" id=""doctype"" value=""&lt;!DOCTYPE html&gt;""&gt;
    &lt;input type=""button"" id=""html"" value=""&lt;html&gt;""&gt;
    &lt;input type=""button"" id=""head"" value=""&lt;head&gt;""&gt;
    &lt;input type=""button"" id=""title"" value=""&lt;title&gt;""&gt;
    &lt;input type=""button"" id=""css"" value=""&lt;link rel='stylesheet'&gt;""&gt;
  &lt;/div&gt;
  &lt;/div&gt;
  
  &lt;script src=""html.js""&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
<p>--- EDIT ---</p>
<p>Personally I would use flex both all three columns. It would look like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {
  display: inline;
  font-family: ""Bradley's Hand"", cursive
}

#columns {
  display: flex;
}

#left {
  flex: 1;
  min-width: 40%;
  line-height: 450px;
}

#right {
  flex: 1;
  min-width: 40%;
  line-height: 450px;
}

#input {
  flex: 1;
  flex-direction: column;
  width: 18%;
  box-sizing: border-box;
}

#input input {
flex: 1;
width: 100%;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=""utf-8""&gt;
  &lt;meta name=""viewport"" content=""width=device-width""&gt;
  &lt;title&gt;repl.it&lt;/title&gt;
  &lt;link href=""html.css"" rel=""stylesheet"" type=""text/css"" /&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;br&gt;
  &lt;div id=""columns""&gt;
  &lt;fieldset id=""left""&gt;
    &lt;p id=""output""&gt;TEST&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;div id=""input""&gt;
    &lt;input type=""button"" id=""doctype"" value=""&lt;!DOCTYPE html&gt;""&gt;
    &lt;input type=""button"" id=""html"" value=""&lt;html&gt;""&gt;
    &lt;input type=""button"" id=""head"" value=""&lt;head&gt;""&gt;
    &lt;input type=""button"" id=""title"" value=""&lt;title&gt;""&gt;
    &lt;input type=""button"" id=""css"" value=""&lt;link rel='stylesheet'&gt;""&gt;
  &lt;/div&gt;
  &lt;fieldset id=""right""&gt;
    &lt;p id=""lesson""&gt;TEST&lt;/p&gt;
  &lt;/fieldset&gt;
  &lt;/div&gt;
  &lt;script src=""html.js""&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
<p>This has the advantage of having the middle column always perfectly fill the space between the outer columns</p>
",0
65119973,"<blockquote>
<p>Why does it output differently using employees[0], employees[1],
employees[2], versus employees[i]?</p>
</blockquote>
<p>In this <code>find</code> method (<code>db.employee.find( { 'ssn': employees[i] })</code>), the result is a <strong><em>cursor</em></strong>. Note that a <code>find</code> always returns a cursor and <code>findOne</code> returns a document (or a <code>null</code>, if there is no matching document found). The cursor object can have zero or more documents, depending upon the query filter and the matched documents.</p>
<p>So, in your code if you want to print the result of the output of the query <code>db.employee.find( { 'ssn': employees[i] })</code>, you need to iterate thru the cursor. For example, you can do this in <code>mongo</code> shell:</p>
<pre><code>for (var i = 0; i &lt; employees.length; i++){
    var empCur = db.employee.find({ 'ssn': employees[i] });
    empCur.forEach(printjson);
}
</code></pre>
<p>This will print document(s) from the <code>empCur</code>. Note cursor has many other methods, and you can use any of them as per your use case.</p>
<p>References:</p>
<ul>
<li><a href=""https://docs.mongodb.com/v4.2/reference/method/db.collection.find/index.html#iterate-the-returned-cursor"" rel=""nofollow noreferrer"">Iterate a find() returned
Cursor</a></li>
<li><a href=""https://docs.mongodb.com/v4.2/tutorial/iterate-a-cursor/index.html#manually-iterate-the-cursor"" rel=""nofollow noreferrer"">Manually Iterate the
Cursor</a></li>
</ul>
",0
65142207,"<p>I think your test is actually trying to navigate using window.location</p>
<p>You will need to mock that out before trying the user event</p>
<pre class=""lang-js prettyprint-override""><code>let assignMock = jest.fn();

delete window.location;
window.location = { assign: assignMock };

afterEach(() =&gt; {
  assignMock.mockClear();
});
</code></pre>
",0
65162067,"<p>Somewhere in <code>main.js &gt; router.js &gt; utils.js</code> you are mixing CommonJSModules and ESModules. Something along the lines of <code>CommonJSModule --requires--&gt; ESModule --requires--&gt; AnotherCommonJSModule</code></p>
<p>Edit: This seems to be relevant as well <code>https://stackoverflow.com/questions/42449999/webpack-import-module-exports-in-the-same-module-caused-error</code></p>
<pre><code>module.exports = {
  presets: [
    '@quasar/babel-preset-app'
  ],

  &quot;sourceType&quot;: &quot;unambiguous&quot;
}
</code></pre>
",0
65136880,"<p>Your controller method storeSession should be defined as</p>
<pre class=""lang-php prettyprint-override""><code>class WelcomeController
{
    public function createSession(Request $request)
    {
        return view('welcome');
    }

    public function storeSession(Request $request)
    {
        //$request-&gt;session()-&gt;put('srcode','data.usr_name');

        //Store the usr_name value from data received via (Post) ajax request
        $request-&gt;session()-&gt;put('srcode',$request-&gt;usr_name);
        echo &quot;Session stored.&quot;;
        
        return 1;
    }
}
</code></pre>
<p>Routes:</p>
<pre class=""lang-php prettyprint-override""><code>Route::namespace('App\Http\Controllers')
    -&gt;group(function(){
        //Display the page with script which sends ajax request via Post
        Route::get('/session',[WelcomeController::class, 'createSession'])-&gt;name('session.create');

        //Handle the ajax request and store data in session
        Route::post('/session',[WelcomeController::class, 'storeSession'])-&gt;name('session.store');

    });
</code></pre>
",0
65129589,"<p>It would be better modify form values names and define css classes with exact same names, for example change that</p>
<pre><code>value=&quot;Front Plate&quot;
value=&quot;Standard&quot;
value=&quot;Motor Cycle&quot;
value=&quot;Larger car&quot;
</code></pre>
<p>to this</p>
<pre><code>value=&quot;front&quot;
value=&quot;standard&quot;
value=&quot;motor-cycle&quot;
value=&quot;larger-car&quot;
</code></pre>
<p>in css file define corresponding classes</p>
<pre><code>.front {
    background-color: front plate color;
}  
.standard {
    width: standard plate width;
    height: standard plate height;
}
.motor-cycle {
    width: motorcycle plate width;
    height: motorcycle plate height;
}
.larger-car {
    width: larger-car plate width;
    height: larger-car plate height;
}
</code></pre>
<p>Do the same for text style and border inputs changing their values and defining corresponding classes.</p>
<p>After submitting the form, you can access form variables in my-basket.php and create a plate based on their values.</p>
<pre><code>$plateValue = $_POST['platevalue'];
$regno = $_POST['regno'];
$size = $_POST['platesize'];
$style = $_POST['textstyle'];
$border = $_POST['border'];

if ($plateValue=='front' || $plateValue=='rare') {
    //create front plate div and apply styles based on posted values
    echo '&lt;div class=&quot;' . $plateValue . ' ' . $size '&quot;&gt;
        &lt;div class=&quot;' . $border . '&quot;&gt;
            &lt;h1 class=&quot;' . $style . '&quot;&gt;&lt;' . $regno . '&lt;/h1&gt;
        &lt;/div&gt;
    &lt;/div&gt;';
} else {
    //code for both plates
}
</code></pre>
",0
65136504,"<p>As far as I understand your question, you can run this:</p>
<pre><code>$('.mmobile-floating-apply,.wt-mobile-close')
  .parents('aside.wt-sidebar')
  .toggleClass('show-mobile-filter');
</code></pre>
<p>from any place in your code.</p>
",0
65089769,"<p>I've just added this to your code</p>
<pre><code>    $('tr:last', $('#some_table')).find('td &gt; input').each(function(index, value){
    $(value).val('')
  })
</code></pre>
<p>Take a look at
<a href=""https://jsfiddle.net/ctxmb29q/"" rel=""nofollow noreferrer"">https://jsfiddle.net/ctxmb29q/</a></p>
<p>Is this what you wanted?</p>
",0
65122782,"<p>If you only want to focus it when the component is created you could create a directive for this and attach it to your input. For this particular case which is quite simple, the directive could be the following:</p>
<pre><code>@Directive({
  selector: '[autoFocus]',
})
export class AutoFocusDirective {
  constructor(private el: ElementRef) {}

  public focus(): void {
    (this.el.nativeElement as HTMLInputElement).focus();
  }
}
</code></pre>
<p>If you need to interact with it you could add some public methods (to focus it later etc).</p>
<p>There's no way to never touch the DOM for that kind of thing, but a good way to do so is to abstract the fact that you're manipulating the DOM through a directive.</p>
",0
65161270,"<p>Firstly you should remove the trailing slash in <code>app.use(express.static('images/'));</code> as @ptothep already mentioned.</p>
<p>If you don't indicate a route for static assets they will be accessible from a root URL like this <code>localhost:3000/bike.png</code>.
If you wish to map <code>images</code> folder to <code>/images</code> then indicate this route like this:</p>
<pre class=""lang-js prettyprint-override""><code>app.use('/images', express.static('images'));
</code></pre>
<p>See <a href=""https://expressjs.com/en/starter/static-files.html"" rel=""nofollow noreferrer"">Static files</a></p>
",0
65158617,"<p>Using the spread operator (<a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax</a>) will allow you to take the current and join it with your new data, something like:</p>
<pre class=""lang-js prettyprint-override""><code>
app.patch('/editProfile/:username', (req, res) =&gt; {
    fs.readFile(dataPath, &quot;utf8&quot;, (err, data) =&gt; {
        let parsedData = JSON.parse(data)
        const username = req.params[&quot;username&quot;];
        console.log(data)

        // this will use the current user, and only update those fields 
        // which are sent in the request body. If only one field is sent, 
        // only that field will be updated.
        const updatedUser = {...parsedData[username], ...req.body}         

        // we then set the parsedData to the new patched user.
        parsedData[username] = updatedUser 

        fs.writeFile(dataPath, JSON.stringify(parsedData), () =&gt; {
            res.status(200).send('${username} updated');
        })
    })
})
</code></pre>
",0
65101929,"<p>I do believe you are creating this for learning because, in the real world, there are a lot of security reasons to consider.</p>
<p>But you can create a login form using only HTML and JavaScript</p>
<p>It's kinda difficult to explain, please read the comment in this code below:</p>
<p><strong>NOTE: I've changed some of the <code>class</code>, and <code>id</code> name.</strong></p>
<p>HTML:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;
    &lt;link href=&quot;style.css&quot; rel=&quot;stylesheet&quot; type=&quot;text/css&quot; /&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;div class=&quot;reee&quot;&gt;
      &lt;h1 id = &quot;dad&quot;&gt; Login &lt;/h1&gt;
    &lt;/div&gt;
 
      &lt;div id = &quot;action&quot;&gt; 
        &lt;form&gt;
          &lt;label class =&quot;u&quot; for=&quot;fname&quot;&gt;Username&lt;/label&gt;
          &lt;input type=&quot;text&quot; id=&quot;uname&quot; name=&quot;user&quot; placeholder=&quot;Your username...&quot;&gt;
          &lt;label class = &quot;p&quot; for=&quot;lname&quot;&gt;Password&lt;/label&gt;
          &lt;input type=&quot;text&quot; id=&quot;pass&quot; name=&quot;pass&quot; placeholder=&quot;Your password...&quot;&gt;
          &lt;input type=&quot;submit&quot; value=&quot;Submit&quot; id = &quot;loginto&quot; onclick=&quot;reee()&quot;&gt;
          &lt;p class = &quot;wrong&quot; id = &quot;status&quot;&gt;&lt;/p&gt; 
        &lt;/form&gt;
    &lt;/div&gt;
    
    &lt;script src = &quot;script.js&quot;&gt;&lt;/script&gt; // NOTE: ALways put the javascript file link in the bottom.
  &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>JavaScript:</p>
<pre><code>
var usernames = [ //This is the place to store usernames and passwords. In real world, you have to store it in database. In this case I store it in Javascript Object to improve readability
    {username: 'john', password: '123'},
    {username: 'albert', password: '234'},
    {username: 'tesla', password: '345'},
  ];

function reee() {
  var user = document.getElementById(&quot;uname&quot;).value; //Get user in put from form field
  var pass = document.getElementById(&quot;pass&quot;).value;
  
  for (var i = 0; i &lt; usernames.length; i++){ // Looping. To check every single data in usernames array above
    if(user != usernames[i].username || pass != usernames[i].password) { // Check if input is not equal to the usernames list
      document.getElementById(&quot;status&quot;).innerHTML = &quot;The password or username is incorrect&quot;; //Display wrong message
    } else {
      document.getElementById(&quot;status&quot;).innerHTML = &quot;Welcome &quot; + user; //Display welcome message and username
      break; //To stop checking. Because username has already been found
    }
  }
}

</code></pre>
<p>I hope it will be helpful</p>
<p><strong>EDIT 1</strong>: You can see the live demo <a href=""https://codepen.io/hisamafahri/pen/MWjaKdB"" rel=""nofollow noreferrer"">here</a></p>
<p><strong>EDIT 2</strong>: I've made a silly mistake. If we look at the code below:</p>
<pre><code>/// ORIGINAL
if(user != usernames[i].username &amp;&amp; pass != usernames[i].password) {
</code></pre>
<p>If we use that code we will pass the login page if the username OR the password is correct (not both), because I use the <code>&amp;&amp;</code>.</p>
<p>So, I have to use <code>||</code>, so the code should be:</p>
<pre><code>// EDIT 2
if(user != usernames[i].username || pass != usernames[i].password) {
</code></pre>
<p>Now, the user should input the correct username and password in order to pass the login page.</p>
<p>I think everything should work fine now.</p>
",0
65097409,"<p>You need to change <code>res.sent</code> and <code>res.sentFile</code> to <code>res.send</code> and <code>res.sendFile</code></p>
",0
65115716,"<p>I couldn't test this but it appears you used &quot;this&quot; where you should have used &quot;event&quot;</p>
<p>&quot;this&quot; refers to the window object.</p>
<pre><code>// Close the dropdown menu if the user clicks outside of it
window.onclick = function(event) {
    if (!event.target.matches('.dropbtn')) {
        var dropdowns = document.getElementsByClassName(&quot;dropdown-content&quot;);
        var i;
        for (i = 0; i &lt; dropdowns.length; i++) {
            var openDropdown = dropdowns[i];

            /// here is where the behaviour needs to be added //////////
            if (openDropdown.classList.contains('show') &amp;&amp;
                ($(event.target).hasClass('menubtns'))) {

                openDropdown.classList.remove('show');
                console.log('you have clicked an option');

            } else {
                console.log('not clicked on an option')
                openDropdown.classList.remove('show');
                mainpageaccessibility();

            }
        }
    }
}
</code></pre>
",0
65133894,"<p>Did you pass the error from render? Something along the line of</p>
<pre><code>res.render(&quot;error&quot;, { title: &quot;Error&quot;, error: error.array() })
</code></pre>
",0
65147347,"<p>I think what you are looking for is:</p>
<h3>Method modifying the original array:</h3>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function Rectangle(base, altura) {
  this.base = base;
  this.altura = altura;

  this.area = function() {
    return this.base * this.altura;
  };

  this.perimetre = function() {
    return 2 * (this.base + this.altura);
  };

  this.toString = function() {
    return (
      '(b= ' +
      this.base +
      ', h= ' +
      this.altura +
      ', a = ' +
      this.area() +
      ', p =' +
      this.perimetre() +
      ')'
    );
  };
}

var rectangles = [
  new Rectangle(1, 1),
  new Rectangle(2, 2.05),
  new Rectangle(2, 5),
  new Rectangle(1, 3),
  new Rectangle(4, 4),
  new Rectangle(2, 8)
];
console.log('rectangles (before):');
rectangles.forEach(item =&gt; console.log(item.area()));

Array.prototype.ordenaPerArea = function() {
  return this.sort(function(rectA, rectB) {
    return rectA.area() - rectB.area();
  });
}

rectangles.ordenaPerArea();

console.log('rectangles (after):');
rectangles.forEach(item =&gt; console.log(item.area()));</code></pre>
</div>
</div>
</p>
<h3>Method returning an ordered copy of the original array:</h3>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function Rectangle(base, altura) {
  this.base = base;
  this.altura = altura;

  this.area = function() {
    return this.base * this.altura;
  };

  this.perimetre = function() {
    return 2 * (this.base + this.altura);
  };

  this.toString = function() {
    return (
      '(b= ' +
      this.base +
      ', h= ' +
      this.altura +
      ', a = ' +
      this.area() +
      ', p =' +
      this.perimetre() +
      ')'
    );
  };
}
var rectangles = [
  new Rectangle(1, 1),
  new Rectangle(2, 2.05),
  new Rectangle(2, 5),
  new Rectangle(1, 3),
  new Rectangle(4, 4),
  new Rectangle(2, 8)
];
console.log('rectangles (before):');
rectangles.forEach(item =&gt; console.log(item.area()));

Array.prototype.ordenaPerArea = function() {
  const orderedArray = this.map(item =&gt; item);
  orderedArray.sort(function(rectA, rectB) {
    return rectA.area() - rectB.area();
  });

  return orderedArray;
}

const orderedRectangles = rectangles.ordenaPerArea();


console.log('orderedRectangles:');
orderedRectangles.forEach(item =&gt; console.log(item.area()));
console.log('rectangles (after):');
rectangles.forEach(item =&gt; console.log(item.area()));</code></pre>
</div>
</div>
</p>
",0
65134211,"<p>If I understand correctly, you just want sum to be the sum of the numbers generated in example? No matter how many times example is called.. but you will call it at least twice..</p>
<p>Initialize sum to 0, and add the random number every time you call example..</p>
<p>If you want to know how many random numbers were sued you can add another var, count, init it as 0 as well, and increment it every time example is called..</p>
<pre><code>var sum = 0; // sum of all random numbers created in example

function example() {
    sum += Math.floor(Math.random() * 11) + 2;
}
</code></pre>
",0
65151903,"<p>If you want to get the material without the extra step, you can calculate the product of the two numbers and right after that find the item in your array. Once it's found, you can update the result.</p>
<p>I've created a snippet for you below. I've made a lot of changes:</p>
<ul>
<li>I've separated the HTML and JS parts.</li>
<li>I've wrapped the inputs in a <code>form</code>, and added <a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/label"" rel=""nofollow noreferrer"">labels</a> for the inputs.</li>
<li>I've changed the input type to number (as these fields can only be numbers)</li>
<li>I've renamed the <code>students</code> array to <code>items</code>.</li>
<li>I've changed the <code>name</code> property to <code>size</code> in your and it's no longer a string but a number, so it's easier to work with later. The product of <code>depth</code> and <code>width</code> is a number, so it's easier to compare to another number.</li>
<li>Instead of different button clicks, we're checking the form <a href=""https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/submit_event"" rel=""nofollow noreferrer""><code>submit</code> event</a> by using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener"" rel=""nofollow noreferrer""><code>addEventListener</code></a>. This way, you can hit enter in any field, and submit the form. It's also easier to get the form fields by using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/HTMLFormElement/elements"" rel=""nofollow noreferrer""><code>event.target.elements</code></a>.</li>
<li>I've removed unnecessary functions</li>
<li>I've used <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment"" rel=""nofollow noreferrer"">object destructuring</a>: <code>let { depth, width } = e.target.elements</code>.</li>
<li>I've used <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"" rel=""nofollow noreferrer"">template literals</a> to write the HTML part in JS with variables.</li>
</ul>
<p>You can click on the &quot;Run code Snippet&quot; button below and see the result :)</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// students is renamed to items as I'm sure these were not students
let items = [{
    // size is now a number, so it's easier to work with
    size: 105000,
    material: 'Aluminium',
    color: 'Dark Blue',
    image: 'https://source.unsplash.com/wpOnFM9hjNI/300x300',
  },
  {
    size: 90000,
    material: 'Stainless',
    color: 'Dark Grey',
    image: 'https://source.unsplash.com/LKiB35E8iGA/300x300',
  },
];

// instead of listening to button clicks we listen to form submit
document.querySelector('form').addEventListener('submit', handleSubmit)

function handleSubmit(event) {
  // prevent page reload
  event.preventDefault();
  // get the form elements
  let {
    depth,
    width
  } = event.target.elements;

  // multiply the fields' values
  let product = parseFloat(depth.value) * parseFloat(width.value);
  // get the item by size
  let item = getItem(product);
  // if there is an item found
  let result = item
    ? `&lt;h2&gt;Material: ${item.material}&lt;/h2&gt;
 &lt;p&gt;Color: ${item.color}&lt;/p&gt;
 &lt;img src=""${item.image}"" alt=""""&gt;`
    : `&lt;h2&gt;Oh, noes!&lt;/h2&gt;
 &lt;p&gt;No item found&lt;/p&gt;`;

  // render the result
  document.getElementById('result').innerHTML = result;
}

function getItem(size) {
  for (let i = 0; i &lt; items.length; i++) {
    if (items[i].size === size) {
      return items[i];
    }
  }
  // if we didn't find anything
  return null;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;form&gt;
  &lt;p&gt;FILL IN WIDTH AND DEPTH&lt;/p&gt;
  &lt;label&gt;Width &lt;input type=""number"" name=""width"" required /&gt;&lt;/label&gt;
  &lt;label&gt;Depth &lt;input type=""number"" name=""depth"" required /&gt;&lt;/label&gt;
  &lt;button type=""submit""&gt;Find material&lt;/button&gt;
&lt;/form&gt;
&lt;hr&gt;
&lt;div id=""result""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65132315,"<p>Seems like a range:</p>
<ul>
<li><code>2020120321</code> - December 3rd, 2020 @ 21:00</li>
<li><code>-</code> to</li>
<li><code>20210003220330</code> - Mystery month 3rd, 2021 @ 22:03:30</li>
</ul>
",0
65090778,"<p>First find out the indexes for strings in array, so that you can split array.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const process = (arr) =&gt; {
  const result = [];
  let last = -1;
  for (let i = 0; i &lt;= arr.length; i++) {
    if (typeof arr[i] === ""string"" || !(i in arr)) {
      if (last !== -1) {
        result.push([last, i]);
      }
      last = i;
    }
  }

  return result.map(([start, end]) =&gt; ({
    month: arr[start],
    days: arr.slice(start + 1, end),
  }));
};

const array = [""January"", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, ""February"", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]

console.log(process(array));</code></pre>
</div>
</div>
</p>
",0
65088921,"<p>As far as I know you need to specify <a href=""https://www.npmjs.com/package/nodemon?activeTab=readme#specifying-extension-watch-list"" rel=""nofollow noreferrer"">the extension</a> nodemon should watch, the correct call would be <code>nodemon --watch '*/**.ts' -e ts --exec tsc &amp;&amp; node dist/app.js</code>.</p>
<p>Although you are not going to have the app executed as the first command does not finish, so the <code>node dist/app.js</code> part won't be executed.</p>
<p>I would recommend <a href=""https://www.npmjs.com/package/npm-run-all"" rel=""nofollow noreferrer"">npm-run-all</a> for this setup:</p>
<pre class=""lang-json prettyprint-override""><code>{
  &quot;scripts&quot;: {
    &quot;dev&quot;: &quot;npm-run-all dev:*&quot;,
    &quot;dev:watch&quot;: &quot;nodemon --watch '*/**.ts' -e ts --exec tsc&quot;,
    &quot;dev:run&quot;: &quot;nodemon --watch dist/app.js --exec 'node dist/app.js'&quot;
  }
}
</code></pre>
",0
65137472,"<p>Here's you can solve it using directly a map from the user whishList</p>
<p>for each whish Id you <em>map</em> to the object <em>searching</em> on the park</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/* Function should compare the user's wishlist with the parks */
function getWishlistParksForUser(parks, users, userID) {
  return users[userID].wishlist.map(wishId =&gt; parks.find(p =&gt; p.id == wishId));
}

// The users objects (non-editable)
const users = {
  ""karah.branch3"": {
    visited: [2],
    wishlist: [1, 3],
  },
  ""dwayne.m55"": {
    visited: [2, 3],
    wishlist: [1, 2],
  },
};

// The parks array (non-editable)
const parks = [{
    id: 1,
    name: ""Acadia"",
    areaInSquareKm: 198.6,
    location: {
      state: ""Maine""
    },
  },
  {
    id: 2,
    name: ""Canyonlands"",
    areaInSquareKm: 1366.2,
    location: {
      state: ""Utah""
    },
  },
  {
    id: 3,
    name: ""Zion"",
    areaInSquareKm: 595.9,
    location: {
      state: ""Utah""
    },
  },
];

console.log(getWishlistParksForUser(parks, users, ""dwayne.m55""));</code></pre>
</div>
</div>
</p>
",0
65121205,"<p>Your start is good, you need now to iterate over the array as you said.</p>
<pre><code>let string = Array.from('w3resource');

for (let i = 0; i &lt; string.length; i++) {
    let removeLast = string.pop();
    let insertFirst = string.unshift(removeLast);
    console.log(string);
}

VM355:6 (10) [&quot;e&quot;, &quot;w&quot;, &quot;3&quot;, &quot;r&quot;, &quot;e&quot;, &quot;s&quot;, &quot;o&quot;, &quot;u&quot;, &quot;r&quot;, &quot;c&quot;]
VM355:6 (10) [&quot;c&quot;, &quot;e&quot;, &quot;w&quot;, &quot;3&quot;, &quot;r&quot;, &quot;e&quot;, &quot;s&quot;, &quot;o&quot;, &quot;u&quot;, &quot;r&quot;]
VM355:6 (10) [&quot;r&quot;, &quot;c&quot;, &quot;e&quot;, &quot;w&quot;, &quot;3&quot;, &quot;r&quot;, &quot;e&quot;, &quot;s&quot;, &quot;o&quot;, &quot;u&quot;]
VM355:6 (10) [&quot;u&quot;, &quot;r&quot;, &quot;c&quot;, &quot;e&quot;, &quot;w&quot;, &quot;3&quot;, &quot;r&quot;, &quot;e&quot;, &quot;s&quot;, &quot;o&quot;]
VM355:6 (10) [&quot;o&quot;, &quot;u&quot;, &quot;r&quot;, &quot;c&quot;, &quot;e&quot;, &quot;w&quot;, &quot;3&quot;, &quot;r&quot;, &quot;e&quot;, &quot;s&quot;]
VM355:6 (10) [&quot;s&quot;, &quot;o&quot;, &quot;u&quot;, &quot;r&quot;, &quot;c&quot;, &quot;e&quot;, &quot;w&quot;, &quot;3&quot;, &quot;r&quot;, &quot;e&quot;]
VM355:6 (10) [&quot;e&quot;, &quot;s&quot;, &quot;o&quot;, &quot;u&quot;, &quot;r&quot;, &quot;c&quot;, &quot;e&quot;, &quot;w&quot;, &quot;3&quot;, &quot;r&quot;]
VM355:6 (10) [&quot;r&quot;, &quot;e&quot;, &quot;s&quot;, &quot;o&quot;, &quot;u&quot;, &quot;r&quot;, &quot;c&quot;, &quot;e&quot;, &quot;w&quot;, &quot;3&quot;]
VM355:6 (10) [&quot;3&quot;, &quot;r&quot;, &quot;e&quot;, &quot;s&quot;, &quot;o&quot;, &quot;u&quot;, &quot;r&quot;, &quot;c&quot;, &quot;e&quot;, &quot;w&quot;]
</code></pre>
<p>edit for while loop:</p>
<pre><code>let string = Array.from('w3resource');
let j = 0;
while (j &lt; string.length) {
    let removeLast = string.pop();
    let insertFirst = string.unshift(removeLast);
    console.log(string);
    j++;
}
</code></pre>
<p>later edit:</p>
<p>you can also do this pretty straight forward with  <code>.reverse()</code> from Array. But this wont be incremental so you cannot log line by line. But you could reimplement reveres functionally with <code>.map()</code></p>
<pre><code>Array.from('w3resource').reverse()
(10) [&quot;e&quot;, &quot;c&quot;, &quot;r&quot;, &quot;u&quot;, &quot;o&quot;, &quot;s&quot;, &quot;e&quot;, &quot;r&quot;, &quot;3&quot;, &quot;w&quot;]
</code></pre>
",0
65146169,"<p>You cannot access directly to the title of only one element.
You need to get all the <code>films</code> and then treat it as a regular array. Once you have it you can just <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""nofollow noreferrer"">Array#filter</a> it or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"" rel=""nofollow noreferrer"">Array#find</a></p>
<p>Or, you can design your schema in a different way if you plan it to grow, same way you would do with a database (which actually is ^^)</p>
",0
65093147,"<p>In your SB example, the logic around switching the value of <code>this.isin</code> doesn't get re-triggered after it's been set to <code>true</code>.</p>
<p>A more straightforward solution would be to replace</p>
<pre class=""lang-js prettyprint-override""><code>if (this.total &lt;= sum) {
  this.isin = !this.isin;
}
</code></pre>
<p>with</p>
<pre class=""lang-js prettyprint-override""><code>this.isin = this.total === sum;
</code></pre>
<p>Also, change the <code>[disabled]</code> binding on the Add button to use the returned value from the <code>checkTotal</code> call, and use <code>isin</code> to bind to the Submit button, like this</p>
<pre class=""lang-html prettyprint-override""><code>&lt;button ... [disabled]=&quot;!checkTotal()&quot; &gt;&lt;span class=&quot;fa fa-plus&quot;&gt;&lt;/span&gt;Add&lt;/button&gt;
...
&lt;button type=&quot;submit&quot; ... [disabled]=&quot;!isin&quot;&gt;Submit&lt;/button&gt;

</code></pre>
<p>Working SB link:
<a href=""https://stackblitz.com/edit/angular-ivy-mwywpt?file=src/app/app.component.ts"" rel=""nofollow noreferrer"">https://stackblitz.com/edit/angular-ivy-mwywpt?file=src/app/app.component.ts</a></p>
<p>One more thing to note: <code>checkTotal()</code> doesn't get called when a value is deleted, so you have to change one of the input values to get the value of <code>isin</code> to re-calculate</p>
",0
65151075,"<p>Using syntax like:</p>
<pre><code>var binds = [
        [10, &quot;updated&quot;],
...
</code></pre>
<p>is 'bind by <em>position</em>', not 'bind by <em>number</em>', so the 10 maps to the first bind variable parsed in the statement which happens to be called &quot;:2&quot;.  See the <a href=""https://oracle.github.io/node-oracledb/doc/api.html#-bind-by-position"" rel=""nofollow noreferrer"">doc</a> which says</p>
<blockquote>
<p>The position of the array values corresponds to the position of the SQL bind parameters as they occur in the statement, regardless of their names. This is still true even if the bind parameters are named like :0, :1, etc.</p>
</blockquote>
<p>You can experiment with snippets like this, which will work because the <code>binds</code> variable has the string first:</p>
<pre><code>sql = `select * from dual where 'abc' = :2 and 123 = :1`;
binds = ['abc', 123];
result = await connection.execute(sql, binds);
</code></pre>
<p>If you can't change the data order, then try using bind by name syntax.</p>
<p>There is an example of bind-by-name syntax in <a href=""https://github.com/oracle/node-oracledb/blob/master/examples/em_insert1.js"" rel=""nofollow noreferrer"">em_insert1.js</a>:</p>
<pre><code>const sql = &quot;INSERT INTO no_em_tab values (:a, :b)&quot;;

const binds = [
  { a: 1, b: &quot;Test 1 (One)&quot; },
  { a: 2, b: &quot;Test 2 (Two)&quot; },
  { a: 3, b: &quot;Test 3 (Three)&quot; },
  { a: 4 },
  { a: 5, b: &quot;Test 5 (Five)&quot; }
];

// bindDefs is optional for IN binds but it is generally recommended.
// Without it the data must be scanned to find sizes and types.
const options = {
  autoCommit: true,
  bindDefs: {
    a: { type: oracledb.NUMBER },
    b: { type: oracledb.STRING, maxSize: 15 }
  }
};
</code></pre>
",0
65132747,"<p>You could map the existing array to a function that generates the id from the index in the existing array</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const someArray = [1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0];
const yourArray = someArray.map((el, i) =&gt; Math.floor(i / 4) + 1);

console.log(yourArray);</code></pre>
</div>
</div>
</p>
",0
65154005,"<p>What you want to do is, to use either <code>JWT</code> or <code>Session Cookies</code>.
Algorithm -&gt;</p>
<ol>
<li>User visits the /login page</li>
<li>User enters user id and password</li>
<li>U send a fetch or Axios request to your servers <code>POST API</code> route</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>axios(`/&lt;api_route_here&gt;`,{
     method: &quot;POST&quot;,
     headers: {
        Authorization: `Basic ${btoa(`${username}:${password}`)}`
     }
})
</code></pre>
<p>In the above code, we are encoding the username and password with base64 and then sending them back to the server with the Authorization header. <code>username:password</code></p>
<p>Note: Make sure u are using an HTTPS connection</p>
<ol start=""4"">
<li>In the server u decode the Authorisation value from the header. Then create a hash of the password with username as its salt. Then query your database if the hash matches the user's password's hash.</li>
</ol>
<p>We are hashing here to prevent leaking passwords in case of a database hack.
It is obvious, that you will store the password for the user using the same hashing technique.</p>
<ol start=""5"">
<li><p>If the query is positive then send a 200 response else send a 401.</p>
</li>
<li><p>In the Axios promise resolution check for the headers status code to figure out if the sign-in was successful</p>
</li>
</ol>
<p>To prevent asking the user their password every time. U must use session cookies. i.e in step 4 if the password is correct add a <code>Set-Cookie</code> header property with a session token value. Store that session token to your database. Next time you API is hit, check for the cookie. if the cookie exists then check that session token with your database. otherwise, send a <code>401</code></p>
<p>To prevent route spamming, implement a captcha.</p>
",0
65149121,"<p>The first snippet creates a local variable <code>number</code> as the function parameter which shadows the outer variable of the same name.</p>
<p>Since JavaScript is pass by value the new variable is assigned the value <code>100</code>. Since the variable is scoped to the function <code>change</code> and when you update the assignment, the variable defined in the function scope is updated.</p>
<pre><code>let number = 100
 
function change(number) {
    //This is the variable scoped to the function
    number = number * 10;
}
//This is the variable defined in the global scope
change(number);
 
console.log(number);
</code></pre>
<p>In the second snippet, you are updating the <code>number</code> defined outside the function<code>change</code> directly, hence you see the updated value.</p>
",0
65086426,"<p>You can use <code>(click)</code> inside the html template</p>
<pre><code>&lt;td&gt;
   &lt;div *ngIf=&quot;data === 'RARE' ; else notype&quot; style=&quot;cursor: pointer;&quot;
    (click)=&quot;setQty(list.value)&quot; name=&quot;fieldName&quot; ngDefaultControl&gt;{{ list.value}}&lt;/div&gt;
     &lt;ng-template #notype (click)=&quot;View()&quot;&gt; {{currentvalue}}&lt;/ng-template&gt;
&lt;/td&gt;
</code></pre>
<p>and in the component</p>
<pre><code>setQty(val: number) {
  this.qty = val;
}
</code></pre>
<p>Stackblitz: <a href=""https://stackblitz.com/edit/angular-ivy-gavpqc?file=src/app/app.component.ts"" rel=""nofollow noreferrer"">https://stackblitz.com/edit/angular-ivy-gavpqc?file=src/app/app.component.ts</a></p>
<p>For more details see: <a href=""https://angular.io/guide/event-binding"" rel=""nofollow noreferrer"">https://angular.io/guide/event-binding</a></p>
",0
65097584,"<p>If you look at the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date"" rel=""nofollow noreferrer"">Docs</a></p>
<blockquote>
<p><strong>new Date</strong>(<em>year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]</em>)</p>
</blockquote>
<p>Or from the <a href=""https://www.ecma-international.org/ecma-262/11.0/#sec-date.parse"" rel=""nofollow noreferrer"">ECMAScript Docs</a>:</p>
<blockquote>
<p>If month is present, let <em><code>m</code></em> be ? <code>ToNumber(month)</code>; else let <em><code>m</code></em> be <code>0</code>.</p>
</blockquote>
<p>so the Month should be represented (for hystorical reasons) as an <em><strong>index</strong></em>. Index start at 0, not at 1.
<strong>December 1st</strong>: therefore is <code>new Date(2020, 11, 1)</code> using <code>11</code>, not <code>12</code></p>
<p>Some more info <a href=""https://stackoverflow.com/a/11592084/383904"">here</a></p>
<h2>Durchlauf example:</h2>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const getProgress = (startDate, endDate) =&gt; {
  const total = +endDate - +startDate;
  const elaps = Date.now() - start;
  return Math.round((elaps / total) * 100) + ""%"";
};

const start = new Date(2018, 0, 1);   // START: Jan 1, 2018 
const end = new Date(2025, 11, 31);   // END: Dec 31, 2025
console.log(getProgress(start, end)); // PROGRESS: 36% (at Dec 1, 2020)</code></pre>
</div>
</div>
</p>
",0
65101254,"<p>I was adding the <code>type=&quot;module&quot;</code> on the wrong file. I needed to add the module type on the file that I wanted to use the function in.</p>
",0
65104549,"<p>You need to return any data the template will use from <code>setup</code>.  Use an object whose property names match the template's variable names:</p>
<pre class=""lang-js prettyprint-override""><code>setup() {
  ...
  return {
    users,
    email,
    role
  }
}
</code></pre>
<p>This is equivalent to:</p>
<pre class=""lang-js prettyprint-override""><code>setup() {
  ...
  return {
    users: users,
    email: email,
    role: role
  }
}
</code></pre>
",0
65100027,"<p>The equivalent of your code in Vue 3, Vuex 4, Vue Router 4 would be something like:</p>
<pre class=""lang-js prettyprint-override""><code>import { createApp } from 'vue'
import store from './store'
import router from './router'
import App from './App.vue'

let app;

firebase.auth().onAuthStateChanged(user =&gt; {
  console.log(&quot;user&quot;, user);
  app = createApp(App);
  app.use(store);
  app.use(router);
  app.mount(&quot;#app&quot;);
});
</code></pre>
<p>The store syntax is slightly different in <em>store.js</em>:</p>
<pre class=""lang-js prettyprint-override""><code>import { createStore } from 'vuex'

// now uses `createStore`
export default createStore({ 
  state: {},
  getters: {},
  mutations: {},
  actions: {}
})
</code></pre>
<p>And the router in <em>router.js</em>:</p>
<pre class=""lang-js prettyprint-override""><code>import { createWebHistory, createRouter } from &quot;vue-router&quot;;
import Home from &quot;@/views/Home.vue&quot;;
import About from &quot;@/views/About.vue&quot;;

const routes = [
  {
    path: &quot;/&quot;,
    name: &quot;Home&quot;,
    component: Home,
  },
  {
    path: &quot;/about&quot;,
    name: &quot;About&quot;,
    component: About,
  },
];

const router = createRouter({
  history: createWebHistory(),
  routes,
});

export default router;
</code></pre>
",0
65116026,"<p>I don't know what exactly you meant but it return value into input you haven't closed round func and wrong type on script</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
    &lt;meta charset=""UTF-8""&gt;
    &lt;title&gt;Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;form name=""fv""&gt;
    &lt;table&gt;
        &lt;tr&gt;&lt;td colspan=""3""&gt;&lt;b&gt;Enter Investment Information:&lt;/b&gt;&lt;/td&gt;&lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;1)&lt;/td&gt;
            &lt;td&gt;Amount of the Investment (any currency):&lt;/td&gt;
            &lt;td&gt;
                &lt;input type=""text"" name=""investment"" size=""12""
                       onchange=""calculate();""&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;2)&lt;/td&gt;
            &lt;td&gt;percentage rate of interest:&lt;/td&gt;
            &lt;td&gt;
                &lt;input type=""text"" name=""interest"" size=""12""
                       onchange=""calculate();""&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;3)&lt;/td&gt;
            &lt;td&gt;Monthly Payment Amount:&lt;/td&gt;
            &lt;td&gt;
                &lt;input type=""text"" name=""monthly"" size=""12""
                       onchange=""calculate();""&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;4)&lt;/td&gt;
            &lt;td&gt;Terms:&lt;/td&gt;
            &lt;td&gt;
                &lt;input type=""text"" name=""terms"" size=""12""
                       onchange=""calculate();""&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td colspan=""3""&gt;
                &lt;input type=""button"" value=""Calculate"" onclick=""calculate();""&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td colspan=""3""&gt;
                &lt;b&gt;Investment Information:&lt;/b&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;4)&lt;/td&gt;
            &lt;td&gt;Your Investment will be worth:&lt;/td&gt;
            &lt;td&gt;&lt;input type=""text"" name=""payment"" size=""12""&gt;&lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;
&lt;/form&gt;
&lt;script type=""text/javascript""&gt;
  function calculate() {
      var investment = document.fv.investment.value;
      var interest = document.fv.interest.value / 100 / 12;
      var terms = document.fv.terms.value * 12;

      var x = Math.pow(1 + interest, terms);
      var monthly = (investment * x);
       
      if (!isNaN(monthly) &amp;&amp; (monthly !== Number.POSITIVE_INFINITY) &amp;&amp;
              (monthly !== Number.NEGATIVE_INFINITY)) {
          document.fv.payment.value = round(monthly);
      }
      else {
          document.fv.payment.value = """";
      }
  }

  function round(x) {
      return Math.round(x * 100) / 100;
  }
&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",0
65085677,"<pre><code>var allPromises = [];
for (const element of htmlData) {
  var input = document.getElementById(element);
  if (input.toLowerCase().startsWith('&lt;img')) {
    allPromises.push(html2canvas(input));
  } else {
    allPromises.push(Promise.resolve(input));
  }
}

Promise.all(allPromises).then(response =&gt; {
  response.forEach(input =&gt; {
    if (input instanceof String) {
      doc.setFont(fontName, 'bold');
      var isH3 = input.toLowerCase().startsWith('&lt;h3&gt;');
      writeText(input, isH3 ? h3_fontSize : h5_fontSize, isH3 ? 5 : 3);
    } else {
      imgData = input.toDataURL('image/jpeg', 1.0);
      doc.addImage(imgData, 'PNG', left_edge_distance, position_mm, 100, 100);
    }
  });
  doc.save('download.pdf');
});
</code></pre>
<p>I would modify first block of code to above one and leave the rest as it is. I will explain here what it does:</p>
<ol>
<li>maintain an array of promises.</li>
<li>loop and check if the input is image tag and store the returned promise to the array from html2Canvas()</li>
<li>otherwise just store the resolved promise returning the input to the array for sake of maintaining order.</li>
<li>run Promise.all() and iterate through each responses from the array of promises.</li>
<li>if it is string, then write text otherwise add Image.</li>
<li>finally, save it.</li>
</ol>
",0
65110341,"<p>With the following script I get your images:</p>
<pre class=""lang-js prettyprint-override""><code>import http from &quot;k6/http&quot;;
import { parseHTML } from &quot;k6/html&quot;;

export default function() {
    const res = http.get(&quot;https://top-tuning.ru/&quot;); 
    const doc = parseHTML(res.body); 
    const pageTitle = doc.find('head title').text(); 
    const langAttr = doc.find('html').attr('lang');
    doc.find(&quot;img&quot;).toArray().forEach(function (idx) {
        console.log(idx.attr(&quot;src&quot;));
    });
}
</code></pre>
<p>The import parts that I need to change are:</p>
<ol>
<li>you need protocol (https in this case) to make the request</li>
<li>you need to provide the body not the response object to parseHTML</li>
</ol>
<p>After that - everything worked :)</p>
<p>I hope this helps you, you can also use <code>console.log</code>, <code>Object.keys(object)</code> and <code>JSON.stringify(object)</code> when you don't know what is happening</p>
",0
65096304,"<p>You could define <code>editComponent</code> and <code>render</code> props on the password column definition, likes this:</p>
<pre><code>  const tableColumns = [
   // ..other columns
  {
    title: &quot;Password&quot;,
    field: &quot;password&quot;,
    editComponent: ({ value, onChange }) =&gt; (
      &lt;input
        type=&quot;text&quot;
        value={value || &quot;&quot;}
        onChange={(e) =&gt; onChange(e.target.value)}
      /&gt;
    ),

    render: (rowData) =&gt; (
      &lt;input
        type=&quot;password&quot;
        value={rowData.password}
        readOnly /&gt;
    )
  }
];
</code></pre>
<p>This way the field won't be hidden but the passwords will only be shown during update or creation. Link to working sandbox <a href=""https://codesandbox.io/s/material-table-editable-password-field-8pnny?file=/src/App.js"" rel=""nofollow noreferrer"">here</a>.</p>
<p><img src=""https://i.stack.imgur.com/qxnuB.gif"" alt=""edit_password_field"" /></p>
",0
65150926,"<p>Try something like this:</p>
<pre><code>function scan(freightItems) {
  let contrabandIndexes = [];

  freightItems.forEach((el, idx) =&gt; {
    if (el == 'contraband') {
      contrabandIndexes.push(idx);
    }
  });
  return contrabandIndexes;
}

const indexes = scan(['dog', 'contraband', 'cat', 'zippers', 'contraband']);
console.log('Contraband Indexes: ' + indexes); // should be [1, 4]
</code></pre>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"" rel=""nofollow noreferrer"">indexOf</a> is for searching an array:</p>
<blockquote>
<p>The indexOf() method returns the first index at which a given element
can be found in the array</p>
</blockquote>
<p>but <code>el</code> is an item in the array.</p>
",0
65110313,"<p>use the CSS property <code>object.fit: contain</code> on the image.</p>
<p>The object-fit property allows you to have control on how the image is displayed based on the screen size.</p>
<p>I have checked your link and tested this solution on Chrome and FF:</p>
<pre><code>.FAQ .backgroundClient img{
    width:100%;
    object-fit: contain;
}
</code></pre>
<p>alternatively, you can set the max-width to 100% (meaning the image will not resize over 100%) with <code>height</code> set to <code>auto</code>:</p>
<pre><code>.FAQ .backgroundClient img{
        max-width:100%;
        height: auto;
 }
</code></pre>
<p><a href=""https://i.stack.imgur.com/IezNk.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/IezNk.png"" alt=""enter image description here"" /></a></p>
<p>if this answer helps you solving the issue, <strong>consider</strong> upvoting it or accepting the answer. Thanks.</p>
",0
65101234,"<p>According to their <a href=""http://xregexp.com/api/"" rel=""nofollow noreferrer"">documentation</a> <code>replace</code> supports two match parameters; <code>string</code> and <code>Regexp</code>. That being said it will not parse a string expression, and so would be treated as a literal string replacement. To Use a <code>xregex</code> you would first have to create a expression instance and then use that as an argument.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var s = `joanthan------______++++++ &lt;me&gt; bornss $%^&amp;\` asdfasdf+++áeé´sé´s , н, п, р, с, т, ф, х, ц, ч`;
var match = XRegExp('[^\\p{L}\\p{N}]+', 'g');
var r1 = XRegExp.replace(s, match, ' ');
var r2 = s.replace(/[^a-zA-Z0-9]+/g, ' ');

console.log(r1);
console.log(r2);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://unpkg.com/xregexp/xregexp-all.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
",0
65137462,"<p><code>ajax</code> has <code>await</code> option. You can use it to make the execution wait till the <code>ajax</code> all is done. Make sure you combine it with <code>async</code> which will tell there's an asynchronous step in the function. See below snippet</p>
<pre><code>$(&quot;#apply-job&quot;).click(async function() {
  ......
  await $.ajax({
  ......
});
</code></pre>
<p>Update: to make sure the click is disabled while ajax is working, add a <code>disabled</code> attribute and assign the click only when the attribute is not present. Clear the attribute once process is complete.</p>
<pre><code>$(&quot;#apply-job:not([disabled])&quot;).click(async function() {
  $(&quot;#apply-job&quot;).attr(&quot;disabled&quot;,&quot;disabled&quot;)
  ......
  await $.ajax({
  ......
  $(&quot;#apply-job&quot;).remoeAttr(&quot;disabled&quot;)
});
</code></pre>
",0
65113374,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const start_tds =  document.querySelectorAll(""tr &gt; td:nth-child(2)"");
   const end_tds =  document.querySelectorAll(""tr &gt; td:nth-child(3)"");
   
   const len = Math.min( start_tds.length, end_tds.length );
   const today = new Date();
   


   for( let i = 0; i &lt; len; i++ ) {
       
    start_time = toDate( start_tds[ i ].textContent ) ;
    end_time =   toDate(end_tds[ i ].textContent );

    if ( today &gt; start_time &amp;&amp; today &lt; end_time  ) {
        document.querySelector(""tbody &gt; tr:nth-child("" + ( i + 1 ) + "")"").classList.add(""red"");
    }
    
   }



   function toDate( str ) {
    // 02/12/2020 10:00 AM start_tds[ i ].textContent
    const date_parts = str.split(""/"")
    const d = date_parts[1] + ""/"" + date_parts[0] + ""/"" + date_parts[2];
    return new Date( d );
   }</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.red {
            background-color: red;
        }</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;body&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;&lt;th&gt;Subject&lt;/th&gt;&lt;th&gt;Start Time&lt;/th&gt;&lt;th&gt;End Time&lt;/th&gt;&lt;th&gt;Location&lt;/th&gt;&lt;th&gt;Organizer&lt;/th&gt;&lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;&lt;td&gt;test event 1&lt;/td&gt;&lt;td&gt;02/12/2020 10:00 AM&lt;/td&gt;&lt;td&gt;02/12/2020 06:00 PM&lt;/td&gt;&lt;td&gt;zoom Meeting&lt;/td&gt;&lt;td&gt;me&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;test event 2&lt;/td&gt;&lt;td&gt;02/12/2020 11:30 AM&lt;/td&gt;&lt;td&gt;02/12/2020 09:30 PM&lt;/td&gt;&lt;td&gt;wherever&lt;/td&gt;&lt;td&gt;you&lt;/td&gt;&lt;/tr&gt;
            &lt;tr&gt;&lt;td&gt;test event 3&lt;/td&gt;&lt;td&gt;02/12/2020 12:00 PM&lt;/td&gt;&lt;td&gt;02/12/2020 01:00 PM&lt;/td&gt;&lt;td&gt;zoom Meeting&lt;/td&gt;&lt;td&gt;them&lt;/td&gt;&lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;</code></pre>
</div>
</div>
</p>
",0
65110676,"<p>You can directly use the function.</p>
<pre><code>&lt;el-option
      v-for=&quot;item in orcindex&quot;
      :key=&quot;item.id&quot;
      :label=&quot;item.name + ' - ' + cellValueRenderer(item.value) + '%'&quot;
      :value=&quot;item.id&quot;
    /&gt;
</code></pre>
",0
65097990,"<p>I shoud supose you're using Reactive Forms and that you has some like</p>
<pre><code>myForm=new FormGroup({
  isTest:new FormControl(),
  isFunctional:new FormControl(),
  isTimed:new FormControl()
})
</code></pre>
<p>So, you has</p>
<p><strong>Updated</strong> we need take care with &quot;disabled&quot;, some is disabled if we write [attr.disabled]=&quot;true&quot; or if you write [attr.disabled]=&quot;false&quot;, so we need that if the condition is false the value must be null</p>
<pre><code>[attr.disabled]=&quot;(condition) || null&quot;
</code></pre>
<p>Just corrected</p>
<pre class=""lang-html prettyprint-override""><code>    &lt;form [formGroup]=&quot;myForm&quot;&gt;
          &lt;div class=&quot;checkbox&quot;&gt;
            &lt;label for=&quot;waiting&quot;&gt; waiting &lt;/label&gt;
            &lt;input class=&quot;input-control checkbox-box&quot; formControlName=&quot;isTest&quot; 
              [attr.disabled]=&quot;myForm.get('isTimed').value|| null&quot;
              name=&quot;waiting&quot; id=&quot;waiting&quot;
              type=&quot;checkbox&quot;&gt;
          &lt;/div&gt;
    
          &lt;div class=&quot;checkbox&quot;&gt;
            &lt;label for=&quot;functional&quot;&gt; functional &lt;/label&gt;
            &lt;input class=&quot;input-control checkbox-box&quot; formControlName=&quot;isFunctional&quot; 
              [attr.disabled]=&quot;myForm.get('isTimed').value || null&quot;
              name=&quot;functional&quot; id=&quot;functional&quot;
              type=&quot;checkbox&quot;&gt;
          &lt;/div&gt;
    
          &lt;div class=&quot;checkbox&quot;&gt;
            &lt;label for=&quot;test&quot;&gt; test &lt;/label&gt;
            &lt;input class=&quot;input-control checkbox-box&quot; formControlName=&quot;isTimed&quot; name=&quot;test&quot; 
             [attr.disabled]=&quot;(myForm.get('isTest').value &amp;&amp; myForm.get('isFunctional').value) || null&quot; 
             id=&quot;test&quot; type=&quot;checkbox&quot;&gt;
          &lt;/div&gt;
    
    &lt;/form&gt;
</code></pre>
<p>See that there's no (change) events or code in .ts. This make that if, e.g. you change hte values of the form by code, e.g. using pathValue</p>
<pre><code>myForm.patchValue({isTest:true,isTimed:false})
</code></pre>
<p>The &quot;checkboxs&quot; are enabled acording the new values.</p>
<p><strong>Updated 2</strong> but this not change to true the value, so we need use &quot;change&quot;. But in reactiveForms we can make some better than use change: subscribe to <code>valueChanges</code>of the control. As we don't want take tree subscriptions, we are going to use rxjs <code>combineLastest</code> (*) and write</p>
<pre><code>   combineLatest(
      this.myForm.get(&quot;isTest&quot;).valueChanges.pipe(startWith(this.myForm.value.isTest)),
      this.myForm.get(&quot;isFunctional&quot;).valueChanges.pipe(startWith(this.myForm.value.isFunctional)),
      this.myForm.get(&quot;isTimed&quot;).valueChanges.pipe(startWith(this.myForm.value.isTimed))
    )
      .subscribe(([isTest, isFunctional, isTimed]: [any, any, any]) =&gt; {
        const timedCtr = this.myForm.get(&quot;isTimed&quot;);
        const testCtr = this.myForm.get(&quot;isTest&quot;);
        const functionalCtr = this.myForm.get(&quot;isFunctional&quot;);
        if (isTimed) {
          testCtr.disable({ emitEvent: false });
          functionalCtr.disable({ emitEvent: false });
          testCtr.setValue(false, { emitEvent: false });
          functionalCtr.setValue(false, { emitEvent: false });
        } else {
          testCtr.enable({ emitEvent: false });
          functionalCtr.enable({ emitEvent: false });
        }
        if (isTest &amp;&amp; isFunctional) {
          timedCtr.disable({ emitEvent: false });
           timedCtr.setValue(false, { emitEvent: false });
        } else timedCtr.enable({ emitEvent: false });
      });
  }
</code></pre>
<p>You can see <a href=""https://stackblitz.com/edit/angular-ivy-nem9mw?file=src%2Fapp%2Fapp.component.ts"" rel=""nofollow noreferrer"">in the stackblitz</a> the two ways</p>
<p>(*)<code>combineLastest (observable1,observable2,...).subscribe([response1,response2,..]) </code> make that we has in response1 the response of observable1, in response2 the response of observable2... but we need that all the observables has emitted some value. this is the reason because we need use, startWith</p>
",0
65100676,"<p>I have had a look at some reading on scope and closure in JS and I think I have found a solution to the decomposed problem in my original question.</p>
<p>The answer given by Aber Abou-Rahma does not solve my issue because the variables are reset per function call of <code>executesMoreThanOnce()</code>.</p>
<p>This is not what I was looking for because I only wanted the variables to be initially set in the first instance that the function is called (because in my actual project the <code>executesMoreThanOnce()</code> function essentially represents a click event callback that requires the data to persist when the event is re-triggered).</p>
<p>My solution uses an Immediately-invoked Function Expression (IIFE). to initialise the variables locally within the scope of the IIFE, and release the variables into the global scope in its returned <code>get</code> method:</p>
<p><strong>test.js</strong></p>
<pre><code>const TEST = (function() {
    let booleans = {
        boolOne: false,
        boolTwo: false,
        boolThree: false
    };

    let events = {
        clickEvent:
            function(event) {
                //do stuff
            },
        keyEvent:
            function(event) {
                //do other stuff
            }
    };

    return {
        executesMoreThanOnce: function(booleans, events, index) {
            booleanObject = booleans;
            eventsObject = events;

            if (i == 2) {
                booleanObject.boolTwo = true;
            }
            else if (i == 4) {
                booleanObject.boolOne = true;
                booleanObject.boolTwo = false;
            }

            console.log('booleanObject: ', booleanObject);
        },
        get variables() {
            return {
                booleans,
                events
            }
        }
    };
}());

for (var i=0; i&lt;5; i++) {
    TEST.executesMoreThanOnce(TEST.variables.booleans, TEST.variables.events, i);
}
</code></pre>
<p>You can now see in the console that the <code>TEST.executesMoreThanOnce()</code> function starts using the initial variables defined locally within the <code>TEST</code> IIFE function:</p>
<pre><code>i = 0 | booleanObject:  {boolOne: false, boolTwo: false, boolThree: false}
i = 1 | booleanObject:  {boolOne: false, boolTwo: false, boolThree: false}
i = 2 | booleanObject:  {boolOne: false, boolTwo: true, boolThree: false}
i = 3 | booleanObject:  {boolOne: false, boolTwo: true, boolThree: false}
i = 4 | booleanObject:  {boolOne: true, boolTwo: false, boolThree: false}
</code></pre>
<p>We can also now see that once the i value meets certain conditions in the <code>TEST.executesMoreThanOnce()</code> function, the booleans begin to switch, but more importantly, these changes persist between function calls.</p>
<p>I'm still not sure I understand the abstraction beneath the IIFE fully. but I can clearly see in the code which variables belong to the scope of which functions they are used in (improving readability). This was my goal in the first place.</p>
<p>If anybody would like to correct me on something I have misunderstood you are more than welcome to before I begin trying to implement this into my project.</p>
",0
65156987,"<p>Solved by restarting from the new Svelte v3.0.0 template, upgrading other npm dependencies, adding @rollup/plugin/json and setting resolve.preferBuiltins to false.</p>
<p>rollup.config.js</p>
<pre><code>resolve({
    browser: true,
    dedupe: ['svelte'],
    preferBuiltins: false
}), 
</code></pre>
",0
65138180,"<p>Since <code>query.equalTo</code> is a string value, you can use any <a href=""https://firebase.google.com/docs/reference/security/database#string_methods"" rel=""nofollow noreferrer"">operations that work on a string</a> in security rules.</p>
<p>For example:</p>
<pre><code>query.equalTo.startsWith(auth.uid+'_')
</code></pre>
<p>I'm not entirely sure what <code>ANYDATE</code> is, but that you might be able to capture with a regular expression:</p>
<pre><code>query.equalTo.matches(/_[0-9]+/)
</code></pre>
<p>And if needed you can combine the two conditions with an <code>&amp;&amp;</code>.</p>
",0
65112674,"<p>You can loop through and modify the objects in place:</p>
<pre class=""lang-js prettyprint-override""><code>for (const obj of serviceData) {
    if (obj.note === &quot;Monthly&quot;) {
        obj.usd *= 12;
    }
}
</code></pre>
<p>If you don't want to clobber the original array, you can make a copy by <code>map</code>ping it:</p>
<pre class=""lang-js prettyprint-override""><code>const modifiedData = serviceData.map(obj =&gt; {
    if (obj.note === &quot;Monthly&quot;) {
        return {...obj, note: obj.note * 12};
    }
    return {...obj};
});
</code></pre>
<p>This utilizes <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"" rel=""nofollow noreferrer"">object spread syntax</a>.</p>
",0
65112880,"<p>I'm not sure if this causes the problem, but you have not needed comma after the last element in colModel</p>
<pre><code>{name: 'description', index: 'description', formatter: commonHelper.notNullFormatter}, &lt;==
</code></pre>
<p>Are you sure that messages array has values which are not separated with commas - this may cause the problem</p>
<p>You can
create a temporary element before calling the grid and do</p>
<pre><code>var names_check =  [
    messages['usersandorganizations.loginname'],
    messages['usersandorganizations.name'],
    messages['usersandorganizations.logindate'],
    messages['usersandorganizations.session'],
    messages['usersandorganizations.description']
]

console.log(names_check.length);
</code></pre>
<p>You will see the dimension of the names array.</p>
<p>If you do not want to perform this you can simple replace the colNames array and use the label property in colModel - i.e Remove the colNames and do:</p>
<pre><code>        colModel: [
            {label: messages['usersandorganizations.loginname'], name: 'loginName', index: 'loginName', formatter: commonHelper.notNullFormatter},
            ...
        ],
</code></pre>
<p>Hope you have got the point.</p>
<p>I think if there is a problem with the messages array (as mentioted above) you will have a error too when using the last recommendation.</p>
",0
65146781,"<p>First, you have to make sure to divide the functions according to their usefulness. Second, you should check the javascript guidelines so that you don't make mistakes like comparison.</p>
<pre><code>function render(){
var inputPass= document.getElementById('pass');
var pass=&quot;user&quot;;
if(inputPass.value===&quot;heslo&quot;){
    var encodedString = '[[HTML_BASE64]]';
    document.write(b64DecodeUnicode(encodedString));
}else{
    alert(&quot;wrong pass&quot;);
}
</code></pre>
<p>}</p>
<pre><code>function b64DecodeUnicode(str) {
  return decodeURIComponent(atob(str).split('').map(function(c) {
    return '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2);
  }).join(''));
}

&lt;input type=&quot;password&quot; class=&quot;pass&quot; id=&quot;pass&quot;/&gt;
&lt;button class=&quot;login&quot; onclick=&quot;render()&quot;&gt;Login&lt;/button&gt;
</code></pre>
",0
65123255,"<p>Try this. <code>getAdminHeaders</code> is expecting a return type<code>(HttpHeaders)</code> but in else clause you're not returning anything. That's why you're getting ts error</p>
<pre><code>public getAdminHeaders(): HttpHeaders { // &lt;-- declared return type
  if (localStorage.getItem('access_token')) {
    this._adminHeaders = new HttpHeaders({
      'Authentication': localStorage.getItem('access_token') || 'null'
    });
  } else {
    this._adminHeaders = new HttpHeaders({
      'Accept': 'application/json',
      'Content-Type': 'application/json'
    })
  }
  return this._adminHeaders;
}
</code></pre>
",0
65150609,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>{
  let [x, y] = ""123x456"".split(""x"");
  console.log(+x, +y); // + converts to number
}</code></pre>
</div>
</div>
</p>
",0
65122035,"<p>Simple way to handle step by step.</p>
<pre><code>const getAverage = (reviews) =&gt; {
    let TotalStars = reviews.reduce((prev, curr) =&gt; (curr.stars + prev), 0)
    // TotalStars is 3.6666 
    // below use any one of them averageStars
    // let averageStars = Math.round(TotalStars/reviews.length);  // output 4
    // let averageStars = Math.floor(TotalStars/reviews.length);  // output 3
    let averageStars = Math.floor((TotalStars/reviews.length)*10)/10;// output 3.6
    return averageStars;
};

&lt;div&gt;
    &lt;p className=&quot;totalReviewsTally&quot;&gt;Average: {getAverage(reviews)} {reviews.length}&lt;/p&gt;
&lt;/div&gt;
</code></pre>
",0
65163838,"<p>You are using <code>await</code> inside a callback function that you passed to <code>onAuthStateChanged()</code>, so you will have to declare that <code>async</code> if you want to use <code>await</code> inside it.</p>
<pre><code>firebase.auth().onAuthStateChanged(async (firebaseUser) =&gt; {
</code></pre>
",0
65134370,"<p>There were two problems:</p>
<p>A: <code>i</code> was not defined</p>
<p>B: you weren't calling <code>shiftArray()</code>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let initArray = [];
i=0; // define i
function makeArray() {
  do {
    let val = Math.floor(Math.random() * 9)
    initArray.push(val);
    shiftArray(); //call shiftArray
    console.log(initArray);
    i++;
  }
  while (i &lt; 100) //reduced to prevent computers from screaming
}

function shiftArray() {

if (initArray.length &gt; 5) {
    initArray.shift();
  }
}
makeArray();</code></pre>
</div>
</div>
</p>
",0
65107499,"<p>Just add <code>\n</code> and the unicode <code>•</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var typeString = ['• I\'m Mr. Frits\n• and I love Pakistan...:)'];

var i = 0;
var count = 0
var selectedText = '';
var text = '';
(function type() {
  if (count == typeString.length) {
    count = 0;
  }
  selectedText = typeString[count];
  text = selectedText.slice(0, ++i);
  document.getElementById('typing').innerHTML = text.fontsize(6);
  document.getElementById('typing').style.fontFamily = ""monospace"";
  document.getElementById(""typing"").style.color = ""black"";
  document.getElementById(""typing"").style.fontWeight = ""normal"";

  if (text.length === selectedText.length) {
    count++;
    i = 0;

  }
  setTimeout(type, 300);
}());

function sleep(milliseconds) {
  var start = new Date().getTime();
  for (var i = 0; i &lt; 1e7; i++) {
    if ((new Date().getTime() - start) &gt; milliseconds) {
      break;
    }
  }
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;pre id=""typing"" class=""typing""&gt;&lt;/pre&gt;</code></pre>
</div>
</div>
</p>
",0
65105291,"<p>I don't think it's wise to use <code>reduce</code> here. It degrades readability and can easily be solved with another type of loop like this:</p>
<pre><code>const newArticleList: NewArticle[];
for (const relatedArticle of relatedArticles) {
    const article = await this.getArticle()
    if (article) {
      newArticleList.push({...article, url: relatedArticle.url});
    }
}
return newArticleList;
</code></pre>
<p>If <code>this.getArticle()</code> always returns the same article then it can be solved with:</p>
<pre><code>const article = await this.getArticle();
const newArticleList: NewArticle[] = !article ? [] : relatedArticles.map((relatedArticle: FormattedRelatedArticle) =&gt; ({...article, url: relatedArticle.url}));
</code></pre>
",0
65093382,"<p>what about something like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const steps = {
  one: async () =&gt; {
    await something();
    steps.two();
  }
  
  two: async () =&gt; {
    try {
      const results = await somethingElse();
      steps.three(results);
    } catch(e) {
      // TODO display error message
      steps.one();
    }    
  }
  
  three: async () =&gt; {
    // do whatever
  }
}</code></pre>
</div>
</div>
</p>
<p>Don't know if a structure like that might help you.</p>
",0
65147210,"<p>Try:</p>
<pre><code>cards.map(card =&gt; {
return (
                    &lt;div class=&quot;mdc-layout-grid__cell mdc-layout-grid__cell--span-4-phone mdc-layout-grid__cell--span-3-tablet mdc-layout-grid__cell--span-4-desktop process-card&quot;&gt;
                        &lt;div class=&quot;process-card__number-container&quot;&gt;
                            &lt;div class=&quot;process-card__number-container__circle&quot;&gt;
                                &lt;div class=&quot;process-card__number-container__circle process-card__number-container__circle__number&quot;&gt; {card.Number} &lt;/div&gt;
                            &lt;/div&gt;
                        &lt;/div&gt;
                        &lt;div class=&quot;.tk-typography--title-md process-card__title&quot;&gt; {card.Title} &lt;/div&gt;
                        &lt;div class=&quot;mdc-typography--body preserve-linebreaks process-card__text&quot;&gt; {card.ContentText} &lt;/div&gt;
                        &lt;a class=&quot;mdc-button process-card__link&quot; href={card.Link}&gt; {card.LinkText} &lt;/a&gt;  
                    &lt;/div&gt;
);
                    })
</code></pre>
",0
65154555,"<p>To solve it, choose another function name, such as <code>myTranslate()</code>.</p>
<p>Why you can't use <code>translate()</code>? Because there's already a built-in <code>translate</code> in HTML. See <a href=""https://www.w3schools.com/tags/canvas_translate.asp"" rel=""nofollow noreferrer"">here</a>.</p>
<p>Note: You can choose whatever you want.</p>
<p>JS Code:</p>
<pre><code>function myTranslate() {
  var latinWord = document.getElementById(&quot;latin-word&quot;).value;
  alert(&quot;word that was entered: &quot; + latinWord);
}
</code></pre>
<p>HTML:</p>
<pre><code>&lt;button onclick=&quot;myTranslate()&quot; id=&quot;btn-translate-latin-english&quot;&gt;Translate&lt;/button&gt;
</code></pre>
<p>Let me know if it works.</p>
",0
65144544,"<p>Here is a jquery answer. Let me know if you need additional comments.</p>
<pre><code>&lt;div class=&quot;row&quot;&gt;
    &lt;form&gt;
        &lt;label class=&quot;radio-inline&quot;&gt;
            &lt;input type=&quot;radio&quot; name=&quot;optradio&quot; value=&quot;notspecific&quot; checked&gt;&amp;nbsp;Latest Available Semester
        &lt;/label&gt;

        &lt;label class=&quot;radio-inline&quot;&gt;
            &lt;input type=&quot;radio&quot; name=&quot;optradio&quot; value=&quot;specific&quot;&gt;&amp;nbsp;Specific Semester
        &lt;/label&gt;
        &lt;select id=&quot;dropdown&quot; &gt;
            &lt;option value=&quot;&quot;&gt;--Please choose an option--&lt;/option&gt;
            &lt;option value=&quot;dog&quot;&gt;Dog&lt;/option&gt;
            &lt;option value=&quot;cat&quot;&gt;Cat&lt;/option&gt;
        &lt;/select&gt;
    &lt;/form&gt;
&lt;/div&gt;
&lt;!-- jQuery --&gt;
&lt;script
  src=&quot;http://code.jquery.com/jquery-3.5.1.min.js&quot;
  integrity=&quot;sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=&quot;
  crossorigin=&quot;anonymous&quot;&gt;&lt;/script&gt;
&lt;script&gt;

$(document).ready(function(){
    // hidden at init
    $('#dropdown').hide();
    $('input[type=&quot;radio&quot;]').click(function(){
    // test the value of radio button to decide to show or hide the dropdown
        if ($(this).val() == 'specific') {
            $('#dropdown').show();
        }
        else{
            $('#dropdown').hide();
        };
    });
});

&lt;/script&gt;
</code></pre>
",0
65132611,"<p>You have some some scope issue. One of the main difference between a fat-arrow function and a function declared with the function keyword is that the latter has its own scope, meaning that if you call <code>this</code> inside of it, you are referencing its scope.</p>
<p>In your createUI function, switch your functions to fat-arrow functions and you are all set. Just remember to bind your handle change function in your constructor.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>export class FileUploadComponent extends Component {
  constructor(props) {
    super(props);
    this.state = {
      //Keys: [],
      //values: [],
      modify: { Keys: [""key1"", ""key2"", ""key3""], values: [""""] }
    };

    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleChange = this.handleChange.bind(this);
  }

  createUI() {
    const { modify } = this.state;
    const keys = modify.Keys;
    const values = modify.values;
    
    const val = keys.map((item, i) =&gt; {
      return values.map((el, i) =&gt; {
        return (
          &lt;div key={i}&gt;
            &lt;label&gt;{item}&lt;/label&gt;
            &lt;input
              type=""text""
              onChange={(event) =&gt; this.handleChange(event, i)}
            /&gt;
          &lt;/div&gt;
        );
      });
    });
    return val;
  }

  handleChange(event, i) {
    const { modify } = this.state;
    let values = [...modify.values];
    values[i] = event.target.value;
    this.setState({ values: values });
  }

  handleSubmit(event) {
    alert(""A name was submitted: "" + this.state.values.join("", ""));
    event.preventDefault();
  }

  ModifyList() {
    const { modify } = this.state;
    const keys = modify.Keys;
    const val = keys.map(function (item, i) {
      return (
        &lt;div&gt;
          &lt;label&gt;{item}&lt;/label&gt;
          &lt;input type=""text"" /&gt;
        &lt;/div&gt;
      );
    });
    return val;
  }

  render() {
    return (
      &lt;div&gt;
        &lt;form onSubmit={this.handleSubmit}&gt;
          {/*this.ModifyList()*/}
          {this.createUI()}
          &lt;input type=""submit"" className=""btn btn-primary"" value=""Search !"" /&gt;
          &lt;input type=""submit"" className=""btn btn-primary"" value=""Edit !"" /&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    );
  }
}</code></pre>
</div>
</div>
</p>
",0
65149681,"<p>After a lot of debugging, I discover that the problem was caused by certain functions of the library <a href=""https://www.npmjs.com/package/mdbreact"" rel=""nofollow noreferrer"">mdbreact</a></p>
<pre><code>// package.json

&quot;dependencies&quot;: {
   ...
   &quot;mdbreact&quot;: &quot;git+https://oauth2:YOUR_TOKEN@git.mdbootstrap.com/mdb/react/re-pro.git&quot;
   ...
}
</code></pre>
<p>I have got the pro version of the library, and by default, it updates automatically. I was using the 4.27.0 version and all work just fine, then when they update the library to the new 5.0.0 versión and my app explode.
It was hard to debug because only happened over production side.</p>
<p>I solve this downgrading the library to 4.27.0 version just adding <code>#4.27.0</code> at the end of the dependency</p>
<pre><code>// package.json

&quot;dependencies&quot;: {
   ...
   &quot;mdbreact&quot;: &quot;git+https://oauth2:YOUR_TOKEN@git.mdbootstrap.com/mdb/react/re-pro.git#4.27.0&quot;
   ...
}
</code></pre>
<p>I'm going to keep this version until they commit a fix of these certain functions.
Thanks to <a href=""https://stackoverflow.com/users/3104226/tmhao2005"">@tmhhao2005</a> who gave me guidelines to research. Hope it helps someone else with a similar error!</p>
",0
65135601,"<p>IndexedDB will store <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties"" rel=""nofollow noreferrer"">own enumerable properties</a> and let all prototype based properties be. Class getters and setters are prototype based so IndexedDB will not use them. To workaround this you would need to map the entities through a function when putting them and map them back using another function before returning them.</p>
<p>However, I would argue that the internal properties is normally what you would want to store for the same reason they are stored in memory. In your case, _when contains Date object with zeroed out time. This would easily become another date if time zone changes so it would probably be better to store it as a date string and let that internal format be the format to store in indexedDB as well.</p>
",0
65156098,"<p>Change the normal callback to arrow function like below :-</p>
<pre><code>ngAfterViewInit(): void {
    var textWrapper = document.querySelector('.an-2');
    textWrapper.innerHTML = textWrapper.textContent.replace(/\S/g, &quot;&lt;span class='letter'&gt;$&amp;&lt;/span&gt;&quot;);
    anime.timeline({loop: false})
      .add({
        targets: '.an-2 .letter',
        opacity: [0,1],
        easing: &quot;easeInOutQuad&quot;,
        duration: 2250,
        comp: this,
        delay: (el, i) =&gt; 150 * (i+1),
        complete:(anim) =&gt; {
          console.log('Completed' + anim);
          this.comp.showOptions();
        }
      });
  }

showOptions(){
   console.log('Show options called.');
}
</code></pre>
",0
65142159,"<p>The only fix i found to this was to trigger<code>&lt;select&gt;</code> via jquery <code>change</code> listener programmatically on page load otherwise the <code>var selectedMonth</code> in <code>switch</code> never passed.. as shown in above gif screenshot.</p>
<p>anyways here is the fix.</p>
<pre><code>        $(document).ready(function () {
              .
              .
              .

            $('.New_Plant_Month')
                .trigger('change');

        });
</code></pre>
",0
65133137,"<p>To bind events to dynamically generated elements, you need to do <a href=""https://learn.jquery.com/events/event-delegation/"" rel=""nofollow noreferrer"">event delegation</a> jquery offers.</p>
<pre><code>$('#newsletter').on('click', '#newsletterButtonSubmit', function(){
     var inputVal = $(this).parent('div').find('#newsletterInputEmail').val();
});
</code></pre>
<p>Above assumes that there will be unique id per element. If you're loading it multiple times, there will be multiple elements with the same id. In that case, you should use unique id or a class as done below:</p>
<pre><code>$('#newsletter').on('click', '.newsletterButtonSubmit', function(){
     var inputVal = $(this).parent('div').find('.newsletterInputEmail').val();
});
</code></pre>
<p>Check this snippet:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('#newsletter').on('click', '#newsletterButtonSubmit', function() {
  var inputVal = $(this).parent('div').find('#newsletterInputEmail').val();
  console.log(inputVal);
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div id=""newsletter""&gt;
  &lt;div class=""newsletter""&gt;
    &lt;h6 class=""headerDIV""&gt;SUBSCRIBE TO OUR NEWSLETTER&lt;/h6&gt;
    &lt;input id=""newsletterInputEmail"" class=""input-email"" type=""email"" placeholder=""Enter your email here""&gt;
    &lt;button id=""newsletterButtonSubmit"" width=""100px"" class=""w3-button w3-round-xlarge w3-grey""&gt;Submit&lt;/button&gt;
    &lt;p&gt;&lt;label id=""newsletterEmailMSG"" class=""textFillField""&gt;This field is mandatory&lt;/label&gt;&lt;/p&gt;
    &lt;p&gt;&lt;input id=""newsletterCheckbox"" class=""w3-check"" type=""checkbox""&gt;&lt;label class=""textRights""&gt;I have read and accepted the general terms and conditions*&lt;/label&gt;&lt;/p&gt;
    &lt;p&gt;&lt;label id=""newsletterCheckboxMSG"" class=""textFillField""&gt;This field is mandatory&lt;/label&gt;&lt;/p&gt;
    &lt;label class=""textRights2""&gt;See our &lt;a href=""politics/privacy/politica_de_privacidade_pt.pdf"" target=""_blank"" style=""text-decoration: underline;""&gt;Privacy Notice&lt;/a&gt; for more information.&lt;/label&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",0
65102509,"<p>Just make it work but not sure if that is perfect solution or there might be another good solution available. Looking for suggestion.</p>
<pre><code>var arr = [{Month: &quot;Nov-2020&quot;,Track: &quot;MS&quot;,total: 100},
 {Track: &quot;ZZ&quot;, Month: &quot;Nov-2020&quot;,  total: 80},
 {Track: &quot;ZZ&quot;, Month: &quot;Dec-2020&quot;,  total: 20},
 {Track: &quot;AA&quot;, Month: &quot;Nov-2020&quot;,  total: 30},
 {Track: &quot;AA&quot;, Month: &quot;Dec-2020&quot;,  total: 20},
 {Track: &quot;MS&quot;, Month: &quot;Dec-2020&quot;,  total: 20}]

const result = arr.reduce((r, value, i) =&gt; {
const {Month, Track, total} = value

if(i &gt; 0){
    var found = r.find(x=&gt; x.Track == value.Track)
  if(found){
    const cumVal = found.total
    const newDatum = { total: total + cumVal, Month,  Track}
    r.push(newDatum);
  }else{
    const newDatum = { total: total, Month,  Track}
    r.push(newDatum);
  }
}else{
  const newDatum = { total: total, Month,  Track}
  r.push(newDatum);
}
return r;
}, [])
console.log(results)
</code></pre>
",0
65106788,"<p>Solving this by disabling the CSP rule that bans inline scripts is not a good idea. Inline scripts are a prime vector for XSS attacks.</p>
<p>Instead, remove the inline script and put equivalent  functionality in the <code>.js</code> file itself.</p>
<p>Remove <code>onload=&quot;initialize()&quot;</code> from the HTML.</p>
<p>Add <code>addEventListener(&quot;load&quot;, initialize)</code> to the JS.</p>
",0
65103156,"<p>You can do this to scroll to related div's position:</p>
<pre><code>&lt;div class=&quot;floatfullwidth&quot; id=&quot;up&quot;&gt;&lt;/div&gt;
</code></pre>
<p>in your js:</p>
<pre><code>function openCity(e) {
    var t, n = document.getElementsByClassName(&quot;city&quot;);
    for (t = 0; t &lt; n.length; t++)n[t].style.display = &quot;none&quot;;
    document.getElementById(e).style.display = &quot;block&quot;;
    const div = document.getElementById('up');
    window.scrollTo(0, div.offsetTop);
}
</code></pre>
",0
65091843,"<p>I suspect the problem is that you make a recursive call for each child, but you never check the result of each call.</p>
<p>So in your first code snippet, I would expect to see something like this:</p>
<pre class=""lang-js prettyprint-override""><code>for (var i = 0; i &lt; children.length; i++) {
  title = extractTitleFromNameWrapper(children[i]);

  // If we find a title, stop looking!
  if (title) {
    break;
  }
}
</code></pre>
",0
65121898,"<p>The question for me seems to look for getting an element of a specific point. If so you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/DocumentOrShadowRoot/elementFromPoint"" rel=""nofollow noreferrer""><code>document.elementFromPoint()</code></a>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let x = 10;
let y = 140;

let el = document.elementFromPoint(x, y);
el.style.background = ""red"";
// or $(el).css(""background"", ""red"");</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;ul&gt;
   &lt;li&gt;first list&lt;/li&gt;
   &lt;li&gt;second list&lt;/li&gt;
   &lt;li&gt;third list&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Skills:&lt;/h3&gt;
&lt;p&gt;This are my skills. xyz, abc, pqr&lt;/p&gt;</code></pre>
</div>
</div>
</p>
<p>If you only want to go by the top offset you have to walk through your elements.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/**
 * Get all children that start before `offset_top` and end after 
 * `offset_top`.
 *
 * @param {(HTMLElement|jQuery|string)} parent 
 *    The parent as the element or as the selector
 * @param {number} offset_top
 *    The top offset to check
 *
 * @return {jQuery}
 *    All elements that are on the specific location.
 */
function findChildrenWithOffset(parent, offset_top){
  let found = $([]);
  $(parent).children().each(function(){
    let t = $(this);
    let o = t.offset();
    let start = o[""top""];
    let end = start + t.outerHeight();
    if(start &lt;= offset_top &amp;&amp; offset_top &lt;= end){
      found = found.add(t);
    }
    if(t.children().length &gt; 0){
      t.children().each(function(){
        found = found.add(findChildrenWithOffset(this, offset_top));
      });
    }
  });
  
  return found;
}

let c = findChildrenWithOffset(document, 140);
// get the most inner child only
c = c.last();
$(c).css(""background"", ""red"");</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;ul&gt;
   &lt;li&gt;first list&lt;/li&gt;
   &lt;li&gt;second list&lt;/li&gt;
   &lt;li&gt;third list&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Skills:&lt;/h3&gt;
&lt;p&gt;This are my skills. xyz, abc, pqr&lt;/p&gt;</code></pre>
</div>
</div>
</p>
",0
65151386,"<p>Two things:</p>
<ol>
<li>You are added the new quiz inside <code>rect</code> which is not good. Create a container for all the quiz and add it there</li>
<li>You need to update your <code>questions</code> variables each time you adda a new quiz</li>
</ol>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// JS animation script start here

var question = 0;

var questions = Array.from(document.getElementsByClassName(""quiz"")).reduce((carry, item) =&gt; {
  carry.push(item.textContent.trim())
  return carry;
}, []);

var anim;
var targets;

function prepQuestion() {
  $(""#rect"").text(questions[question]);

  var textWrappers = document.querySelectorAll('#rect');
  textWrappers.forEach(textWrapper =&gt; {
    textWrapper.innerHTML = textWrapper.textContent.replace(/(\S*)/g, m =&gt; {
      return `&lt;span class=""word""&gt;` +
        m.replace(/(-|)?\S(-|@)?/g, ""&lt;span class='letter'&gt;$&amp;&lt;/span&gt;"") +
        `&lt;/span&gt;`;
    });
  });

  targets = Array.from(document.querySelectorAll('#rect .letter'));

  anim = anime.timeline()
    .add({
      targets: targets,
      scale: [3, 1],
      scaleY: [1.5, 1],
      opacity: [0, 1],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 150,
      delay: (el, i) =&gt; 20 * i
    });
}

// init
prepQuestion();

function next() {
  anim = anime.timeline()
    .add({
      targets: targets.reverse(),
      scale: [1, 3],
      scaleY: [1, 1.5],
      opacity: [1, 0],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 50,
      delay: (el, i) =&gt; 10 * i
    });

  anim.complete = () =&gt; {
    if (question == questions.length - 1) {
      question = 0;
    } // reset question
    else {
      question++;
    }

    prepQuestion();
  };
}

function previous() {
  anim = anime.timeline()
    .add({
      targets: targets.reverse(),
      scale: [1, 3],
      scaleY: [1, 1.5],
      opacity: [1, 0],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 50,
      delay: (el, i) =&gt; 10 * i
    });

  anim.complete = () =&gt; {
    if (question == 0) {
      question = questions.length - 1;
    } // reset question
    else {
      question--;
    }

    prepQuestion();
  };
}
// JS animation script end here

// textarea script start here

const sendButton = document.getElementById('send-btn');
const textArea = document.getElementById('input');
const innerDiv = document.getElementById('rect');
const container = document.getElementById('q-container');
var message = textArea.value;

sendButton.addEventListener('click', function() {
  // split the textarea entries into an array
  let lines = (textArea.value).split(""\n"");

  // iterate over each line, creating a div/span and inserting into the DOM
  lines.forEach((line) =&gt; {
    let encodedLine = encodeHtmlEntity(line);
    let newElement = `&lt;div class=""quiz""&gt;${encodedLine}&lt;/div&gt;`;
    container.innerHTML += newElement;
    questions = Array.from(document.getElementsByClassName(""quiz"")).reduce((carry, item) =&gt; {
      carry.push(item.textContent.trim())
      return carry;
    }, []);
  });

  // reset the textarea
  textArea.value = '';

});

function encodeHtmlEntity(input) {
  var output = input.replace(/[\u00A0-\u9999&lt;&gt;\&amp;]/gim, function(i) {
    return '&amp;#' + i.charCodeAt(0) + ';';
  });

  return output;
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>  #rect {
    font-weight: 900;
    font-size: 1.5em;
    font-family: rr;
  }
  
  #rect .letter {
    line-height: 1em;
  }
  
  #quizss {
    display: none;
  }
  
  .word {
    white-space: nowrap;
  }</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""/scripts/snippet-javascript-console.min.js?v=1""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.0/anime.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div id=""q-container""&gt;
&lt;div class=""quiz""&gt;Question-1 : The color of !the sky is...?&lt;/div&gt;
&lt;div class=""quiz""&gt;Question-2 : Paper comes from...?&lt;/div&gt;
&lt;div class=""quiz""&gt;Question-3 : How many hours in a day?&lt;/div&gt;
&lt;div class=""quiz""&gt;Question-4 : A Giraffe is a fish?&lt;/div&gt;
&lt;/div&gt;

&lt;div id=""rect""&gt;&lt;/div&gt;

&lt;br&gt;&lt;br&gt;
&lt;textarea class=""input"" id=""input"" placeholder=""Message...""&gt;&lt;/textarea&gt;
&lt;button class=""waves-effect waves-light"" id=""send-btn""&gt;Send&lt;/button&gt;

&lt;br&gt;&lt;br&gt;
&lt;Button id=""rc"" onclick=""previous()""&gt;previous&lt;/Button&gt;
&lt;Button id=""rc"" onclick=""next()""&gt;Next&lt;/Button&gt;</code></pre>
</div>
</div>
</p>
",0
65150017,"<p>The first if-statement:</p>
<pre><code>if (amount &lt; 0) {
  return caesar(str, amount + 26)
}
</code></pre>
<p>Makes sure that the shifting amount is 0 and above by calling itself until it is. Then the following line loops through all the characters in the entire string.</p>
<pre><code>for (var i = 0; i &lt; str.length; i++) {
</code></pre>
<p>For every character it checks if its a letter using something called a regex (Google for more information)</p>
<pre><code>if (c.match(/[a-z]/i)) {
</code></pre>
<p>The line</p>
<pre><code>var code = str.charCodeAt(i);
</code></pre>
<p>Gets the number representing the character at position &quot;i&quot; in the string. The number is the way the computer represents letters and other characters. Upper- and lowercase characters have two completely different numbers associated with them. That is what the two following if-statements is for. I will explain the one for lowercase letters, you should be able to see how the uppercase one works as well.</p>
<pre><code>c = String.fromCharCode(((code - 65 + amount) % 26) + 65);
</code></pre>
<p>It starts by subtracting 65 from the number. This is because the first lowercase letter &quot;a&quot; has a value of 65. After that it shifts the result by &quot;amount&quot;. The %-sign might seem weird. But all it does is divide the two sides and returning the &quot;rest&quot;, the residual number. For example if we write:</p>
<pre><code>5 % 2
</code></pre>
<p>It is equal to 1. This is done to &quot;loop&quot; the number and keep it between 0 and 26. After that it adds back the 65 and turns the number back to a character. The last line:</p>
<pre><code>output += c;
</code></pre>
<p>Adds the character to the resulting string. Hope this helped you out!</p>
",1
65137983,"<p>my guess is that you should look after the width and border values assigned in .kompetanse textarea class.</p>
",1
65152508,"<p>You need to define special classes to target different stages of the transition, in this case <code>.steps-enter-active</code> (mid-transition state) and <code>.steps-enter-to</code> (end-state).</p>
<p>For it to occur on page-load, you also need to pass the <code>appear</code> attribute.</p>
<hr />
<p>If you want the entire <code>order</code> block to transition you can do so like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>new Vue({
  el: '#app',

  computed: {
    currentStep() {
      return this.steps.filter(s =&gt; s.order === this.activeStep);
    }
  },

  data: () =&gt; {
    return {
      activeStep: 1,
      steps: [{
          order: 1,
          title: ""Title 1?"",
          headline: ""Headline 1"",
          component: ""product-info""
        },
        {
          order: 2,
          title: ""Title 2"",
          headline: ""Headline 2."",
          component: ""product-info""
        },
        {
          order: 3,
          title: ""Title 3"",
          headline: ""Headline 3."",
          component: ""product-info""
        },
        {
          order: 4,
          title: ""Title 4!"",
          headline: ""Headline 4"",
          component: ""product-info""
        }
      ]
    };
  },
});

Vue.config.productionTip = false;
Vue.config.devtools = false;</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.component-wrapper {
  width: 100%;
}

.steps-viewport {
  height: calc(100vh - 10rem);
  /* overflow: hidden */
  display: flex;
  flex-direction: column;
}

.step-wrapper {
  flex: 0 0 calc(100vh - 10rem);
  display: flex;
  justify-content: center;
  flex-direction: column;
}

.steps-enter-active {
  opacity: 0;
  transform: translateY(100%);
  transition: all 0.4s;
}

.steps-enter-to {
  opacity: 1;
  transform: translateY(0);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js""&gt;&lt;/script&gt;

&lt;div id=""app""&gt;
  &lt;transition-group class=""steps-viewport"" name=""steps"" tag=""div"" appear&gt;
    &lt;div v-for=""step in currentStep"" :key=""step.order"" class=""step-wrapper""&gt;
      &lt;h3 class=""is-size-5 mb-6 has-text-grey-light""&gt;
        Passo {{ step.order }}
      &lt;/h3&gt;
      &lt;h1 class=""is-size-3""&gt;{{ step.title }}&lt;/h1&gt;
      &lt;h2 class=""is-size-4 mt-2 has-text-grey""&gt;{{ step.headline }}&lt;/h2&gt;
    &lt;/div&gt;
  &lt;/transition-group&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<hr />
<p>If you want each element within to transition, you can do so like this, adding a <code>transition-delay</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>new Vue({
  el: '#app',

  computed: {
    currentStep() {
      return this.steps.filter(s =&gt; s.order === this.activeStep);
    }
  },

  data: () =&gt; {
    return {
      activeStep: 1,
      steps: [{
          order: 1,
          title: ""Title 1?"",
          headline: ""Headline 1"",
          component: ""product-info""
        },
        {
          order: 2,
          title: ""Title 2"",
          headline: ""Headline 2."",
          component: ""product-info""
        },
        {
          order: 3,
          title: ""Title 3"",
          headline: ""Headline 3."",
          component: ""product-info""
        },
        {
          order: 4,
          title: ""Title 4!"",
          headline: ""Headline 4"",
          component: ""product-info""
        }
      ]
    };
  },
});

Vue.config.productionTip = false;
Vue.config.devtools = false;</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.component-wrapper {
  width: 100%;
}

.steps-viewport {
  height: calc(100vh - 10rem);
  /* overflow: hidden */
  display: flex;
  flex-direction: column;
}

.step-wrapper {
  flex: 0 0 calc(100vh - 10rem);
  display: flex;
  justify-content: center;
  flex-direction: column;
}

.steps-enter-active {
  opacity: 0;
  transform: translateY(100%);
  transition: all 0.4s;
}

.steps-enter-to {
  opacity: 1;
  transform: translateY(0);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js""&gt;&lt;/script&gt;

&lt;div id=""app""&gt;
  &lt;div v-for=""step in currentStep"" :key=""step.order"" class=""step-wrapper""&gt;
    &lt;transition-group class=""steps-viewport"" name=""steps"" tag=""div"" appear&gt;
      &lt;h3 class=""is-size-5 mb-6 has-text-grey-light"" key=""1""&gt;
        Passo {{ step.order }}
      &lt;/h3&gt;
      &lt;h1 class=""is-size-3"" style=""transition-delay: 0.1s"" key=""2""&gt;{{ step.title }}&lt;/h1&gt;
      &lt;h2 class=""is-size-4 mt-2 has-text-grey"" style=""transition-delay: 0.2s"" key=""3""&gt;{{ step.headline }}&lt;/h2&gt;
    &lt;/transition-group&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<hr />
<p>To also transition out, you'll need to use <code>transition</code> instead so you can use <code>mode=&quot;out-in&quot;</code> which allows the element to transition out first, before the next one enters.</p>
<p>You'll also need to target the children of the transitioning element in your CSS with <code>.steps-enter-active &gt; *</code>. Then, just add a <code>.steps-leave-to</code> class which defines the state to leave to:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>new Vue({
  el: '#app',

  computed: {
    currentStep() {
      return this.steps.filter(s =&gt; s.order === this.activeStep);
    }
  },

  methods: {
    nextStep() {
      if (this.activeStep !== this.steps.length) {
        this.activeStep++;
      } else {
        this.activeStep = 1;
      }
    }
  },

  data: () =&gt; {
    return {
      activeStep: 1,
      steps: [{
          order: 1,
          title: ""Title 1?"",
          headline: ""Headline 1"",
          component: ""product-info""
        },
        {
          order: 2,
          title: ""Title 2"",
          headline: ""Headline 2."",
          component: ""product-info""
        },
        {
          order: 3,
          title: ""Title 3"",
          headline: ""Headline 3."",
          component: ""product-info""
        },
        {
          order: 4,
          title: ""Title 4!"",
          headline: ""Headline 4"",
          component: ""product-info""
        }
      ]
    };
  },
});

Vue.config.productionTip = false;
Vue.config.devtools = false;</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.component-wrapper {
  width: 100%;
}

.steps-viewport {
  height: calc(100vh - 10rem);
  /* overflow: hidden */
  display: flex;
  flex-direction: column;
}

.step-wrapper {
  flex: 0 0 calc(100vh - 10rem);
  display: flex;
  justify-content: center;
  flex-direction: column;
}

.step-wrapper,
.step-wrapper&gt;* {
  transition: all 0.4s;
}

.step-wrapper&gt;h1 {
  transition-delay: 0.1s;
}

.step-wrapper&gt;h2 {
  transition-delay: 0.2s;
}

.steps-enter-active&gt;* {
  opacity: 0;
  transform: translateY(100%);
}

.steps-leave-to&gt;* {
  opacity: 0;
  transform: translateY(-100%);
}

.steps-enter-to&gt;* {
  opacity: 1;
  transform: translateY(0);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js""&gt;&lt;/script&gt;

&lt;div id=""app""&gt;
  &lt;transition name=""steps"" mode=""out-in"" duration=""600"" appear&gt;
    &lt;div v-for=""step in currentStep"" :key=""step.order"" class=""step-wrapper""&gt;
      &lt;h3 class=""is-size-5 mb-6 has-text-grey-light""&gt;
        Passo {{ step.order }}
      &lt;/h3&gt;
      &lt;h1 class=""is-size-3""&gt;{{ step.title }}&lt;/h1&gt;
      &lt;h2 class=""is-size-4 mt-2 has-text-grey""&gt;{{ step.headline }}&lt;/h2&gt;
    &lt;/div&gt;
  &lt;/transition&gt;
  &lt;button @click=""nextStep()""&gt;Next&lt;/button&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65136593,"<p><strong>Problem causes:</strong></p>
<p>It must be that port 3000 is not open. You can open port 3000 through commands to set it. (The settings in the firewall also need to be checked)</p>
<p><strong>But I personally think this is not safe.</strong></p>
<p>I recommend using an intranet penetration tool, which is the safest way to access through the generated link, because sometimes the public ip assigned by the operator is not fixed. Here I recommend using <a href=""https://ngrok.com/download"" rel=""nofollow noreferrer""><code>ngrok</code></a> linux version.</p>
<p>You also can refer to my answer in another post.</p>
<p><a href=""https://i.stack.imgur.com/xM68m.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xM68m.png"" alt=""enter image description here"" /></a></p>
<p><a href=""https://stackoverflow.com/questions/65093518/sending-http-request-from-azure-web-app-to-my-machine/65102034#65102034"">sending http request from azure web app to my machine</a></p>
",1
65086176,"<p><code>router.push('/push')</code> behaves similar to window.location. It does not create a  tag, which means if you are concern with SEO, your links will not be detected.</p>
<p><code>&lt;Link&gt;</code> creates a  link which means your links will be detected when crawlers scrape your site. You navigate within javacscript without reloading the page, providing the behavior of a Single Page App.</p>
<p><code>&lt;a&gt;</code> tag without <code>&lt;Link&gt;</code> creates a link which reloads your website entirely to the url. (standard behavior).</p>
<p>You should be using <code>&lt;Link&gt;</code> through out all your hyperlinks, and use router.push for places where you need redirect.</p>
",1
65154532,"<p>You can match the entry file first like using <a href=""https://www.npmjs.com/package/glob"" rel=""nofollow noreferrer"">glob</a> (install it with <code>npm i glob</code>). Then you can change the output dynamically by appending <code>[name]</code> to <code>output.filename</code>. Here's the complete code:</p>
<pre><code>const path = require('path');
const glob = require('glob');

module.exports = {
  entry: Object.fromEntries(glob.sync(path.resolve(__dirname, 'src/js/*.js')).map((v) =&gt; [
    path.basename(v, '.js'), v,
  ])),
  output: {
    filename: '[name].js',
    path: path.resolve(__dirname, 'dist'),
  },
};
</code></pre>
",1
65103644,"<h1>Issue</h1>
<p>It appears you are attempting to dispatch your saga function, <code>createUserRequest</code>.</p>
<pre><code>import { createUserRequest } from '../../redux/saga/createUser';

...

//Add new user 
const add_user = () =&gt; {
  dispatch(createUserRequest({ newuser: newuser }));
}
</code></pre>
<h1>Solution</h1>
<p>You need to create an action that accepts a &quot;new user&quot; payload. Perhaps you meant to use <code>CreateUserRequest</code>.</p>
<pre><code>import { createAction } from &quot;redux-actions&quot;;
import * as actions from &quot;../actionTypes;

export const CreateUserRequest = createAction(actions.CREATE_USER_REQUEST); // &lt;-- ***
export const CreateUserSuccess = createAction(actions.CREATE_USER_SUCCESS);
export const CreateUserError = createAction(actions.CREATE_USER_ERROR);
</code></pre>
<p>So in the <code>createUser</code> component.</p>
<pre><code>import React, { useState } from 'react';
import { useDispatch } from &quot;react-redux&quot;;
import { Container } from '../../components';
import { CreateUserRequest } from '../../redux/actions';

const createUser = () =&gt; {
  const dispatch = useDispatch()
  const [newuser, setNewuser] = useState({
    first_name : '',
    last_name : '',
    email : '',
    phone_number: '',
    status:0
  });

  ...

  //Add new user 
  const add_user = () =&gt; {
    dispatch(CreateUserRequest({ newuser })); // &lt;-- dispatch action payload
  }

  return (
    ...
  )
}
</code></pre>
",1
65097441,"<p>Remember, everything in the Realtime Database are key: value pairs. When a path is defined and you .push in that path, a node with a child key: value pair is created that sits 'under' that path.</p>
<p>If you look at the code, you're actually defining a path to the data with the final last component being <code>date</code></p>
<pre><code>this.db.ref(`organization/${orgId}/visitor-attendance/${date}`).push({[attendeeUid]: true});
                                                         ^^^ path          ^^^ key   ^^^ value
</code></pre>
<p>with the path being</p>
<pre><code>organization
   orgId
      visitor-attendance
         date
           the pushID
               MNSIxm_woAnBAkVQWRV: true
</code></pre>
<p>From the <a href=""https://firebase.google.com/docs/database/web/lists-of-data#reading_and_writing_lists"" rel=""nofollow noreferrer"">Firebase Documentation</a></p>
<blockquote>
<p>The push() method generates a unique key every time a new child is
added to the specified Firebase reference.</p>
</blockquote>
<p>One possible fix is to use .set as shown in the <a href=""https://firebase.google.com/docs/database/web/read-and-write#basic_write"" rel=""nofollow noreferrer"">Guide</a></p>
<blockquote>
<p>For basic write operations, you can use set() to save data to a
specified reference, replacing any existing data at that path.</p>
</blockquote>
<pre><code>firebase.database().ref('users/' + userId).set({
    username: name,
    email: email,
    profile_picture : imageUrl
  });
</code></pre>
",1
65121834,"<blockquote>
<p>I provided the solution, and @JacobSmit explained in the comment section. Now I just organize them into an answer with more details, hope it'd be helpful to latecomer.</p>
</blockquote>
<h3>Solution</h3>
<pre class=""lang-js prettyprint-override""><code>const useSearch = (query: string, sources: string[]) =&gt; {
  // ...
  useEffect(() =&gt; {
    // ...

    // FIX:
    // just apply the spread operator (...) to `sources`
    // to spread its elements into the dependency array of `useEffect`
  }, [query, ...sources]);

  return response;
};
</code></pre>
<h3>Explanation</h3>
<p>The <code>useSearch</code> custom hook passes <code>[query, sources]</code> to the dep array of <code>useEffect</code>, where as <code>sources: string[]</code> is an array itself. That makes the dep array of shape:</p>
<pre><code>[&quot;query&quot;, [&quot;source_1&quot;, &quot;source_2&quot;, ..., &quot;source_n&quot;]]
</code></pre>
<p>See that the second element of dep array is a nested array. However, the way <code>useEffect</code> consumes the dep array, is to apply <code>Object.is</code> equality check to each of it's elements:</p>
<pre><code>// pseudo code
function isDepArrayEqual(prevDepArray: any[], currDepArray: any[]) {
  return prevDepArray.every(
    (prevElement, index) =&gt; Object.is(prevElement, currDepArray[index])
  )
}
</code></pre>
<p>With each re-render, the hook call <code>useSearch(&quot;Donald&quot;, [&quot;bbc-news&quot;])</code> creates a new instance of <code>sources</code> array. That'll fail the <code>Object.is(prevSources, currSources)</code> check, since equality of arrays is compared by their reference, not the value(s) they contain.</p>
<p>With the spread operator <code>[query, ...sources]</code>, you transform the shape of dep array into:</p>
<pre><code>[&quot;query&quot;, &quot;source_1&quot;, &quot;source_2&quot;, ..., &quot;source_n&quot;]
</code></pre>
<p>The key difference is not about <em>copying</em>, but <em>unpacking</em> the <code>sources</code> array.</p>
<p>Now that the nested <code>sources</code> array is unpacked, and each element of dep array is just string. A equality check on strings is compared by their value, not reference, thus <code>useEffect</code> will consider dep array unchanged. Bug fixed.</p>
",1
65152688,"<p>Add a <code>path</code> and a <code>hash</code> property to your <code>to</code> object:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;router-link :to=&quot;{ path: '/careers/job-1', hash: '#apply' }&quot;&gt;test&lt;/router-link&gt;
</code></pre>
<p>And add <code>scrollBehavior</code> to your router definition:</p>
<pre class=""lang-js prettyprint-override""><code>const router = new VueRouter({
  ...
  scrollBehavior (to, from, savedPosition) {
    if (to.hash) {
      return {
        selector: to.hash,
        behavior: 'smooth'
      };
    }
    return { x: 0, y: 0 };  // Go to the top of the page if no hash
  },
  ...
})
</code></pre>
<p>Now it should scroll (smoothly, unless you remove that <code>behavior</code> property) to the anchor defined by the hash</p>
",1
65088711,"<p>It's because you're importing it wrong. If you check the <a href=""https://www.npmjs.com/package/scanner-js"" rel=""nofollow noreferrer"">package on npm</a>, you can see that there is no exported module, so you can't import a single export (<code>import {scanner} from 'scanner-js'</code>) nor you can import the default export (<code>import scanner from 'scanner-js</code>).</p>
<p>You need to import the entire module for side effects only, and it will add a global <code>scanner</code> variable to the <code>window</code> object.</p>
<pre><code>import 'scanner-js';

console.log(typeof scanner);
// =&gt; object

console.log(typeof scanner.scan);
// =&gt; function
</code></pre>
<p>If you're using ESLint, you need to add <code>scanner</code> as a <a href=""https://eslint.org/docs/user-guide/configuring#specifying-globals"" rel=""nofollow noreferrer"">global variable</a>.</p>
<p>CodeSandbox link: <a href=""https://codesandbox.io/s/scanner-js-hcz2j"" rel=""nofollow noreferrer"">https://codesandbox.io/s/scanner-js-hcz2j</a></p>
",1
65086414,"<p>Here's a <a href=""https://codesandbox.io/s/optimistic-snowflake-nomli?file=/src/App.js"" rel=""nofollow noreferrer"">sandbox</a> that should work for the example you gave!</p>
<p>In short, you probably want to use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice"" rel=""nofollow noreferrer""><code>slice</code></a> on your kimariji:</p>
<pre><code>// Slice the first `kimarjiCount` characters of kimarji and make them red
&lt;span color={{ color: &quot;red&quot; }}&gt;{kimarji?.slice(0, kimarjiCount)}&lt;/span&gt;

// Append the rest of the kimarji
&lt;span&gt;{kimarji?.slice(kimarjiCount, kimarji.length)}&lt;/span&gt;
</code></pre>
<p>This uses the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining"" rel=""nofollow noreferrer"">optional chaining</a> operator to ensure that the <code>kimarji</code> variable exists before calling <code>slice</code> on it.</p>
",1
65141288,"<p>Here how you should do considering your case:</p>
<pre><code>#gallery-content-center {
    margin: 0 auto;
    width: 1240px;
    float: none;
}

@media screen and (max-width: 1250px) {
    #gallery-content-center {
        width: 930px;
    }
}

@media screen and (max-width: 960px) {
    #gallery-content-center {
        width: 620px;
    }
}

@media screen and (max-width: 670px) {
    #gallery-content-center {
        width: 310px;
    }
}
</code></pre>
",1
65135051,"<p>You can use an environment variable for this, for example <code>NODE_ENV</code>.</p>
<p><a href=""https://create-react-app.dev/docs/adding-custom-environment-variables/"" rel=""nofollow noreferrer"">https://create-react-app.dev/docs/adding-custom-environment-variables/</a></p>
<p>Personally I use <a href=""https://www.npmjs.com/package/cross-env"" rel=""nofollow noreferrer"">https://www.npmjs.com/package/cross-env</a> so environment variables work the same way on all platforms. Then you can define a start:dev parameter under scripts in your package.json file.</p>
<pre><code>  &quot;scripts&quot;: {
    &quot;start&quot;: &quot;cross-env NODE_ENV=production node index.js&quot;
    &quot;start:dev&quot;: &quot;cross-env NODE_ENV=development node index.js&quot;
  }
</code></pre>
<p>And then conditionally run code with</p>
<pre class=""lang-js prettyprint-override""><code>if (process.env.NODE_ENV === 'development')
</code></pre>
",1
65137567,"<p>I agree with Ivar's suggestion. We need to add polyfill for <code>forEach</code> in IE, then it can work with NodeList and HTMLCollection in IE. Please add the following polyfill:</p>
<pre><code>var ctors = [typeof NodeList !== &quot;undefined&quot; &amp;&amp; NodeList, typeof HTMLCollection !== &quot;undefined&quot; &amp;&amp; HTMLCollection];
for (var n = 0; n &lt; ctors.length; ++n) {
    var ctor = ctors[n];
    if (ctor &amp;&amp; ctor.prototype &amp;&amp; !ctor.prototype.forEach) {
        ctor.prototype.forEach = Array.prototype.forEach;
        if (typeof Symbol !== &quot;undefined&quot; &amp;&amp; Symbol.iterator &amp;&amp; !ctor.prototype[Symbol.iterator]) {
            Object.defineProperty(ctor.prototype, Symbol.iterator, {
                value: Array.prototype[Symbol.itereator],
                writable: true,
                configurable: true
            });
        }
    }
}
</code></pre>
<p>Besides, there's another error in this line in IE:</p>
<pre><code>input.dispatchEvent(new Event('change'));
</code></pre>
<p>You need to use the following codes to use <code>dispatchEvent</code> in IE:</p>
<pre><code>var event = document.createEvent(&quot;Event&quot;);
event.initEvent(&quot;change&quot;, false, true); 
input.dispatchEvent(event);
</code></pre>
",1
65144257,"<p>You can try this.</p>
<pre><code>
export type Config = {};

export interface BaseBO {
    condition?: (config: Config) =&gt; boolean;
}

export interface ContractDetailBO extends BaseBO {
    sections: ContractSectionBO[];
}

export interface ContractSectionBO extends BaseBO {
    items: ContractSectionItemBO[];
}

export interface ContractSectionItemBO extends BaseBO {
    label: string;
}

export type AnyBO = ContractDetailBO | ContractSectionBO | ContractSectionItemBO;

function isContractDetailBO(target: AnyBO): target is ContractDetailBO {
    return (target as ContractDetailBO).sections != null;
}
function isContractSectionBO(target: AnyBO): target is ContractSectionBO {
    return (target as ContractSectionBO).items != null;
}

export function populate&lt;T extends AnyBO&gt;(inputArray: T[], config: Config): T[] {
    const returnItems: T[] = [];
    for (const item of inputArray) {
        // include this item if the condition passes or is not defined
        if (!item.condition || item.condition(config)) {
            const itemToPopulate = { ...item };

            // check type of item so we know the next array to iterate

            if (isContractDetailBO(itemToPopulate)) {
                const nextArray: ContractSectionBO[] = populate(itemToPopulate.sections, config);
                itemToPopulate.sections = nextArray;
            }
            if (isContractSectionBO(itemToPopulate)) {
                const leaves: ContractSectionItemBO[] = populate(itemToPopulate.items, config);
                itemToPopulate.items = leaves;
            }
            returnItems.push(itemToPopulate);
        }
    }
    return returnItems;
}
</code></pre>
",1
65127162,"<p><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName"" rel=""nofollow noreferrer""><code>getElementsByClassName</code></a> accepts a <strong>single</strong> argument, which is a space-delimited list of classes that each element in the result must have. So:</p>
<pre><code>var list = document.getElementsByClassName(X + &quot; class2&quot;);
// −−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−^^^^^^^^^^^^^
</code></pre>
<p>Live Example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function myfunction(X) {
 var list = document.getElementsByClassName(X + "" class2"");
 var listAll = document.getElementsByClassName(""All"");
 
     for(var t=0;t&lt;listAll.length;t++)
    listAll[t].style.display=""none"";
    
     for(var y=0;y&lt;list.length;y++)
    list[y].style.display=""block"";
 
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;button onclick=""myfunction('class1')""&gt;Click to select only class1 X 2&lt;/button&gt;
&lt;button class=""All class1""&gt;Class: 1&lt;/button&gt;
&lt;button class=""All class1 class2""&gt;Class: 1 X 2&lt;/button&gt;
&lt;button class=""All class2""&gt;Class: 2&lt;/button&gt;</code></pre>
</div>
</div>
</p>
<p>Alternatively, you can give any CSS selector (including a compound class selector) to <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll"" rel=""nofollow noreferrer""><code>querySelectorAll</code></a> to get a snapshot <code>NodeList</code> instead of a live <code>HTMLCollection</code>.</p>
",1
65083932,"<p>You can use <code>ch</code> unit. <code>1ch</code> is approximately equal to the width of 1 character. Since you know the length of the input value is going to be 11 characters, you can set the width of it to be <code>11ch</code>.</p>
<p>So when you get the response from the server, you can set the width to be <code>11ch</code>. Although you could make it <code>12ch</code> and make it look a tad bit better (or you could add padding to the input)</p>
<pre><code>#code {
    width: 11ch;
}
</code></pre>
<p>The accepted answer to this <a href=""https://stackoverflow.com/questions/48649169/what-is-difference-between-css-em-and-ch-units"">question</a> gives a great explanation of the difference between <code>ch</code> and <code>em</code>. Something you may want to consider.</p>
",1
65116579,"<p>It returns the prototype object when you call <code>Number.method(...)</code> which would allow you to chain it: <code>Number.method(...).method(...)</code>.</p>
<p>Since your code ignores the return value when you call the <code>method</code> method, changing that return value has no effect.</p>
",1
65139602,"<p>This should help:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let date = new Date();
document.getElementsByClassName('needsclick TextInput__FormStyledTextInput-sc-1o6de9f-0 fsIKy kl-private-reset-css-Xuajs1')[0].value = date.getFullYear() +'/'+ date.getMonth() +'/'+ date.getDate();
document.getElementsByClassName('needsclick TextInput__FormStyledTextInput-sc-1o6de9f-0 fsIKy kl-private-reset-css-Xuajs1')[1].value = date.getFullYear() +'/'+ date.getMonth() +'/'+ date.getDate();</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;
   &lt;div&gt;
      &lt;input type=""text"" name="""" tabindex=""0"" styling=""[object Object]"" 
      placeholder=""YYYY/MM/DD"" aria-label=""date"" aria-invalid=""false"" 
      valid=""1"" class=""needsclick TextInput__FormStyledTextInput-sc-1o6de9f-0 
      fsIKy kl-private-reset-css-Xuajs1""&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
   &lt;div&gt;
      &lt;input type=""text"" name="""" tabindex=""0"" styling=""[object Object]"" 
      placeholder=""YYYY/MM/DD"" aria-label=""date"" aria-invalid=""false"" 
      valid=""1"" class=""needsclick TextInput__FormStyledTextInput-sc-1o6de9f-0 
      fsIKy kl-private-reset-css-Xuajs1""&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65138927,"<p>as you see ,there're actually two level of functions in the case,the original style of handler function omit {}, so you don't have a place to define a self(reference to this) in the outer function.</p>
<p>in vue component , this in the outer one will point to the component,so we declare self here, then we use self as a closure variance in the inner one.</p>
<p>i guess this will do your trick, try it ,please.</p>
<pre><code>export default {
  name: 'CustomHandlers',
  methods: {
    // handlers: (map, vm) =&gt; {
    // if it is arrow function,it can't do the trick 
    // thanks to  Yair Cohen
       handlers(map, vm) {
        const self = this;
        return {
          ...map, 50: e =&gt; {
            e.preventDefault();
            if( e.key === '@' &amp;&amp; vm.search.length &gt; 0 ) {
              vm.search = `${vm.search}@gmail.com`;
              // self will be this here
              const self2 = self;
            }
          },
        };
    },
  },
};
</code></pre>
<p>update: code changed ,outer function from arrow function to normall function,</p>
",1
65138853,"<p>I think you're trying to pass an object as an argument into an inline JavaScript function call. I highly recommend trying something else because there's almost certainly a better way but if you want to try it, you can encode the object as a JSON string before you combine it into the html code.</p>
<pre class=""lang-js prettyprint-override""><code>function navbar(id,CSVdata) {
        if(CSVdata){
           console.log('CSVdata',CSVdata)
           return `&lt;div class=&quot;dropdown-menu&quot; aria-labelledby=&quot;dropdownMenuButton&quot;&gt;
                    &lt;a id=&quot;downloadcsv${id}&quot; class=&quot;dropdown-item&quot; href=&quot;#&quot; onclick='downloadCSV(${id},${JSON.stringify(CSVdata)})'&gt;Download CSV&lt;/a&gt;
                   &lt;/div&gt;
            `;
        }
 }

function downloadCSV(id,data) {
    console.log(&quot;downloadcsv&quot;,data);
}
</code></pre>
",1
65105887,"<p><code>v-for</code> is used to loop through a set of data, which isn't what you want.  Assuming <code>id</code> is the identifier from your <code>json</code>, try this:</p>
<pre class=""lang-html prettyprint-override""><code>b-modal(hide-footer=&quot;&quot;, :id=&quot;id&quot;)
      template(#modal-title=&quot;&quot;)
        | Information
      .d-block.text-center
        p() {{ offers[id].jobDescription }}
        b-button(variant=&quot;primary&quot;) Apply
</code></pre>
<p>You could put this in a computed instead if you're storing the selected <code>id</code> as a data variable:</p>
<pre class=""lang-js prettyprint-override""><code>computed: {
  selected() {
    return this.offers[this.id].jobDescription;
  }
}
</code></pre>
<p>(Edit:  didn't realize you posted your json, my previous answer was for an array)</p>
",1
65150896,"<p>Your <code>return</code> is inside an arrow function inside a promise chain inside the <code>redirecTrace</code> function. So it is returning the value from the inner arrow function, but that does not apply to the outer function. What you want is to also return the promise (put <code>return</code> before the <code>fetch()</code> call). Then you can do this:</p>
<pre class=""lang-js prettyprint-override""><code>redirecTrace(url).then(returnValue =&gt; {
  // Do something with the returned value
});
</code></pre>
",1
65101144,"<p>if you change your phones array for <code>&quot;phones&quot;: ['32323223232','4343434343434','54545454545454']</code> and change in your template <code>&lt;p v-for=&quot;(phone, key) in item.phones&quot; :key=&quot;key&quot;&gt;{{ phone }}&lt;/p&gt;</code> it should work.</p>
",1
65115879,"<p>I am not sure what you're trying to do in click event. As far as I understood, it will subtract the first cell value from the value in clicked td and show the result. <br/>You have jQuery code in your loop, so my solution is based on jQuery. You can target the element within parent easily and update the content.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;html&gt;

&lt;head&gt;
  &lt;link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/3.4.1/css/bootstrap.min.css""&gt;

  &lt;style&gt;
    td {
      cursor: pointer;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;table id=""myTable""&gt;
    &lt;tr&gt;
      &lt;th&gt;Head Row&lt;/th&gt;
      &lt;th&gt;One&lt;/th&gt;
      &lt;th&gt;Two&lt;/th&gt;
      &lt;th&gt;Three&lt;/th&gt;
      &lt;th&gt;Four&lt;/th&gt;
      &lt;th&gt;Five&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Title 1&lt;/th&gt;
      &lt;td&gt;10&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;9&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;5&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;3&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;1&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;Title 2&lt;/th&gt;
      &lt;td&gt;25&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;19&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;16&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;15&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;10&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
      &lt;td&gt;2&lt;span class=""spanClass""&gt;&lt;/span&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/table&gt;


  &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js""&gt;&lt;/script&gt;
  &lt;script&gt;
    window.onload = function() {
      $('#myTable tr td:not(:nth-child(2))').on('click', function() {
        // clear all span
        $('.spanClass').html('');

        // $(this) is your clicked td
        var $tr = $(this).parent('tr');
        var firstCell = $tr.find(""td:first"").text();
        var didIt = (this.innerText - firstCell);

        $(this).find('.spanClass').html(didIt);
      });
    }
  &lt;/script&gt;

&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",1
65118554,"<pre class=""lang-js prettyprint-override""><code>  &lt;TouchableHighlight style={{backgroundColor: 'yellow'}}
   onPress={()=&gt; {alert('You tapped the button!')}}&gt;
  &lt;Text style={{color: '#000', textAlign: &quot;center&quot;, fontSize: 40}}&gt;Test Touch&lt;/Text&gt;
  &lt;/TouchableHighlight&gt;
</code></pre>
<p>I just tried this one myself and it works. I didn't see a difference with your code, so I copied yours, tried and it worked. Are you sure you didn't mess up the CSS style making it unreachable?</p>
<p>I would isolate the button in some screen and try it alone.</p>
",1
65161463,"<p>The part you've probably misunderstood is the precedence of these operators. Your code actually boils down to:</p>
<pre class=""lang-js prettyprint-override""><code>!(
  //            vvvvvvv--- `== null`: either null or undefined
  (fullResponse == null) ? undefined
  :(fullResponse.response == null) ? undefined
  :fullResponse.response.is_complete
)
</code></pre>
<p>So, when either part of your lookup short-circuits with an <code>undefined</code>, it runs right into the negation and gets converted to <code>true</code>.</p>
<p>If you just want to return <code>false</code> in case of a short-circuit, then it's as easy as:</p>
<pre class=""lang-js prettyprint-override""><code>//                                       vvvv--- this will turn into false
!(fullResponse?.response?.is_complete ?? true)
</code></pre>
<p>However, if you want <code>undefined</code> in this case, it's easier with a variable:</p>
<pre class=""lang-js prettyprint-override""><code>const isComplete = fullResponse?.response?.is_complete
isComplete === undefined ? undefined : !isComplete
</code></pre>
<p>If you can't do that, you'll have to repeat the lookup:</p>
<pre class=""lang-js prettyprint-override""><code>fullResponse?.response?.is_complete === undefined ? undefined : !fullResponse?.response?.is_complete
</code></pre>
",1
65121451,"<p><strong>Problem:</strong> You were getting all <code>tr</code> (rows) by <code>tr.head</code>( by their head class) but when you filtering it you were replacing <code>head</code> class to show and hidden that's way second time javascript didn't find any row have class <code>head</code> , So to fix this get all rows inside <code>tbody</code> by <code>tbody &gt; tr</code>. <br>
Example Below:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>highlightRows = () =&gt; {
    let oddRows = document.querySelectorAll('tbody &gt; tr.show')
    oddRows.forEach((row, index)=&gt; {
        if (index % 2 == 0) {
            row.style.background = '#f1f1f1'
        } else {
            row.style.background = '#fff'
        }
    })
}
const filterOptions = () =&gt; {
    const option = document.querySelector(""#filter"").value;

    const selection = option.replace('&amp;', '')
       
    var rows = document.querySelectorAll(""#body1 &gt; tr"");
   

    rows.forEach(row =&gt; {
        let td = row.querySelector(""td:last-child"");
        let filter = td.innerText.replace('&amp;', '');
        if (filter === selection) {
            row.className = 'show'
        } else {
            row.className = 'hidden'
        }
    });
    highlightRows()
};
document.getElementById(""filter"").addEventListener(""change"", filterOptions);</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.table-filters {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 2em;
}
.table-filters a {
  color: #222;
  font-size: 16px;
  font-weight: 500;
  margin-right: 1em;
  display: inline-block;
}
.table-filters a:hover {
  text-decoration: none;
}
.table-filters select {
  background: #fff;

  font-size: 16px;
  font-weight: 500;
  width: 12em;
  height: 2.5em;
}

table.stats {
  background: #fff;
  width: 100%;
  table-layout: fixed;
  border-radius: 6px;
}

thead {
  background: #F36F20;
  color: #fff;
}

th {
  font-size: 16px;
  font-weight: 500;
  text-align: left;
  padding: 1em;
  border-bottom: 1px solid #ddd;
}

tbody td {
  padding: 1.5em 1em;
}

tbody tr.show {
  display: table-row;
}
tbody tr.hidden {
  display: none;
}
tbody tr.bg-grey, tbody tr:nth-child(odd) {
  background: #f1f1f1;
}
tbody tr:last-child td {
  border-bottom: none;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""table-filters""&gt;
    &lt;select id=""filter""&gt;
      &lt;option disabled selected value=""none""&gt;Kategórie&lt;/option&gt;
      &lt;option&gt;Domov&lt;/option&gt;
      &lt;option&gt;Ostatné&lt;/option&gt;
      &lt;option&gt;Hobby&lt;/option&gt;
      &lt;option&gt;Záhrada&lt;/option&gt;
    &lt;/select&gt;
  &lt;/div&gt;
    &lt;div class=""wrapper""&gt;
  
      &lt;table class=""stats""&gt;
        &lt;thead&gt;
          &lt;tr class=""head""&gt;
            &lt;th&gt;Názov&lt;/th&gt;
            &lt;th&gt;Suma&lt;/th&gt;
            &lt;th&gt;Kategória&lt;/th&gt;
          &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody id='body1'&gt;
          &lt;tr class=""head""&gt;
            &lt;td&gt;Lorem&lt;/td&gt;
            &lt;td&gt;Ipsum&lt;/td&gt;
            &lt;td&gt;Ostatné&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr class=""head""&gt;
            &lt;td&gt;Lorem&lt;/td&gt;
            &lt;td&gt;Ipsum&lt;/td&gt;
            &lt;td&gt;Ostatné&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr class=""head""&gt;
            &lt;td&gt;Lorem&lt;/td&gt;
            &lt;td&gt;Ipsum&lt;/td&gt;
            &lt;td&gt;Domov&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr class=""head""&gt;
            &lt;td&gt;Lorem&lt;/td&gt;
            &lt;td&gt;Ipsum&lt;/td&gt;
            &lt;td&gt;Ostatné&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr class=""head""&gt;
            &lt;td&gt;Lorem&lt;/td&gt;
            &lt;td&gt;Ipsum&lt;/td&gt;
            &lt;td&gt;Hobby&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr class=""head""&gt;
            &lt;td&gt;Lorem&lt;/td&gt;
            &lt;td&gt;Ipsum&lt;/td&gt;
            &lt;td&gt;Hobby&lt;/td&gt;
          &lt;/tr&gt;
          &lt;tr class=""head""&gt;
            &lt;td&gt;Lorem&lt;/td&gt;
            &lt;td&gt;Ipsum&lt;/td&gt;
            &lt;td&gt;Domov&lt;/td&gt;
          &lt;/tr&gt;

        &lt;/tbody&gt;
      &lt;/table&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65096347,"<p>You can just make up 3 columns and have those cards piled up on each column, instead of putting each card on its own column:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;div class=&quot;row&quot;&gt;
    &lt;div class=&quot;col-12 col-md-4&quot;&gt;
        &lt;div class=&quot;card&quot;&gt;#1&lt;/div&gt;
        &lt;div class=&quot;card&quot;&gt;#4&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-4&quot;&gt;
        &lt;div class=&quot;card&quot;&gt;#2&lt;/div&gt;
        &lt;div class=&quot;card&quot;&gt;#5&lt;/div&gt;
    &lt;/div&gt;
    &lt;div class=&quot;col-12 col-md-4&quot;&gt;
        &lt;div class=&quot;card&quot;&gt;#3&lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p><a href=""https://i.stack.imgur.com/jIU6X.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jIU6X.png"" alt=""enter image description here"" /></a></p>
<p><strong>demo:</strong> <a href=""https://jsfiddle.net/davidliang2008/w3t2qvzs/4/"" rel=""nofollow noreferrer"">https://jsfiddle.net/davidliang2008/w3t2qvzs/4/</a></p>
",1
65116056,"<p>Here is what I would suggest to do in order to make stuff work:</p>
<ol>
<li>you do not need &quot;dynamic&quot; name for the file with your api calls handlers (instead of <code>/api/user/[id].js</code> you can create <code>/api/user.js</code>);</li>
<li>you need specify a page (file) for user details view. It should be created in <code>/pages/user/[id].js</code> and paste <code>getStaticProps</code> function there. Now once you change url in browser to <code>http://localhost:3000/user/whatever</code> <code>getStaticProps</code> will be called with ({ params: {id: 'whatever'}})</li>
</ol>
<p><code>getStaticProps</code> - gets <code>context</code> argument which consists of several properties. All the dynamic URL parts will be stored under <code>params</code> property, taking into account above part this should work:</p>
<pre><code>export async getStaticProps({ params }){
    const user = await user(params.id);
    return { props: { user } }
}
</code></pre>
<p>If you need some additional explanation you are welcome to ask</p>
",1
65104653,"<p>You can do something using <code>.nextAll()</code>:</p>
<pre><code>$(document).on('change', '.select_tags select', function() {
  $(this).nextAll(&quot;select&quot;).remove();
});
</code></pre>
<p>Snippet here:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(function () {
  $(document).on('change', '.select_tags select', function () {
    console.log([...$(this).nextAll(""select"").map(function () {
      return $(this).val();
    })]);
    $(this).nextAll(""select"").remove();
  });
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""select_tags""&gt;
  &lt;select&gt;
    &lt;option&gt;val1&lt;/option&gt;
    &lt;option&gt;val2&lt;/option&gt;
  &lt;/select&gt;
  &lt;select&gt;
    &lt;option&gt;val11&lt;/option&gt;
    &lt;option&gt;val12&lt;/option&gt;
  &lt;/select&gt;
  &lt;select&gt;
    &lt;option&gt;val21&lt;/option&gt;
    &lt;option&gt;val22&lt;/option&gt;
  &lt;/select&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65086865,"<p>Sounds like the API is not designed to be called from the front-end.
You may need to implement a back-end layer that calls the API instead.
Using the connection string directly from the front-end seems a little dangerous to me as well, as anyone visiting page can see it and access all data in the IoT Hub.</p>
",1
65112316,"<p>You first start the loop for the files. Then per file, loop the urls and run:</p>
<pre><code>var result = mdFileContents.replaceAll( url, '[X]' );
</code></pre>
<p>So per url, you re-read the file contents (which is still as is, unmodified) and you replace the matching url with <code>[X]</code></p>
<p>Now when you run <code>console.log(result);</code> you will see a single replacement only as you are re-reading the file contents every time.</p>
<p>You could read the contents per file in for exampele <code>mdFileContents</code>, and then do the replacements for all the urls reusing <code>mdFileContents</code> until all replacements are done.</p>
<p><strong>Note</strong> That your urls contain a dot. When you pass the string to the RegExp constructor, you have to double escape the dot <code>\\.</code> to match it literally or else the dot will match any character except a newline.</p>
<pre><code>let mdFileContents = fs.readFileSync( md, 'utf8' );

for( const url of urls ) {
    mdFileContents = mdFileContents.replace( new RegExp( url, &quot;g&quot; ), &quot;[X]&quot; );
}
console.log(mdFileContents);
</code></pre>
",1
65162325,"<p>You can take a look at the <a href=""https://stackoverflow.com/questions/17237935/jquery-execute-scripts-based-on-screen-size"">answer on this similar question</a></p>
<p>If you're using <code>JSX</code> the usage should be wrapped into <code>{}</code> for example:</p>
<pre class=""lang-js prettyprint-override""><code>render() {
    return (
        // ...
        // In my knowledge JS event listeners are more taxing on the performance
        {
            if($(window).width() &gt;= 1024){
                return &lt;div className=&quot;bigger-than-1024&quot;&gt; RENDERED CONDITIONALLY &lt;/div&gt;
            }
        }
    );
}
</code></pre>
<p>The better way to do this might be to still render it and then use CSS classes and media queries to not display it:</p>
<pre class=""lang-css prettyprint-override""><code>@media only screen and (min-width: 1023px) {
    .bigger-than-1024 {
        display: none;
    }
}
</code></pre>
",1
65093409,"<p>I think the problem is with your render method.</p>
<pre><code> {this.props.tracks.map((track) =&gt; {
      return &lt;Track track={track} key={track.id} /&gt;;
    })}
</code></pre>
<p>Instead of the above code your code should look like this,</p>
<pre><code>{this.props.tracks &amp;&amp; this.props.tracks.length &gt; 0 &amp;&amp; this.props.tracks.map((track) =&gt; {
          return &lt;Track track={track} key={track.id} /&gt;;
        })}
</code></pre>
",1
65117139,"<p>You can use a computed property name.</p>
<pre><code>var attributes = {
  [dynAtt1] : { title: dynAtt1 }
}
</code></pre>
",1
65131508,"<p>You should be using Text for displaying your text components, or else you can create two different components named Name and Id ( not at all required in this use case) to display the items</p>
<pre class=""lang-js prettyprint-override""><code>
import React from 'react';
import {View, StyleSheet,Text} from 'react-native';

export default function Campaign({ data }) {
  return( 
    &lt;View&gt; 
      &lt;Text&gt;{data.name}&lt;/Text&gt; 
      &lt;Text&gt;{data.id}&lt;/Text&gt; 
    &lt;/View&gt; 
  ); 
} 

const styles = StyleSheet.create({ 
  name: { fontSize: 50, color: 'black' }, 
  id: { fontSize: 10, color: 'grey' },
});


</code></pre>
<p>In the original question, you were trying to use undefined components <code>Name</code> and <code>Id</code>.</p>
",1
65116922,"<p>Thy this, you need to call setCompany({ data }) inside of then because it's promise</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function App() {
  const [company, setCompany] = useState([]);
  const [price, setPrice] = useState([]);
  const [symbol, setSymbol] = useState([]);

  function fetchCompanyProfile(e) {
    let company = '';
    if(e.target.target.ticker.value){
      company = e.target.ticker.value
    } else {
      company = e.target.innerHTML;
    }
    console.log(company);
    e.preventDefault();
    e.target.reset();
    fetch('https://someapicompany.com/profile/${company}?apikey=xyz')
      .then(res =&gt; res.json())
      .then(data =&gt; {
        setCompany({ data })
      });

  }

  console.log(company.data)

  return (
    &lt;div className=""App""&gt;
      &lt;SearchTicker/&gt;
      &lt;SearchCompanyProfile getCompanyProfile={fetchCompanyProfile}/&gt;
      &lt;TickerResults ticker={symbol} getTicker={fetchCompanyProfile}/&gt;
      &lt;CompanyProfile company={company}/&gt;
    &lt;/div&gt;
  );
}</code></pre>
</div>
</div>
</p>
",1
65126233,"<p>you can take the value after the decimal point and multiplay that by 60</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function roundDown(floating) {
    var rounded = Math.round(floating * 100) / 100;
    return rounded;
}

const start = new Date(""2020-12-03T11:30:00Z"").getTime() / (1000 * 3600);
const end = new Date(""2020-12-03T13:00:00Z"").getTime() / (1000 * 3600)


let total = roundDown(end - start);


//just add these lines of code
const remaining = total - Math.floor(total);
const minutes = 60 * remaining;
console.log(""Minutes : "" + Math.round(minutes) + ""\tHours : "" + Math.floor(total));</code></pre>
</div>
</div>
</p>
",1
65134965,"<p>You can use jQuery to fetch element that contains specific text and access the next <code>td</code> as required with a single line of jQuery code. This won't thrown an exception in case when there is no next <code>td</code>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).ready(function() {
  var yourVal = $('td:contains(""2.2"")').next('td').text();
  console.log(yourVal);
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/1.9.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;table class=""table""&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Col 1&lt;/th&gt;
      &lt;th&gt;Col 2&lt;/th&gt;
      &lt;th&gt;Col 3&lt;/th&gt;
      &lt;th&gt;Col 4&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1.1&lt;/td&gt;
      &lt;td&gt;1.2&lt;/td&gt;
      &lt;td&gt;1.3&lt;/td&gt;
      &lt;td&gt;1.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2.1&lt;/td&gt;
      &lt;td&gt;2.2&lt;/td&gt;
      &lt;td&gt;2.3&lt;/td&gt;
      &lt;td&gt;2.4&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3.1&lt;/td&gt;
      &lt;td&gt;3.2&lt;/td&gt;
      &lt;td&gt;3.3&lt;/td&gt;
      &lt;td&gt;3.4&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</p>
",1
65139518,"<pre><code>const express = require('express')
const bodyParser = require(&quot;body-parser&quot;);
const fs = require('fs')
const app = express()
const port = 3000

app.use(bodyParser.text());
app.post('/', (req, res) =&gt; {
  
fs.writeFileSync( &quot;file.csv&quot;, req.body, &quot;utf8&quot; )
res.send(&quot;success&quot;)
})

app.listen(port, () =&gt; {
  console.log(`Example app listening at http://localhost:${port}`)
})
</code></pre>
<p>Create a ndoejs file with above content save its as api.js.</p>
<p>open cmd with the folder containing that file as current directory and run the api.js file as :</p>
<pre><code>node api.js
</code></pre>
<p>you will get the below out put if it runs successfully</p>
<pre><code>Example app listening at http://localhost:3000
</code></pre>
<p><strong>And now in yout test script in postman:</strong></p>
<pre><code>for (i = 0; i &lt; 10; ++i) {
    newvalue = &quot;something&quot; // save the value you are printing to this variable eg :pm.request.json().name &quot;
    //Adding the new values to a string as value1,value2,value3 etc
    data = i === 0 ? data = &quot;&quot; : data = i === 1 ? newvalue : data + &quot;,&quot; + newvalue
}
</code></pre>
<p>//once your 40 iteration is done doing a  api call to the express api we created :</p>
<pre><code>// Example with a full-fledged request
const postRequest = {
    url: 'http://localhost:3000/',
    method: 'POST',

    body: {
        mode: 'raw',
        raw: data
    }
};
pm.sendRequest(postRequest, (error, response) =&gt; {
    //console.log(error ? error : response.json());
});
</code></pre>
<p><strong>Output:</strong></p>
<p><a href=""https://i.stack.imgur.com/0V630.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0V630.png"" alt=""enter image description here"" /></a></p>
",1
65131307,"<p>The const is basically returning a plain object. Axios will receive the object data, which you can simply access or assign its values to other objects.</p>
<p>In your case, you may assign a value to the <code>echartBar</code> object in the scope of your component like so:</p>
<pre class=""lang-js prettyprint-override""><code>this.echartBar.xAxis[0].data = response.data.months
</code></pre>
<p>This assumes you have a <code>months</code> property in your response data.</p>
<p>This process can be cumbersome especially when you have a lot of properties on the echartBar object like you have. You'll need to check for arrays in arrays etc. Libraries like <code>lodash</code> might be helpfull in that case, for example its <code>set</code> function: <a href=""https://lodash.com/docs/4.17.15#set"" rel=""nofollow noreferrer"">https://lodash.com/docs/4.17.15#set</a></p>
",1
65137358,"<p>With <code>Lookbehind</code>, you can match <code>-</code> before the number and do:</p>
<pre><code>value = value.replace(/(?&lt;=-)\d{3}/g, function(match, n) { 
             const nextValue = ++match; 
             return ('000'+nextValue).slice(-3); 
         });
</code></pre>
",1
65148802,"<p>I think you want &quot;person&quot; to refer to a random person from your array and not the array itself.</p>
<p>A good trick to remember is how to get a random element from an array <code>a</code> (works with any array that isn't empty):</p>
<pre><code>const a = [1, 2, 3];
const randomElement = a[Math.floor(Math.random() * a.length)];
</code></pre>
<p>Math.random gives a random float from 0 to almost 1</p>
<p>multiply it by the array length to get a random float from 0 to almost array length</p>
<p>Math.floor chops the decimal off to get a random int from 0 to array length - 1</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let placea = 'Shopping Mall'
let placeb = 'Library'

let people = ['John', 'Sam', 'Ryan', 'Liam', 'David'];
let person = people[Math.floor(Math.random() * people.length)];

if (person === 'John' || person === 'Liam' || person === 'Sam') {
  console.log(`Lets go to the ${placea}`)
} else {
  console.log(`I love quiet places, lets go to the ${placeb}`)
}</code></pre>
</div>
</div>
</p>
",1
65163215,"<p>Unfortunately, I don't think there's a way to achieve this without doing something a little unorthodox (read: hacky).</p>
<p>TLDR: Here's a <a href=""https://codesandbox.io/s/friendly-perlman-0mvsx?file=/src/App.js"" rel=""nofollow noreferrer"">sandbox</a> with what I think is a viable solution for you.</p>
<p>Continuing on, there are a couple of problems preventing your code from working.</p>
<p>When you define <code>reactHTML</code> you're not actually defining <em>HTML</em> but rather a react <code>Element</code> <em>Object</em> (because that's what JSX compiles it into).</p>
<p>This means that you won't be able to use DOM selectors on it (e.g. <code>querySelector</code> and <code>appendChild</code>) and that is why you get the error <code>appendChild does not exist on type 'Element'</code>. This makes sense because the react <code>Element</code> object <em>does not</em> have such a method.</p>
<p>The &quot;solution&quot; then, is to render your markdown content as you normally would, and only after being rendered go in and access the elements that you want. This can be easily achieved with the <code>useEffect</code> hook very similar to what you're already doing:</p>
<pre class=""lang-js prettyprint-override""><code>const Markdown = (props) =&gt; {
  const markdown = `
  This is rendered as a '&lt;p&gt;' element

  So is this one!

  Me too!
  `;

  useEffect(() =&gt; {
    // Get all of the &lt;p&gt; elements
    const pElements = document.getElementsByTagName(&quot;p&quot;);

    // Create a button
    const button = document.createElement(&quot;button&quot;);
    button.id = &quot;btn-1&quot;;
    button.innerHTML = &quot;I'm a button!&quot;;

    const refChild = pElements[1];
    // Insert the button before the next sibling of the second &lt;p&gt; tag
    refChild &amp;&amp; refChild.parentNode.insertBefore(button, refChild.nextSibling);
  }, []);

  return &lt;ReactMarkdown children={markdown} /&gt;;
};
</code></pre>
",1
65155904,"<p>This is because one of the depencies can not be resolved combined with your current dependencies.</p>
<p>The following part indicates that ciruclar-progressbar (version 2.0.3) requires react 15 or 16 as a peer dependency, and you are using a newer version in your dependency list.</p>
<pre><code>Could not resolve dependency: peer react@&quot;^0.14.0 || ^15.0.0 || ^16.0.0&quot; from react-circular-progressbar@2.0.3
</code></pre>
<p>There are a few solutions;</p>
<ul>
<li>Downgrade the package that doesn't fit in the constraints of the package that you want to install</li>
<li>Look for a version of the package that you are trying to install that has updated their peer dependencies to include react 17</li>
<li>use <code>npm install &lt;package-name&gt; --force</code> to ignore it (really not recommended, unless you have manually verified there are no incompatibilities)</li>
<li>use  <code>npm install &lt;package-name&gt; --legacy-peer-deps</code>.</li>
</ul>
<p>The first two options are deduced from the error you have given. Whereas the last two options are provided in the error itself.</p>
",1
65105025,"<h1>Issue</h1>
<p>You aren't creating a valid handler function, and you also are not invoking the callbacks correctly.</p>
<pre><code>onClick={
   props.text !== &quot;Update&quot;
   ? props.onClick
   : () =&gt; {
         props.showConfirmModal; // &lt;-- not invoked!
         props.onClick; // &lt;-- not invoked!
      }
}
</code></pre>
<h1>Solution</h1>
<p>Simplify your logic to be more <strong>DRY</strong>, i.e. don't repeat the <code>props.onClick</code> for both logic branches.</p>
<pre><code>onClick={() =&gt; {
  props.onClick();
  props.text === &quot;Update&quot; &amp;&amp; props.showConfirmModal();
}}
</code></pre>
<p>Some linters/lint rules <em>may</em> complain about the second line, if so:</p>
<pre><code>onClick={() =&gt; {
  props.onClick();
  if (props.text === &quot;Update&quot;) props.showConfirmModal();
}}
</code></pre>
",1
65142482,"<p>As per the <a href=""https://developers.google.com/maps/premium/apikey/maps-android-apikey#add-key,"" rel=""nofollow noreferrer"">documentation</a> steps, you should add  tag as a a child of application tag, the meta data should look like:</p>
<pre><code>&lt;meta-data
    android:name=&quot;com.google.android.geo.API_KEY&quot;
    android:value=&quot;YOUR_API_KEY&quot;/&gt;
</code></pre>
<p>So, as per this your code should be:</p>
<pre><code>&lt;application
  android:name=&quot;.MainApplication&quot;
  android:label=&quot;@string/app_name&quot;
  android:icon=&quot;@mipmap/ic_launcher&quot;
  android:roundIcon=&quot;@mipmap/ic_launcher_round&quot;
  android:allowBackup=&quot;false&quot;
  android:theme=&quot;@style/AppTheme&quot;
 &gt;   
  &lt;activity
     android:name=&quot;.MainActivity&quot;
    android:label=&quot;@string/app_name&quot;
android:configChanges=&quot;keyboard|keyboardHidden|orientation|screenSize|uiMode&quot;
   android:launchMode=&quot;singleTask&quot;
   android:windowSoftInputMode=&quot;adjustResize&quot;&gt;
   &lt;intent-filter&gt;
     &lt;action android:name=&quot;android.intent.action.MAIN&quot; /&gt;
     &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&gt;
   &lt;/intent-filter&gt;
 &lt;/activity&gt;
 &lt;activity android:name=&quot;com.facebook.react.devsupport.DevSettingsActivity&quot; /&gt;
 &lt;meta-data android:name=&quot;android:name=&quot;com.google.android.geo.API_KEY&quot;&quot;
  android:value=&quot;AIzaSyDPUc0RSV5OZzACrJcFPuBpxUHi0000000&quot; /&gt;
 &lt;/application&gt;
</code></pre>
<p><strong>Point to Note:</strong> You are passing the value for <code>android:name</code> as <code>com.google.android.geo.AIzaSyDPUc0RSV5OZzACrJcFPuBpxUHi0000000</code> instead of <code>com.google.android.geo.API_KEY</code></p>
",1
65143718,"<p>Here I am adding the Information of company with Specific ID to its respectice Product id
like <code>productDetails[i].address = Caddress;</code> in  <code>addCompanyDetails()</code> function  and then
in display function I have replaced <code>companyDetails.address to data[i].address</code> .
<strong>But be sure it will lose its data when you reload the page .</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let productDetails = [
    {
        id: ""1"",
        partNo: ""10"",
        productName: ""bag"",
        size: ""30"",
        color: [""Blue""],
        description: ""sky bags "",

    },
    {
        id: ""2"",
        partNo: ""15"",
        productName: ""bottle"",
        size: ""10"",
        color: [""Green"", ""Orange""],
        description: ""plastic and still"",
    },
    {
        id: ""4"",
        partNo: ""20"",
        productName: ""lunchbox"",
        size: ""20"",
        color: [""Blue"", ""Red""],
        description: ""fresh food"",
    },
    {
        id: ""3"",
        partNo: ""40"",
        productName: ""pen"",
        size: ""10"",
        color: [""Red"", ""Blue""],
        description: ""gel pen "",

    }, {
        id: ""5"",
        partNo: ""35"",
        productName: ""notebook"",
        size: ""30"",
        color: [""Blue"", ""Red"", ""Orange""],
        description: ""Writing"",
    }
]

/** * function to add company details */
function addCompanyDetails() {
    let data = (document.getElementById('productId').value);
    let date1 = document.getElementById('date').value;
    let Caddress = document.getElementById('address').value;
    let Cname = (document.getElementById('companyName').value);

    if (data === '') {
        message(""enter id for search"");
    }
    for (let i = 0; i &lt; productDetails.length; i++) {
        let companyDetails = productDetails[i].companyDetails ? productDetails[i].companyDetails : { date: """", address: """", companyName: """" };
        let p = companyDetails;
        if ((productDetails[i].id) == (data)) {
            p.companyName = Cname ;
            productDetails[i].date = date1 ;
            productDetails[i].address = Caddress;
            productDetails[i].companyName=Cname;
            
            
        }
       
        displayData();
        clearInputData();
    }
}

/** * this function display the data in table */
function displayData(companyDetails) {
    objectArray = Object.values(productDetails);
    display(objectArray, companyDetails,clearInputData);
}

/** * this function is for get the value from form */
function getValue() {
    let id = document.getElementById('productId').value;
    let date = document.getElementById('date').value;
    let address = document.getElementById('address').value;
    let companyName = document.getElementById('companyName').value;
    return { id, date, address, companyName };
}

/** * Function is to display the data in table */
function display(productStore,callBack) {
    messageTable("" "");
    let data = productDetails;
   
   
    let table = ""&lt;table border = 1 cellpadding = 10 &gt;&lt;th colspan=7 &gt;Product Details&lt;/th&gt;&lt;th colspan=7 &gt;company Details&lt;/th&gt;&lt;tr&gt;&lt;th&gt;Product Id&lt;/th&gt;&lt;th&gt;Part No&lt;/th&gt;&lt;th&gt;Name&lt;/th&gt;&lt;th&gt;Size&lt;/th&gt;&lt;th&gt;Color&lt;/th&gt;&lt;th&gt;Description&lt;/th&gt;&lt;th&gt;weight&lt;/th&gt;&lt;th&gt;Date&lt;/th&gt;&lt;th&gt;Address&lt;/th&gt;&lt;th&gt;Company name&lt;/th&gt;&lt;/tr&gt;"";
    for (let i = 0; i &lt; data.length; i++) {
       
        if (data[i].productWeight === undefined) {
            data[i].productWeight = "" "";
        } else { }
        if (data[i].companyName === undefined) {
            data[i].companyName = "" "";
        } else { }
        if (data[i].date === undefined) {
            data[i].date = ""   "";
        } else { }
        if (data[i].address === undefined) {
            data[i].address = ""   "";
        } else { }

        table += ""&lt;tr&gt;&lt;td&gt;"" + data[i].id + ""&lt;/td&gt;"";
        table += ""&lt;td&gt;"" + data[i].partNo + ""&lt;/td&gt;"";
        table += ""&lt;td&gt;"" + data[i].productName + ""&lt;/td&gt;"";
        table += ""&lt;td&gt;"" + data[i].size + ""&lt;/td&gt;"";
        table += ""&lt;td&gt;"" + data[i].color + ""&lt;/td&gt;"";
        table += ""&lt;td&gt;"" + data[i].description + ""&lt;/td&gt;"";
        table += ""&lt;td&gt;"" + data[i].productWeight + ""&lt;/td&gt;"";
        table += ""&lt;td&gt;"" + data[i].date + ""&lt;/td&gt;"";
        table += ""&lt;td&gt;"" + data[i].address + ""&lt;/td&gt;"";
        table += ""&lt;td&gt;"" + data[i].companyName + ""&lt;/td&gt;"";
    }
    messageTable(table);

    clearInputData();
}
/** * function is to print the table */
function messageTable(data) {
    document.getElementById(""messageTableA"").innerHTML = data;
}

/** * this function is to clear the data */
function clearInputData() {
    document.getElementById(""productId"").value = """";
    document.getElementById(""address"").value = """";
    document.getElementById(""date"").value = """";
    document.getElementById(""companyName"").value = """";
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
    &lt;script src=""home.js""&gt;&lt;/script&gt;
    &lt;style&gt;
        th,
        td,
        p,
        input {
            font-family: Arial, Helvetica, sans-serif;
        }

        table,
        th,
        td {
            border: solid 1px #DDD;
            border-collapse: collapse;
            padding: 10px 10px;
            text-align: center;
        }

        th {
            font-weight: bold;
        }
    &lt;/style&gt;
&lt;/head&gt;

&lt;body onload=""display()""&gt;
    &lt;h2&gt;Product Details:&lt;/h2&gt;
    &lt;form action=""""&gt;
        &lt;label for=""id""&gt;Id: &lt;/label&gt;&amp;nbsp;&amp;nbsp; &lt;input type=""number"" id=""productId"" required&gt; &lt;input type=""button""
            value=""autofill"" onclick=""auto()""&gt;&lt;br&gt;&lt;br&gt; 

        &lt;label for=""EstablishDate""&gt;Establish Date:&lt;/label&gt;&amp;nbsp;&amp;nbsp; &lt;input type=""date"" id=""date"" required&gt;&lt;br&gt;&lt;br&gt;
        &lt;label for=""address""&gt;Address:&lt;/label&gt;&lt;br&gt;&lt;br&gt; &lt;textarea name=""address"" id=""address"" cols=""30""
            rows=""10""&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br&gt;
        &lt;label for=""CompanyName""&gt;Company Name:&lt;/label&gt;&amp;nbsp;&amp;nbsp; &lt;input type=""text"" id=""companyName"" required&gt;&lt;br&gt;&lt;br&gt;


        &lt;input type=""button"" value=""add company details"" onclick=""addCompanyDetails()""&gt;&lt;br&gt;&lt;br&gt;
        &lt;p id=""result""&gt;&lt;/p&gt;
        &lt;p id=""demo""&gt;&lt;/p&gt;
        &lt;p id=""messageTableA""&gt;&lt;/p&gt;
    &lt;/form&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",1
65118710,"<p>You'll want to use <code>typeof</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>if(typeof item !== 'object' || typeof item.image !== 'object' || item.image.filename === undefined){
  console.log(""undefined as far as you're concerned"");
}</code></pre>
</div>
</div>
</p>
<p>What you need to know is you cannot do a <code>=== undefined</code> test on a variable that has not been declared. But it is okay to do that test on an Object property that doesn't exist, as long as the Object does exist.</p>
",1
65101470,"<p>Yeah you can do it using <code>\'</code> to quote the row.  But you also must make sure <code> $('[data-toggle=&quot;tooltip&quot;]').tooltip()</code> renders after your addition of the html code in js.  See here:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let html = """"
 
html += '&lt;a data-toggle=""tooltip"" data-html=""true"" data-placement=""left"" title=""&lt;div class=\'row\' &gt;ok&lt;/div&gt;""&gt; Test HTML &lt;/a &gt;';

 $(""#tooltipData"").html(html);
 
 $('[data-toggle=""tooltip""]').tooltip()</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.row {
  color:red;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://code.jquery.com/jquery-3.2.1.slim.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.9/umd/popper.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js""&gt;&lt;/script&gt;

&lt;div id='tooltipData'&gt;
&lt;/div&gt;



&lt;a data-toggle=""tooltip"" data-html=""true"" data-placement=""left"" title=""&lt;div class='row'&gt;ok&lt;/div&gt;""&gt; Test HTML &lt;/a &gt;</code></pre>
</div>
</div>
</p>
",1
65103650,"<p>You can check the browser <code>userAgent</code> to check if it is IE, if not then load the d3 script.</p>
<p>You can refer to the code below, it works well and clear d3 console error in IE 11:</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;meta charset=&quot;utf-8&quot; /&gt;
    &lt;title&gt;&lt;/title&gt;
    &lt;script&gt;
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf(&quot;MSIE &quot;);
        if (!(msie &gt; 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./))) //If not IE, load d3 script
        {
            document.write('&lt;script src=&quot;scripts/d3.js&quot;&gt;&lt;\/script&gt;');
        } 
    &lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;svg&gt;
        &lt;circle class=&quot;target&quot; style=&quot;fill: #69b3a2&quot; stroke=&quot;black&quot; cx=50 cy=50 r=40&gt;&lt;/circle&gt;
    &lt;/svg&gt;
    &lt;script&gt;
        if (window.d3) {
            d3.select(&quot;.target&quot;).style(&quot;stroke-width&quot;, 8);
        }
        else {
            alert(&quot;IE&quot;);
        }
    &lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
",1
65132225,"<p>I think the API you are looking for is the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Media_Session_API"" rel=""nofollow noreferrer"">Media Session API</a>. If you register the handlers for the appropriate actions the browser should display buttons which trigger those handlers.</p>
<pre><code>navigator.mediaSession.setActionHandler('previoustrack', () =&gt; {
    // Whatever you need to do to play the previous track.
});
navigator.mediaSession.setActionHandler('nexttrack', () =&gt; {
    // Whatever you need to do to play the next track.
});
</code></pre>
",1
65097032,"<p>There are a few concepts that you have to know when rendering dynamic elements with js.</p>
<ol>
<li><p>you have a <code>click</code> listener for your <code>.close</code> button. This listener will never fire because this listener is relevant only for your initial DOM. But your closing button is rendered dynamically, which means that listener not relevant for your button.
Easily solving that by attaching <code>onclick</code> to the button, and creating a function. (example follows)</p>
</li>
<li><p>I inspected your code, you DON'T have to use id mechanism to delete/hide your <code>card</code> element (unless you need to fire <code>POST</code> request), you can use <code>parentNode</code> (example follows)</p>
</li>
</ol>
<p>I made some simple changes to your code:</p>
<pre class=""lang-js prettyprint-override""><code>
$(&quot;.create&quot;).click(function(){
  let element = `
      &lt;div id=&quot;card&quot; class=&quot;card col- 3&quot; style=&quot;width:18rem;style=&quot;margin-right=3%; margin-right=3%&quot;&gt;&lt;img src=&quot;...&quot; class=&quot;card-img-top&quot; alt=&quot;...&quot; id=&quot;image&quot;+String(cnt)&gt;&lt;div class=&quot;card-body&quot;&gt;&lt;h5 class=&quot;card-title&quot; id=&quot;title&quot; contentEditable=&quot;true&quot;&gt;Card title&lt;/h5&gt;&lt;p class=&quot;card-text&quot; id=&quot;desc&quot; contentEditable=&quot;true&quot;&gt;Some quick example text to build on the card title and make up the                     bulk of the'                    card\'s content.&lt;/p&gt;&lt;a href=&quot;#&quot; class=&quot;btn btn-primary&quot; id=&quot;button&quot;+ String(cnt) &gt;Go somewhere&lt;/a&gt;&lt;a href=&quot;#&quot; class=&quot;close&quot; onclick='deleteCard(this)'&gt;Delete&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;`;
  document.getElementById(&quot;lastRow&quot;).innerHTML+=element;
});

function deleteCard(delBtn){
  delBtn.parentNode.parentNode.hidden = true
}

</code></pre>
<p>Notice for the function I added and the onclick that enables the hiding action.
Here is a <a href=""https://codepen.io/gofmannir/pen/ExgjBRw?editors=1111"" rel=""nofollow noreferrer"">codeped</a> link for you to test by your self what I did.</p>
<p>Hope this was helpful, any other questions will be great :)</p>
",1
65157676,"<p>The hyphen (-) and the dot (.) are interpreted literally by string-based paths.</p>
<p>Did you try this?</p>
<pre><code>router.get('/:board/:threadId.html', function(req, res, next) {
    // doing stuff
});
</code></pre>
",1
65132635,"<p>Use variables for keeping track of the current status of each condition:</p>
<pre><code>let isClauseValid, isCaptchaValid;

function clauseValid(elem) {
  isClauseValid = elem.checked;
  setButton();
}

function captchaValid() {
  isCaptchaValid = true;
  setButton();
}

function setButton() {
  document.getElementById(&quot;sendBtn&quot;).disabled = !isClauseValid || !isCaptchaValid;
}
</code></pre>
<p>NB: make sure to correct the spelling mistake in your HTML <code>onclick</code> attribute.</p>
",1
65101281,"<p>You can use <code>DomParser</code> in JavaScript to parse the XML. To get the attributes inside the tag, you can use methods like <code>.getAttribute()</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var xmlData = `&lt;?xml version='1.0' encoding='UTF-8'?&gt;
&lt;dataset&gt;
    &lt;MOCK_DATA id=""1"" first_name=""Sandor"" last_name=""Balmer"" email=""sbalmer0@qq.com"" gender=""Male"" ip_address=""148.134.84.45""/&gt;
    &lt;MOCK_DATA id=""2"" first_name=""Val"" last_name=""Toll"" email=""vtoll1@tamu.edu"" gender=""Male"" ip_address=""249.13.225.19""/&gt;
    &lt;MOCK_DATA id=""3"" first_name=""Phyllida"" last_name=""Purrier"" email=""ppurrier2@vimeo.com"" gender=""Female"" ip_address=""156.189.251.161""/&gt;
    &lt;MOCK_DATA id=""4"" first_name=""Marjy"" last_name=""Pittam"" email=""mpittam3@businessinsider.com"" gender=""Female"" ip_address=""193.195.178.210""/&gt;
    &lt;MOCK_DATA id=""5"" first_name=""Kirbee"" last_name=""Regglar"" email=""kregglar4@unblog.fr"" gender=""Female"" ip_address=""251.218.161.174""/&gt;
    &lt;MOCK_DATA id=""6"" first_name=""Mariquilla"" last_name=""Caseri"" email=""mcaseri5@symantec.com"" gender=""Female"" ip_address=""247.187.208.116""/&gt;
    &lt;MOCK_DATA id=""7"" first_name=""Juline"" last_name=""Coase"" email=""jcoase6@indiatimes.com"" gender=""Female"" ip_address=""23.117.236.168""/&gt;
    &lt;MOCK_DATA id=""8"" first_name=""Courtnay"" last_name=""Scown"" email=""cscown7@ask.com"" gender=""Female"" ip_address=""120.80.78.72""/&gt;
    &lt;MOCK_DATA id=""9"" first_name=""Armin"" last_name=""Mc Caghan"" email=""amccaghan8@ameblo.jp"" gender=""Male"" ip_address=""244.47.41.88""/&gt;
    &lt;MOCK_DATA id=""10"" first_name=""Josie"" last_name=""Gunthorp"" email=""jgunthorp9@yahoo.co.jp"" gender=""Female"" ip_address=""169.142.65.100""/&gt;
&lt;/dataset&gt;`

parser = new DOMParser();
xmlDoc = parser.parseFromString(xmlData, ""text/xml"");
mock_data =  xmlDoc.getElementsByTagName(""MOCK_DATA"");

for (let data in mock_data){
  console.log(mock_data[data].getAttribute('first_name'))
}</code></pre>
</div>
</div>
</p>
",1
65114949,"<p>If you're using CDN your code should be like :</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;html&gt;

&lt;head&gt;
  &lt;script type=""text/javascript"" src=""https://cdn.jsdelivr.net/npm/vue/dist/vue.js""&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;div id=""app""&gt;
  &lt;span v-if=""seen""&gt;Now you see me&lt;/span&gt;

&lt;/div&gt;
&lt;script type=""text/javascript""&gt;
  new Vue({
    el: ""#app"",
    data() {
      return {
        seen: true,
      };
    },
  });
&lt;/script&gt;
&lt;style&gt;

&lt;/style&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
<p>you define data as a function that returns object.</p>
",1
65092097,"<p>First make sure you have a working CDN (since you want a CDN) for <code>trading-vue</code> such as:</p>
<pre><code>&lt;script src=&quot;https://cdn.jsdelivr.net/npm/trading-vue-js@0.9.0/dist/trading-vue.min.js&quot;&gt;&lt;/script&gt;
</code></pre>
<p>Wherever you want to use it, register the component definition in the parent's <code>components</code> option:</p>
<pre class=""lang-js prettyprint-override""><code>components: {
  trading: TradingVueJs.TradingVue  // Naming it 'trading'
}
</code></pre>
<p>Give the parent some data:</p>
<pre><code>data() {
  return {
    mydata: {
      ohlcv: [  // Taken from their docs, this name seems to be important
        [ 1551128400000, 33,  37.1, 14,  14,  196 ],
        [ 1551132000000, 13.7, 30, 6.6,  30,  206 ],
        [ 1551135600000, 29.9, 33, 21.3, 21.8, 74 ],
        [ 1551139200000, 21.7, 25.9, 18, 24,  140 ],
        [ 1551142800000, 24.1, 24.1, 24, 24.1, 29 ],
      ]
    }
  }
},
</code></pre>
<p>Pass that data as a prop:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;div id=&quot;app&quot;&gt;
  &lt;trading :data=&quot;mydata&quot;&gt;&lt;/trading&gt;
&lt;/div&gt;
</code></pre>
<p>Here's a demo:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>/***** APP *****/
new Vue({
  el: ""#app"",
  data() {
    return {
      mydata: {
        ohlcv: [
          [ 1551128400000, 33,  37.1, 14,  14,  196 ],
          [ 1551132000000, 13.7, 30, 6.6,  30,  206 ],
          [ 1551135600000, 29.9, 33, 21.3, 21.8, 74 ],
          [ 1551139200000, 21.7, 25.9, 18, 24,  140 ],
          [ 1551142800000, 24.1, 24.1, 24, 24.1, 29 ],
        ]
      }
    }
  },
  components: {
    trading: TradingVueJs.TradingVue
  }
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js""&gt;&lt;/script&gt;
&lt;div id=""app""&gt;
  &lt;trading :data=""mydata""&gt;&lt;/trading&gt;
&lt;/div&gt;

&lt;script src=""https://cdn.jsdelivr.net/npm/trading-vue-js@0.9.0/dist/trading-vue.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
",1
65149462,"<p>You can use regex to isolate the two parameters:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var object = {
    iframe: '&lt;iframe width=""560"" height=""315"" src=""YouTube link""&gt;&lt;/iframe&gt;' // string was invalid before, replaced quotes with apostrophes
}
var regexFound = object.iframe.match(/width=""(\d*?)"" height=""(\d*?)""/);
var asArray = [regexFound[1], regexFound[2]];
var asObject = {width: regexFound[1], height: regexFound[2]}
console.log(asArray, asObject);</code></pre>
</div>
</div>
</p>
",1
65138486,"<p>Do it like:</p>
<p>*Javascript is required</p>
<p>Will only allow numbers and back space keys</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=""text"" onkeypress=""return (event.charCode !=8 &amp;&amp; event.charCode ==0 || (event.charCode &gt;= 48 &amp;&amp; event.charCode &lt;= 57))"" /&gt;</code></pre>
</div>
</div>
</p>
",1
65154259,"<p>use alert</p>
<pre><code>&lt;script&gt;
function copyToClipboard(elementId) {

  // Create a &quot;hidden&quot; input
  var aux = document.createElement(&quot;input&quot;);

  // Assign it the value of the specified element
  aux.setAttribute(&quot;value&quot;, document.getElementById(elementId).innerHTML);

  // Append it to the body
  document.body.appendChild(aux);

  // Highlight its content
  aux.select();

  // Copy the highlighted text
  document.execCommand(&quot;copy&quot;);

  // Remove it from the body
  document.body.removeChild(aux);
alert(elementId + &quot; Text copied&quot;);
  
let textarea = document.getElementById(&quot;select-this&quot;);
  textarea.focus();
}
&lt;/script&gt;

&lt;div class=&quot;wrapper&quot;&gt;
  &lt;p id=&quot;p1&quot;&gt;P1: I am paragraph 1&lt;/p&gt;
&lt;p id=&quot;p2&quot;&gt;P2: I am a second paragraph&lt;/p&gt;
&lt;p id=&quot;p3&quot;&gt;P3: I am a 3 paragraph&lt;/p&gt;
&lt;button onclick=&quot;copyToClipboard('p1')&quot;&gt;Copy P1&lt;/button&gt;
&lt;button onclick=&quot;copyToClipboard('p2')&quot;&gt;Copy P2&lt;/button&gt;
&lt;button onclick=&quot;copyToClipboard('p3')&quot;&gt;Copy P3&lt;/button&gt;
&lt;br/&gt;&lt;br/&gt;
  
  &lt;textarea id=&quot;select-this&quot; value=&quot;I just copied this with only JavaScript&quot;/&gt;&lt;/textarea&gt;
&lt;/div&gt;
</code></pre>
",1
65120025,"<p>An ES6 style approach:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let listToArr = (obj) =&gt; obj.rest ? [obj.value, ...listToArr(obj.rest)] : [obj.value];

console.log(listToArr({ value: 5, rest: { value: 10, rest: { value: 15, rest: null } } }));</code></pre>
</div>
</div>
</p>
",1
65091570,"<p>You can use <code>$(this).closest(&quot;tr&quot;)</code> to get the closest tr and then simply use <code>.find()</code> to get the required values from selects and then use <code>.text()</code> to add total value to <code>package_price</code> .</p>
<p><em><strong>Demo Code</strong></em>(with dummy values) :</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>//on change of select or checkbox
$('select ,input[type=checkbox] ').on('change', function() {
  var selector = $(this).closest(""tr"")//get closest tr
  //if checkbox is checked
  if (selector.find(""input[type=checkbox]"").is("":checked"")) {
  //get select valus
    var prcs_type = selector.find(""select[name=processing_type]"").val();
    var no_person = selector.find(""select[name=no_of_person]"").val();
    var total = prcs_type * no_person;
    selector.find("".package_price"").text(total)//add value to package_prcie.
  }
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.0/jquery.min.js""&gt;&lt;/script&gt;
&lt;table&gt;
  &lt;tr class=""valid-container""&gt;
    &lt;td style=""cursor:pointer;""&gt;
      &lt;input type=""checkbox"" name=""c1"" id=""c1""&gt;1
    &lt;/td&gt;

    &lt;td height=""52""&gt;
      &lt;select class=""custom-select processing_type"" name=""processing_type"" data-id=""1"" required&gt;
        &lt;option value=""19"" selected&gt;Normal&lt;/option&gt;
        &lt;option value=""20""&gt;Express&lt;/option&gt;
      &lt;/select&gt;
    &lt;/td&gt;

    &lt;td height=""52""&gt;
      &lt;select class=""custom-select no_of_person"" name=""no_of_person"" data-id=""1"" required&gt;
        &lt;option value=""1"" selected&gt;1&lt;/option&gt;
        &lt;option value=""2""&gt;2&lt;/option&gt;
        &lt;option value=""3""&gt;3&lt;/option&gt;
        &lt;option value=""4""&gt;4&lt;/option&gt;
        &lt;option value=""5""&gt;5&lt;/option&gt;
        &lt;option value=""6""&gt;6&lt;/option&gt;
        &lt;option value=""7""&gt;7&lt;/option&gt;
        &lt;option value=""8""&gt;8&lt;/option&gt;
        &lt;option value=""9""&gt;9&lt;/option&gt;
        &lt;option value=""10""&gt;10&lt;/option&gt;
      &lt;/select&gt;

    &lt;/td&gt;

    &lt;td width=""190"" height=""60""&gt;
      &lt;div class=""input-group date"" data-date-format=""dd.mm.yyyy""&gt;
        &lt;div class=""input-group mb-2""&gt;
          &lt;input type=""text"" class=""form-control"" name=""travel_date"" id=""date"" placeholder=""dd.mm.yyyy""&gt;
          &lt;div class=""input-group-text""&gt;&lt;i class=""ti-calendar""&gt;&lt;/i&gt;&lt;/div&gt;
          &lt;div class=""input-group-addon""&gt;
          &lt;/div&gt;
          &lt;div class=""input-group-prepend""&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/td&gt;
    &lt;td&gt;{{ j.currency_type }}&amp;nbsp;&amp;nbsp; &lt;output name=""result"" class=""package_price""&gt;{{ j.price }}&lt;/output&gt;.00&lt;/td&gt;

  &lt;/tr&gt;
  &lt;tr class=""valid-container""&gt;
    &lt;td style=""cursor:pointer;""&gt;
      &lt;input type=""checkbox"" name=""c1"" id=""c1""&gt;2
    &lt;/td&gt;

    &lt;td height=""52""&gt;
      &lt;select class=""custom-select processing_type"" name=""processing_type"" data-id=""2"" required&gt;
        &lt;option value=""19"" selected&gt;Normal&lt;/option&gt;
        &lt;option value=""20""&gt;Express&lt;/option&gt;
      &lt;/select&gt;
    &lt;/td&gt;

    &lt;td height=""52""&gt;
      &lt;select class=""custom-select no_of_person"" name=""no_of_person"" data-id=""2"" required&gt;
        &lt;option value=""1"" selected&gt;1&lt;/option&gt;
        &lt;option value=""2""&gt;2&lt;/option&gt;
        &lt;option value=""3""&gt;3&lt;/option&gt;
        &lt;option value=""4""&gt;4&lt;/option&gt;
        &lt;option value=""5""&gt;5&lt;/option&gt;
        &lt;option value=""6""&gt;6&lt;/option&gt;
        &lt;option value=""7""&gt;7&lt;/option&gt;
        &lt;option value=""8""&gt;8&lt;/option&gt;
        &lt;option value=""9""&gt;9&lt;/option&gt;
        &lt;option value=""10""&gt;10&lt;/option&gt;
      &lt;/select&gt;

    &lt;/td&gt;

    &lt;td width=""190"" height=""60""&gt;
      &lt;div class=""input-group date"" data-date-format=""dd.mm.yyyy""&gt;
        &lt;div class=""input-group mb-2""&gt;
          &lt;input type=""text"" class=""form-control"" name=""travel_date"" id=""date"" placeholder=""dd.mm.yyyy""&gt;
          &lt;div class=""input-group-text""&gt;&lt;i class=""ti-calendar""&gt;&lt;/i&gt;&lt;/div&gt;
          &lt;div class=""input-group-addon""&gt;
          &lt;/div&gt;
          &lt;div class=""input-group-prepend""&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/td&gt;
    &lt;td&gt;{{ j.currency_type }}&amp;nbsp;&amp;nbsp; &lt;output name=""result"" class=""package_price""&gt;{{ j.price }}&lt;/output&gt;.00&lt;/td&gt;

  &lt;/tr&gt;

&lt;/table&gt;</code></pre>
</div>
</div>
</p>
",1
65146345,"<p>You can use <a href=""https://dev.to/miteshkamat27/computed-property-names-es6-3ae3"" rel=""nofollow noreferrer"">computed property names</a> inside <code>legend_click</code>:</p>
<pre><code>vectorTileLayerStyles: {
     [`${layer_name}`]: {
                      fillColor: &quot;yellow&quot;,fill: true, color: &quot;red&quot;
                  }
               }
</code></pre>
<p>so if that did not work this should work:</p>
<pre><code>vectorTileLayerStyles: Object.fromEntries([[layer_name,{fillColor: &quot;yellow&quot;, fill: true, color: &quot;red&quot;}]])
</code></pre>
",1
65149612,"<p>call</p>
<pre><code>   toggleOption1();
</code></pre>
<p>after</p>
<pre><code>    document.getElementById(&quot;option1&quot;).addEventListener(&quot;click&quot;, toggleOption1);
</code></pre>
<p><strong>EDIT</strong></p>
<p>You should use something like DOMContentsLoaded event to make sure the Data Object Model is loaded</p>
<p><strong>JavaScript</strong></p>
<pre><code>    window.addEventListener('DOMContentLoaded', (event) =&gt; {
        
   
      
      document.getElementById(&quot;option1&quot;).addEventListener(&quot;click&quot;, toggleOption1);
       toggleOption1();
  });
function toggleOption1() {

  var option1 = document.getElementById(&quot;option1&quot;);

  // if option1 is checked, run first script
  if (option1.checked === true) {
    console.log(&quot;checked&quot;);
    // chrome.tabs.executeScript({
    //       file: 'optionEnabled.js'
    //     });
  // otherwise, run script 2
  } else {
    console.log(&quot;not checked&quot;);
    // chrome.tabs.executeScript({
    //       file: 'optionDisabled.js'
    //     });
    }
}
</code></pre>
",1
65116208,"<p>You have drilled passed <code>attributes</code> when doing the object spread so you only assigned the inner values. There are a few ways you can solve this</p>
<pre><code>export default function MyFunction( props ) {
        const {
                attributes: {
                    foo1,
                    foo2
                },
                attributes, // grab attributes too
                setAttributes,
        } = props;

</code></pre>
<pre><code>export default function MyFunction( props ) {
        const {
                attributes,
                setAttributes,
        } = props;
        const { foo1, foo2 } = attributes; // grab the values after
</code></pre>
<p>Or you simply can just grab attributes like above and use dot notation <code>attributes.foo1</code></p>
",1
65084103,"<p>You can't really &quot;get&quot; a Firestore server timestamp.   <code>admin.firestore.FieldValue.serverTimestamp()</code> return a static token value object, not a date.  Those tokens are evaluated on the Firestore server at the time a write happens.</p>
<p>Since you are already running code on a Google backend in Cloud Functions, you can just use the current time as reckoned by JavaScript. It will be the same as the current time in Firestore, but you can do math on it.</p>
<pre><code>const now = Date.now()
const expiresAt = new Date(now + 24*60*60*1000)
</code></pre>
",1
65099077,"<p>Here's a quick snippet illustrating using either <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString"" rel=""nofollow noreferrer""><code>Date.prototype.toISOString()</code></a> or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toDateString"" rel=""nofollow noreferrer""><code>Date.prototype.toDateString()</code></a> to filter against a specified timestamp.</p>
<p>Since your timestamps are stored in seconds and javascript dates use milliseconds, you need to multiply by 1000 when creating your dates</p>
<pre><code>const filterTimestamp = 1606859476; // Tuesday, December 1, 2020 9:51:16 PM
const filterDate = new Date(filterTimestamp*1000);
</code></pre>
<p>You can then filter by comparing the first 10 characters of the date strings returned by <code>toISOString()</code> which will always keep the timezone as zero UTC offset</p>
<pre><code>const filterDateString = new Date(filterTimestamp*1000).toISOString().slice(0, 10);
// &quot;2020-12-01&quot; sliced from &quot;2020-12-01T21:51:16.000Z&quot;

const regsOnDate = regs.filter(o =&gt; (
  new Date(o.date*1000).toISOString().slice(0, 10) === filterDateString));
</code></pre>
<p>or by the date strings returned by <code>toDateString()</code> which will use the local timezone</p>
<pre><code>const filterDateString = new Date(filterTimestamp*1000).toDateString();
const regsOnDate = regs.filter(o =&gt; (
  new Date(o.date*1000).toDateString() === filterDateString));

// eg: compares &quot;Mon Nov 02 2020&quot; to &quot;Tue Dec 01 2020&quot;
</code></pre>
<hr />
<p><strong>Using <code>toISOString()</code></strong>
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const regs = [
  {
    ""id"": ""1"",
    ""date"": 1606826246, // Tuesday, December 1, 2020 12:37:26 PM
    ""customer"": ""customer 1"",
  },
  {
    ""id"": ""2"",
    ""date"": 1604353553, // Monday, November 2, 2020 9:45:53 PM
    ""customer"": ""customer 2"",
  },
  {
    ""id"": ""3"",
    ""date"": 1606860022, // Tuesday, December 1, 2020 10:00:22 PM
    ""customer"": ""customer 3"",
  }
]

const filterTimestamp = 1606859476; // Tuesday, December 1, 2020 9:51:16 PM
const filterDateString = new Date(filterTimestamp*1000).toISOString().slice(0, 10);
// ""2020-12-01"" sliced from ""2020-12-01T21:51:16.000Z""

const regsOnDate = regs.filter(o =&gt; (
  new Date(o.date*1000).toISOString().slice(0, 10) === filterDateString));

console.log( regsOnDate );</code></pre>
</div>
</div>
</p>
<hr />
<p><strong>Using <code>toDateString()</code></strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const regs = [
  {
    ""id"": ""1"",
    ""date"": 1606826246, // Tuesday, December 1, 2020 12:37:26 PM
    ""customer"": ""customer 1"",
  },
  {
    ""id"": ""2"",
    ""date"": 1604353553, // Monday, November 2, 2020 9:45:53 PM
    ""customer"": ""customer 2"",
  },
  {
    ""id"": ""3"",
    ""date"": 1606860022, // Tuesday, December 1, 2020 10:00:22 PM
    ""customer"": ""customer 3"",
  }
]


const filterTimestamp = 1606859476; // Tuesday, December 1, 2020 9:51:16 PM
const filterDateString = new Date(filterTimestamp*1000).toDateString();

const regsOnDate = regs.filter(o =&gt; (
  new Date(o.date*1000).toDateString() === filterDateString));

console.log( regsOnDate );</code></pre>
</div>
</div>
</p>
",1
65095874,"<p><code>forEach</code> loop doesn't work for defining an async step. Try <code>for...of</code> loop with <code>await</code></p>
<pre><code>for(let item of listItems){
  await $.getJSON('https://www.googleapis.com/youtube/v3/videos?part=statistics&amp;id=KS_Vw5DMlEI&amp;key=AIzaSyAlUj6YMmrt-0s34dQ-LdywneUzZhmsVYA')
    .done(data=&gt;{                                                                                             
       const viewsin = data.items[0].statistics.viewCount; 
       localStorage.setItem('ViewsCounter3', viewsin );
       alert('inside: ' + viewsin);                                                                          
    });
    alert('outside: ' + localStorage.getItem('ViewsCounter3'));
};
</code></pre>
",1
65092304,"<p>I followed similar principles as mentioned in this post to clear my cache. I just made the request on a setInterval rather than wrapping the app in a clear cache HOC. <a href=""https://dev.to/ammartinwala52/clear-cache-on-build-for-react-apps-1k8j"" rel=""nofollow noreferrer"">https://dev.to/ammartinwala52/clear-cache-on-build-for-react-apps-1k8j</a> the article this links to also has some good examples, it is worth looking at both. <a href=""https://dev.to/flexdinesh/cache-busting-a-react-app-22lk"" rel=""nofollow noreferrer"">https://dev.to/flexdinesh/cache-busting-a-react-app-22lk</a></p>
<p>Not sure if this is the best approach, but it works for me</p>
",1
65152805,"<p>Is it the same audio you want to loop (the edit implys it is)..
Anyways, you could use the onended event of audio</p>
<p><a href=""https://www.w3schools.com/jsref/event_onended.asp"" rel=""nofollow noreferrer"">https://www.w3schools.com/jsref/event_onended.asp</a></p>
<p>Maybe something like this:</p>
<pre><code>let beepCount = 0;
document.getElementById(&quot;beepAudio&quot;).addEventListener(&quot;ended&quot;, () =&gt; {
    beepCount++;
    if(beepCount &lt; 3){       
        document.getElementById(&quot;beepAudio&quot;).play();
    }
});
       
</code></pre>
<p>And then, when the time comes to beep:</p>
<pre><code>if (timer == 0) {
    stopTimer();
    beepCount = 0;             
    document.getElementById(&quot;beepAudio&quot;).play();
}
</code></pre>
",1
65117995,"<p><code>axios.get</code> returns a promise already, so you don't need to wrap it in the Promise constructor. Note that if you do construct a Promise, to avoid it never resolving, you must at least call <code>resolve</code> in the executor. In your case, <code>promiseLoad</code> was returning a Promise that never resolved, so you weren't seeing those logs.</p>
<pre class=""lang-js prettyprint-override""><code>function promiseLoad(nameID, uID, caption) {
    return axios.get(`${URL}/users/${uID}/name/${nameID}`)
        .then(res =&gt; {
            let obj;
            if(res.data !== -1) {
                obj = {
                    fullName: res.data,
                    caption: caption
                };
            }
            return obj;
    });
}
</code></pre>
",1
65144838,"<p>You're wrong in the part that destructuring makes <code>occupation</code> equivalent to <code>luke.occupation</code>. They both return <code>'jedi'</code>, until...</p>
<pre><code>let luke = { occupation: 'jedi', father: 'anakin' };
let {occupation, father} = luke;

console.log(occupation); // 'jedi'
luke.occupation = 'noLongerJedi'
console.log(occupation); // 'jedi'
console.log(luke.occupation); // 'noLongerJedi'
</code></pre>
<p>So, as you can see, destructuring copies <em>the current value of the destructured property</em> into the variable, but nothing more than that.</p>
<p>It's basically syntactic sugar for</p>
<pre><code>let occupation = luke.occupation
let father = luke.father
</code></pre>
<p>In your second case, the same happens.</p>
<p>The <code>setState</code> and <code>getState</code> properties of an object returned by <code>makeState</code> get assigned to the <code>setState</code> and <code>getState</code> variables.</p>
<p>The magic that they point to the same state, is in the functions themselves: they both receive a closure scope from their parent, <code>makeState</code>, and as they are from the same call to <code>makeState</code>, they access the same closure.</p>
<p>So, to answer your question anyway, you can think of this code like...</p>
<pre><code>const _temp = makeState()
const setState = _temp.setState
const getState = _temp.getState
</code></pre>
<p>...without having a <code>_temp</code> variable.</p>
",1
65123006,"<p>You can use the object destruction with ternary expression to do it:</p>
<pre class=""lang-js prettyprint-override""><code>firestore.doc(`users/${user.uid}`).set({
   email: user.email,
   name: user.displayName,
   ...(user.phoneNumber ? { phone: user.phoneNumber } : undefined),
   createdAt: firebase.firestore.FieldValue.serverTimestamp(),
});
</code></pre>
<p>It's not very elegant, but it get its job done in one line:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const phone = null;

const obj = {
  name: 'Alice',
  age: 24,
  ...(phone ? { phone } : undefined),
};

console.log(obj);</code></pre>
</div>
</div>
</p>
<h2>Edit</h2>
<p>According to <a href=""https://stackoverflow.com/a/40560953/10289265"">this answer</a> that ford04 mentioned, it also can be shortened like this:</p>
<pre class=""lang-js prettyprint-override""><code> ...(user.phoneNumber &amp;&amp; { phone: user.phoneNumber }),
</code></pre>
<h2>Edit, again</h2>
<p>But it's better to check its type properly that it might cause <code>0</code> and <code>&quot;&quot;</code> are not stored correctly</p>
<pre class=""lang-js prettyprint-override""><code> ...(![undefined, null].includes(user.phoneNumber) &amp;&amp; { phone: user.phoneNumber })
</code></pre>
",1
65127699,"<p><strong>Answer:</strong>
Replace the commas in your for loop declaration with semicolons!</p>
<p>i.e., the following:</p>
<pre><code>for (var i=0, i &lt; labels.length, i++) { 
</code></pre>
<p>should be:</p>
<pre><code>for (var i=0; i &lt; labels.length; i++) { 
</code></pre>
<p><strong>More info:</strong> The comma operator often shows up in minified javascript code, but it is rarely used by us humans. At first glance, the comma operator may appear to work similarly to a semicolon, but in this case they are very different: Your for loop expects 3 input statements, but your use of the comma operator produces just one. See this <a href=""https://stackoverflow.com/a/15485846/2540235"">SO answer for more</a></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var labels = document.querySelectorAll(""#uniteLabel""),
unitOutputs = document.querySelectorAll(""#uniteOutput"");

for (var i=0; i &lt; labels.length; i++) {
  if (labels[i].innerHTML == ""En travers"") {
    unitOutputs[i].innerHTML = ""Stère"";
  } else if (labels[i].innerHTML == ""A l’unité de produit"") {
    unitOutputs[i].innerHTML = ""Stère"";
  } else if (labels[i].innerHTML == ""En bloc"") {
    unitOutputs[i].innerHTML = ""m3"";
  }
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""post""&gt;
  &lt;div id=""uniteLabel""&gt;En travers&lt;/div&gt;
  &lt;div id=""uniteOutput""&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=""post""&gt;
  &lt;div id=""uniteLabel""&gt;A l’unité de produit&lt;/div&gt;
  &lt;div id=""uniteOutput""&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;div class=""post""&gt;
  &lt;div id=""uniteLabel""&gt;En bloc&lt;/div&gt;
  &lt;div id=""uniteOutput""&gt;&lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65129529,"<p>You can create an array with the two options for text:</p>
<pre><code>var array = [&quot;hello&quot;, &quot;world&quot;];
</code></pre>
<p>Then you will choose random index of the array as follow:</p>
<pre><code>var index = Math.floor(Math.random() * array.length);
</code></pre>
<p>Now you can just get random chosen text (between the texts in the array) by the random index:</p>
<pre><code>var ChosenText = array[index];
</code></pre>
<p>Notice that this would work no matter what the length of the array would be.</p>
<p>Try to run it:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var array = [""hello"", ""world""];
var index = Math.floor(Math.random() * array.length);
var ChosenText = array[index];
console.log(ChosenText);</code></pre>
</div>
</div>
</p>
",1
65148830,"<p>I think you have a dot in the wrong place and you are missing parenthesis and other problems:</p>
<ul>
<li><p>The get function of a firestore document should be <code>get()</code>:</p>
<pre><code>// Wrong
userRef.where('userId', '==', senderId).get;
// Correct
userRef.where('userId', '==', senderId).get();
</code></pre>
</li>
<li><p>Replace every occurrence of <code>await.</code> with <code>await </code>:</p>
<pre><code>// Wrong
const receiverDoc = await.userRef.where('userId', '==', receiverId).get();
// Correct
const receiverDoc = await userRef.where('userId', '==', receiverId).get();
</code></pre>
</li>
<li><p>Use <strong>backticks</strong> for templating:</p>
<pre><code>let a = `users/${uid}`    // NOTE!!!!!!!! ` not ' or &quot;
</code></pre>
</li>
<li><p>What do the <code>forEach</code> loops do?</p>
</li>
</ul>
<p>Be careful and check your code again.</p>
",1
65123942,"<p>As Pavel already pointed out you need to stop event propagation. Otherwise after openening the new tab the event still propagates to the click handler of the table row.</p>
<p>Adding a click listener to your anchors that will stop event propagation should fix your problem</p>
<pre><code>function TableRow() {

  const rows = document.querySelectorAll('table tr[data-url]');

  rows.forEach(row =&gt; {
    row.addEventListener('click', function(e) {
      handleClick(row, e);
    });
  });

  function handleClick(row, e) {
    let url = row.getAttribute('data-url');
    window.document.location = url;
  }

  const anchors = document.querySelectorAll('table tr[data-url] a');
  anchors.forEach(anchor =&gt; {
    anchor.addEventListener('click', function(e) {
      e.stopPropagation();
    });
  });

}

document.addEventListener('DOMContentLoaded', TableRow);
</code></pre>
",1
65100405,"<p>You’re basically grouping cities by their state. First of all, <code>array.map</code> is not the proper method for this problem, cus when you group, the input item’s number might not match with the output’s. <code>array.reduce</code> is better option.</p>
<pre class=""lang-js prettyprint-override""><code>let newCityStateObject = cities.reduce((acc, item, index) =&gt; {
  if (item) {
    // this object has state as key, and the desired output array’s item as value
    const object = acc.obj;

    // if state not found, create new record
    if (object[item.state] === undefined) {
      const record = { name: item.state, cities: [] }
      object[item.state] = record;
      acc.array.push(record);
    }

    const record = object[item.state];
    record.cities.push(item.city);
  }
  return acc;
}, { obj: {}, array: [] }).array;
</code></pre>
",1
65084123,"<p>Consider the case when n=1 and k=1. Your function will be equivalent to:</p>
<pre><code>let res = [];
let temp = [];

for (let i = 1; i &lt;= 1; i++) {
    temp.push(i);
    if (temp.length === 1) {
       res.push(temp.slice());
       // wrong: res.push(temp);
    }
    temp.pop();
}
</code></pre>
<p>When you are pushing <code>temp</code> to <code>res</code>, you are pushing a reference to it. When you call <code>temp.pop()</code>, that array inside of <code>res</code> will also be modified. When you use <code>temp.slice</code>, you are creating a one-level deep clone of <code>temp</code>, which allows you to call pop on <code>temp</code> without modifying that clone.</p>
",1
65129079,"<p>There is no return or render,
Check the <a href=""https://codesandbox.io/s/practical-maxwell-keeu0?file=/src/App.js"" rel=""nofollow noreferrer"">sandbox code</a>:</p>
<pre><code>import React from &quot;react&quot;;
import Tree from &quot;react-tree-graph&quot;;
import &quot;./styles.css&quot;;

const data = {
  name: &quot;Parent&quot;,
  children: [
    {
      name: &quot;Child One&quot;
    },
    {
      name: &quot;Child Two&quot;
    }
  ]
};
export default function App() {
  return (
    &lt;div className=&quot;custom-container&quot;&gt;
      &lt;Tree data={data} height={200} width={400} /&gt;
    &lt;/div&gt;
  );
}


</code></pre>
",1
65106048,"<p>Try like this: <a href=""https://jsfiddle.net/2sce13n4/"" rel=""nofollow noreferrer"">https://jsfiddle.net/2sce13n4/</a></p>
<pre class=""lang-js prettyprint-override""><code>  yAxes: [{
    type: &quot;CategoryAxis&quot;,
    dataFields: {
      category: &quot;name&quot;
    },
    renderer: {
      minGridDistance: 1,
      ...
    }
  }],
</code></pre>
<p>By setting the y-axis <a href=""https://www.amcharts.com/docs/v4/concepts/axes/positioning-axis-elements/#Setting_the_density_of_the_the_grid_labels"" rel=""nofollow noreferrer"">minGridDistance</a> to a value less than the default of <code>120</code>, the grid lines are allowed to be closer together as the chart gets smaller.</p>
",1
65148842,"<p>You can use a <code>Card</code> class instead of an object to represent each card.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class Card {
  constructor(suit, rank) {
    this.suit = suit;
    this.rank = rank;
  }
}
class Deck {
  static suits = [""S"", ""C"", ""D"", ""H""];
  static ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, ""J"", ""Q"", ""K"", ""A""];
  constructor() {
    this.cards = this.getAllCards();
  }
  getAllCards() {
    var cards = [];

    for (var i = 0; i &lt; Deck.suits.length; i++) {
      for (var j = 0; j &lt; Deck.ranks.length; j++) {
        var card = new Card(Deck.suits[i], Deck.ranks[j]);
        cards.push(card);
      }
    }
    return cards;
  }
}
console.log(new Deck().cards);</code></pre>
</div>
</div>
</p>
<p>As <a href=""https://stackoverflow.com/users/1243641/scott-sauyet"">Scott Sauyet</a> suggests, the <code>flatMap</code> and <code>map</code> operations can also be applied for more concise code.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class Card {
  constructor(suit, rank) {
    this.suit = suit;
    this.rank = rank;
  }
}
class Deck {
  static suits = [""S"", ""C"", ""D"", ""H""];
  static ranks = [2, 3, 4, 5, 6, 7, 8, 9, 10, ""J"", ""Q"", ""K"", ""A""];
  constructor() {
    this.cards = Deck.suits.flatMap(suit =&gt; Deck.ranks.map(rank =&gt; new Card(suit, rank)));
  }
}
console.log(new Deck().cards);</code></pre>
</div>
</div>
</p>
",1
65107322,"<p>One just wants to listen to the changes of a select element.</p>
<p>Thus one somehow needs to identify this very select element and not so much each of its option elements. The latter one's then do not need to feature either a <code>name</code>- or an <code>id</code>-attribute but a <code>value</code>-attribute instead.</p>
<p>Then one does implement an event handler which does read the currently selected option's value and also does write this very value to the desired/related html-element.</p>
<p>One also needs to provide the event listening/handling to the formerly mentioned select element.</p>
<p>In addition one wants to synchronize the default selected value with the displaying element at load/render time.</p>
<p><em><strong>Note</strong></em></p>
<p>For security reasons one does not really want to render a text value via <code>innerHTML</code> ... in this case a <code>textContent</code> write access does the job just fine.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function handleMonthOptionChangeForRelatedDisplay(evt) {

  const elementDisplay = document.querySelector('#month');
  const elementSelect = evt.currentTarget;

  if (elementDisplay &amp;&amp; elementSelect) {

    const elementSelect = evt.currentTarget;
    const selectedIndex = elementSelect.selectedIndex;

    elementDisplay.textContent = elementSelect[selectedIndex].value
  }
}

function initMonthOptionChange() {
  const elementSelect = document.querySelector('#month-options');
  elementSelect.addEventListener('change', handleMonthOptionChangeForRelatedDisplay);
}

// window.onload = function () {
//   handleMonthOptionChangeForRelatedDisplay({
//     currentTarget: document.querySelector('#month-options')
//   });
//   initMonthOptionChange();
// }

handleMonthOptionChangeForRelatedDisplay({
  currentTarget: document.querySelector('#month-options')
});
initMonthOptionChange();</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;select name=""plan_option"" id=""month-options""&gt;
  &lt;option value=""""&gt;&lt;/option&gt;
  &lt;option value=""Ogni Mese""&gt;ogni mese&lt;/option&gt;
  &lt;option value=""Ogni due Mesi"" selected&gt;ogni due mesi&lt;/option&gt;
&lt;/select&gt;

&lt;p id=""month""&gt;&lt;/p&gt;</code></pre>
</div>
</div>
</p>
<p>In case the OP has to render an option-specific text-value different from the option element's <code>value</code>-attribute there was still the approach of providing this information via an option-specific <code>data</code>-attribute in order to keep the handler-implementation as generic (without any additional and case-specific compare-logic) as possible ...</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function displayBoundBillingFrequency(evt) {

  const elementSelect = evt.currentTarget;
  if (elementSelect) {

    const selectedOption = elementSelect[elementSelect.selectedIndex];

    // `this` equals the bound billing-frequency display-element.
    this.textContent = (selectedOption.dataset.billingFrequency || '');
  }
}

function mainInit() {

  const planOptions = document.querySelector('#plan-options');
  const frequencyDisplay = document.querySelector('#plan-billing-frequency');

  if (planOptions &amp;&amp; frequencyDisplay) {

    const displayBillingFrequency = displayBoundBillingFrequency.bind(frequencyDisplay);

    // synchronize display data initially.
    displayBillingFrequency({
      currentTarget: planOptions,
    });

    // initialize event listening/handling
    planOptions.addEventListener('change', displayBillingFrequency);
  }
}

mainInit();</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;select name=""plan_option"" id=""plan-options""&gt;
  &lt;option value=""""&gt;&lt;/option&gt;
  &lt;option value=""541758"" data-billing-frequency=""ogni mese"" selected&gt;First Option&lt;/option&gt;
  &lt;option value=""752649"" data-billing-frequency=""ogni due mesi""&gt;Second Option&lt;/option&gt;
  &lt;option value=""invalid""&gt;Invalid Option&lt;/option&gt;
&lt;/select&gt;

&lt;p id=""plan-billing-frequency""&gt;&lt;/p&gt;</code></pre>
</div>
</div>
</p>
",1
65098593,"<p>I think this is a really solid base. If it were me I would do almost exactly what you are doing but set up an array with the list of available sound bites. Then, <code>onmouseover</code> pass in a number (0-5) and use that as the selector to choose which soundbyte plays.</p>
<pre><code>var sounds = [&quot;sound1&quot;, &quot;sound2&quot;, &quot;sound3&quot;, &quot;sound4&quot;, &quot;sound5&quot;];

function playAudio(track) {
   audio.play(sounds[track]);
}
</code></pre>
<p>Hopefully that's clear/helpful. Otherwise, let me know and I'll be glad to clarify.</p>
",1
65088715,"<p>window storage saves strings. You need to cast them to ints:</p>
<pre><code>function countdown(time_p) {
  var time = sessionStorage.getItem('saved_countdown');

  if (time) {
    time = +time; // cast the string to number
  }
  else {
    // Set the time we're counting down to using the time allowed
    var new_countdown = new Date().getTime() + (time_p + 2) * 1000;
    time = new_countdown;
    sessionStorage.setItem('saved_countdown', new_countdown);
  } 
</code></pre>
",1
65147667,"<p>Since database queries are asynchronous and don't compete immediately, you will want to put your query in a useEffect hook so that the component knows when to render with new content.</p>
",1
65156663,"<p>You can use absolute positioning for overlay and spinner.
Just render them inside your form, on the bottom.</p>
<pre><code>.form {
  // use relative on your form

  position: relative;
}
.overlay {
  position: absolute;

  // this will stretch overlay to fill width and height of form
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;

  background-color: rgba(0, 0, 0, 0.1); // some transparent grey color
}

.spinner {
  position: absolute;

  // this will place spinner in center of form
  top: 50%;
  left: 50%;

  transform: translate(-50%, -50%);
}
</code></pre>
",1
65145149,"<p>Because according to TS DOM typings, <code>write</code> only exists on <code>Document</code> type.
Maybe it worth updating TS version, maybe not)</p>
<p>There is one fast workaround:</p>
<pre class=""lang-js prettyprint-override""><code>let doc = (this.iframe.contentDocument || this.iframe.contentWindow) as Document;
</code></pre>
<p>Please, double check if <code>write</code> method exists in case <code>this.iframe.contentDocument === null // true</code></p>
",1
65123805,"<p>Try out to use <code>%</code> inside the sql string and remove it from the params :</p>
<pre><code>var cent = &quot;search&quot;;
con.connect(function (err) {
if (err) throw err;
var sql =&quot;SELECT * FROM cadito.activitys WHERE description like %?%&quot;;
//Send an array with value(s) to replace the escaped values:
con.query(sql, [cent], function (err, result) {
    console.log(global.re = JSON.stringify((result)));
});

});
</code></pre>
",1
65158841,"<p>You can map through the array and then call the function. I am not sure what your array is called so its hard to give you a relevant code example but I can try</p>
<pre><code>arrayNameHere.map((role) =&gt; {
    c.updateOverwrite(role, { VIEW_CHANNEL: true, SEND_MESSAGES: true, MANAGE_MESSAGES: true })
})
</code></pre>
",1
65125286,"<p>The date parses if you replace the first <code>:</code> with space</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const str = ""02/Dec/2020:23:58:15 +0000""

console.log(new Date(str.replace(/:/,"" ""))); // change only the first colon</code></pre>
</div>
</div>
</p>
<p>For a safer version it seems we need to do this  - tested in Safari, Chrome and Firefox</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const monthNames = [""jan"", ""feb"", ""mar"", ""apr"", ""may"", ""jun"", ""jul"", ""aug"", ""sep"", ""oct"", ""nov"", ""dec""];
const re = /(\d{2})\/(\w{3})\/(\d{4}):(\d{2}):(\d{2}):(\d{2}) (.*)/;

const makeDate = str =&gt; {
  const [_, dd, mmm, yyyy, hh, min, ss, tz] = str.match(re)
  const tzStr = [tz.slice(0, 3), ':', tz.slice(3)].join(''); // make ±hh:mm
  const mm = monthNames.indexOf(mmm.toLowerCase()); // English only
  const isoString = `${yyyy}-${mm}-${dd}T${hh}:${min}:${ss}${tzStr}`
  console.log(isoString)
  return new Date(isoString)
};

const str = ""02/Dec/2020:23:58:15 +0000""
const d = makeDate(str);
console.log(d)</code></pre>
</div>
</div>
</p>
",1
65157905,"<p>As you need to select only one checkbox at a time you can remove <code>checked</code> from other checkboxes whenever any checkbox is checked using <code>$('tbody &gt; tr .checkbox').not(this).prop('checked',false);</code> then you just need to loop through your <code>trs</code> to add or remove <code>name</code> attributes.</p>
<p><em><strong>Demo Code</strong></em>:
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('input[type=checkbox] ').on('change', function() {
  $('tbody &gt; tr .checkbox').not(this).prop('checked',false);//remove checked from other checkbox
  //loop thrugh trs
  $(""tbody &gt; tr"").each(function() {
//add or remove name attribute
   var selector = $(this)
    if (selector.find('input[type=checkbox]').prop(""checked"") == true) {
      selector.find('.visa_type').attr('name', 'visa_type');
      selector.find("".processing_type"").attr('name', 'processing_type');
      selector.find('.travel_date').attr('name', 'travel_date');

    } else if (selector.find('input[type=checkbox]').prop(""checked"") == false) {
      selector.find('.visa_type').attr('name', '');
      selector.find("".processing_type"").attr('name', '');
      selector.find('.travel_date').attr('name', '');

    }
  })

});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;table class=""table  table-bordered table-responsive"" id=""flip-scroll""&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th scope=""col""&gt;Visa Option&lt;/th&gt;
      &lt;th scope=""col""&gt;Processing Type&lt;/th&gt;
      &lt;th height=""60"" scope=""col""&gt;Travel Date&lt;/th&gt;
      &lt;th scope=""col""&gt;Price&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;


    &lt;tr class=""valid-container""&gt;
      &lt;input type=""hidden"" class=""id"" value=""1""&gt;
      &lt;td style=""cursor:pointer;"" width=""200""&gt;&lt;input type=""checkbox"" name=""c1"" class=""checkbox""&gt;&amp;nbsp; &lt;output class=""visa_type"" style=""font-size:14.5px !important;"" value=""90 days single visa""&gt;90 days single visa&lt;/output&gt;&lt;/td&gt;

      &lt;td height=""52"" width=""158""&gt;
        &lt;select class=""custom-select processing_type"" required=""""&gt;
          &lt;option value=""15000"" selected=""""&gt;Normal&lt;/option&gt;
          &lt;option value=""20000""&gt;Express&lt;/option&gt;
        &lt;/select&gt;
      &lt;/td&gt;


      &lt;td width=""190"" height=""60""&gt;

        &lt;div class=""input-group date"" data-date-format=""dd.mm.yyyy""&gt;
          &lt;div class=""input-group mb-2""&gt;
            &lt;input type=""text"" class=""form-control travel_date"" value=""dd.mm.yyyy"" placeholder=""dd.mm.yyyy""&gt;
            &lt;div class=""input-group-text""&gt;&lt;i class=""ti-calendar""&gt;&lt;/i&gt;&lt;/div&gt;
            &lt;div class=""input-group-addon""&gt;
            &lt;/div&gt;
            &lt;div class=""input-group-prepend""&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;

      &lt;/td&gt;

      &lt;td width=""166""&gt;AED&amp;nbsp;&amp;nbsp; &lt;output class=""package_price""&gt;15000&lt;/output&gt;.00&lt;/td&gt;

    &lt;/tr&gt;

    &lt;tr class=""valid-container""&gt;
      &lt;input type=""hidden"" class=""id"" value=""2""&gt;
      &lt;td style=""cursor:pointer;"" width=""200""&gt;&lt;input type=""checkbox"" name=""c1"" class=""checkbox""&gt;&amp;nbsp; &lt;output class=""visa_type"" style=""font-size:14.5px !important;"" value=""30 days""&gt;30 days&lt;/output&gt;&lt;/td&gt;

      &lt;td height=""52"" width=""158""&gt;
        &lt;select class=""custom-select processing_type"" required=""""&gt;
          &lt;option value=""11"" selected=""""&gt;Normal&lt;/option&gt;
          &lt;option value=""22""&gt;Express&lt;/option&gt;
        &lt;/select&gt;
      &lt;/td&gt;


      &lt;td width=""190"" height=""60""&gt;

        &lt;div class=""input-group date"" data-date-format=""dd.mm.yyyy""&gt;
          &lt;div class=""input-group mb-2""&gt;
            &lt;input type=""text"" class=""form-control travel_date"" value=""dd.mm.yyyy"" placeholder=""dd.mm.yyyy""&gt;
            &lt;div class=""input-group-text""&gt;&lt;i class=""ti-calendar""&gt;&lt;/i&gt;&lt;/div&gt;
            &lt;div class=""input-group-addon""&gt;
            &lt;/div&gt;
            &lt;div class=""input-group-prepend""&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;

      &lt;/td&gt;

      &lt;td width=""166""&gt;AED&amp;nbsp;&amp;nbsp; &lt;output class=""package_price""&gt;11&lt;/output&gt;.00&lt;/td&gt;

    &lt;/tr&gt;

    &lt;tr class=""valid-container""&gt;
      &lt;input type=""hidden"" class=""id"" value=""3""&gt;
      &lt;td style=""cursor:pointer;"" width=""200""&gt;&lt;input type=""checkbox"" name=""c1"" class=""checkbox""&gt;&amp;nbsp; &lt;output class=""visa_type"" style=""font-size:14.5px !important;"" value=""90 days""&gt;90 days&lt;/output&gt;&lt;/td&gt;

      &lt;td height=""52"" width=""158""&gt;
        &lt;select class=""custom-select processing_type"" required=""""&gt;
          &lt;option value=""22"" selected=""""&gt;Normal&lt;/option&gt;
          &lt;option value=""33""&gt;Express&lt;/option&gt;
        &lt;/select&gt;
      &lt;/td&gt;


      &lt;td width=""190"" height=""60""&gt;

        &lt;div class=""input-group date"" data-date-format=""dd.mm.yyyy""&gt;
          &lt;div class=""input-group mb-2""&gt;
            &lt;input type=""text"" class=""form-control travel_date"" value=""dd.mm.yyyy"" placeholder=""dd.mm.yyyy""&gt;
            &lt;div class=""input-group-text""&gt;&lt;i class=""ti-calendar""&gt;&lt;/i&gt;&lt;/div&gt;
            &lt;div class=""input-group-addon""&gt;
            &lt;/div&gt;
            &lt;div class=""input-group-prepend""&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;

      &lt;/td&gt;

      &lt;td width=""166""&gt;AED&amp;nbsp;&amp;nbsp; &lt;output class=""package_price""&gt;22&lt;/output&gt;.00&lt;/td&gt;

    &lt;/tr&gt;


  &lt;/tbody&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</p>
",1
65117754,"<h3>Modification points:</h3>
<p>From your error message, I thought that there might be the parts which are not enclosed by the double quota. So, I searched When I saw your CSV data and your CSV data is replaced <code>\&quot;(|.+?)\&quot;</code> with <code>&quot;&quot;</code> using the following script, it was found that the row 711 has the value.</p>
<pre><code>function sample() {
  var id = &quot;###&quot;;  // File ID of your CSV file.

  // This is your script.
  var file = DriveApp.getFileById(id);
  var rows = Utilities.parseCsv(file.getBlob().getDataAsString());
  var numColumns = rows[0].length;
  var date = &quot;sample&quot;;
  rows.forEach(function(row){
    row[numColumns] = date;
  });
  rows[0][numColumns] = 'Date';
  let csvRows = rows.map(values =&gt;values.map(value =&gt; JSON.stringify(value).replace(/\\&quot;/g, '&quot;&quot;')));
  let csvData = csvRows.map(values =&gt; values.join(',')).join('\n');
  
  // I added below script for checking your CSV data.
  var res = csvData.replace(/\&quot;(|.+?)\&quot;/g, &quot;&quot;);
  DriveApp.createFile(&quot;sample.txt&quot;, res);
}
</code></pre>
<p>The row 711 is as follows.</p>
<pre><code>&quot;https://supergoop.com/products/lip-shield-trio/?utm_source=Gorgias&amp;utm_medium=CustomerCare&amp;utm_campaign=crosssellhello\&quot;,&quot;text/html; charset=utf-8&quot;,&quot;200&quot;,&quot;OK&quot;,&quot;Non-Indexable&quot;,&quot;Canonicalised&quot;,&quot;Lip Shield Trio - Restores, Protects + Water-resistant – Supergoop!&quot;,&quot;67&quot;,&quot;595&quot;,&quot;Moisturizing lip protection made from antioxidant-rich coconut, avocado, and grape seed oil.&quot;,&quot;92&quot;,&quot;576&quot;,&quot;&quot;,&quot;0&quot;,&quot;Lip Shield Trio&quot;,&quot;15&quot;,&quot;Lip Shield Trio&quot;,&quot;15&quot;,&quot;Why We Love It&quot;,&quot;14&quot;,&quot;Ingredients&quot;,&quot;11&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;https://supergoop.com/products/lip-shield-trio&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;451488&quot;,&quot;754&quot;,&quot;1.686&quot;,&quot;5&quot;,&quot;&quot;,&quot;12&quot;,&quot;4&quot;,&quot;0.590&quot;,&quot;205&quot;,&quot;80&quot;,&quot;8&quot;,&quot;5&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;f6d1476960d22b1c5964581e161bdd49&quot;,&quot;0.064&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;&quot;,&quot;HTTP/1.1&quot;,&quot;https://supergoop.com/products/lip-shield-trio/?utm_source=Gorgias&amp;utm_medium=CustomerCare&amp;utm_campaign=crosssellhello%5C&quot;
</code></pre>
<p>From this value, I found that <code>\&quot;</code> is used at <code>&quot;https://supergoop.com/products/lip-shield-trio/?utm_source=Gorgias&amp;utm_medium=CustomerCare&amp;utm_campaign=crosssellhello\&quot;</code>. I thought that the reason of your issue might be due to this.</p>
<p>So in order to avoid this issue, how about the following modification?</p>
<h3>Modified script:</h3>
From:
<pre><code>let csvRows = rows.map(values =&gt;values.map(value =&gt; JSON.stringify(value).replace(/\\&quot;/g, '&quot;&quot;')));
</code></pre>
To:
<pre><code>let csvRows = rows.map(values =&gt;values.map(value =&gt; JSON.stringify(value).replace(/\\&quot;/g, '&quot;&quot;').replace(/\\&quot;/g, '')));
</code></pre>
<p>or</p>
From:
<pre><code>var rows = Utilities.parseCsv(file.getBlob().getDataAsString());
</code></pre>
To:
<pre><code>var rows = Utilities.parseCsv(file.getBlob().getDataAsString().replace(/\\/g, ''));
</code></pre>
<ul>
<li>By this modification, I could confirm that the file size was reduced with 2 bytes between your script and the modified script. And also, when above check script is used for the CSV data using the modified script, I could confirm that all rows have no values.</li>
</ul>
",1
65148294,"<p>Rather than tracking the current date, use a counter to keep track of the current month number. Then subtract or add one that that number for previous or next. And se the month using that number.</p>
<p>Here is a fork of your project with this solution:</p>
<p><a href=""https://codesandbox.io/s/clever-rgb-mryst"" rel=""nofollow noreferrer"">https://codesandbox.io/s/clever-rgb-mryst</a></p>
<p>And the code:</p>

<pre><code>import React, { useState } from &quot;react&quot;;
import &quot;./styles.css&quot;;

export default function App() {
   const [visibleMonth, setVisibleMonth] = useState(new Date().getMonth());
  //  const [countTwo, setCountTwo] = useState(1);
  const [dates, setDates] = useState(null);

  const getDaysArray = async (s, e) =&gt; {
    let a = [];
    for (let d = new Date(s); d &lt;= e; d.setDate(d.getDate() + 1)) {
      a.push(new Date(d).toString());
    }

    return a;
  };

  const prevMonth = async () =&gt; {
    let d = new Date();
    d.setMonth(visibleMonth - 1);
    setVisibleMonth((state) =&gt; visibleMonth - 1);
    let firstDay = new Date(d.getFullYear(), d.getMonth(), 1);
    let lastDay = new Date(firstDay.getFullYear(), firstDay.getMonth() + 1, 0);
    const dates = await getDaysArray(firstDay, lastDay);
    setDates(dates);
  };

  const nextMonth = async () =&gt; {
    let d = new Date();
    d.setMonth(visibleMonth + 1);
    setVisibleMonth((state) =&gt; visibleMonth + 1);

    let firstDay = new Date(d.getFullYear(), d.getMonth(), 1);
    let lastDay = new Date(firstDay.getFullYear(), firstDay.getMonth() + 1, 0);

    const dates = await getDaysArray(firstDay, lastDay);
    setDates(dates);
  };

  return (
    &lt;div className=&quot;App&quot;&gt;
      &lt;button onClick={prevMonth}&gt;Prev Month&lt;/button&gt;
      &lt;button onClick={nextMonth}&gt;Next Month&lt;/button&gt;
      {dates &amp;&amp;
        dates.map((item, i) =&gt; {
          return &lt;div key={i}&gt;{item}&lt;/div&gt;;
        })}
    &lt;/div&gt;
  );
}
</code></pre>

",1
65089641,"<p>The solution of the question depends on the scenario you want to program in!. Here are some of the possible scenarios with your code.</p>
<p>Define an object and infer its keys from it.</p>
<pre class=""lang-js prettyprint-override""><code>const persons = [
  { name: &quot;John&quot;, age: 12 },
  { name: &quot;Ben&quot;, age: 20 }
];

const fun = (info: typeof persons) =&gt; {
  //You will get intellisense here
  console.log(info[0].name);
};
</code></pre>
<p>You want to have objects with fixed keys, you can use types and interfaces in that case.</p>
<pre class=""lang-js prettyprint-override""><code>interface IPerson {
  id?: string; // ID is optional (use of ? operator)
  name: string; // Name is Required
  age: number;
}

const persons: Array&lt;IPerson&gt; = [
  { name: &quot;John&quot;, age: 12 },
  { name: &quot;Ben&quot;, age: 20 }
];

// Both are same: Array&lt;IPerson&gt; === IPerson[]
const fun = (info: Array&lt;IPerson&gt;) =&gt; {
  //You will get intellisense here
  console.log(info[0].name);
};
</code></pre>
<p>You want to have object with fixed keys, and you want to provide partial information.</p>
<pre class=""lang-js prettyprint-override""><code>interface IPerson {
  id?: string; // ID is optional (use of ? operator)
  name: string; // Name is Required
  age: number;
}

const persons: Array&lt;Partial&lt;IPerson&gt;&gt; = [
  { name: &quot;John&quot; }, // You can do it.
  { name: &quot;Ben&quot;, age: 20 }
];

// Both are same: Array&lt;IPerson&gt; === IPerson[]
const fun = (info: Partial&lt;IPerson&gt;[]) =&gt; {
  //You will get intellisense here
  console.log(info[0].name);
};
</code></pre>
<p>Additional Information, Typescript does not support runtime type checking, it only supports type checking at compile type.</p>
<p>For validation at runtime you can implement the function as follows:</p>
<pre class=""lang-js prettyprint-override""><code>const is_valid_person = (person: any): Boolean =&gt; {
  return (
    typeof person === &quot;object&quot; &amp;&amp;
    typeof person.name === &quot;string&quot; &amp;&amp;
    typeof person.age === &quot;number&quot; &amp;&amp;
    person.name.length &gt;= 5 &amp;&amp;
    person.age &gt;= 1
  );
};

console.log(&quot;Is person valid: &quot;, is_valid_person({}));
console.log(&quot;Is person valid: &quot;, is_valid_person(&quot;Invalid Person&quot;));
</code></pre>
<p>I hope one of the above ways should solve your problem.</p>
<blockquote>
<p>In my case it is correct to use this construction: obj: Array  or i should define each key of my object?</p>
</blockquote>
<p>Answer to above question is:</p>
<ul>
<li><p>You can use any one of shown method above, because typescript helps you write better code and make less mistakes at compile time. Once your program gets compiled, the code that gets executed is plain Javascript. And javascript doesn't validate your responses.</p>
</li>
<li><p>All the above patterns generate same <code>JavaScript</code> code, so there are no performance issues.</p>
</li>
</ul>
",1
65122544,"<p>You should use state for <code>userId</code> instead of scope variable.</p>
<pre class=""lang-js prettyprint-override""><code>const [userID, setUserID] = useState(null)
</code></pre>
<pre class=""lang-js prettyprint-override""><code>firebase.auth().onAuthStateChanged((user) =&gt; {
  if (user) {
    setUserID(user.uid)
  } else {
    history.push('/login');
  }
});
</code></pre>
",1
65108701,"<p>Since you're returning an array and not an object from <code>getPagedData</code> you need to update your <code>componentDidMount</code> to:</p>
<pre><code>componentDidMount(){
  const [aircrafts, totalCount] = this.getPagedData();
  this.setState({ aircrafts, totalCount });
}
</code></pre>
",1
65131589,"<p>From <a href=""https://moment.github.io/luxon/docs/manual/formatting.html#table-of-tokens"" rel=""nofollow noreferrer"">Luxon's table of tokens</a></p>
<pre class=""lang-none prettyprint-override""><code>Z       narrow offset   +5
ZZ      short offset    +05:00
ZZZ     techie offset   +0500
</code></pre>
<p>Thus, you can use <code>ZZZ</code> to emit the offset in the format you requested.</p>
<p><em>However,</em>  be aware that combining this in the way that you asked would produce a string that is not compliant with ISO 8601.</p>
<p>ISO 8601 (in section 4.3.2) provides two valid formats, &quot;Basic&quot; and &quot;Extended&quot;:</p>
<pre class=""lang-none prettyprint-override""><code>Basic format                Example
YYYYMMDDThhmmss             19850412T101530
YYYYMMDDThhmmssZ            19850412T101530Z
YYYYMMDDThhmmss±hhmm        19850412T101530+0400
YYYYMMDDThhmmss±hh          19850412T101530+04

Extended format             Example
YYYY-MM-DDThh:mm:ss         1985-04-12T10:15:30
YYYY-MM-DDThh:mm:ssZ        1985-04-12T10:15:30Z
YYYY-MM-DDThh:mm:ss±hh:mm   1985-04-12T10:15:30+04:00
YYYY-MM-DDThh:mm:ss±hh      1985-04-12T10:15:30+04
</code></pre>
<p>Most people use the extended format, and sometimes you will find the basic format (especially in URLs).  But you have combined the date and time from the extended format with the offset from the basic format, which is not a supported combination.</p>
<p>Unless you are locked into this for some reason, I suggest moving to either the basic or extended format.</p>
",1
65155230,"<p>In the failing test case, the output &quot;fl&quot; is rejected because one of the strings does not start with &quot;fl&quot;.</p>
<p>The misunderstanding concerning the meaning of <em>common prefix</em> may be in one of those two terms:</p>
<ul>
<li><strong>prefix</strong>: the substring must occur <em>at the start</em> of the string -- before (&quot;pre&quot;) all other characters, not at the end of a string (a &quot;suffix&quot;) or anywhere else (a &quot;substring&quot;). In your failing test case, the third word has &quot;fl&quot;, but that &quot;fl&quot; does not occur at the start of the string, so it is irrelevant.</li>
<li><strong>common</strong>: <em>all</em> input strings must have that prefix, not just a few. In the failing test case, there are two words that start with &quot;flow&quot;, but since the third word does not have it, it does not count as <em>common</em>.</li>
</ul>
",1
65161385,"<p>It's easy to add inline styles in react. <code>style={{color: &quot;red&quot;}}</code> this is how you do it.</p>
",1
65124264,"<p>Just run .each over the checked ones</p>
<pre class=""lang-js prettyprint-override""><code>$('#form').on('submit', function(e) {
    e.preventDefault();
    $('.checkbox:checked',this).each(function() {
      const $row = $(this).closest(&quot;tr&quot;); 
      const id = $row.id;
      const package_name = $row.find('.visa_type').val();
    })
</code></pre>

<p>You CAN do this <code>.on(&quot;input&quot;</code> and have the fields update on any change</p>
",1
65100024,"<p><a href=""https://reactjs.org/docs/react-component.html#setstate"" rel=""nofollow noreferrer"">setState</a></p>
<p>The updater function takes only two arguments, <code>state</code> and <code>props</code>. <code>state</code> is a reference to the component state at the time the change is being applied.</p>
<pre><code>(state, props) =&gt; stateChange
</code></pre>
<p>You can simply access the version of <code>newCheckMarkValue</code> enclosed in the outer scope of <code>uncheckAllUnsentHandler</code>.</p>
<pre><code>uncheckAllUnsentHandler = (e) =&gt; {
  const newCheckMarkValue = e.target.checked;
  this.setState((prevState, props) =&gt; {
    const newUnsentMail = prevState.unsentMail.map(policy =&gt; {
      mail.willSend = newCheckMarkValue;
      return mail;
    });
    return {
      unsentMail: newUnsentMail
    }
  });
}
</code></pre>
",1
65108036,"<p>All <a href=""https://discord.js.org/#/docs/main/master/class/VoiceState"" rel=""nofollow noreferrer""><code>VoiceStates</code></a> have a <a href=""https://discord.js.org/#/docs/main/master/class/VoiceState?scrollTo=channelID"" rel=""nofollow noreferrer""><code>channelID</code></a> property: the ID of the <a href=""https://discord.js.org/#/docs/main/master/class/VoiceChannel"" rel=""nofollow noreferrer""><code>VoiceChannel</code></a> they're already in or <code>null</code>. If <code>oldState.channelID</code> is <code>null</code> and <code>newState.channelID</code> isn't, you'll know that the member joined a voice channel. If it's the other way around, you'll know the member <em>left</em> a voice channel.</p>
<pre class=""lang-js prettyprint-override""><code>client.on('voiceStateUpdate', (newState, oldState) =&gt; {
 if (newState.channelID &amp;&amp; !oldState.channelID) {
  console.log('Someone joined');
  // ...
 } else if (oldState.channelID &amp;&amp; !newState.channelID) {
  console.log('Someone left');
  // ...
 } else {
  console.log('Neither of the two actions occured');
  // ...
 }
});
</code></pre>
",1
65156524,"<p>Convert your <code>genres</code> array into an object whose keys are the IDs:</p>
<pre class=""lang-js prettyprint-override""><code>computed: {
  genresFormatted() {
    const genres = {};
    this.genres.forEach(genre =&gt; {
      genres[genre.id] = genre.name;
    });
    return genres;
  }
}
</code></pre>
<p>Now it's much easier to get the <code>name</code> property when looping:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;li v-for=&quot;id in movie.genre_ids&quot; :key=&quot;id&quot;&gt;
  {{ genresFormatted[id] }}
&lt;/li&gt;
</code></pre>
",1
65149136,"<p>It is possible, but not with the <code>rect</code> method. If you manually implement a clockwise anti-clockwise rectangle it can work, see below:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const canvas = document.querySelector( 'canvas' );
const ctx = canvas.getContext( '2d' );
const size = 200;

canvas.width = canvas.height = size;

// Just to show that the content still comes through
ctx.fillStyle = 'red';
ctx.fillRect( 0, 0, size, size );

ctx.fillStyle = 'white';

ctx.beginPath();

// Clockwise Rectangle
ctx.moveTo( 10, 10 );
ctx.lineTo( 190, 10 );
ctx.lineTo( 190, 190 );
ctx.lineTo( 10, 190 );
ctx.lineTo( 10, 10 );

// Anti-Clockwise Rectangle
ctx.moveTo( 20, 20 );
ctx.lineTo( 20, 180 );
ctx.lineTo( 160, 180 );
ctx.lineTo( 160, 20 );
ctx.lineTo( 20, 20 );

ctx.fill();</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;canvas&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>
</p>
<p>This is only true because of the winding algorithm. You could probably implement a method yourself that allows for clockwise or counter clockwise, you don't get that for free in canvas.</p>
<h2>Clarification</h2>
<p>The reason for this is the fill-rule property, which you can pass in to <code>.fill</code>: <a href=""https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/fill</a>, so it will work on any reversed path with the default <code>nonzero</code> rule.</p>
<p>@je3rdty This works with any path that reverses, including ellipses, because of the fill rule: <a href=""https://en.wikipedia.org/wiki/Nonzero-rule"" rel=""nofollow noreferrer"">https://en.wikipedia.org/wiki/Nonzero-rule</a></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const canvas = document.querySelector( 'canvas' );
const ctx = canvas.getContext( '2d' );
const size = 200;

canvas.width = canvas.height = size;

// Just to show that the content still comes through
ctx.fillStyle = 'red';
ctx.fillRect( 0, 0, size, size );

ctx.fillStyle = 'white';

ctx.beginPath();
ctx.ellipse( 100, 100, 100, 75, 0, 0, Math.PI * 2, false );
ctx.ellipse( 100, 100, 80, 50, Math.PI / 3, 0, Math.PI * 2, true );
ctx.fill();</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;canvas&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>
</p>
",1
65158065,"<p>This will work</p>
<pre><code>function processPathLettersIntoArray(source) {
  const result = source.replace(/M/g, &quot;;M&quot;).replace(/L/g, &quot;;L&quot;).replace(/z/g, &quot;;z&quot;).split(';').slice(1);
  return result.map(mapGroup);
}

function gcodeXY(source) {
   const [xVal, yVal] = source.split(&quot;,&quot;);
   return `X${xVal} Y${yVal}`;
}
let start=&quot;X0 Y0&quot;; //another side effect :-(

function mapGroup(grp) {
    let s = grp.split(&quot; &quot;);
    if (s[0]==&quot;M&quot;){
        start = gcodeXY(s[1]);
        last=s[1];
        return &quot;G0 F200 &quot;+start;
    }
    else if (s[0]==&quot;L&quot;){
        start=gcodeXY(s[1]);
        last=s[1];
        return &quot;G1 F100 &quot;+start;
    }
    else if (s[0]==&quot;z&quot;){
        last=s[1];
        return &quot;G1 F100 &quot;+start;
    }
    return grp;
}

function path2gcode() {
  const source = 'M 1,2 L 2,2 L 3,3 z';
  return processPathLettersIntoArray(source);
}
</code></pre>
",1
65099808,"<p>Is seemed that you didn't declare any variables with <code>var</code>, <code>const</code> or <code>let</code> so that could be where you were having issues.</p>
<p>By passing <code>this</code> as a parameter you can access the exactly which <code>span</code> you are hovering. This solution you can change the text of any of those <code>span</code>s or even add more and this will still work.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>setInterval(function() {
  const number = Math.floor((Math.random() * 100) + 1);
  document.getElementById(""in02"").innerHTML = number
}, 5000);

function titlep(elem) {
  const aVal = document.getElementById('in02').textContent;
  const elemVal = elem.textContent.replace(/[^0-9]/g, '');

  elem.title = Number(aVal) * Number(elemVal);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div style=""cursor: pointer""&gt;

  &lt;span class=""tp-cu-po"" onmouseover=""titlep(this)""&gt;4+  &lt;/span&gt;&lt;br&gt;
  &lt;span class=""tp-cu-po"" onmouseover=""titlep(this)""&gt;3+  &lt;/span&gt;&lt;br&gt;
  &lt;span class=""tp-cu-po"" onmouseover=""titlep(this)""&gt;2+  &lt;/span&gt;&lt;br&gt;
  &lt;span class=""tp-cu-po"" onmouseover=""titlep(this)""&gt;1+  &lt;/span&gt;&lt;br&gt;



&lt;/div&gt;&lt;br&gt; A =
&lt;a id=""in02""&gt;&lt;/a&gt;</code></pre>
</div>
</div>
</p>
",1
65157526,"<p>As you are adding <code>hidden</code> class so need to remove this when <code>categories</code> option is clicked so one way is to loop through <code>tr</code> and check if the <code>tr</code> contains that class and then just change it to <code>show</code> .</p>
<p><em><strong>Demo Code</strong></em> :</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>highlightRows = () =&gt; {
  let oddRows = document.querySelectorAll('tbody &gt; tr.show')
  oddRows.forEach((row, index) =&gt; {
    if (index % 2 == 0) {
      row.style.background = '#f1f1f1'
    } else {
      row.style.background = '#fff'
    }
  })
}


const filterOptions = () =&gt; {
  const option = document.querySelector(""#filter"").value;
  const selection = option.replace('&amp;', '')
  const rows = document.querySelectorAll(""#body1 &gt; tr"");
  //check if value is not none
  if (option != ""none"") {
    rows.forEach(row =&gt; {
      let td = row.querySelector(""td:last-child"");
      let filter = td.innerText.replace('&amp;', '');
      if (filter === selection) {
        row.className = 'show'
      } else {
        row.className = 'hidden'
      }

    });
    highlightRows()
  } else {
 //loop though rows
    rows.forEach(row =&gt; {
    //check if row has class hidden
      if (row.classList.contains(""hidden"")) {
        row.className = 'show'//add showclass
      }      
    })
    highlightRows()
  }

};
document.getElementById(""filter"").addEventListener(""change"", filterOptions);</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.table-filters {
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 2em;
  text-align: center;
}

.table-filters a {
  color: #222;
  font-size: 16px;
  font-weight: 500;
  margin-right: 1em;
  display: inline-block;
}

.table-filters a:hover {
  text-decoration: none;
}

.table-filters select {
  background: #fff;
  font-size: 16px;
  font-weight: 500;
  width: 12em;
  height: 2.5em;
}

table.stats {
  background: #fff;
  width: 100%;
  table-layout: fixed;
  border-radius: 6px;
}

tbody tr.show {
  display: table-row;
}

tbody tr.hidden {
  display: none;
}

table.vypis {
  border: 1px solid #ccc;
  border-collapse: collapse;
  margin: 0;
  padding: 0;
  width: 100%;
  table-layout: fixed;
}

table.vypis&gt;caption {
  font-size: 1.5em;
  margin: .5em 0 .75em;
}

table.vypis&gt;tr.vypis-riadok {
  background-color: #f8f8f8;
  border: 1px solid #ddd;
  padding: .35em;
}

table.vypis th,
table.vypis td {
  padding: .625em;
  text-align: center;
}

table.vypis th {
  font-size: .85em;
  letter-spacing: .1em;
  text-transform: uppercase;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""table-filters""&gt;
  &lt;select id=""filter""&gt;
    &lt;option selected value=""none""&gt;Categories&lt;/option&gt;
    &lt;option&gt;Hobby&lt;/option&gt;
    &lt;option&gt;Others&lt;/option&gt;


  &lt;/select&gt;
&lt;/div&gt;
&lt;table class=""vypis""&gt;
  &lt;caption&gt;Pohyby na účte&lt;/caption&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th scope=""col""&gt;Refer&lt;/th&gt;
      &lt;th scope=""col""&gt;Date&lt;/th&gt;
      &lt;th scope=""col""&gt;Price&lt;/th&gt;
      &lt;th scope=""col""&gt;Category&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody id=""body1""&gt;
    &lt;tr class=""vypis-riadok""&gt;
      &lt;td scope=""row"" data-label=""refer""&gt;[[X04_riadok_1_popis_transakcie]] &lt;br&gt; [[X10_riadok_2_popis_transakcie]]&lt;/td&gt;
      &lt;td data-label=""date""&gt;[[X02_riadok_1_datum]]&lt;/td&gt;
      &lt;td data-label=""price""&gt;[[X08_riadok_1_suma]] €&lt;/td&gt;
      &lt;td data-label=""category""&gt;Others&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=""vypis-riadok""&gt;
      &lt;td scope=""row"" data-label=""refer""&gt;[[X04_riadok_1_popis_transakcie]] &lt;br&gt; [[X10_riadok_2_popis_transakcie]]&lt;/td&gt;
      &lt;td data-label=""date""&gt;[[X02_riadok_1_datum]]&lt;/td&gt;
      &lt;td data-label=""price""&gt;[[X08_riadok_1_suma]] €&lt;/td&gt;
      &lt;td data-label=""category""&gt;Hobby&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr class=""vypis-riadok""&gt;
      &lt;td scope=""row"" data-label=""refer""&gt;[[X04_riadok_1_popis_transakcie]] &lt;br&gt; [[X10_riadok_2_popis_transakcie]]&lt;/td&gt;
      &lt;td data-label=""date""&gt;[[X02_riadok_1_datum]]&lt;/td&gt;
      &lt;td data-label=""price""&gt;[[X08_riadok_1_suma]] €&lt;/td&gt;
      &lt;td data-label=""category""&gt;Others&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</p>
",1
65154096,"<p>I think that that <code>console.log</code> is missplaced, you shouldn't be calling that function inside an array assignment. And even if you call it below the setEvents function will not give you the title because the set function of the <code>useState</code> is asynchronous. Also I think you are not doing right the assignment of the events into your array.</p>
<p>In this line:</p>
<p><code>setEvents([{ ...events, title: e.target.value }, console.log(events.title)])</code></p>
<p>You are spreading the events inside a new array and then adding the title, leaving you with a structure similar to this:</p>
<pre><code>[{
    &quot;0&quot;: {
        &quot;title&quot;: &quot;Werk&quot;,
        &quot;start&quot;: &quot;2020-12-05T05:12:57.931Z&quot;,
        &quot;end&quot;: &quot;2020-12-05T05:12:57.931Z&quot;,
        &quot;allDay&quot;: false
    },
    &quot;title&quot;: &quot;myNewTitle&quot;
}]
</code></pre>
<p>And nesting this titles for every change in the input.</p>
<p>For the structure you want to achieve you must push a new entry into an array that already contains your previous events, and then update the state. Like:</p>
<pre><code>//I think the best approach is calling this in a submit or button click event
const buttonClick = () =&gt; {
  const newEvents = [...events]; //This spreads every element inside the events array into a new one
  newEvents.push({
    title: eventTitleState, //You also need a useState for the title
    start: moment().toDate(),
    end: moment(),
  });
  setEvents(newEvents);
}
</code></pre>
<p>You can see this idea working here: <a href=""https://codesandbox.io/s/green-cherry-xuon7"" rel=""nofollow noreferrer"">https://codesandbox.io/s/green-cherry-xuon7</a></p>
",1
65131239,"<p>You can iterate by map or forEach:</p>
<pre><code>const newObj = yourObj.posts.map(item =&gt; { do something with the object });
</code></pre>
",1
65096131,"<p>React batch multiple setState() calls into a single update for performance.
Because this.props and this.state may be updated asynchronously, you should not rely on their values for calculating the next state.
<a href=""https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous"" rel=""nofollow noreferrer"">https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous</a></p>
",1
65139121,"<p>try this:</p>
<pre><code>window.addEventListener(&quot;load&quot;, function () {
  document.getElementById(&quot;windowInnerWidth&quot;).innerHTML = &quot;Width of inner window is: &quot; + window.innerWidth;
});
</code></pre>
<p><strong>Update</strong>
(based on your edited question)</p>
<p>create a new function in your .js file like this:</p>
<pre><code>function windowLoaded() {
  document.getElementById(&quot;windowInnerWidth&quot;).innerHTML = &quot;Width of inner window is: &quot; + window.innerWidth;
}
</code></pre>
<p>and add this to your .razor file:</p>
<pre><code>@code {
  protected override Task OnAfterRenderAsync(bool firstRender)
  {
    jsRuntime.InvokeVoidAsync(&quot;windowLoaded&quot;);
    return base.OnAfterRenderAsync(firstRender);
  }
}
</code></pre>
",1
65094557,"<blockquote>
<p>Is it possible to access the whole object, wich is passed into PUG, inside of an inline script without converting it?</p>
</blockquote>
<p>No, it is not.  Your inline script runs in the browser.  The object you passed to the Pug script existed only on the server and is long gone and was never available in the browser.</p>
<p>So, as you seem to already know, the only way to share data like that from the server to an inline script that runs in the browser is to put the data into a Javascript variable in the page itself and the easiest way to do that is to &quot;render&quot; it to JSON in some variable definition inside a script in the page.  That will then establish a variable within the inline script that contains the desired data.</p>
<p>Note, that the data must be serializable to JSON for this to work.  Some things such as server-side socket objects cannot be transferred to the front-end in this way because they contain references to native objects which can't be converted to JSON and wouldn't be useful on a different computer anyway.</p>
",1
65124926,"<p>you can use:</p>
<p><code>title = {title?title:null}</code></p>
<p>if there is title in your <code>props</code> this will add the attribute <code>title</code> with the specified value to the element, otherwise no <code>title</code> attribute will be added.</p>
",1
65158224,"<p>first, if you hadn't installed express module yet, run the command : npm install --save express</p>
<p>in case it still does not work :</p>
<ul>
<li>if you created your app.js file through a command line, try to create another file by clicking the NEW FILE button on whatever IDE you are using, and copy paste that code inside of it, then try to run the new file (node NEWFILE.js), because that could be related to different encoding problem.
let us know how it goes.</li>
</ul>
",1
65100727,"<p>This error means that you are rendering a component that is undefined. This would throw the same error:</p>
<pre><code>const Example;

function App() {
  return &lt;Example /&gt;
}
</code></pre>
<p>My guess would be that one of these components is not correctly named or not correctly exported from the forms file:</p>
<pre><code>import {
  AppForm as Form,
  AppFormField as FormField,
  AppFormPicker as Picker,
  SubmitButton,
} from &quot;../components/forms&quot;;
</code></pre>
<p>For example, if <code>SubmitButton</code> was actually <code>Button</code>, then you would see this error.</p>
",1
65151622,"<p>I'd use <code>filter</code> to apply a condition on each object. In that condition, I'd use <code>some</code> on the <code>categories</code> in order to find a product with at least one category that matches the condition:</p>
<pre class=""lang-js prettyprint-override""><code>const searchCategory = 1; // Just an exmaple
const result = products.filter(p =&gt; p.categories.some(c =&gt; c.id === searchCategory));
</code></pre>
",1
65088376,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var staff = [];
staff.push({
  Id: 122,
  Events: [
    { Id: 30, Name: 'Foo' },
    { Id: 57, Name: 'Bar' }
  ]
});
staff.push({
  Id: 122,
  Events: [{ Id: 57, Name: 'Bar' }]
});

const res = staff.filter((item) =&gt; item.Events.some((e) =&gt; e.Id === 30));
console.log(res);</code></pre>
</div>
</div>
</p>
",1
65137533,"<p>You need javascript here, for this I have made few changes to your code</p>
<ol>
<li>In HTML, I have added common class as <code>.nav-link</code> for all the navigation links.</li>
<li>And added following javascript code:</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>function addListenersToLinks() {
  const navLinks = document.querySelectorAll('a.nav-link');
  
  Array.from(navLinks).forEach(navLink =&gt; {
    navLink.addEventListener('click', event =&gt; {
      document.querySelector('#menu-checkbox').checked = false;
    })
  })  
}

document.body.onload = addListenersToLinks();  
</code></pre>
<p>I have created one function here, as <code>addListenersToLinks()</code> which is called on load of the body element. Following is the explanation to the function definition.</p>
<ul>
<li>This function grabs all the links having class as <code>a.nav-link</code> using the <code>document.querySelectorAll()</code> function.</li>
<li><code>Array.from(navLinks)</code> converts <code>navLinks</code> element collection into array and  it is then looped through each element using the <code>forEach</code>.</li>
<li>Then for each element added a click event listener which will make sure that the checkbox is in unchecked state (if checked, it is switched to unchecked) and the animation will kick in.</li>
</ul>
<p>Here's the working example:
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function addListenersToLinks() {
  const navLinks = document.querySelectorAll('a.nav-link');
  
  Array.from(navLinks).forEach(navLink =&gt; {
    navLink.addEventListener('click', event =&gt; {
      document.querySelector('#menu-checkbox').checked = false;
    })
  })  
}

document.body.onload = addListenersToLinks();  </code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>*, *:before, *:after {
  box-sizing: border-box;
}
body {
  font-family: ""Verdana"", serif;
  font-size: 1.2em;
  overflow-x: hidden;
}
label .menu {
  position: fixed;
  right:-45px;
  top: -45px;
  z-index: 100;
  width: 120px;
  height: 120px;
  background: #F7CC26;
  border-radius:50%;
  transition: 0.5s ease-in-out;
  box-shadow: 0 0 0 0 #072C7D, 0 0 0 0 #072C7D;
  cursor: pointer;
}

label .ha {
  position: absolute;
  top: 75px;
  left: 24px;
  width: 30px;
  height: 2.5px;
  background: #fff;
  display: block;
  transform-origin: center;
  transition: 0.5s ease-in-out;
}
label .ha:after, label .ha:before {
  transition: 0.4s ease-in-out;
  content: """";
  position: absolute;
  display: block;
  width: 100%;
  height: 100%;
  background: #9CBEE3;
}
label .ha:before {
  top: -10px;
}
label .ha:after {
  bottom: -10px;
}
label input {
  display: none;
}
label input:checked + .menu {
  box-shadow: 0 0 0 100vw #F7CC26, 0 0 0 100vh #F7CC26;
  border-radius: 0;
}
label input:checked + .menu .ha {
  transform: rotate(45deg);
}
label input:checked + .menu .ha:after {
  transform: rotate(90deg);
  bottom: 0;
}
label input:checked + .menu .ha:before {
  transform: rotate(90deg);
  top: 0;
}
label input:checked + .menu + ul {
  opacity: 1;
}
label input:checked + .menu2 + ul{opacity:0}

label ul {
  z-index: 200;
  list-style-type: none;
  position: fixed;
  text-align:center;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  opacity: 0;
  transition: 0.25s 0s ease-in-out;
}
label a {
  margin-bottom: 1em;
  display: block;
  color: #9CBEE3;
  text-decoration: none;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;label&gt;
&lt;input id=""menu-checkbox"" type=""checkbox""&gt;&lt;/input&gt;
&lt;span class=""menu""&gt;
&lt;span class=""ha""&gt;&lt;/span&gt;
&lt;/span&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a class=""nav-link"" href=""#intro""&gt;Intro&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=""nav-link"" href=""#educ""&gt;About&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=""nav-link"" href=""#free""&gt;Free Samples&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=""nav-link"" href=""#video""&gt;Video Review&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=""nav-link"" href=""#books""&gt;Other Books&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a class=""nav-link"" href=""#contact""&gt;Contact Us&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/label&gt;

&lt;div id=""free""&gt;Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively.&lt;/div&gt;
&lt;br&gt;
&lt;div id=""video""&gt;Wikis, chat messages, or formal documentation for knowledge management aren’t effective. Our question and answer format is a proven approach for accessing the right information in less time.&lt;/div&gt;&lt;br&gt;
&lt;div id=""intro""&gt;Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively.&lt;/div&gt;
&lt;br&gt;
&lt;div id=""educ""&gt;Wikis, chat messages, or formal documentation for knowledge management aren’t effective. Our question and answer format is a proven approach for accessing the right information in less time.&lt;/div&gt;&lt;br&gt;
&lt;div id=""books""&gt;Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively. Our mission is to help developers write the script of the future. This means helping you find and hire skilled developers for your business and providing them the tools they need to share knowledge and work effectively.&lt;/div&gt;
&lt;br&gt;
&lt;div id=""contact""&gt;Wikis, chat messages, or formal documentation for knowledge management aren’t effective. Our question and answer format is a proven approach for accessing the right information in less time.&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65145811,"<p>You should use <code>checked</code> not <code>value</code> in <strong>Cards.js</strong>.</p>
<pre class=""lang-js prettyprint-override""><code>&lt;input type=&quot;checkbox&quot; checked={allChecked} onChange={handleAllChecked} /&gt;
</code></pre>
",1
65099365,"<blockquote>
<p>Is it possible to do what I want to do with some javascript ? I mean,
is it possible to loop of the css rule of the current page and add to
each selector rule the string &quot;#idOfElement &quot;?</p>
</blockquote>
<p>Yes. Using javascript you can access and modify the contents of your stylesheets. For instance, if you have only one <code>StyleSheet</code>, you can reference it like this:</p>
<pre><code>document.styleSheets[0]
</code></pre>
<p>Each <code>StyleSheet</code> has a <code>CSSRuleList</code> - an array-like object containing an ordered collection of <code>CSSRule</code> objects:</p>
<pre><code>document.styleSheets[0].cssRules
</code></pre>
<p>And each <code>CSSRule</code> has, amongst its properties, a <code>selectorText</code> property.</p>
<p>So, if you want to reference the <code>selectorText</code> of the <strong>first</strong> <code>CSSRule</code> of your <strong>first</strong> <code>StyleSheet</code>, you can use:</p>
<pre><code>document.styleSheets[0].cssRules[0].selectorText // .selector1
</code></pre>
<hr />
<p><strong>Working Example:</strong></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const myCSSRules = document.styleSheets[0].cssRules;

for (let CSSRule of myCSSRules) {

  CSSRule.selectorText = '#my-element ' + CSSRule.selectorText;
  console.log(CSSRule.selectorText);

}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.selector1 {
  color: red;
  font-weight: 700;
}

.selector2 {
  color: blue;
  font-weight: 700;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;p class=""selector1""&gt;Selector 1&lt;/p&gt;
&lt;p class=""selector2""&gt;Selector 2&lt;/p&gt;

&lt;div style=""border: 1px dashed red; text-align:center;"" id=""my-element""&gt;
  &lt;p class=""selector1""&gt;Selector 1&lt;/p&gt;
  &lt;p class=""selector2""&gt;Selector 2&lt;/p&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<hr />
<p><strong>Further Reading:</strong></p>
<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/API/CSSRuleList</a></li>
</ul>
",1
65106018,"<p>Actually SVGs are supported right out of the box with Vue CLI. It uses <a href=""https://github.com/webpack-contrib/file-loader"" rel=""nofollow noreferrer"">file-loader</a> internally. You can confirm it by running the following command on the terminal:</p>
<pre><code>vue inspect --rules
</code></pre>
<p>If &quot;svg&quot; is listed (it should be), then all you've got to do is:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;template&gt;
  &lt;div&gt;
    &lt;img :src=&quot;myLogoSrc&quot; alt=&quot;my-logo&quot; /&gt;
  &lt;/div&gt;
&lt;/template&gt;

&lt;script lang=&quot;ts&quot;&gt;
  // Please just use `@` to refer to the root &quot;src&quot; directory of the project
  import myLogoSrc from &quot;@/assets/myLogo.svg&quot;;

  export default defineComponent({
    name: &quot;MyComponent&quot;,

    setup() {
      return {
        myLogoSrc
      };
    }
  });
&lt;/script&gt;
</code></pre>
<p>So there's no need for any third party library—that is if your sheer purpose is only to display SVGs.</p>
<p>And of course, to satisfy the TypeScript compiler on the type declaration:</p>
<pre class=""lang-js prettyprint-override""><code>declare module '*.svg' {
  // It's really a string, precisely a resolved path pointing to the image file
  const filePath: string;

  export default filePath;
}
</code></pre>
",1
65120339,"<p>The issue is your dropdown is being clicked, but it is toggled again, due to onBlur toggle of your dropdown. You need to remove onBlur toggle and it will work fine.</p>
",1
65103532,"<p>You might use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/parse"" rel=""nofollow noreferrer""><code>Date.parse()</code></a> like:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let date = ""1969-03-07T05:00:00.000Z"";
let new_date = new Date(Date.parse(date));
console.log(new_date);
console.log(new Date());</code></pre>
</div>
</div>
</p>
",1
65137175,"<p>React state updates are asynchronous and processed <em>between</em> render cycles. You are likely executing both callbacks simultaneously, so the enqueued state update from one isn't going to be available in the other.</p>
<blockquote>
<p>Is there a way to pass these 2 strings into handlePage?</p>
</blockquote>
<p>Yes, you can proxy the <code>onChange</code> event object and value to your handler. Think something along the lines of an anonymous function as follows:</p>
<pre><code>const handlePage = (event, page, string1, string2) =&gt; {....}
...
onChange={(event, page) =&gt; handlePage(event, page, string1, string2)} 
</code></pre>
<p>Below I've written <code>handlePage</code> as a curried function to first consume the two strings you want passed and returning a callback function to consume the <code>onChange</code> event object and new page value.</p>
<pre><code>const handlePage = (name, val) =&gt; (event, page) =&gt; {
  console.log(page);
  console.log(&quot;PAGING HERE&quot;);
  setPage(page);

  dispatch(
    getAllPreownedCars(6, dataOptions.skip, filters, dataOptions.searchText, [val])
  );
};
</code></pre>
<p>Code</p>
<pre><code>function Build() {
  const [page, setPage] = React.useState(1);

  const handlePage = (name, val) =&gt; (event, page) =&gt; {
    console.log(page);
    console.log(&quot;PAGING HERE&quot;);
    setPage(page);

    dispatch(
      getAllPreownedCars(6, dataOptions.skip, filters, dataOptions.searchText, [val])
    );
  };

  return (
    &lt;Pagination
      count={5}
      page={page}
      onChange={handlePage(&quot;Price (Lowest to Highest)&quot;, &quot;selling_Price ASC&quot;)}
    /&gt;
  );
}
</code></pre>
",1
65132746,"<p>You can use a <code>!</code> after the property name. This tells Typescript that the value will be set.</p>
<pre><code>@query('#gist')
gist!: HTMLIFrameElement|null;
</code></pre>
",1
65132348,"<p>Your <code>disableAllModules</code> and <code>activateModules</code> functions return before their respective <code>readFile</code> callback functions are evaluated.</p>
<p>As a result, when you do this:</p>
<pre class=""lang-js prettyprint-override""><code>disableAllModules().then(function() {
  activateModules(findedPack.modules).then(function() {
    response.redirect('/_gestiastore');
  });
});
</code></pre>
<p>The following happens:</p>
<ol>
<li><code>disableAllModules()</code> is called, returns <code>undefined</code>, which is wrapped in a Promise due to the <code>async</code> keyword being used</li>
<li>The <code>fs.readFile</code> operation starts</li>
<li>The <code>then</code> callback chained on <code>disableAllModules()</code> is run, calling <code>activateModules(…)</code></li>
<li>There is now a big race between reading the file in <code>disableAllModules</code>, reading the file in <code>activateModules</code>, writing to the file in <code>disableAllModules</code>, and writing to the file in <code>activateModules</code></li>
</ol>
<p>As the Node documentation points out:</p>
<blockquote>
<p>It is unsafe to use fs.writeFile() multiple times on the same file without waiting for the callback.</p>
</blockquote>
<p>This suggests that you can have competing writes to the same file, resulting in corrupted data like you are seeing here. It's likely only because you are making small modifications that the data is not more significantly broken.</p>
<p>I recommend refactoring to follow this approach:</p>
<ol>
<li>Read the file</li>
<li>Make all modifications to the data in memory</li>
<li>Write the new data a single time</li>
</ol>
<p>Provided this script is run infrequently (or at least, never concurrently), this is a simple approach that should avoid many of the pitfalls of concurrency that you are encountering. If it is possible for multiple instances of this script to be running concurrently, you will need a locking mechanism to avoid separate processes writing to the file concurrently (e.g. <a href=""https://www.npmjs.com/package/lockfile"" rel=""nofollow noreferrer"">lockfile</a>).</p>
",1
65109168,"<p>Based on your code it seems that you already know how to do. Just take <code>onSearchTermChanged</code>as an example.</p>
<p>In your <code>NavigationBar</code> component do so :</p>
<pre><code>    ...
    &lt;div&gt;
      &lt;button onClick={this.props.onToggle}&gt;Toggle&lt;/button&gt;
    &lt;/div&gt;
    ...
</code></pre>
<p>If your nav bar needs to know the state you might consider adding an extra handler:</p>
<pre><code>  constructor(props) {
    ...
    this.handleToggle = this.handleToggle.bind(this);
  }

  handleToggle() {
    this.setState({ toggled: !this.state.toggled });
    this.props.onToggle();
  }

  render() {
    ...
    &lt;div&gt;
      &lt;button onClick={this.handleToggle}&gt;Toggle&lt;/button&gt;
    &lt;/div&gt;
    ...
  }
</code></pre>
<p>And in your App component :</p>
<pre><code>    ...
    &lt;NavBar
      onSearchTermChanged={this.searchReturn}
      onToggle={this.toggleMainView} // &lt;----
      styleOptions={this.state.style}
      showMainView={this.state.showMainView}
      featuresVisible={this.state.featuresVisible}
    &gt;&lt;/NavBar&gt;
    ...
</code></pre>
",1
65145913,"<p>Example of 10 second timer:</p>
<p><a href=""https://i.stack.imgur.com/m80T5.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/m80T5.gif"" alt=""enter image description here"" /></a></p>
<p>Create a state for a <code>minute</code> and decrease it every minute.</p>
<p>Here is how you can do it.</p>
<pre><code>import React, { useState, useEffect, useRef } from &quot;react&quot;;
import { CountdownCircleTimer } from &quot;react-countdown-circle-timer&quot;;

import &quot;./styles.css&quot;;

export default function App() {
  const [minute, setMinuter] = useState(50);
  const funRef = useRef(null);
  const hourSeconds = 3000;
  const renderTime = (dimension, time) =&gt; {
    return (
      &lt;div className=&quot;time-wrapper&quot;&gt;
        &lt;div className=&quot;time&quot;&gt;{time}&lt;/div&gt;
        &lt;div&gt;{dimension}&lt;/div&gt;
      &lt;/div&gt;
    );
  };

  useEffect(() =&gt; {
    if (minute !== 0) {
      funRef.current = setTimeout(() =&gt; {
        setMinuter(minute - 1);
      }, 60000);
    } else {
      clearTimeout(funRef.current);
    }
  });

  const timerProps = {
    isPlaying: true,
    size: 120,
    strokeWidth: 6
  };

  return (
    &lt;div className=&quot;App&quot;&gt;
      &lt;CountdownCircleTimer
        {...timerProps}
        isPlaying
        initialRemainingTime={hourSeconds}
        duration={hourSeconds}
        colors={[[&quot;#3f51b5&quot;]]}
        onComplete={() =&gt; console.log(&quot;times up&quot;)}
      &gt;
        {({ elapsedTime }) =&gt; {
          //console.log(hourSeconds - elapsedTime / 1000);
          return renderTime(&quot;minute&quot;, minute);
        }}
      &lt;/CountdownCircleTimer&gt;
    &lt;/div&gt;
  );
}

</code></pre>
<p>Here is the working <a href=""https://codesandbox.io/s/flamboyant-gauss-bugfy?file=/src/App.js:0-1233"" rel=""nofollow noreferrer"">Codesandbox Link</a></p>
",1
65102932,"<p>Please find the mark1 and mark2 in the following code.</p>
<p>mark1: you don't need to export this method, just use it before render your ejs view. And when you return your json in this function, you don't need to add extra await here.</p>
<p>mark2: I place the <code>get_data</code> function in here because I saw you render ejs to user at the end of code in <code>router.get(&quot;/youtube/callback&quot;)</code>. So, before render ejs view to user, you need to call <code>get_data</code> function to get the data you want. Then, just render it with data.</p>
<pre class=""lang-js prettyprint-override""><code>router.get(&quot;/youtube/callback&quot;, function(req, res) {
    // Create an OAuth2 client object from the credentials in our config file
    const oauth2Client = new OAuth2(
      CONFIG.oauth2Credentials.client_id,
      CONFIG.oauth2Credentials.client_secret,
      CONFIG.oauth2Credentials.redirect_uris[0]
    );
  
    if (req.query.error) {
      // The user did not give us permission.
      return res.redirect(&quot;/&quot;);
    } else {
      oauth2Client.getToken(req.query.code, function(err, token) {
        if (err) return res.redirect(&quot;/&quot;);
  
        // Store the credentials given by google into a jsonwebtoken in a cookie called 'jwt'
        res.cookie(&quot;jwt&quot;, jwt.sign(token, CONFIG.JWTsecret));
        
        // return res.redirect(&quot;/get_some_data&quot;);
  
        if (!req.cookies.jwt) {
          // We haven't logged in
          return res.redirect(&quot;/&quot;);
        }
      
        // Add this specific user's credentials to our OAuth2 client
        oauth2Client.credentials = jwt.verify(req.cookies.jwt, CONFIG.JWTsecret);
      
        // Get the youtube service
        const service = google.youtube(&quot;v3&quot;);
  
        const url = `https://www.googleapis.com/oauth2/v1/userinfo?access_token=${token[Object.keys(token)[0]]}`;
  
        // ================ mark 1 ====================
        const get_data = async () =&gt; {
          try {
            const response = await nf(url);
            const json = await response.json();
            return json;
          } catch (error) {
            console.log(error);
          }
        };
  
        // Get 50 of the user's subscriptions (the channels they're subscribed to)
        service.subscriptions
          .list({
            auth: oauth2Client,
            mine: true,
            part: &quot;snippet,contentDetails&quot;,
            maxResults: 50
          })
          // ================ mark 2 ====================
          // remember to add async here
          .then(async (response) =&gt; { 
             // ================ mark 2 ====================
             const diomerda = await get_data()
  
            // Render the profile view, passing the subscriptions to it
            return res.render(&quot;./user/dashboard&quot;, { subscriptions: response.data.items, diomerda: diomerda });
          });
  
      });
    }
  });
</code></pre>
",1
65140056,"<p>There is a class called <code>.bootstrap-datetimepicker-widget .weekend</code>. Change that like below.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.bootstrap-datetimepicker-widget .weekend {
  color: red;
  /*Apply your color*/
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;title&gt;Page Title&lt;/title&gt;
  &lt;link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/css/bootstrap.min.css""&gt;
  &lt;link rel=""stylesheet"" href=""https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/css/bootstrap-datetimepicker.min.css""&gt;
  &lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js""&gt;&lt;/script&gt;
  &lt;script&gt;
    $(function() {
      $('#datetimepicker1').datetimepicker({
        format: 'DD/MM/YYYY HH:mm',
      });
    });
  &lt;/script&gt;
  &lt;style&gt;
    body {
      font-family: Verdana, Arial, sans-serif;
      font-size: 12px;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;


  &lt;div class=""container""&gt;
    &lt;div class=""row""&gt;
      &lt;div class='col-sm-6'&gt;
        &lt;div class=""form-group""&gt;
          &lt;div class='input-group date' id='datetimepicker1'&gt;
            &lt;input type='text' class=""form-control"" /&gt;
            &lt;span class=""input-group-addon""&gt;
            &lt;span class=""glyphicon glyphicon-calendar""&gt;&lt;/span&gt;
            &lt;/span&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.4/jquery.min.js""&gt;&lt;/script&gt;
  &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.15.1/moment.min.js""&gt;&lt;/script&gt;
  &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.3.7/js/bootstrap.min.js""&gt;&lt;/script&gt;
  &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/bootstrap-datetimepicker/4.7.14/js/bootstrap-datetimepicker.min.js""&gt;&lt;/script&gt;


&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",1
65089152,"<p>Those are not checkboxes but radio buttons. Assuming that you do want the radio buttons (which in your case it looks like it, because it would be one or the other), there are a few things that needs to be done.</p>
<p>Rather than having 2 properties to indicate which option is selected, you could have 1 property for that purpose.</p>
<p><strong>So</strong></p>
<pre><code>this.otpEmailValue = 1;
this.otpCellValue = 0;
</code></pre>
<p><strong>Becomes</strong></p>
<pre><code>this.contact = 'email'; // This line is now equivalent to the ones above
</code></pre>
<p>In the template, the radio button inputs, need to have the same name for them to behave as 1 input instead of 2, because after all, we only want 1 option selected. The <code>ngModel</code> directive now points to the value we want to bind, in our case, <code>contact</code>. And lastly, the value should be static. When the <strong>value</strong> of the property bound with <code>ngModel</code> matches the value of one of the radio buttons, it will select it.</p>
<p>So, after all those changes we get the following.</p>
<pre><code>&lt;input type=&quot;radio&quot;
       name=&quot;contact-option&quot;
       id=&quot;1&quot;
       class=&quot;with-gap&quot;
       [(ngModel)]=&quot;contact&quot;
       value=&quot;cell&quot;&gt; Cell
&lt;input type=&quot;radio&quot;
       name=&quot;contact-option&quot;
       id=&quot;2&quot;
       class=&quot;with-gap&quot;
       [(ngModel)]=&quot;contact&quot;
       value=&quot;email&quot;&gt; Email
</code></pre>
<p><a href=""https://stackblitz.com/edit/angular-ivy-irqvyv"" rel=""nofollow noreferrer"">Demo</a></p>
",1
65158112,"<p>You need to define two properties, an input property and an output property to emit the on close event. The displayNewEmployeeDialog property should be controlled by parent component only:</p>
<p>child.component.ts</p>
<pre><code>export class EmployeeAddFormComponent implements OnInit {

  @Input()
  displayNewEmployeeDialog: boolean;
  @Output
  onDialogClose: EventEmitter&lt;any&gt; = new EventEmitter(); 

  //.. 

  closeDialog() {
    this.onDialogClose.emit();
  }

}
</code></pre>
<p>parent.component.html</p>
<pre><code>&lt;app-employee-add-form [displayNewEmployeeDialog]=&quot;displayNewEmployeeDialog&quot; (onDialogClose)=&quot;closeDialog()&quot;&gt;&lt;/app-employee-add-form&gt;
</code></pre>
<p>parent.component.ts</p>
<pre><code>closeDialog(): void {
  this.displayNewEmployeeDialog=false;
}
</code></pre>
",1
65158292,"<p>You can check element <code>classList</code></p>
<pre><code>toggleFilterBt.addEventListener('click', () =&gt; {
  categoriesHolder.classList.toggle('categories-show');

  filterText.innerHTML = categoriesHolder.classList.contains('categories-show') ? '&lt;i class=&quot;far fa-plus-square&quot;&gt;&lt;/i&gt;' : '&lt;i class=&quot;far fa-minus-square&quot;&gt;&lt;/i&gt;';
});
</code></pre>
",1
65117833,"<pre class=""lang-js prettyprint-override""><code>input.setAttribute('value', document.getElementById('sel_control_num').value);
</code></pre>
<p>Note that the <code>&lt;input&gt;</code> in the HTML you posted has an ID of <code>sel_control_num</code> and not <code>select_control_num</code> as your write in the question.</p>
",1
65144370,"<p>You can parse your JSON data in ruby like below</p>
<pre><code>result_hash = JSON.parse(result)
result_ary = result_hash[&quot;users&quot;].collect do |k,v| 
  v[&quot;items&quot;].values.select{|v1| v1[&quot;liked&quot;] == true } 
end
result_data = result_ary.flatten
</code></pre>
<p>result of parsing</p>
<pre><code>=&gt; [{&quot;liked&quot;=&gt;true, &quot;id&quot;=&gt;3674, &quot;name&quot;=&gt;&quot;Bbb&quot;}, {&quot;id&quot;=&gt;396, &quot;liked&quot;=&gt;true, &quot;name&quot;=&gt;&quot;Aaa&quot;}]
</code></pre>
<p>Now its very easy for getting your required result</p>
<pre><code>result_data.collect{|x| x[&quot;name&quot;] }
=&gt; [&quot;Bbb&quot;, &quot;Aaa&quot;]

 result_data.count {|x| x[&quot;name&quot;] == &quot;Aaa&quot;}
=&gt; 1

result_data.count {|x| x[&quot;name&quot;] == &quot;Bbb&quot;}
=&gt; 1
</code></pre>
",1
65147772,"<p>You can use <code>loops</code> and <code>animation-delay</code> to apply the animation as per your need. The following code will work for this case. Code is full with comments to explain what is happening at each point. I have also slightly modified the css so that we don't get any weird blinking effect while executing the code.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>//Declare all the classes - 
let divs = [""div1"", ""div2"", ""div3""];

//Initiate a delay for each iteration
let delay = 0;

//Run a loop for each class
for(let i = 0; i&lt;divs.length; i++){
  
  //Get the element
  let div = document.getElementsByClassName(divs[i]);
  
  //Run a loop for element with the class
  //(We only have one div with the classes div1 and div2. So it will run one time for them.
  //We have 5 divs with div3 class. It will run 5 times in that case 
  for(let j = 0; j&lt;div.length; j++){
    
    //Get the individual element and add animation with delay
    //The delay will also ensure that the animation starts only when the previous element has finished the animation
    div[j].style.animation = `fadein 5s ${delay}s forwards` ;
    div[j].classList.add(""show"");
    
    //Increase delay with every iteration
    delay+=5;
  }
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>div {
  visibility: hidden;
}

.div1 {
  width: 400px;
  height: 500px;
  background-color: yellow;
}
.div2 {
  width: 350px;
  height: 400px;
  background-color: green;
}
.div3 {
  width: 300px;
  height: 50px;
  background-color: grey;
  margin: 10px;
}

.show {
  opacity: 0;
  visibility: visible;
}

@keyframes fadein {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""div1""&gt;
  &lt;div class=""div2""&gt;
    &lt;div class=""div3""&gt;1&lt;/div&gt;
    &lt;div class=""div3""&gt;2&lt;/div&gt;
    &lt;div class=""div3""&gt;3&lt;/div&gt;
    &lt;div class=""div3""&gt;4&lt;/div&gt;
    &lt;div class=""div3""&gt;5&lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>The script may seem very long but it is only 10 lines long without the comments. This will also work if you increase or decrease the number of <code>divs</code></p>
",1
65131614,"<p>You should use a <code>router-link</code> to direct the router:</p>
<pre class=""lang-js prettyprint-override""><code>&lt;router-link to=&quot;/login&quot;&gt;
   &lt;ion-button&gt;LOGIN&lt;/ion-button&gt;
&lt;/router-link&gt;
</code></pre>
<p>The <code>to</code> object has various options for configuration.  If your route had a name property like <code>name: 'login'</code>, you could also have accessed it that way, which can be cleaner in the template for longer route paths:</p>
<pre class=""lang-js prettyprint-override""><code>&lt;router-link :to=&quot;{ name: 'login' }&quot;&gt;
   &lt;ion-button&gt;LOGIN&lt;/ion-button&gt;
&lt;/router-link&gt;
</code></pre>
",1
65139289,"<p>You can use the excellent library <a href=""https://github.com/EvanHahn/HumanizeDuration.js"" rel=""nofollow noreferrer"">humanizeDuration</a>, simply passing:</p>
<p><code>humanizeDuration(2009 * 60 * 1000, { delimiter: ' '})</code></p>
<p>will output what you wanted - 1 day 9 hours 29 minute.</p>
<p>Note - you pass milliseconds, so you need to multiple the minutes parameter by 60,000 before passing to humanizeDuration</p>
",1
65087341,"<h3>To read from the disk as a stream</h3>
<p>you can use the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Blob/stream"" rel=""nofollow noreferrer""><code>Blob.stream()</code></a> method which returns a <a href=""https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream"" rel=""nofollow noreferrer"">ReadableStream</a> from that Blob (or File).</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>inp.onchange = async (evt) =&gt; {
  const stream = inp.files[ 0 ].stream();
  const reader = stream.getReader();
  while( true ) {
    const { done, value } = await reader.read();
    if( done ) { break; }
    handleChunk( value );
  }
  console.log( ""all done"" );
};

function handleChunk( buf ) {
  console.log( ""received a new buffer"", buf.byteLength );
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=""file"" id=""inp""&gt;</code></pre>
</div>
</div>
</p>
<p>For older browsers that don't support this method, you can still read the File by chunks only using its <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Blob/slice"" rel=""nofollow noreferrer""><code>.slice()</code></a> method:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>inp.onchange = async (evt) =&gt; {
  const file = inp.files[ 0 ];
  const chunksize = 64 * 1024;
  let offset = 0;
  while( offset &lt; file.size ) {
    const chunkfile = await file.slice( offset, offset + chunksize );
    // Blob.arrayBuffer() can be polyfilled with a FileReader
    const chunk = await chunkfile.arrayBuffer();
    handleChunk( chunk );
    offset += chunksize;
  }
  console.log( ""all done"" );
};

function handleChunk( buf ) {
  console.log( ""received a new buffer"", buf.byteLength );
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=""file"" id=""inp""&gt;</code></pre>
</div>
</div>
</p>
<hr />
<h3>Writing to disk as stream however is a bit harder.</h3>
<p>There is a <em>great hack</em> by Jimmy Wärting called <a href=""https://github.com/jimmywarting/StreamSaver.js"" rel=""nofollow noreferrer"">StreamSaver.js</a> which uses Service Workers. I'm not sure how far its browser support goes by though, and while awesome, it's still an &quot;hack&quot; and requires a Service Worker to run.</p>
<p>An easier way to do so is to use the being defined <a href=""https://wicg.github.io/file-system-access/"" rel=""nofollow noreferrer"">File System API</a> which is currently only available in Chrome. You can see <a href=""https://stackoverflow.com/questions/62883650/streaming-a-client-side-generated-response-as-a-download-without-service-worker/62887531#62887531"">this Q/A</a> for a code example.</p>
",1
65100739,"<p>Simple reduce loop with an object</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var arr = [
    {prop: 1},
    {prop: 1},
    {prop: 2},
    {prop: 3},
    {prop: 2}
]

const result = Object.values(arr.reduce((acc, item) =&gt; {
 acc[item.prop] = acc[item.prop] || [];
 acc[item.prop].push(item);
 return acc;
}, {}));

console.log(result);</code></pre>
</div>
</div>
</p>
",1
65156981,"<p>You can listen on any address using 0.0.0.0, but you should not use it to send a request, because 0.0.0.0 is a non-routable meta-address used to designate an invalid, unknown or non-applicable target.</p>
<p>In the context of servers, 0.0.0.0 means &quot;all IPv4 addresses on the local machine&quot;. If a host has two ip addresses, 192.168.1.1 and 10.1.2.1, and a server running on the host listens on 0.0.0.0, it will be reachable at both of those IPs, but if you want to reach the server, you should use one of those Ip.</p>
<p>Take a look at:</p>
<ul>
<li><a href=""https://superuser.com/questions/949428/whats-the-difference-between-127-0-0-1-and-0-0-0-0"">What's the difference between 127.0.0.1 and 0.0.0.0?</a></li>
<li><a href=""https://stackoverflow.com/questions/55565334/what-does-chrome-server-do-when-i-use-0-0-0-0-instead-of-localhost-in-browser"">What does Chrome/server do when I use 0.0.0.0 instead of localhost in
browser?</a></li>
<li><a href=""https://serverfault.com/questions/78048/whats-the-difference-between-ip-address-0-0-0-0-and-127-0-0-1"">What's the difference between IP address 0.0.0.0 and
127.0.0.1?</a></li>
</ul>
",1
65118100,"<p>Just specify the first tab in your css. JQuery will add it's own CSS which will have a higher specificity on click.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(function(){
    $(""#tabs li a"").click(function(){
        $("".platform"").hide();
        var myDiv = $(this).attr(""href"");
        $(myDiv).show();
    });
});</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.platform {
    display: none;
}
.platform.tab1 { /* &lt;-- I added this */
    display: block;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;ul id=""tabs""&gt;
  &lt;li&gt;&lt;a href=""#tab1""&gt;PC&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=""#tab2""&gt;PS4&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=""#tab3""&gt;XBOX&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;div class=""platform tab1"" id=""tab1""&gt;
  &lt;div&gt; 
    platform 1
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=""platform tab2"" id=""tab2""&gt;
  &lt;div&gt; 
    platform 2
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=""platform tab3"" id=""tab3""&gt;
  &lt;div&gt; 
    platform 3
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65153114,"<p>You can use another <code>replace</code> for non space characters instead of <code>&quot;x&quot;.repeat</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const string = ""The \""quick\"" brown \""fox\"" 'jumps' over the 'lazy dog'"";
const pattern = /(?:'([^']*)')|(?:""([^""]*)"")/g;
const redactedText = string.replace(pattern, (str) =&gt; {
  const strippedString = str.replace(/['""]+/g, '');
  
  return strippedString.replace(/[^\ ]/g,'x'); // replace non space character w/""x""
})
console.log(redactedText)</code></pre>
</div>
</div>
</p>
",1
65148767,"<p>The problem is you are passing two different objects in the navigation. But first object is the place where you pass all your props.</p>
<p>Here is the code to properly pass values:</p>
<pre><code>render() {
    return (
        &lt;View style={styles.MainContainer} &gt;
            &lt;Button title=&quot;Next&quot; onPress={() =&gt; { 
                 this.props.navigation.navigate(
                 'Two', 
                 { 
                  postONE: Math.floor(Math.random() * 10) + 10, 
                  postTWO: 'R'  
                 })}} 
            /&gt;
        &lt;/View&gt;
    );
  }
}
</code></pre>
",1
65163854,"<p>If you want to use the spread operator, you could do something like this, but I'm not sure what your <code>currentClient</code> object looks like since it's null in your example.</p>
<pre class=""lang-js prettyprint-override""><code>this.setState(prevState =&gt; ({
    ...prevState, //copy current state
    clientsList: [
        //copy current clients list with currentClient object filtered out            
        ...prevState.clientsList.filter( e =&gt; e.clientID !== this.state.currentClient.clientID),
        { //replace client object
            clientID: this.state.currentClient
            InvoiceNumber: this.state.currentInvoice
        }
    ]
}))
</code></pre>
",1
65120321,"<p>Here's a solution with the time complexity of <code>O(n)</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const arr = [
    { description: 'H', order: 1 },
    { description: 'K', order: 2 },
    { description: 'K', order: 3 },
    { description: 'H', order: 4 },
    { description: 'e', order: 5 },
    { description: 'l', order: 6 },
    { description: 'l', order: 7 },
    { description: 'o', order: 8 },
    { description: 'e', order: 9 },
    { description: 'l', order: 10 }
];

const key = 'Hello';

// result array
const result = [];

// current index of the test
let index = 0;

for (let e of arr) {
    // if matches the test, add the element to the result array and increse the index
    if (e.description === key[index]) {
        result.push(e);
        index++;
        
        // if already found the result, stop the iteration
        if (index &gt;= key.length) break;
    } else {  // if failed the test, clear the index and the result
        index = 0;
        result.length = 0;
    }
}

console.log(result);</code></pre>
</div>
</div>
</p>
",1
65145509,"<p>It looks like that the <code>&lt;InitiatePlayers&gt;</code> syntax mess it up.</p>
<p>The <a href=""https://www.typescriptlang.org/play?#code/MYewdgzgLgBAhgBwQLjmAnjAvDA3gXwG4AoYgSzCgFMAnAMzmCpgEkwyoy5qAFAGzjpaEPMRjiYACigALMhGTwMAGng0A5gAZFueAFsQAV0qLoNCupj4AlIoBuIMgBMS+UqEiwKHLrwFCaBVZ2Tm4qfkFhbBg6Y2BOcCldMX0jSmViG1FMkmJEBAA6cDYOaNiweLJEyWtRcW9Qv0jAguA4Pj5pOQhVXTgDYyhFACYra1diIA"" rel=""nofollow noreferrer"">following code</a> detects correctly the type of the function :</p>
<pre><code>const app:any = {};

interface InitiatePlayers {
    (this: any, arg0: { amount: string }): void;
}

const initiatePlayers: InitiatePlayers = function ({ 
  amount,
}) {

};

app.onInit = function () {
  initiatePlayers.call(this, { amount: 2 });
}
</code></pre>
",1
65145587,"<p>You can use <code>Array#reduce</code> to find a nested property (passed in as a string) to compare with the text.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const search = (arr, prop, text) =&gt;{
  const getProp = obj =&gt; prop.split('.').reduce((acc,curr)=&gt;acc?.[curr], obj);
  return arr.find(e =&gt; getProp(e) === text);
}
console.log(search([{a: 1}, {a: {b: 'test'}}], 'a.b', 'test'));
console.log(search([{name: 'Joe'}, {name: 'John'}, {name: 'Bob'}], 'name', 'Bob'));</code></pre>
</div>
</div>
</p>
",1
65151142,"<p>The Angular framework does this a lot. It is used to prevent an error that you will see a lot (sorry don't know the actual wording of the error) something like 'The value was changed after it was checked'. This error happens if the Change Detector checked a value and then it was changed in the same cycle.</p>
<p>The Promise.resolve() pushes this code on to the microtask queue so it is executed after the JavaScript stack is empty. This prevents the error.</p>
",1
65141774,"<p>The problem is that you are using the Python style for returning values in your JavaScript version. In JavaScript events are asynchronous, when you want to provide a return value you have to do so with a callback function instead.</p>
<p>Here is the correct way to code the <code>get name</code> event for JavaScript:</p>
<pre class=""lang-js prettyprint-override""><code>socket.on('get name', function (cb) {
    console.log('Sending name');
    cb('Hermione Granger');
});
</code></pre>
",1
65157119,"<p>one way you can use replace in client side like that :</p>
<ul>
<li><code>.replace(/&amp;quot;/g, '&quot;')</code></li>
</ul>
<p>or other way you can save <code>quot</code> in database and send from backend side like format:</p>
<ul>
<li><code>question: ' movie '''The Revenant'''?' </code></li>
</ul>
<p>I hope that's Helpful</p>
",1
65094368,"<p>Your icon import is wrong, its exported as default component</p>
<p>Change this</p>
<pre><code>import {Ionicons} from 'react-native-vector-icons/Ionicons';
</code></pre>
<p>To</p>
<pre><code>import Ionicons from 'react-native-vector-icons/Ionicons';
</code></pre>
<p>Whenever you see this error, check the imports in a given file, it more likely you mistook default export with named export.</p>
",1
65121692,"<p>You can use the <code>scrollIntoView</code> method.</p>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/API/Element/scrollIntoView</a></p>
<p>like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(window).on('scroll', function() {
  var sections = $('.timeline_article'),
    nav = $('.scroll_navigation_section'),
    header_height = $('.header').outerHeight(),
    cur_pos = $(this).scrollTop();
  sections.each(function() {
    var top = $(this).offset().top - header_height,
      bottom = top + $(this).outerHeight();

    if (cur_pos &gt;= top &amp;&amp; cur_pos &lt;= bottom) {
      nav.find('a').removeClass('active');
      sections.removeClass('active');
      $(this).addClass('active');
      var aElement = nav.find('a[href=""#' + $(this).attr('id') + '""]')
      aElement.addClass('active');
      if(aElement &amp;&amp; $(aElement) &amp;&amp; $(aElement)[0]){
        $(aElement)[0].scrollIntoView();
      }
    }
  });
});</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.header {
  position: fixed;
  background-color: #fff;
  height: 50px;
  z-index: 10;
  width: 100%;
  top: 0;
}
.nav {
  list-style: none;
}
.nav li {
  float: left;
  padding-bottom: 1rem;
  margin-left: 15px;
}

.vertical_timeline_section {
  margin-top: 50px;
  position: relative;
}

.scroll_navigation_section {
  position: fixed;
  top: 100px;
  left: 0;
  z-index: 1;
  background-color: #FFF;
}

.scroll_navigation_section .scroll_navigation_year {
  max-height: 150px;
  overflow: auto;
  padding: 5px 0px;
}

.scroll_navigation_section .scroll_navigation_year li {
  list-style-type: none;
  position: relative;
  margin-left: 0;
  margin-top: 15px;
}

.scroll_navigation_section .scroll_navigation_year li&gt;a.active {
  color:red;
}

.wrapper {
  max-width: 600px;
  margin: 0 auto;
  padding: 0 0.6rem;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""header""&gt;
  &lt;ul class=""nav""&gt;
    &lt;li&gt;&lt;a href=""btn1""&gt;Header btn1&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=""btn2""&gt;Header btn2&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=""btn3""&gt;Header btn3&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/div&gt;
&lt;section class=""vertical_timeline_section""&gt;
  &lt;section class=""scroll_navigation_section""&gt;
    &lt;div class=""scroll_navigation_year""&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=""#1964""&gt;1964&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#1984""&gt;1984&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2000""&gt;2000&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2002""&gt;2002&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2009""&gt;2009&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2012""&gt;2012&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2015""&gt;2015&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2016""&gt;2016&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2019""&gt;2019&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2020""&gt;2020&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2021""&gt;2021&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2023""&gt;2023&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=""#2025""&gt;2025&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/div&gt;
  &lt;/section&gt;

  &lt;section class=""timeline_section""&gt;
    &lt;div class=""wrapper""&gt;
      &lt;div class=""timeline_article"" id=""1964""&gt;
        &lt;div class=""meta_date""&gt;
          &lt;span class=""year""&gt;1964&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=""timeline_article""&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=""timeline_article"" id=""1984""&gt;
        &lt;div class=""meta_date""&gt;
          &lt;span class=""year""&gt;1984&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=""timeline_article""&gt;
          &lt;p&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=""timeline_article"" id=""2000""&gt;
        &lt;div class=""meta_date""&gt;
          &lt;span class=""year""&gt;2000&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=""timeline_article""&gt;
          &lt;p&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=""timeline_article"" id=""2002""&gt;
        &lt;div class=""meta_date""&gt;
          &lt;span class=""year""&gt;2002&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=""timeline_article""&gt;
          &lt;p&gt;Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=""timeline_article"" id=""2009""&gt;
        &lt;div class=""meta_date""&gt;
          &lt;span class=""year""&gt;2009&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=""timeline_article""&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=""timeline_article"" id=""2012""&gt;
        &lt;div class=""meta_date""&gt;
          &lt;span class=""year""&gt;2012&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=""timeline_article""&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=""timeline_article"" id=""2015""&gt;
        &lt;div class=""meta_date""&gt;
          &lt;span class=""year""&gt;2015&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=""timeline_article""&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
      &lt;div class=""timeline_article"" id=""2016""&gt;
        &lt;div class=""meta_date""&gt;
          &lt;span class=""year""&gt;2016&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=""timeline_article""&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
            &lt;div class=""timeline_article"" id=""2019""&gt;
        &lt;div class=""meta_date""&gt;
          &lt;span class=""year""&gt;2019&lt;/span&gt;
        &lt;/div&gt;
        &lt;div class=""timeline_article""&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
          &lt;p&gt;It is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using 'Content here, content here', making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for 'lorem ipsum' will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/section&gt;
&lt;/section&gt;</code></pre>
</div>
</div>
</p>
",1
65152139,"<p>There is no file called <em>dashboard</em> so there is nothing for <code>express.static</code> to serve.</p>
<p>To handle that dashboard route, you can do this:</p>
<pre class=""lang-js prettyprint-override""><code>app.post(&quot;/dashboard&quot;, function (req, res) {
  return res.send(&quot;I will do something with this post&quot;);
});
</code></pre>
<p>If you want to redirect 404 traffic to <em>index.html</em>, you can do this <strong>after</strong> all your route definitions:</p>
<pre class=""lang-js prettyprint-override""><code>app.use(&quot;/&quot;, function (req, res) {
  return res.redirect(&quot;/index.html&quot;);
});
</code></pre>
",1
65114485,"<p>You could do this if you have more than one span or other elements in the cell</p>
<pre><code>row.cells[1].getElementsByTagName(&quot;span&quot;)[0].innerHTML;
</code></pre>
",1
65100726,"<p>in you data,</p>
<pre><code>var avgLineChartData = {
        labels: ['1', '1', '1', '1', '1', '1', '1'],
        datasets: [{
            label: 'Avg Temperature (F)',
            borderColor: window.chartColors.green,
            backgroundColor: window.chartColors.green,
            fill: false,
            data: [
                65 - randomScalingFactor(),
                53 - randomScalingFactor(),
                58 - randomScalingFactor(),
                54 - randomScalingFactor(),
                62 - randomScalingFactor(),
                65 - randomScalingFactor(),
                74 - randomScalingFactor()
            ],
            yAxisID: 'y-axis-1',
        }]
    };
</code></pre>
<p>you set the <code>yAxisId : 'y-axis-1'</code>. but when you draw the chart, they are <code>id: 'avg-y-axis-1'</code>.</p>
",1
65120778,"<p><a href=""https://i.stack.imgur.com/eb4gm.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/eb4gm.png"" alt=""One of the reason for your error"" /></a></p>
<p><a href=""https://doc.ebichu.cc/mobx/best/pitfalls.html"" rel=""nofollow noreferrer"">Mobx works perfectly in most of the cases but not always</a></p>
<p>You should use <strong>extendObservable</strong>
Please follow this <a href=""https://doc.ebichu.cc/mobx/refguide/extend-observable.html"" rel=""nofollow noreferrer"">EntendObservable</a></p>
",1
65106903,"<p>Try like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

  &lt;body&gt;
    &lt;button id=""btn""&gt;Click Me!&lt;/button&gt;

    &lt;p id=""i""&gt;&lt;strong&gt;this&lt;/strong&gt; represents:&lt;/p&gt;

    &lt;p id=""demo""&gt;&lt;/p&gt;
    &lt;script&gt;
      function myFunction() {
        console.log(1)
        let i = 0;
        while (i &lt; 5) {
          document.write(i + '&lt;br/&gt;');
          i++;
        }
      }

      var btn = document.getElementById(""btn"");
      btn.addEventListener(""click"", myFunction);

    &lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>
<p>There were a few minor bugs to correct, e.g. <code>was()</code> should likely be <code>myFunction</code> and the definition of <code>myFunction</code> needed brackets <code>()</code> after the function name.</p>
",1
65141234,"<p>No. You have to adjust your code and make sure you do not access things from an undefined value:</p>
<pre><code>arrayfirstword.forEach(item =&gt; {

                if(item &amp;&amp; gfg &amp;&amp; item[0] &amp;&amp; item[1] &amp;&amp; gfg[item[0] + 1] &amp;&amp; typeof(gfg[item[0] + 1][item[1]]) !== undefined){
                    console.log(1);
                }
</code></pre>
<p>To void repeating expressions:</p>
<pre><code>arrayfirstword.forEach(item =&gt; {
                if (!item || !item[0] || !item[1] || !gfg) return;
                let key = item[0] + 1;
                let val = gfg[key];
                if (val &amp;&amp; val[item[1]]) {
                    console.log(1);
                }
                
</code></pre>
<p>In this case it is uglier but if the condition gets more complicated it might be better to split it into 5-6 lines instead of having a huge nested complicated condition.</p>
",1
65124335,"<p>in php all fields passed in <code>$_POST</code> method using 
you can count number of <code>$_post</code> variable you get when form is submitted</p>
<p>if you have 4 files to insert in database with form
then you can count them by using <code>count($_POST)</code>
if there is 2 duplicate fields that you want to insert through loop you can execute loop for two time which means <code>count($_POST)/2</code>
but first of all you need to subtract the number of variables that are note related to database like submit button</p>
<pre><code>$count=count($_POST);
$count=($count-1)/2   // subtract 1 for the submit post button
</code></pre>
",1
65156527,"<p>In your filter function, it seems <code>element</code> is already a <code>div</code> with the class <code>box</code>.  So there's no need to look within <code>element</code> for an element with class <code>box</code>, as you've already got it.</p>
<p>So you can replace</p>
<pre class=""lang-js prettyprint-override""><code>    var titleElement = element.querySelector('.box');
    var titleText = titleElement.textContent.toLowerCase().trim(); // &lt;= this is where the error is thrown
</code></pre>
<p>with</p>
<pre class=""lang-js prettyprint-override""><code>    var titleText = element.textContent.toLowerCase().trim();
</code></pre>
",1
65145723,"<p>This works for me:</p>
<pre><code>const foo = false;
if (foo) {
  require(&quot;./mobile.css&quot;);
} else {
  require(&quot;./desktop.css&quot;);
}
</code></pre>
<p>Also you can use the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import#Dynamic_Imports"" rel=""nofollow noreferrer"">dynamic import</a>:</p>
<pre><code>const foo = false;
if (foo) {
  import(&quot;./mobile.css&quot;);
} else {
  import(&quot;./desktop.css&quot;);
}
</code></pre>
<p>See: <a href=""https://stackblitz.com/edit/js-hrvzy9?file=index.js"" rel=""nofollow noreferrer"">https://stackblitz.com/edit/js-hrvzy9?file=index.js</a></p>
",1
65142524,"<p>You could try to make your if condition inline so that you don't use <code>return</code> . Something like:</p>
<pre><code>handleChange (id){
    this.setState((prevState)=&gt;{
    const todos = prevState.myTodos.map(item =&gt; 
            (item.id === id) ? {...item, completed: !item.completed} : item )
    })
}
</code></pre>
<p><strong>Edited</strong>: This solution works because it returns a new JS object using the spread syntax <code>{...item, completed: !item.completed}</code>. In turn, this forces a new render call.</p>
",1
65151796,"<p>It looks like your problem has to do with a misunderstanding of modules and the lesser used dynamic import syntax. You are not importing a class you are importing a ES Module. You can use the imported module to access the exported values of the module using the relevant call based on if your desired value is the default export or not.</p>
<p>If your module is exporting a class by default eg</p>
<pre><code>export default class Class(){...}
</code></pre>
<p>You would use the default() function available on the module to get the class definition to init.</p>
<pre><code>const module = await import(&quot;module-name&quot;)
const obj = new module.default();
</code></pre>
",1
65163277,"<p>Expressions get assigned to variables. Arrow functions are generally composed of 2 parts: the variable it's assigned to, and the body, eg:</p>
<pre><code>const foo = () =&gt; { ... }
// ^ variable
            ^^^^ function body
</code></pre>
<p>Initialization of variables can only be done as a <em>statement</em>, on a standalone line; the <code>const</code> can't be inside parentheses. You just need to separate out the variable the return value is being assigned to from (the function body <em>and</em> the call of the function):</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const years = ((age) =&gt; `your ${age}`)(10);
//             ^^^^^^^^^^^^^^^^^^^^^^
//             this is the function body
//             that needs to be invoked immediately
//                                     ^^ with the (10)
//    ^^^^^    with the result assigned to `years`
console.log(years);</code></pre>
</div>
</div>
</p>
<p>In an object, just replace <code>function()</code> with <code>() =&gt;</code> (and note that <code>say hi</code> isn't a valid object property in an object literal - either surround it in quotes, or use a single word instead):</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const marco = {
  name: 'marco ccc',
  sayHi: () =&gt; {
    return 'something';
  }
};

console.log(marco.sayHi());</code></pre>
</div>
</div>
</p>
",1
65128957,"<p><code>Toolbar</code> has <code>display: flex</code>. Therefor, its children's (<code>Typography</code> and <code>Grid</code> in this case) width considered this.</p>
<p>Now, <code>&lt;Grid container/&gt;</code> has <code>width: 100%</code> so it takes all the available space.</p>
<p>In order to give the buttons container only the space it needs,</p>
<ul>
<li>You can separate it to 2 grids - <code>item</code> and <code>container</code>.</li>
<li>Give the <code>Typography</code> <code>flex-grow: 1</code>.</li>
</ul>
<pre><code>const useStyles = makeStyles(() =&gt; ({
  h5: {
    flexGrow: 1
  }
}));

function App() {
  const classes = useStyles();
  return (
    &lt;AppBar position=&quot;fixed&quot;&gt;
      &lt;Toolbar&gt;
        &lt;Typography className={classes.h5} variant=&quot;h5&quot;&gt;
          Lorem Ipsum Lorem Ipsum
        &lt;/Typography&gt;
        &lt;Grid item&gt;
          &lt;Grid container item justify=&quot;flex-end&quot; direction=&quot;row&quot;&gt;
            &lt;Button variant=&quot;contained&quot;&gt;b1&lt;/Button&gt;
            &lt;Button variant=&quot;contained&quot;&gt;b2&lt;/Button&gt;
          &lt;/Grid&gt;
        &lt;/Grid&gt;
      &lt;/Toolbar&gt;
    &lt;/AppBar&gt;
  );
}

</code></pre>
<p><a href=""https://codesandbox.io/s/material-ui-appbar-flexbox-9x8l4"" rel=""nofollow noreferrer"">https://codesandbox.io/s/material-ui-appbar-flexbox-9x8l4</a></p>
",1
65119820,"<p>Two things:</p>
<p>First, when you specify the even handler here:</p>
<pre><code>.addEventListener(&quot;change&quot;, myFunction(e));
</code></pre>
<p>You do not need to specify the parameters. In fact, you are not even calling the <code>myFunction</code> function at this point at all. You are just telling the listener which function is responsible for handling the event. You simply need to write:</p>
<pre><code>.addEventListener(&quot;change&quot;, myFunction);
</code></pre>
<p>The event listener is what passes the &quot;event&quot; object after the event is actually fired.</p>
<p>Second, in <code>myFunction</code>, you need to access the value in one of two ways:</p>
<pre><code>console.log(event.currentTarget.value);
</code></pre>
<p>or</p>
<pre><code>console.log(this.value);
</code></pre>
",1
65120239,"<p>The <a href=""https://www.chartjs.org/docs/latest/developers/plugins.html"" rel=""nofollow noreferrer"">Plugin Core API</a> offers a range of hooks that may be used for performing custom code. You can use the <code>afterLayout</code> hook for creating a gradient for the y-axis that spreads that desired area (values 0 to 5).</p>
<pre><code>let yAxis = chart.scales[&quot;y-axis-0&quot;];
let yBottom = yAxis.getPixelForValue(0);
let yTop = yAxis.getPixelForValue(5);          
let gradient = ctx.createLinearGradient(0, yBottom, 0, yTop);  
</code></pre>
<p>Please take a look at below sample and see how it works.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const data = [2, 2.25, 3.3];

new Chart(document.getElementById(""chart""), {
  type: ""bar"",
  plugins: [{
    afterLayout: chart =&gt; {
      let ctx = chart.chart.ctx;
      ctx.save();
      let yAxis = chart.scales[""y-axis-0""];
      let yBottom = yAxis.getPixelForValue(0);
      let yTop = yAxis.getPixelForValue(5);          
      let gradient = ctx.createLinearGradient(0, yBottom, 0, yTop);   
      gradient.addColorStop(0, '#FF5722');           
      gradient.addColorStop(0.5, '#FFC107'); 
      gradient.addColorStop(1, '#8BC34A');           
      chart.data.datasets[0].backgroundColor = gradient;
      ctx.restore();
    }
  }],
  data: {
    labels: [""A"", ""B"", ""C""],
    datasets: [{
      label: ""Evaluation"",
      data: data
    }]
  },
  options: {
    scales: {
      yAxes: [{
        ticks: {
          min: Math.min(...data) - 0.2,
          max: Math.max(...data) + 0.2,
          stepSize: 0.5
        }
      }]
    }
  }
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.9.4/Chart.min.js""&gt;&lt;/script&gt;
&lt;canvas id=""chart"" height=""80""&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>
</p>
",1
65147487,"<p>Check this:</p>
<blockquote>
<p>This error indicates that your lit-html template references a tag that
the lit-analyzer can’t resolve.</p>
<p>There must be a declaration of the element to TypeScript in order for
the analyzer to find it. For example:</p>
<pre><code>export class FancySlider extends HTMLElement {
  value: number;
  // etc...
}
customElements.define('fancy-slider', FancySlider);

declare global {
  interface HTMLElementTagNameMap {
    'fancy-slider': FancySlider,
  }
}
</code></pre>
<p>How to fix it Three conditions must hold:</p>
<ol>
<li>There must be a type for the element in TypeScript, either because the
code for the element is written in TpeScript, or because there are
TypeScript typings for the element.</li>
<li>The type must be associated with
the element’s tagname in the HTMLElementTagNameMap.</li>
<li>The file where
you’re using the element must depend on the declaration of the
element, generally by importing it. Most commonly, you’re just missing
an import for the element. If you’re importing the element, and your
code works at runtime, then you need to define an interface for the
element, and add it to the HTMLElementTagNameMap.</li>
</ol>
<p>How it’s configured</p>
<p>This error is enabled by default. It can be disabled by setting
skipUnknownTags to true.</p>
<p>To ignore errors about tags without declaring them to the TypeScript
type system, you can add them to globalTags, however it is almost
always a better idea to declare a type instead.</p>
</blockquote>
<p>Source: <a href=""https://lit.tools/unknown-tag"" rel=""nofollow noreferrer"">https://lit.tools/unknown-tag</a></p>
",1
65101817,"<p>The same way you would set default values in function params, with an <code>=</code> sign.</p>
<pre><code>const {
  prop1 = 'default value',
  prop2,
  prop3,
} = obj.props;
</code></pre>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Default_values"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment#Default_values</a></p>
",1
65149974,"<p>I put together a <a href=""https://codesandbox.io/s/hungry-hooks-rpj39?file=/src/App.js"" rel=""nofollow noreferrer"">working example</a>.  You need to store the current selection in state:</p>
<pre><code>import React, { useState } from &quot;react&quot;;
import &quot;./styles.css&quot;;

export default function App() {
  const [pageId, setPageId] = useState(&quot;0&quot;);

  const showPage = (event) =&gt; {
    setPageId(event.target.id);
  };

  const data = {
    pages: [
      {
        id: &quot;1&quot;,
        products: [
          { img: &quot;test&quot;, title: &quot;Title 1&quot;, description: &quot;Description 1&quot; },
          { img: &quot;test&quot;, title: &quot;Title 2&quot;, description: &quot;Description 2&quot; }
        ]
      }
    ]
  };

  return (
    &lt;&gt;
      &lt;button id=&quot;1&quot; onClick={showPage}&gt;
        1
      &lt;/button&gt;
      &lt;button id=&quot;2&quot; onClick={showPage}&gt;
        2
      &lt;/button&gt;
      &lt;button id=&quot;3&quot; onClick={showPage}&gt;
        3
      &lt;/button&gt;
      &lt;button id=&quot;4&quot; onClick={showPage}&gt;
        4
      &lt;/button&gt;
      &lt;button id=&quot;5&quot; onClick={showPage}&gt;
        5
      &lt;/button&gt;

      {data.pages
        .filter((page) =&gt; page.id === pageId)
        .map((filteredid) =&gt; (
          &lt;li&gt;
            &lt;div className=&quot;description_box&quot;&gt;
              &lt;img src={filteredid.products[0].img} /&gt;
              &lt;h2&gt;{filteredid.products[0].title}&lt;/h2&gt;
              &lt;p&gt;{filteredid.products[0].description}&lt;/p&gt;
            &lt;/div&gt;
          &lt;/li&gt;
        ))}
    &lt;/&gt;
  );
}
</code></pre>
",1
65085673,"<p>Yes, this be can done using JavaScript date method and using the props <code>minDate , maxDate</code>.</p>
<p>First declare the new date using</p>
<pre><code>const today = new Date();
</code></pre>
<p>and in <code>maxDate</code> prop subtract today's date by 1 to get yesterday's date and give it as <code>maxDate</code>.</p>
<pre><code>maxDate={today.setDate(today.getDate() - 1)}
</code></pre>
<p>So your complete code will be</p>
<pre><code>&lt;MuiPickersUtilsProvider utils={MomentUtils}&gt;
            &lt;KeyboardDatePicker
              autoOk={true}
              variant='inline'
              inputVariant='outlined'
              format={dateFormat}
              fullWidth
              name='expirationDate'
              value={expirationDate}
              onChange={ (date) =&gt; handleChangeDate(date)}
              placeholder={dateFormat}
              size='small'
              disableFuture={true}
              views={['date', 'month', 'year']}
              maxDate={today.setDate(today.getDate() - 1)}
            /&gt;
          &lt;/MuiPickersUtilsProvider&gt;
</code></pre>
",1
65100639,"<p>Possibly you can do this with <code>position: absolute;</code> 'on the children you want to overflow. Take a look at this example I made.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.contain {
  height: 100px;
  width: 100px;
  background-color: red;
  overflow: hidden;
}

.child1 {
  height: 30px;
  width: 30px;
  background-color: blue;
}

.child2 {
  height: 200px;
  width: 200px;
  background-color: yellow;
  position: absolute;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""contain""&gt;
 &lt;div class =""child1""&gt;one&lt;/div&gt;
 &lt;div class =""child2""&gt;two&lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>As you can see, child 2 expands beyond its parent even though the parent has an overflow that's hidden.</p>
",1
65112985,"<p>You can add empty objects to <code>seriesMapping</code>:</p>
<pre><code>    data: {
        ...,
        seriesMapping: [
            {
                x: 0,
                y: 2,
            }, 
            ..., 
            {}
        ],
    }
</code></pre>
<hr />
<p><strong>Live demo:</strong> <a href=""https://jsfiddle.net/BlackLabel/rewfq8v7/"" rel=""nofollow noreferrer"">https://jsfiddle.net/BlackLabel/rewfq8v7/</a></p>
<p><strong>API Reference:</strong> <a href=""https://api.highcharts.com/highcharts/data.seriesMapping"" rel=""nofollow noreferrer"">https://api.highcharts.com/highcharts/data.seriesMapping</a></p>
<hr />
<p>Or modify the data, for example in the <code>parsed</code> function:</p>
<pre><code>    data: {
        ...,
        parsed: function(data) {
            data.splice(1, 2);
        },
    }
</code></pre>
<hr />
<p><strong>Live demo:</strong> <a href=""https://jsfiddle.net/BlackLabel/jtL6e1xz/"" rel=""nofollow noreferrer"">https://jsfiddle.net/BlackLabel/jtL6e1xz/</a></p>
<p><strong>API Reference:</strong> <a href=""https://api.highcharts.com/highcharts/data.parsed"" rel=""nofollow noreferrer"">https://api.highcharts.com/highcharts/data.parsed</a></p>
",1
65157252,"<p>take a look at jsfiddle [here][1]</p>
<pre><code> $(&quot;#search&quot;).on(&quot;keyup&quot;, function() {
        $(&quot;td&quot;).closest(&quot;tr&quot;).hide()
    var value = $(this).val();
    if (value) {
        $(&quot;td:contains('&quot;+value+&quot;')&quot;).closest(&quot;tr&quot;).show()
    } 
    else {
        $(&quot;td&quot;).closest(&quot;tr&quot;).show()
    }
});
</code></pre>
<p>Updated code that takes rowspan in consideration:
<a href=""https://jsfiddle.net/nbys6fqm/"" rel=""nofollow noreferrer"">https://jsfiddle.net/nbys6fqm/</a>
[1]: <a href=""https://jsfiddle.net/c6nopaes/"" rel=""nofollow noreferrer"">https://jsfiddle.net/c6nopaes/</a></p>
",1
65147912,"<p>No, there's no specific 'Express way' to do that. In Express, <code>Response.end()</code> is not a very good practice, you should always reply to the request. Here's how I would have done that:</p>
<pre class=""lang-js prettyprint-override""><code>router.post(&quot;/&quot;, (req, res) =&gt; {
  if (req.body.age &lt; 24) return res.status(403).send(&quot;You are too young&quot;); // 403 =&gt; Forbidden. If you don't know what error code you should use, 400 always works.
  // Here, req.body.age &gt;= 24
}
</code></pre>
<p>I added <code>.status(403)</code> to indicate that the error doesn't come from the server, but from the client input ; in this case their access is <code>Forbidden</code>. (<a href=""https://devhints.io/http-status"" rel=""nofollow noreferrer"">HTTP code cheatsheet here</a>, it might be useful in the future) Otherwise, it would be <code>200</code> by default, and it means everything works fine, and that's not what you want to do.
In my snippet above, the request in answered, so everything is fine, and <code>Response.end()</code> would be useless. I think it's the most concise way to do the job (also, it's always better not to use a empty <code>return</code>). Hope I helped!</p>
",1
65154735,"<p>Here is how <a href=""https://github.com/ReactiveX/rxjs/blob/f174d38554d404f21f98ab1079a101e80d777e95/src/internal/Observable.ts#L338-L404"" rel=""nofollow noreferrer"">RxJS does it</a>:</p>
<pre><code>pipe(): Observable&lt;T&gt;;
pipe&lt;A&gt;(op1: OperatorFunction&lt;T, A&gt;): Observable&lt;A&gt;;
pipe&lt;A, B&gt;(op1: OperatorFunction&lt;T, A&gt;, op2: OperatorFunction&lt;A, B&gt;): Observable&lt;B&gt;;
pipe&lt;A, B, C&gt;(op1: OperatorFunction&lt;T, A&gt;, op2: OperatorFunction&lt;A, B&gt;, op3: OperatorFunction&lt;B, C&gt;): Observable&lt;C&gt;;
pipe&lt;A, B, C, D&gt;(
    op1: OperatorFunction&lt;T, A&gt;,
    op2: OperatorFunction&lt;A, B&gt;,
    op3: OperatorFunction&lt;B, C&gt;,
    op4: OperatorFunction&lt;C, D&gt;
): Observable&lt;D&gt;;
pipe&lt;A, B, C, D, E&gt;(
    op1: OperatorFunction&lt;T, A&gt;,
    op2: OperatorFunction&lt;A, B&gt;,
    op3: OperatorFunction&lt;B, C&gt;,
    op4: OperatorFunction&lt;C, D&gt;,
    op5: OperatorFunction&lt;D, E&gt;
): Observable&lt;E&gt;;
pipe&lt;A, B, C, D, E, F&gt;(
    op1: OperatorFunction&lt;T, A&gt;,
    op2: OperatorFunction&lt;A, B&gt;,
    op3: OperatorFunction&lt;B, C&gt;,
    op4: OperatorFunction&lt;C, D&gt;,
    op5: OperatorFunction&lt;D, E&gt;,
    op6: OperatorFunction&lt;E, F&gt;
): Observable&lt;F&gt;;
pipe&lt;A, B, C, D, E, F, G&gt;(
    op1: OperatorFunction&lt;T, A&gt;,
    op2: OperatorFunction&lt;A, B&gt;,
    op3: OperatorFunction&lt;B, C&gt;,
    op4: OperatorFunction&lt;C, D&gt;,
    op5: OperatorFunction&lt;D, E&gt;,
    op6: OperatorFunction&lt;E, F&gt;,
    op7: OperatorFunction&lt;F, G&gt;
): Observable&lt;G&gt;;
pipe&lt;A, B, C, D, E, F, G, H&gt;(
    op1: OperatorFunction&lt;T, A&gt;,
    op2: OperatorFunction&lt;A, B&gt;,
    op3: OperatorFunction&lt;B, C&gt;,
    op4: OperatorFunction&lt;C, D&gt;,
    op5: OperatorFunction&lt;D, E&gt;,
    op6: OperatorFunction&lt;E, F&gt;,
    op7: OperatorFunction&lt;F, G&gt;,
    op8: OperatorFunction&lt;G, H&gt;
): Observable&lt;H&gt;;
pipe&lt;A, B, C, D, E, F, G, H, I&gt;(
    op1: OperatorFunction&lt;T, A&gt;,
    op2: OperatorFunction&lt;A, B&gt;,
    op3: OperatorFunction&lt;B, C&gt;,
    op4: OperatorFunction&lt;C, D&gt;,
    op5: OperatorFunction&lt;D, E&gt;,
    op6: OperatorFunction&lt;E, F&gt;,
    op7: OperatorFunction&lt;F, G&gt;,
    op8: OperatorFunction&lt;G, H&gt;,
    op9: OperatorFunction&lt;H, I&gt;
): Observable&lt;I&gt;;
pipe&lt;A, B, C, D, E, F, G, H, I&gt;(
    op1: OperatorFunction&lt;T, A&gt;,
    op2: OperatorFunction&lt;A, B&gt;,
    op3: OperatorFunction&lt;B, C&gt;,
    op4: OperatorFunction&lt;C, D&gt;,
    op5: OperatorFunction&lt;D, E&gt;,
    op6: OperatorFunction&lt;E, F&gt;,
    op7: OperatorFunction&lt;F, G&gt;,
    op8: OperatorFunction&lt;G, H&gt;,
    op9: OperatorFunction&lt;H, I&gt;,
    ...operations: OperatorFunction&lt;any, any&gt;[]
): Observable&lt;unknown&gt;;
</code></pre>
<p>It's not pretty, but it gets the job done.</p>
",1
65149115,"<p>use :</p>
<pre><code>  &lt;div className=&quot;row&quot;&gt;
         {column.map((item) =&gt; {
          const { title, image, path } = item;
          return (
            &lt;ul className=&quot;footer-collections&quot;&gt;
              &lt;MenuLinks title={title} image={image} path={path} /&gt;
            &lt;/ul&gt;
          );
        })}
        &lt;/div&gt;
</code></pre>
",1
65124336,"<p>You serialised the value you put in to localStorage to JSON. Therefore you need to deserialise it again when you try and read the value:</p>
<pre><code>var retrivedModuleObj = JSON.parse(localStorage.getItem('moduleObj') || '{}');
console.log(&quot;MODULE &quot; + retrivedModuleObj.name);
</code></pre>
<p>In addition, due to the loop completing before the <code>click</code> handler can be executed the <code>field</code> variable will only ever hold the value of the final iteration. A better approach would be to use a <code>data</code> attribute to hold the <code>field</code> related to each <code>button</code> element, and a delegated event handler to manage the click event on them. Try this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var data = {
  ""modules"": [{
    ""name"": ""mod1"",
    ""description"": ""mod1 description"",
  }, {
    ""name"": ""mod2"",
    ""description"": ""mod2 description"",
  }, {
    ""name"": ""mod3"",
    ""description"": ""mod3 description"",
  }]
}

jQuery($ =&gt; {
  $.each(data.modules, function(i, field) {
    let $li = $(`&lt;li&gt;&lt;div&gt;Name: ${field.name}&lt;/div&gt;&lt;div&gt;Description: ${field.description}&lt;/div&gt;&lt;/li&gt;`).appendTo('#moduleList');
    $('&lt;input class=""set_inputs"" type=""button"" value=""select"" /&gt;').data('field', field).wrap('&lt;div /&gt;').parent().appendTo($li);
  });


  $('#moduleList').on('click', '.set_inputs', e =&gt; {
    let $button = $(e.currentTarget);
    console.log($button.data('field'));
    
    // Uncomment these two lines in your production version. They are only commented 
    // here as they cause issues within SO snippets
    //localStorage.setItem('moduleObj', JSON.stringify($button.data('field')));
    //window.location.href = 'select_inputs.html';
  });
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""row""&gt;
  &lt;div class=""col s12 l6""&gt;
    &lt;ul id=""moduleList""&gt;&lt;/ul&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65087288,"<p>You need to define the function before assigning it to an event - as you did in your second example where y() is executed AFTER x is defined</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var x = function(event) {
  console.log(event.target);
};

// or
// const x = event =&gt;  console.log(event.target);

const target = document.getElementById(""butX"");

target.addEventListener(""click"", x); //it does work//</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;button type=""button"" id=""butX""&gt;Click&lt;/button&gt;</code></pre>
</div>
</div>
</p>
",1
65126657,"<p>Replace <code>$(window).on('load')</code> with <code>document.ready</code> function:</p>
<pre><code>$(document).ready(function(){ 
//method goes here
});
</code></pre>
",1
65113780,"<p>First of all, you need to <code>await</code> <code>queryRAWGDatabase</code> function:</p>
<pre class=""lang-js prettyprint-override""><code>let game = await queryRAWGDatabase(game_title)
</code></pre>
<blockquote>
<p>You don't need to have a callback if you await, so I removed <code>getResult</code></p>
</blockquote>
<p>However, at the moment this function is not await'able. To solve that, we need to edit that function so it would return a return <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise"" rel=""nofollow noreferrer"">Promise</a> instance. It accepts callback with <code>resolve</code> &amp; <code>reject</code> arguments. And you can call <code>resolve</code> to resolve the promise:</p>
<pre class=""lang-js prettyprint-override""><code>function queryRAWGDatabase(title) {
    return new Promise((resolve, reject) =&gt; {
        title = title.split(' ').join('-');
        var req = unirest(&quot;GET&quot;, &quot;https://rawg-video-games-database.p.rapidapi.com/games/&quot; + title);

        req.headers({
            &quot;x-rapidapi-key&quot;: process.env.RAWG_GAME_DATABASE_KEY,
            &quot;x-rapidapi-host&quot;: &quot;rawg-video-games-database.p.rapidapi.com&quot;,
            &quot;useQueryString&quot;: true
        });
        req.end(function (result) {
            if (result.error) {
                reject('Error: ' + result.error);
                return;
            };
            resolve(result.body);
        });
    })
}
</code></pre>
<blockquote>
<p>Instead of the callback, you need to call <code>resolve</code>. Regarding <code>result.error</code>, you can call <code>reject</code>, and then you will get an exception when awaiting.</p>
</blockquote>
",1
65149516,"<p>Ref change in react, doesn't trigger rerender.
On first click, url state changes, component rerenders, ReactPlayer updates ref, but component doesn't render second time.
On second click, url state changes again, component rerenders and previous ref value renders</p>
<p>You can use <code>onPlay</code> callback of <code>ReactPlayer</code></p>
<pre><code>const [currentUrl, setCurrentUrl] = useState('');
   
&lt;ReactPlayer 
  onPlay={() =&gt; {
    setCurrentUrl(videoUrl.current?.player?.player?.player?.currentSrc)
  }} 
/&gt;
</code></pre>
",1
65164315,"<p>Put your 2nd part into a separate function and then use settimeout (you may adjust the time by yourself)</p>
<pre><code>$('#startButton').on('click', function() {
    // run animation on click
    document.getElementById(&quot;rightHand&quot;).animate([
        { transform: 'translateY(80px)' }, 
        { transform: 'translateY(0px)' }
    ], {
        duration: 100
    });

    // say after 3 seconds to trigger secondpart

    setTimeout(function(){ secondpart(); }, 3000);
    
    });


function secondpart()
{   
        //run second part
    $('#portfolio').show();
    $('.footer').show();
    var hash = $('#portfolioSection');
    $('html, body').animate({
        scrollTop: $(hash).offset().top
    }, 800);

    }
</code></pre>
",1
65161039,"<p>If I understand your problem statement, you want the visible drop down to hide before the new drop down is shown.</p>
<p>To do that, simply hide all the dropdowns before performing your logic:</p>
<pre class=""lang-js prettyprint-override""><code>function drop_down(e){
    var x = document.getElementById(e);
    const xIsShowing = x.style.display === &quot;block&quot;;
    document.getElementById('drop1').style.display = 'none';
    document.getElementById('drop2').style.display = 'none';
    if(!xIsShowing) {
        x.style.display = &quot;block&quot;;
    }
}
</code></pre>
",1
65144265,"<p>Make an object of mappings that contain special properties, then loop through the keys:</p>
<pre class=""lang-js prettyprint-override""><code>function convertObject(obj) {
    const mappings = {
        PRODUCEID: &quot;PRID&quot;,
        docType: &quot;docType&quot;,
        PRODUCE: &quot;PRODUCE&quot;,
        STATUS: &quot;STATUS&quot;
    };
    const ret = {BusinessData: {}};
    for (const key in obj) {
        if (key in mappings) {
            ret[mappings[key]] = obj[key];
        } else {
            ret.BusinessData[key] = obj[key];
        }
    }
    return ret;
}
</code></pre>
<p>This utilizes a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"" rel=""nofollow noreferrer""><code>for...in</code></a> loop.</p>
",1
65121554,"<p>The script you posted should work fine if you remove the conditions (if), since you don't want to restrict it to a particular column. For example:</p>
<pre><code>function onEdit(e){
  var sh=e.range.getSheet();
  var A1=e.range.getA1Notation();
  
  var editDate = Utilities.formatDate(new Date(),Session.getScriptTimeZone(),&quot;MM/dd/yyyy HH:mm:ss&quot;);
  
  var nextCell = e.range.offset(0, 1);
  nextCell.setValue(editDate);
  
  var newNote=Utilities.formatString('Last Modified: %s / Updated Cell: %s / Updated Cell Value: %s / Associated Date Cell: %s / Associated Date Cell Value: %s\n',editDate,A1,e.value,nextCell.getA1Notation(),editDate);
  nextCell.setNote(nextCell.getNote() + newNote);
}
</code></pre>
",1
65114239,"<p>Based on the data structure provided, you can use a recursive solution to reach the nested array you are interested in and then when the recursion hits the <code>base case</code>, you can either push a new object/s into the array at that specific level of depth or use a callback function to push as many new objects into it.</p>
<p>I am not really sure about the &quot;dynamic&quot; part you are referring to, but the following should place you in the right direction:</p>
<pre><code>function rec(array) {
    for (let i in array) {
        if (array[i].children === undefined) { // BASE CASE
            // console.log(&quot;base case &quot;, array);

            // push the object you want into the array, as at this point in the
            // recursion you will be at the level you can modify your image array as you like
            return array.push({ &quot;myImage&quot;: &quot;myBeautifulCatImage&quot;, &quot;does&quot;: &quot;poooooor&quot;});
        }

        // recursive call
        // visualise how deep you are going...
        // console.log(&quot;rec&quot;, array[i].children); 
        return rec(array[i].children); 
    }
}

rec(arr);

// if you know log your arr as in:
// console.log(&quot;arr after recursion&quot;, rec(arr))
// you will see your new cat showing where it should be :)
</code></pre>
<p>If this answer helps you solving the issue, <strong>consider</strong> accepting the answer or upvoting it. Thanks.</p>
",1
65162987,"<p>Ok I installed this locally and played around and this made it work:</p>
<p>src/controllers/Block.js</p>
<pre class=""lang-js prettyprint-override""><code>module.exports = {
  getBlocks: (req, res) =&gt; {
    res.send('blocks')
  }
}
</code></pre>
<p>Removing the <code>body</code> argument. I am unable to explain this tho.</p>
",1
65085505,"<p>Your error is super obvious whats wrong. Read it again:</p>
<blockquote>
<p>CastError: Cast to ObjectId failed for value &quot;undefined&quot; at path &quot;_id&quot; for model &quot;Project&quot;</p>
</blockquote>
<p>...failed for <code>undefined</code> at path &quot;_id&quot; ...</p>
<p>That meanst that your <code>req.params.id</code>, because its at the field / path &quot;_id&quot;, is undefined. Check if you really send some values to your route.</p>
<p>You send wrong params to your route from client side</p>
<pre><code>  const dbProject = await db.Project.findOneAndUpdate({ _id: req.params.id }, {
    // Append the User to the Project object
    $push: { users: req.body.userId }
  }, { new: true });
</code></pre>
",1
65101765,"<p>You can use the <a href=""https://api.jquery.com/attribute-starts-with-selector/"" rel=""nofollow noreferrer"">&quot;Attribute starts with&quot;</a> selector to find the rows which don't match the one with the specified <code>idValue</code>. For example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('#someElement').on('change', function() {
  var idValue = this.value;
  $('#categoriesTable')
    .find('tr')
    .show()    // not needed if you only want to hide
    .not('[id^=""row_id' + idValue + '_""]')
    .hide();
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;table id=""categoriesTable""&gt;

  &lt;tr id=row_id1_dynamicdata&gt;
    &lt;td&gt;.1..&lt;/td&gt;
    &lt;td&gt;..&lt;/td&gt;
  &lt;/tr&gt;


  &lt;tr id=row_id2_dynamicdata&gt;
    &lt;td&gt;.2..&lt;/td&gt;
    &lt;td&gt;..&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr id=row_id3_dynamicdata&gt;
    &lt;td&gt;.3..&lt;/td&gt;
    &lt;td&gt;..&lt;/td&gt;
  &lt;/tr&gt;

  &lt;tr id=row_id4_dynamicdata&gt;
    &lt;td&gt;.4..&lt;/td&gt;
    &lt;td&gt;..&lt;/td&gt;
  &lt;/tr&gt;

&lt;/table&gt;

&lt;input type=""text"" id=""someElement"" /&gt;</code></pre>
</div>
</div>
</p>
",1
65098750,"<p>Instead of wrapping the TDs in a div, just give each td the same class.</p>
<p>Also, you can't actually run javascript in the script tag that is remotely loading a file.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>jQuery('.status2').hide();</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js""&gt;&lt;/script&gt;
 &lt;table border='0' width='100%'&gt;
        &lt;tr &gt;
            &lt;td width=""20%""  class=""bold""&gt;Status 1:&lt;/td&gt;
            &lt;td&gt;&lt;select name=""status1"" id=""status1""&gt;&lt;option value=""null""&gt;select:&lt;/option&gt;
                &lt;/select&gt;
            &lt;/td&gt;
            &lt;!--I want to hide the next 3 tds on some condition--&gt;
            &lt;td class=""status2"" colspan=""2""&gt;&amp;#160;&lt;/td&gt;
            &lt;td class=""bold status2""&gt;status 2:&lt;/td&gt;
            &lt;td class=""status2""&gt;&lt;select&gt;
                    &lt;option value=""null""&gt;select&lt;/option&gt;
                    &lt;option value=""SV""&gt;V - 1&lt;/option&gt;
                    &lt;option value=""SK""&gt;V - 2&lt;/option&gt;
            &lt;/select&gt;&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr id=""status3""&gt;
            &lt;td width=""20%"" class=""bold""&gt;Status 3:&lt;/td&gt;
            &lt;td&gt;&lt;select&gt;
                    &lt;option value=""null""&gt;select&lt;/option&gt;
                    &lt;option value=""SV""&gt;V - 3&lt;/option&gt;
                    &lt;option value=""SK""&gt;V - 4&lt;/option&gt;
                &lt;/select&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
    &lt;/table&gt;</code></pre>
</div>
</div>
</p>
",1
65138831,"<p>You can do this. By the way, no need to select the same element several times, just assign it to a variable.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const button = document.querySelector('.btn');
button.addEventListener('click', function () {
  button.innerText = 'click me again!';
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;body class=""bodyBG""&gt;
  &lt;button class=""btn""&gt;Click Me!&lt;/button&gt;
&lt;/body&gt;</code></pre>
</div>
</div>
</p>
",1
65142714,"<p>jQuery <a href=""https://api.jquery.com/clone/"" rel=""nofollow noreferrer""><code>.clone()</code></a> has an additional argument</p>
<blockquote>
<p><strong>withDataAndEvents</strong> (default: false)<br/>
Type: Boolean<br/>
A Boolean indicating whether event handlers should be copied along with the elements.</p>
</blockquote>
<p>So you can update your code to:</p>
<pre><code>$(selected_area).clone(true).appendTo(parent_area);
</code></pre>
<p>Updated fiddle: <a href=""https://jsfiddle.net/95rLne7m/"" rel=""nofollow noreferrer"">https://jsfiddle.net/95rLne7m/</a></p>
<hr />
<p>The alternative is to use event delegation, so it doesn't matter when/how the HTML is created, change:</p>
<pre><code>$(&quot;.ui-editable&quot;).bind(&quot;contextmenu&quot;, function...
</code></pre>
<p>to</p>
<pre><code>$(document).on(&quot;contextmenu&quot;, &quot;.ui-editable&quot;, function...
</code></pre>
<p>Updated fiddle: <a href=""https://jsfiddle.net/95rLne7m/1/"" rel=""nofollow noreferrer"">https://jsfiddle.net/95rLne7m/1/</a></p>
",1
65133828,"<p>The time complexity for both approaches is the same.</p>
<p>Time complexity is based-off of input size. As the size of the input increases, the time complexity increases.</p>
<p>Neither approach 1 nor approach 2 will change with the input size, therefore they are both O(1). The if-statement is performing a simple comparison, which is always O(1).</p>
<p>So in the grand-scheme of things, they are both O(1) and the difference will be so minimal you will never notice.</p>
",1
65090562,"<p>MongoDB does not support a self-update field, that is, a field will not ever update itself without external instructions. So you will need to set up a cronjob that calls an execution to the database to modify the field.</p>
<p>For example, you can create a simple API that updates every field that has the matched date. And you can set up a cronjob to call this API once every day.</p>
",1
65154515,"<p>This request handler:</p>
<pre><code>router.post('/restaurantFilter',(req, res) =&gt; {
    restaurantController.getfilter
});
</code></pre>
<p>Does not actually call the <code>getfilter</code> function so nothing is ever sent from the POST request.  You can fix that by either doing this:</p>
<pre><code>router.post('/restaurantFilter', restaurantController.getfilter);
</code></pre>
<p>or this:</p>
<pre><code>router.post('/restaurantFilter',(req, res) =&gt; {
    restaurantController.getfilter(req, res);
});
</code></pre>
<p>Then, it looks like you also have to property export and import that <code>getfilter()</code> function.  You appear to export it just fine in <code>restaurant.js</code>:</p>
<pre><code>exports.getfilter = (req, res) =&gt; { ... });
</code></pre>
<p>But, you don't seem to be importing the controller properly as you're doing this:</p>
<pre><code>const restaurantController = require('../Controllers/restaurantData');
</code></pre>
<p>When it looks like you should be doing this:</p>
<pre><code>const restaurantController = require('../Controllers/restaurant.js');
</code></pre>
<p>so that you're assigning the controller the object that actually has the <code>getfilter</code> method on it.</p>
",1
65132964,"<p>You should use the item in the render method instead of the image src.</p>
<pre><code>{imageTransition.map(({ item, props, key }) =&gt; (
    &lt;animated.img style={props} key={key} src={item}&gt;&lt;/animated.img&gt;
  ))}
</code></pre>
<p><strong>Update:</strong></p>
<p>I created a working example:
<a href=""https://codesandbox.io/s/animated-image-change-component-sy6vu"" rel=""nofollow noreferrer"">https://codesandbox.io/s/animated-image-change-component-sy6vu</a></p>
",1
65141032,"<p>u need to return map function , also u should see some error on ur console about that:
<code>Expected to return a value in arrow function. (array-callback-return)</code></p>
<pre><code>return (
  &lt;div&gt;
    Here's the result :
    &lt;ol&gt;
        {arr.map((value, index) =&gt; ( //&lt;--return items
            &lt;li key={index}&gt;{value.title}&lt;/li&gt;
        ))}
    &lt;/ol&gt;
  &lt;/div&gt;
);
</code></pre>
",1
65091455,"<p>Your <code>listitem</code> elements are using <code>&lt;span&gt;</code> which is an inline element and why the words display next to each other instead of on top of each other. You can use a different element or add a class to the <code>listitem</code> elements to make the <code>display:block</code>. In this example, I chose to add CSS for the <code>listitem</code> class. I also added a hover effect for fun.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$("".error"").each(function(index, element) {
      $(this).css('cursor', 'pointer');
      $(this).mouseover(function() {
        if ($(this).has('.popup-base').length &gt; 0) {
          return;
        }
        var popup = document.createElement('div');
        popup.className = 'popup-base';
        let correctionslist = element.getAttribute('suggestions').split(',');
        for (correct of correctionslist) {
          popup.innerHTML += '&lt;span class=""listitem""&gt;' + correct + ' &lt;/span&gt;';
        }

        $(this).append(popup);

      });
     });</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.error {
  background-color: yellow;
  position: relative;
  display: inline-block;
}

.popup-base {
  display: none;
  position: absolute;
  background-color: #f9f9f9;
  min-width: 160px;
  box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
  padding: 12px 16px;
  z-index: 1;
}

.error:hover .popup-base {
  display: block;
}

.listitem {
  display:block;
  margin:7px 0;
}

.listitem:hover {
  background-color:blue;
  color:white;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div contenteditable&gt;&lt;span data-offset-key=""6j93r-0-0""&gt;&lt;span data-text=""true""&gt;Por favor, leia as &lt;span class=""error"" suggestions=""reges,regra,regrãs,regres,regras,regrá,regrã,regôs,regre,regas,regro,regos"" style=""cursor: pointer;""&gt;regrs&lt;/span&gt;. Meu &lt;span class=""error""
    suggestions=""nom."" style=""cursor: pointer;""&gt;nom&lt;/span&gt; é &lt;span class=""error"" suggestions=""Nícolas,Nicola,Ricolas,Picolas,Ni colas,Nicol as,Nicolaus,Unicolas,Nicolau"" style=""cursor: pointer;""&gt;Nicolas&lt;/span&gt;.&amp;nbsp;Brasil é o &lt;span class=""error""
    suggestions=""unto,quento,quinto,quanto,queto,sunto,quito,quoto,cunto,munto,punto,junto,quinoto,quinteto,quiranto"" style=""cursor: pointer;""&gt;qunto&lt;/span&gt; &lt;span class=""error"" suggestions=""mair,amor,moar,maro,mar,mor,maore,maori,maior,mafor,major,mora,maar""
    style=""cursor: pointer;""&gt;maor&lt;/span&gt; pais do mundo.&lt;/span&gt;
  &lt;/span&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65088929,"<p>You could add an extra property <code>dynamic: true</code> to the additions:</p>
<pre class=""lang-js prettyprint-override""><code>this.shareholders.push({
  username: &quot;Username&quot;,
  investment: &quot;Investment&quot;,
  dynamic: true
})
</code></pre>
<p>and check for it when showing the inputs:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;div&gt;
   &lt;input v-model=&quot;shareholder.username&quot; :name=&quot;`shareholders[${index}][username]`&quot; type=&quot;text&quot; class=&quot;form-control input&quot; &gt;
   &lt;i v-if=&quot;shareholder.dynamic&quot; class=&quot;fa fa-plus-circle fa-lg&quot; /&gt;
&lt;/div&gt;
&lt;div&gt;
   &lt;input v-model=&quot;shareholder.investment&quot; :name=&quot;`shareholders[${index}][investment]`&quot; type=&quot;text&quot; class=&quot;form-control input&quot; &gt;
   &lt;i v-if=&quot;shareholder.dynamic&quot; class=&quot;fa fa-plus-circle fa-lg&quot; /&gt;
&lt;/div&gt;
</code></pre>
",1
65094133,"<p>Use arrow function instead a usual one that has its own <code>this</code>:</p>
<pre class=""lang-js prettyprint-override""><code> imageAdd(e) {         
            e.forEach((e) =&gt; {
            if (e.type == 'image/jpeg' || e.type == 'image/png')
            {
                this.images.push({
                    image: URL.createObjectURL(e),
                    imageData: e
                    })
            }
            })
   }
</code></pre>
",1
65151309,"<blockquote>
<p>My function calls a private async function in a fire-and-forget manner, and does not add any error handling.</p>
</blockquote>
<p>Don't do that.</p>
<blockquote>
<p>An external library handles any and all uncaught promise rejections. In production, I want the shell to handle it, so I do not want to handle it in the function itself.</p>
</blockquote>
<p>Don't rely on this external library.</p>
<p>You should have your own global error handling function that you use in your function.</p>
<p>In production, have that error handling function simply rethrow the exception so that it gets picked up by the environment, or better, do call the shell error handling function directly if possible.</p>
<p>In the tests, you can mock out your own global handler, and assert that it is called with the expected arguments.</p>
",1
65144474,"<p>You have to use <code>toRef</code> to maintain reactivity.</p>
<p>This only exports a string literal:</p>
<pre><code>export const name = state.name
</code></pre>
<p>But this preserves the connection to the reactive property:</p>
<pre><code>export const name = toRef(state, 'name')
</code></pre>
<p>If you import <code>state</code> and both exports of <code>name</code> all into another module, then change <code>state.name</code>, the change will be reflected in the <code>toRef</code> export but not the literal.</p>
",1
65125064,"<p>You can't use a string as <code>x</code> value, use a number instead, for example:</p>
<pre><code>    series: [{
        ...
    }, {
        ...,
        yAxis: 1,
        data: [1, 0, 2, 1]
    }],
    yAxis: [{
        ...
    }, {
        title: {
            text: 'state'
        },
        categories: ['closed', 'standby', 'open'],
        min: 0,
        max: 2
    }]
</code></pre>
<hr />
<p><strong>Live demo:</strong> <a href=""http://jsfiddle.net/BlackLabel/o7Lvyadm/"" rel=""nofollow noreferrer"">http://jsfiddle.net/BlackLabel/o7Lvyadm/</a></p>
<p><strong>API Reference:</strong> <a href=""https://api.highcharts.com/highcharts/yAxis"" rel=""nofollow noreferrer"">https://api.highcharts.com/highcharts/yAxis</a></p>
",1
65112302,"<p>We can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Object/entries"" rel=""nofollow noreferrer"">Object.entries</a>, <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""nofollow noreferrer"">Array.filter</a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"" rel=""nofollow noreferrer"">Array.reduce</a> to compute the total points for the desired date range.</p>
<p>We just need to enter the correct date threshold:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let obj = { 
    ""expHistory"": {
        ""2020-11-26"": 84825,
        ""2020-11-25"": 87219,
        ""2020-11-24"": 44447,
        ""2020-11-23"": 14849,
        ""2020-11-22"": 57379,
        ""2020-11-21"": 32364,
        ""2020-11-20"": 42295
    }
}
            
function getTotal(thresholdDate, expHistory) {
    let result = Object.entries(expHistory)
        .filter(([date, points]) =&gt; date &gt; thresholdDate)
        .reduce((total, [date, points]) =&gt; total + points, 0);
    return result;
}
 
const thresholdDate = ""2020-11-20"";
console.log(`Total (from ${thresholdDate}):`, getTotal(thresholdDate, obj.expHistory));</code></pre>
</div>
</div>
</p>
",1
65114477,"<p>Sounds like you just need to check if the ref exists first:</p>
<pre><code>const onBodyClick = (event) =&gt; {
  if (!ref.current) {
    // Component is unmounting
    // below line could be used or commented out; since the component is unmounting,
    // the state should not make a difference
    // setOpen(false);
    return
  }
  if (ref.current.contains(event.target)) {
    // Component is not unmounting, and click was inside ref
    return;
  }
  // Component is not unmounting, and click was outside ref
  setOpen(false);
};
</code></pre>
",1
65143331,"<p>the <code>attr</code> method will always return a string.<br />
try using the <code>data</code> method instead...</p>
<pre><code>return $(id).data(value);
</code></pre>
<p>just be sure to remove the <code>data-</code> prefix from the attribute names.</p>
<p>see / run following example...</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var testATT = getATT('#graph3','data-gpget');
var testData = getData('#graph3','gpget');
console.log(typeof testATT, testATT);
console.log(typeof testData, testData);

function getData(id,value) {
   return $(id).data(value);
}
function getATT(id,value) {
   return $(id).attr(value);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div id=""graph3"" data-gpget=""[28,12,14,27,11]"" data-gpret=""[21,64,32,73,76]""&gt; 
  &lt;canvas id=""js-chartjs-earnings""&gt;&lt;/canvas&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65162262,"<p>The app mounts to the div in <em>index.html</em>, not the one in <em>App.vue</em>.  So if you haven't renamed the div <code>id</code> to <code>box</code> in <em>index.html</em>, this is why.</p>
<p>You could also change this back to <code>#app</code> instead (recommended):</p>
<pre class=""lang-html prettyprint-override""><code>createApp(BoostApp).mount('#app')
</code></pre>
",1
65140880,"<p>No special treatment is needed. Nodes, once inserted, don't remember where they come from. Most likely, you're running query code before insertion actually happens.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const name = 'Your Name Here';
document.querySelector('#movies').innerHTML = `
  &lt;div class=""row""&gt;
    &lt;div class=""alert alert-primary w-50 mb-2"" role=""alert""&gt;
      New genre added.
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=""row""&gt;
    &lt;div class=""card mb-2 w-50""&gt;
      &lt;div class=""card-body""&gt;
        &lt;h5 class=""card-title""&gt;${name}&lt;/h5&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
`;

const cardsList = document.querySelectorAll('.card-title');
console.log(cardsList[0]);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;section id=""movies""&gt;Loading...&lt;/section&gt;</code></pre>
</div>
</div>
</p>
",1
65127496,"<p>Whenever you see <code>console.log('outside useEffect: ', number)</code> executed, it means there's been a re-render triggered. Since you put the log inside the render function body.</p>
<p>Now take a closer look, what else is inside the render function body?</p>
<pre><code>let number = 0
</code></pre>
<p>Of course, this line of code will reset <code>number</code> back to <code>0</code> every time a re-render is triggered. That's the why.</p>
<p>Ok, what solution we have? <code>useRef()</code> it is:</p>
<pre class=""lang-js prettyprint-override""><code>const MyComponent = props =&gt; {
    const number = useRef(0);
    React.useEffect(() =&gt; {
        number.current = number.current + 1
        console.log('inside useEffect: ', number.current);
    }, [number.current])

    console.log('outside useEffect: ', number.current);

    return &lt;div/&gt;
}
</code></pre>
",1
65097414,"<p>You can set the <code>&lt;p&gt;</code> as an absolute element. See below:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const App = () =&gt; {

  return (
    &lt;div style={{ padding: 20, backgroundColor: 'red', position: 'relative' }}&gt;
      &lt;h3&gt;See the following blue background paragraph. I want it to go beyond the padding I set for the parent div&lt;/h3&gt;
&lt;div style={{ paddingBottom: 30}}&gt;&lt;p style={{overflowX: 'scroll', whiteSpace: 'nowrap', backgroundColor: 'blue', position: 'absolute', left: 0, right: 0, margin: 'auto'}}&gt;
      Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.
  &lt;/p&gt;
&lt;/div&gt;  
        &lt;h3&gt;Think of it this way: I still want it to scroll as needed, but, I want it to completely go across my parent div, surpassing the padding set on it.&lt;/h3&gt;
    &lt;/div&gt;
  )
}


ReactDOM.render(
    &lt;App /&gt;,
    document.getElementById('app')
);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js""&gt;&lt;/script&gt;
&lt;div id=""app""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65151164,"<p>Your attempt is going in the right direction. You should not be worried about the extra character that is matched, as you can just deal with the capture group which does not include that character.</p>
<p>There are however still a few shortcomings in your <a href=""https://regex101.com/r/zjtKFp/1"" rel=""nofollow noreferrer"">regex</a>:</p>
<ul>
<li>If the opening brace is the very first character of your input, then it will not be matched.</li>
<li>If there are <em>two</em> backslashes before the opening brace (or by extension: an even number of them), then the brace will also not be matched, while it actually should: the backslash does not escape the brace, but is itself escaped by the backslash that precedes it.</li>
<li>If there is a line break character different from <code>\n</code> (like <code>\r</code>), then it is not rejected. You can use the fact that the dot (<code>.</code>) does not match line breaks (unless you override that default behaviour).</li>
<li>If the <em>closing</em> brace is escaped with a backslash it should probably not be interpreted as the end of the match... So a similar algorithm would be needed there as with the opening brace.</li>
</ul>
<p>You could improve on those points with the following regex:</p>
<p><a href=""https://regex101.com/r/zjtKFp/4"" rel=""nofollow noreferrer""><code>(?:[^\\]|^)(?:\\\\)*{(.*?(?=.)[^\\](?:\\\\)*)}</code></a></p>
<p>Here is an implementation in JavaScript to demonstrate that with the capture group you can get rid of the extra character:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let s = String.raw`{here}, grab this {value1}, and also this other {value2}.
Do not grab this \{value3}, and leave behind {value4 and
value5} too, and likewise {value6\\\}.`;

let matches = Array.from(
    s.matchAll(/(?:[^\\]|^)(?:\\\\)*{(.*?(?=.)[^\\](?:\\\\)*)}/g), 
    ([_, grp]) =&gt; grp
);

console.log(matches);</code></pre>
</div>
</div>
</p>
<p>NB: Usually you would escape braces in a regex, as they have a meaning as a quantifier, like in <code>a{1,3}</code>, but as they are not used like that in this regex, it works without escaping them.</p>
",1
65102108,"<p>you can pass the props to vue watchers</p>
<pre><code> watch: {
   widget_data: function (val) {
     //here you can put logic to save updated value to data method
   }
 }
</code></pre>
",1
65098953,"<p>You added an event-listener every <code>tick()</code> without removing the old one.
You should set it outside like follow:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var canvas = document.getElementById(""ok"");
var ctx = canvas.getContext(""2d"");
var loggingMachine = document.getElementById(""loggy"");
var score = 0;

const Rg = Math.floor(Math.random() * 480);
function ball(x) {
  this.x = x;
  this.y = 0;
  this.width = 20;
  this.height = 20;
}
var firstBall = new ball(Rg);

function newBall() {
  if (firstBall.y &lt; 480) {
    ctx.clearRect(0, 0, 480, 480);
    ctx.fillRect(firstBall.x, firstBall.y, firstBall.width, firstBall.height);
    firstBall.y++;
  } else {
    const playerStart = player.x;
    const playerEnd = player.x + player.width;

    const ballStart = firstBall.x;
    const ballEnd = firstBall.x + firstBall.width;

    const test1 = ballEnd - playerStart;
    const test2 = ballStart - playerEnd;

    if (test1 &gt;= 0 &amp;&amp; test2 &lt;= 0) {
      score++;
      loggingMachine.innerText = score;
    } else {
      score = 0;
    }
    firstBall.y = 0;
    firstBall.x = Math.floor(Math.random() * 480);
  }
}
function paddle(x) {
  this.x = x;
  this.y = 470;
  this.width = 70;
  this.height = 20;
}

var player = new paddle(50);
function renderPlayer() {
  ctx.fillRect(player.x, player.y, player.width, player.height);
}
function tick() {
  newBall(Rg);     

  renderPlayer();
  setTimeout(tick, 5);
}
loggingMachine.innerText = score;

document.addEventListener(""keydown"", (e) =&gt; {
    if (e.code === ""ArrowLeft"") {
      if (player.x &gt; 0) {
        player.x = player.x - 5;
      }
    } else if (e.code === ""ArrowRight"") {
      if (player.x + player.width &lt; 480) {
        player.x = player.x + 5;
      }
    }
});

tick();</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;canvas id=""ok"" width=""480"" height=""480""&gt;&lt;/canvas&gt;
&lt;p id=""loggy""&gt;&lt;/p&gt;
&lt;script src=""script.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
<p><strong>Your problem:</strong>
Before with multiple listeners the x-coord was updated multiple times with <code>0.05px</code> in one direction. which resulted in something like: <code>0.05 px * 100 listeners = 5 px</code></p>
<p>Now it will only be updated once with <code>0.05 px</code> in one direction. this is so slow that you cannot see it :-)
Increase the step to <code>5px</code> and it works like a charm.</p>
<p><strong>Tip</strong>: Try to learn how to <a href=""https://developers.google.com/web/tools/chrome-devtools/javascript/"" rel=""nofollow noreferrer"">debug your code</a></p>
",1
65133339,"<p>It seems like some HOFs and map of filters might help you organize your user determined logic/filtering.</p>
<pre><code>const filters = {
  lastHourFilter: (result) =&gt; result.postedDate &gt; Date.now() - ms('1 hour'),
  last24HoursFilter: (result) =&gt; result.postedDate &gt; Date.now() - ms('24 hours'),
  ...
  itContractorFilter: generateSpecialismFilter('IT Contractor'),
  clinicalPsychologyFilter: generateSpecialismFilter('Clinical Psychology'),
  ...
  fullTimeFilter: generateJobTypeFilter('Full Time'),
  temporaryFilter: generateJobTypeFilter('Temporary')
}
</code></pre>
<p>Then you inspect the check boxes and determine which filters you should apply to the results. Something like:</p>
<pre><code>function applyFilters(results) {
  Object.keys(filters).forEach((key) =&gt; {
    if (checkboxes[key].checked) results = 
  results.filter(filters[key]);
  });
  return results;
}
</code></pre>
<p>Here checkboxes is a map of checkboxes in the DOM indexed by the same keys as your filters.</p>
",1
65119989,"<p><a href=""https://i.stack.imgur.com/nO2R9.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nO2R9.png"" alt=""Official Reply to this in the discord.js discord server"" /></a></p>
<p>The maintainers of the djs module have made a comment about this in the official djs server's faq channel. This feature is expected to be implemented only in version 13, if you want to implement this you have to fork djs and write your own reply code to use the <a href=""https://discord.com/developers/docs/resources/channel#create-message"" rel=""nofollow noreferrer"">message reference</a> parameter in the official discord API gateway</p>
",1
65144957,"<p>as @GACy20 said listItem.showSubmenu is not the same as listItem.showSubmenu.bind(this, subLists)</p>
<p>try doing it like this</p>
<pre><code>listItem.showSubmenu = showSubmenu.bind(this, subLists);
listItem.addEventListener('click', listItem.showSubmenu, true);
</code></pre>
",1
65151355,"<p>Based upon your most recent comments and updates, I recommend the following changes to the <code>getDaysArray()</code> method:</p>
<ol>
<li>Create the <code>d</code> date outside the loop in order to use <code>getDay()</code> (day of week #)</li>
<li>Fill the <code>a[]</code> with empty strings with the number of day of week # in a for loop</li>
<li>Finally, populate the date strings into the remainder of the <code>a[]</code> array.</li>
</ol>
<p>That should do it:</p>
<pre class=""lang-js prettyprint-override""><code>const getDaysArray = async (s, e) =&gt; {
    let a = [];
    let d = new Date(s);
    let emptyCount = d.getDay();
    for(let i = 0; i &lt; emptyCount; i++) {
      a.push('');
    }
    for (d; d &lt;= e; d.setDate(d.getDate() + 1)) {
      a.push(new Date(d).toString());
    }
    return a;
  };
</code></pre>
",1
65116140,"<p>You can use a forEach loop to iterate through the array.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var arr = [ { ""value"": ""1"", ""hobbies"": 'netflix'},{ ""value"": ""1"", ""hobbies"": 'food'} ];

var k = {};
var out = [];
arr.forEach(elm =&gt; {
  if(typeof(k[elm.value]) == ""undefined"")
    k[elm.value] = {value:elm.value, hobbies:[]};
  k[elm.value].hobbies.push(elm.hobbies);
});

Object.keys(k).forEach(key =&gt; out.push(k[key]));

console.log(out);</code></pre>
</div>
</div>
</p>
",1
65111782,"<p>I don't know if <code>AnalyticDatum</code> is a typo, but you can have custom types using <code>extends</code>.</p>
<pre><code>export default class AnalyticData extends Array {
  constructor(collection = []) {
    super().push(...collection);
  }
};
</code></pre>
<p>If <code>AnalyticDatum</code> is instead another class to define <code>AnalyticData</code> items, you can still use the <code>map(...)</code> procedure:</p>
<pre><code>export default class AnalyticData extends Array {
  constructor(collection = []) {
    super().push(...collection.map(item =&gt; new AnalyticDatum(item)));
  }
};
</code></pre>
<p>In both cases, the <code>new AnalyticData</code> will be an instance of <code>AnalyticData</code>, so whatever type checker you have in there, shouldn't have issues.</p>
",1
65095448,"<p>As you also have fill and stroke is your style is it also being used for polygons?  If other features don't have an <code>iconUrl</code> that will cause the error.  Try modifying the style function so the image part is only set if there is an <code>iconUrl</code></p>
<pre><code>function styleFunction(feature) {
  var iconUrl = feature.get('iconUrl');
  var defaultStyle = new ol.style.Style({
    fill: new ol.style.Fill({
    color: &quot;green&quot;
  }),
  stroke: new ol.style.Stroke({
   color: &quot;green&quot;,
   width: 1.2
  }),
  image: iconUrl ? new ol.style.Icon({
   scale: 0.1,
   src: iconUrl
  }) : undefined
 });
 return [defaultStyle];
}
</code></pre>
",1
65102217,"<p>The code you shared and the behavior are different, here is what you can look into:</p>
<p><a href=""https://jsfiddle.net/Manju06/87xt9czq/46/"" rel=""nofollow noreferrer"">fiddle</a> to play around</p>
<p>here is how it looks for mobile screen.</p>
<p><a href=""https://i.stack.imgur.com/AVirV.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AVirV.png"" alt=""enter image description here"" /></a></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.custom-checkbox {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  padding: 20px;
  border: 1px solid red;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""custom-control custom-checkbox""&gt;
  &lt;input type=""checkbox"" class=""custom-control-input"" id=""customCheck1"" (change)=""termsAndConditions($event.target)""&gt;
  &lt;label class=""custom-control-label"" for=""customCheck1""&gt;Acepto los &lt;a href=""https://docs.google.com/document/d/demodemodemo"" target=""_blank""&gt;&lt;b&gt;Términos y condiciones&lt;/b&gt;&lt;/a&gt;&lt;/label&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65150914,"<p>I'm pretty sure the issue is that you are memoizing the original values of <code>formValues</code> from here:</p>
<pre><code>onChange={({ name, value }) =&gt; setFormValues({...formValues, [name]: value }))
</code></pre>
<p>Say <code>field1</code> has a change in it's value. It calls the <code>onChange</code> handler, which merges <code>...formValues</code> - the values that existed when the component mounted - with the new value for <code>field1</code>.</p>
<p>Now the equality function in <code>React.memo</code> for <code>field1</code> returns false, because the value is different. That particular field re-renders to recieve its new value, and also the new values of <code>...formValues</code>. The other fields, however, have <em>not</em> rerendered. For them, <code>...formValues</code> still means the value of the state as it existed the last time they re-rendered, which was when the component mounted.</p>
<p>If you now change the value of <code>field2</code>, it will set the state to the result of merging the original state with the new value of <code>field2</code>. Hence <code>field1</code> is reset because its value has now changed again back to the original value.</p>
<p>A simple solution to this would be to use the callback version of <code>setState</code>, which always uses the state's current value:</p>
<pre><code>onChange={({ name, value }) =&gt; setFormValues(fv =&gt; {...fv, [name]: value }))
</code></pre>
<p>However, I would be tempted not to do this, and instead get rid of the memoisation altogether. This is because your equality function does not actually accurately reflect the way that props provided to the component change. I believe the performance gains here are also negligible, because the component is so small and does not render any additional components itself.</p>
<p>Assuming there's no animation tied to the value change, it is very cheap to perform and does not make a good candidate for memoisation, which also escapes the built in React optimisation. You should think carefully to decide if you really need it before implementing it.</p>
",1
65142047,"<p>Refer to <a href=""https://reactjs.org/docs/composition-vs-inheritance.html#containment"" rel=""nofollow noreferrer"">React children</a>.</p>
<pre><code>function Container(props) {
   return (
     &lt;div&gt;
       {props.chilidren}
     &lt;/div&gt;
   );
}
</code></pre>
",1
65155228,"<p>This will work like a charm.</p>
<pre><code>`&lt;span className={jsStyle.yourClass}&gt;${one}&lt;/span&gt;`
</code></pre>
<p>Actually, ReactHtmlParser thinks <code>{one}</code> as a javascript object, in order to send its value to html code, we will need to convert its value, using <code>${...}</code> like syntax.</p>
",1
65137480,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const testArr = ['1,A', '2,B', '1,D', '3,A'];

const result = testArr.reduce((val, cur) =&gt; {
  if (!val.some((v) =&gt; v.includes(cur[0]))) {
    val.push(cur);
  }
  return val;
}, []);

console.log(result);</code></pre>
</div>
</div>
</p>
",1
65149927,"<p><a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""nofollow noreferrer""><code>map()</code></a> is an Array method and doesn't exist in an object.</p>
<p>Each item in your <code>library?.layers</code> is an object, so <code>opaque.map</code> is not a function.</p>
<p>Side note 1: <code>library?.layers</code> is already an object, so you don't need to call <code>Object.values()</code> but can instead directly use <code>library?.layers?.reduce()</code>.</p>
<p>Side note 2: if your purpose is to get the ids of all <code>opaque</code> objects, you can just do:</p>
<pre><code>const opaqueMaterialSecondaryIds = library?.layers?.map(opaque =&gt; opaque.id);
</code></pre>
",1
65162437,"<p>Try this:</p>
<pre><code>&lt;body style=&quot;height: 100vh;&quot;&gt;
  &lt;fs-gist gistID=&quot;fireflysemantics/054716730103cd205c39167054542f68&quot;&gt;
  &lt;/fs-gist&gt;
&lt;/body&gt;

</code></pre>
<p>Setting the height of the body to <code>100vh</code> allows the <code>fs-gist</code> element to expand within it.</p>
<p>Demo:
<a href=""https://stackblitz.com/edit/typescript-fs-gist-set-body-height-demo"" rel=""nofollow noreferrer"">https://stackblitz.com/edit/typescript-fs-gist-set-body-height-demo</a></p>
",1
65091522,"<blockquote>
<p>I would like to have my element zoom-based. I don't need it visible when zooming out of 19, because my map doesn't look nice.</p>
</blockquote>
<p>You can simply show/hide an element depending on the current zoom level in a way similar to this (the zoom change handler was taken from <a href=""https://gis.stackexchange.com/a/309404/70847"">https://gis.stackexchange.com/a/309404/70847</a>):</p>
<pre><code>var currZoom = map.getView().getZoom();
map.on(&quot;moveend&quot;, function(e) {
  var newZoom = map.getView().getZoom();
  if (currZoom != newZoom) {
    if (newZoom &gt; 19) {
        document.getElementById(&quot;vienna&quot;).style.display = &quot;none&quot;;
    } else {
        document.getElementById(&quot;vienna&quot;).style.display = &quot;unset&quot;;
    }
    currZoom = newZoom;
  }
}); 
</code></pre>
",1
65089599,"<p>You can try</p>
<pre><code>const serialize = () =&gt; {
    let serialized = []
    let images = document.querySelectorAll('[data-id]')
    images.forEach(image =&gt; serialized.push(lesson.src))
    return serialized
}
</code></pre>
<p>This function should return you array of img src in order like this:</p>
<p>['/Users/rankWebsite/images/image_3.jpg', ...]</p>
<p>or maybe something more useful:</p>
<pre><code>const serialize = () =&gt; {
    let serialized = []
    let images = document.querySelectorAll('[data-id]')
    images.forEach(image =&gt; serialized.push(image.attributes['data-id'].nodeValue))
    return serialized
}
</code></pre>
<p>this should return you</p>
<pre><code>['black', 'orange', 'white']
</code></pre>
<p>set method in SortableJS is called only onEnd event, so after you sort something. in order to get order of your items, you would do something like this:</p>
<pre><code>var sorted = document.getElementById(&quot;rankedPicture&quot;)
Sortable.create(sorted, {
    group: &quot;rankedImages&quot;,
    onEnd: function(e) {
         console.log(serialize())
    }
</code></pre>
",1
65140099,"<p>The issue comes from the missing <code>Tracker</code> that is required in order to generate reactive validation messages:</p>
<pre class=""lang-js prettyprint-override""><code>import { Tracker } from 'meteor/tracker'

FolioSchema = new SimpleSchema({
    'name': {
      'type': String,
      'min': 2,
      'required': true
    }
  },
  {
    'requiredByDefault': false,
    'clean': {
      'filter': true,
      'autoconvert': true,
      'removeEmptyStrings': true,
      'trimStrings': true,
      'getAutoValues': true,
      'removeNullsFromArrays': true
    },
    tracker: Tracker // this line is important
  })

</code></pre>
<p>Without passing the Tracker, there is no cause for the template to redraw, since there is no dependency resolved.</p>
<p>Readings: <a href=""https://github.com/aldeed/simpl-schema#enable-meteor-tracker-reactivity"" rel=""nofollow noreferrer"">https://github.com/aldeed/simpl-schema#enable-meteor-tracker-reactivity</a></p>
",1
65103150,"<p>You can store the file in array instead of single file and use it.</p>
<pre><code>import React, { useState } from &quot;react&quot;;
import &quot;./styles.css&quot;;

const App = () =&gt; {
  const [file, setFile] = useState([]);

  function uploadSingleFile(e) {
    setFile([...file, URL.createObjectURL(e.target.files[0])]);
    console.log(&quot;file&quot;, file);
  }

  function upload(e) {
    e.preventDefault();
    console.log(file);
  }

  function deleteFile(e) {
    const s = file.filter((item, index) =&gt; index !== e);
    setFile(s);
    console.log(s);
  }

  return (
    &lt;form&gt;
      &lt;div className=&quot;form-group preview&quot;&gt;
        {file.length &gt; 0 &amp;&amp;
          file.map((item, index) =&gt; {
            return (
              &lt;div key={item}&gt;
                &lt;img src={item} alt=&quot;&quot; /&gt;
                &lt;button type=&quot;button&quot; onClick={() =&gt; deleteFile(index)}&gt;
                  delete
                &lt;/button&gt;
              &lt;/div&gt;
            );
          })}
      &lt;/div&gt;

      &lt;div className=&quot;form-group&quot;&gt;
        &lt;input
          type=&quot;file&quot;
          disabled={file.length === 5}
          className=&quot;form-control&quot;
          onChange={uploadSingleFile}
        /&gt;
      &lt;/div&gt;
      &lt;button
        type=&quot;button&quot;
        className=&quot;btn btn-primary btn-block&quot;
        onClick={upload}
      &gt;
        Upload
      &lt;/button&gt;
    &lt;/form&gt;
  );
};

export default App;
</code></pre>
",1
65164792,"<p>Because you're passing <code>b</code> which is just a reference to an object. To have the behavior you want, change your code to be like this:</p>
<pre><code>a.push(b.map((x) =&gt; x))
</code></pre>
<p>For more <a href=""https://www.freecodecamp.org/news/how-to-clone-an-array-in-javascript-1d3183468f6a/"" rel=""nofollow noreferrer"">see this page</a>.</p>
",1
65115277,"<p>You can only save strings to local storage, so Chrome ignores your attempt to save a whole button, A better solution will be to save button id, so you will have</p>
<pre><code>if (result.lastClicked == &quot;btnStartID&quot;) {
  ...
chrome.storage.local.set({'lastClicked': lastClicked.id}
</code></pre>
",1
65117787,"<p>As @somethinghere pointed out you need to target the <code>select-field</code> with <code>:nth-child</code> selector:</p>
<pre><code>.select-field {
  &amp;:nth-child(1) .dropdown-list {
    top: 342px;
    border: 2px dashed black; 
  }
  
  &amp;:nth-child(2) .dropdown-list {
    top: 404px;
    border: 2px dashed gold;
  }
}
</code></pre>
",1
65115141,"<p>So the issue is that you are setting step as an object and not as a number,</p>
<p>to solve this create a new interface for type step:</p>
<pre><code>interface stepType {
    id: string,
}
interface useStepType {
   step: stepType,
   navigation: any,
}
</code></pre>
<p>and then try to set the step to this type</p>
<pre><code>    const {step, navigation}: useStepType = useStep({
    steps,
    initialStep: 0
})
</code></pre>
",1
65157206,"<p>You could split the path at <code>.</code> and <code>reduce</code> the parts. Start with <code>doc</code> object as the accumulator and return the nested object in each iteration with optional chaining</p>
<pre><code>let prop = path.split(&quot;.&quot;).reduce((acc, part) =&gt; acc?.[part], doc)
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const get = (doc, path) =&gt; path.split(""."").reduce((acc, part) =&gt; acc?.[part], doc)

console.log(
  get({ data: { } }, 'data.options.name'),
  get({ data: { options: {} } }, 'data.options.name'),
  get({ data: { options: { name: 'abc' } } }, 'data.options.name')
)</code></pre>
</div>
</div>
</p>
",1
65096491,"<p>in inline css just add <code>url(...)</code> as below</p>
<pre><code>import React from &quot;react&quot;;
import ReactDOM from &quot;react-dom&quot;;

const customStyle = {
  color : &quot;red&quot;

}

const dStyle = {
  backgroundImage : &quot;url(https://wallpapercave.com/wp/wp2771916.jpg)&quot;,
}

ReactDOM.render(
&lt;div style = {dStyle}&gt;
  &lt;h1 style = {customStyle}&gt;Hello World!
  &lt;/h1&gt;
  &lt;/div&gt;, document.getElementById(&quot;root&quot;));
</code></pre>
",1
65113619,"<p>Instead of using font size in local Storage, store the class name and add class through javascript.</p>
<p>For css, you can do this: <code>*</code> selector selects all the elements.
I tried this locally and it worked, also <code>!important</code> is necessary for it to override any other styles.</p>
<pre><code>.fontSize * {
    font-size: 30px !important;
}
</code></pre>
",1
65123362,"<p>The way you are creating the class seems to be wrong. In classes you can use functions like this: <code>onCompleted() {};</code> and you can create variables in constructor. I also fixed an issue where you have Test defined twice, one as the class and one as variable. I renamed variable to TestInstance</p>
<p>Here would be a fixed example:</p>
<pre class=""lang-js prettyprint-override""><code>class Test {
    constructor() {
        this.isProgress = false;
        this.popup;
        this.payment;
    }

    onCompleted () {};
    onDismissed () {};
    onError () {};
  
    startPayment(payment) {
      this.payment = payment;
      this.isProgress = true;
      this.popup = window.open(&quot;---&quot;);
      var timer = setInterval(function () {
        if (this.Test.popup.closed) {
          clearInterval(timer);
          if (this.Test.isProgress) {
            this.Test.isProgress = false;
            this.Test.onDismissed();
          }
        }
      }, 500);
    }
  }
  
  const TestInstance = new Test();
  
  window.addEventListener(&quot;beforeunload&quot;, function () {
    if (TestInstance.popup != null &amp;&amp; !TestInstance.popup.closed) {
      TestInstance.popup.close();
    }
  });
  
  window.Test = TestInstance;
</code></pre>
<p>A minified version:</p>
<pre><code>class Test{constructor(){this.isProgress=!1,this.popup,this.payment}onCompleted(){}onDismissed(){}onError(){}startPayment(s){this.payment=s,this.isProgress=!0,this.popup=window.open(&quot;---&quot;);var t=setInterval(function(){this.Test.popup.closed&amp;&amp;(clearInterval(t),this.Test.isProgress&amp;&amp;(this.Test.isProgress=!1,this.Test.onDismissed()))},500)}}const TestInstance=new Test;window.addEventListener(&quot;beforeunload&quot;,function(){null==TestInstance.popup||TestInstance.popup.closed||TestInstance.popup.close()}),window.Test=TestInstance;
</code></pre>
",1
65102779,"<p>You can simply use this regex: <code>\d{2}-[A-Za-z]{3}-\d{4}</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let str = 'something 01-dec-2020 something';

let result = str.match(/\d{2}-[A-Za-z]{3}-\d{4}/);

console.log(result);</code></pre>
</div>
</div>
</p>
",1
65091350,"<p>You can fetch you values with ajax and insert them as options like so:</p>
<p>(Please keep in mind that the fetching of the values is mocked here, it just returns the array)</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>async function getValuesWithAjax() {
  return [""test1"", ""test2"", ""test3""];
}

$(function() {

  getValuesWithAjax().then(values =&gt; {
    values.forEach(value =&gt; {
      $("".selectpicker"").append($(""&lt;option&gt;"")
        .val(value)
        .html(value)
      );
    });
  });


  $('.selectpicker').on('change', function() {
    selectedServices = $(this).val();
    alert(selectedServices)
  });
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;select class=""selectpicker"" name=""MultiSelectGroup"" id=""ms1"" multiple&gt;
&lt;/select&gt;</code></pre>
</div>
</div>
</p>
",1
65132062,"<p>I tried replicating your code and it seems that the problem lies with your function <strong>getListOfId()</strong> which wasn't called anywhere in the code. To fix this, you should add a function call before you loop into the file ids.</p>
<p>This is how I made it work on my end and the code looks like this(May not be exactly how you want it; I also fixed the typo? <strong>lenght</strong> to <strong>length</strong>):</p>
<pre><code>function pdfToDoc() {
  
  var files = [];

  function getListOfId(){
    var folderId = &quot;1BpPZynsF5tjI5bysoOeHjKbr3gFCm7P8&quot;;
    var filesN = DriveApp.getFolderById(folderId).getFiles();
    while (filesN.hasNext()) files.push(filesN.next().getId());
}
  getListOfId()
  for(var i=0;i&lt;files.length;i++){
    var fileBlob = DriveApp.getFileById(files[i]).getBlob();
    var resource = {
      title: fileBlob.getName(),
      mimeType: fileBlob.getContentType()
    };
    var options = {
      ocr: true,
      convert: true
    };
  
    var docFile = Drive.Files.insert(resource, fileBlob, options);
    var docFileId = docFile.getId();  
    var saveDocFile = DriveApp.getFileById(docFileId);
      
    DriveApp.getFolderById(&quot;1BpPZynsF5tjI5bysoOeHjKbr3gFCm7P8&quot;).addFile(saveDocFile);
    DriveApp.getRootFolder().removeFile(saveDocFile);
    }
}
</code></pre>
<p>You can change the code on your own preference on how you will be calling the <strong>getListOfId()</strong> function.</p>
",1
65133739,"<p><em>is there any case in a real project that we don't want our application to be SSR?</em></p>
<p>For example when you are building a kind of user's panel where public access is not alowed and SEO is not important.
Another case is hosting Next.js app - you need Node.js environment on you server, while CRA buils simple static files. At early stage of projects it's easy to deploy and maintenance.</p>
<p>Next.js is great when you need SEO or a kind of simple API for backend tasks (database connections, forms etc...). On advanced projects I think it's better to move your backend logic into seperated API.</p>
<p>From the other hand Next.js requires other approach of thinking, sometimes components are rendered on server side, sometimes in client's browser, which may be not clear for beginers.</p>
<p>I think it's better to strat with CRA and then, when you'll see a real need then add Next.js into your CRA project.</p>
",1
65137812,"<p>You can create an input field with <code>&lt;textarea&gt;</code> inside it.</p>
<p>Example:
HTML</p>
<pre><code>&lt;h2&gt;Create .txt file&lt;/h2&gt;
&lt;div&gt;
   &lt;label for=&quot;fname&quot;&gt;File name (without .txt):&lt;/label&gt;
   &lt;br&gt;
   &lt;input type=&quot;text&quot; id=&quot;fname&quot; name=&quot;fname&quot;&gt;&lt;br&gt;&lt;br&gt;
   &lt;label for=&quot;fcontent&quot;&gt;File Content:&lt;/label&gt;
   &lt;br&gt;
   &lt;textarea id=&quot;fcontent&quot; name=&quot;w3review&quot; rows=&quot;4&quot; cols=&quot;50&quot;&gt;&lt;/textarea&gt;
   &lt;br&gt;
   &lt;button id=&quot;create&quot;&gt;Create File&lt;/button&gt;
   &lt;a download=&quot;info.txt&quot; id=&quot;downloadlink&quot; style=&quot;display: none&quot;&gt;Download Here&lt;/a&gt;
&lt;/div&gt;
</code></pre>
<p>Javascript:</p>
<pre><code>(function() {
    var textFile = null,
        makeTextFile = function(text) {
            var data = new Blob([text], {
                type: 'text/plain'
            });

            if (textFile !== null) {
                window.URL.revokeObjectURL(textFile);
            }

            textFile = window.URL.createObjectURL(data);

            return textFile;
        };


    var create = document.getElementById('create');
    var fileContent = document.getElementById(&quot;fcontent&quot;);

    create.addEventListener('click', function() {
        const fileName = document.getElementById(&quot;fname&quot;).value;
        document.getElementById(&quot;downloadlink&quot;).setAttribute(&quot;download&quot;, fileName);
        var link = document.getElementById('downloadlink');
        link.href = makeTextFile(fileContent.value);
        link.style.display = 'block';
    }, false);
})();
</code></pre>
<p>You can see the live demo <a href=""https://codepen.io/hisamafahri/pen/MWjKrJp"" rel=""nofollow noreferrer"">here</a>.</p>
",1
65130857,"<p>You <em>could</em> write a more thorough manual mock for <code>dayjs</code>, one that has the <code>extend</code> method, but then you're coupling your tests to a 3rd party interface. <em>&quot;Don't mock what you don't own&quot;</em> - you'll end up having to recreate more and more of the <code>dayjs</code> interface in your mock, and then if that interface changes your tests will continue to pass but <em>your code will be broken</em>. Or if you decide to swap to a different time library, you have to rewrite all of your tests to manually mock the new interface.</p>
<p>Instead, treat time as a dependency. Have your own function, in your own module, that simply provides the current time as a <code>Date</code> object:</p>
<pre class=""lang-js prettyprint-override""><code>export const howSoonIsNow = () =&gt; new Date();
</code></pre>
<p>Then, when you need to create a <code>dayjs</code> object, do so <em>from that</em> (<code>dayjs()</code> is equivalent to <code>dayjs(new Date())</code> per <a href=""https://day.js.org/docs/en/parse/now"" rel=""nofollow noreferrer"">the docs</a>):</p>
<pre class=""lang-js prettyprint-override""><code>import dayjs from 'dayjs';
import utc from 'dayjs/plugin/utc';

import { howSoonIsNow } from './path/to/noTimeLikeThePresent';

dayjs.extend(utc);

dayjs(howSoonIsNow()).add(15, 'minute');
</code></pre>
<p>Now in your test you can swap out something you actually own, and not have to interfere with <code>dayjs</code> at all:</p>
<pre class=""lang-js prettyprint-override""><code>import { howSoonIsNow } from './path/to/noTimeLikeThePresent';

jest.mock('./path/to/noTimeLikeThePresent');

howSoonIsNow.mockReturnValue(new Date(2020, 8, 12));
</code></pre>
<p>Now if a new version of <code>dayjs</code> changes in a way that breaks your use of it, your tests will fail and tell you as much. Or if you swap to a different time library you don't have to rewrite all of your tests, so you can be confident you've swapped over correctly.</p>
<p>Also FWIW I don't rate snapshot testing in general - it just becomes change detection, failing for irrelevant changes and encouraging people to ignore the test results and blindly recreate the snapshots if anything fails. Test based on the <em>behaviour</em> you want to see from your components.</p>
",1
65145864,"<p>Arrow functions with the format <code>x =&gt; ()</code> return the content of the brackets.</p>
<p>So you are returning what the compiler thinks is an object, as it's wrapped in curly brackets <code>x =&gt; ({ ... })</code> You need to remove the braces:</p>
<pre><code>prod.map(p =&gt; (
    p.name === '1' &amp;&amp; &lt;h1&gt;This is 1&lt;/h1&gt;
)
</code></pre>
<p>Or explicitly return the value:</p>
<pre><code>prod.map(p =&gt; {
    return p.name === '1' &amp;&amp; &lt;h1&gt;This is 1&lt;/h1&gt;
}
</code></pre>
",1
65159763,"<p>I think the following would work:</p>
<pre><code>case ADDNOTE: return {
  ...state,
  person: {
    ...state.person,
    operations: state.person.operations.map((operation) =&gt;
      operation.id !== action.payload.operationId
        ? operation //not this operation, just return original
        : { // add note
            ...operation,
            notes: [...operation.notes, action.payload],
          }
    ),
  },
};
</code></pre>
<p>More information on how to update can be found <a href=""https://redux.js.org/recipes/structuring-reducers/immutable-update-patterns"" rel=""nofollow noreferrer"">here</a></p>
",1
65116835,"<p>The culprit is this line:</p>
<pre><code>var numbersData = alerts.map(function(d) {return +d[&quot;Number of Times&quot;]});
</code></pre>
<p>If you log the value of numbersData to the console you'll see something like that:</p>
<blockquote>
<p>Array(6) [ NaN, 877, NaN, 878, NaN, NaN ]</p>
</blockquote>
<p>As you already figured it has to do with the comma inside your number. As you're prepending a <strong>+</strong> before returning <code>d[&quot;Number of Times&quot;]</code>, it ultimately tries to convert the string e.g. 1,377 into a number, fails (because of the comma) and thus returns NaN - which means <strong>Not a Number</strong>.</p>
<p>One easy fix is replacing all the commas of numbers inside your .csv file by a dot (<strong>.</strong>).</p>
<blockquote>
<p>1,377 -&gt; 1.377</p>
</blockquote>
<p>If you don't want to modify the .csv file itself, you can replace all occurences of a comma by a dot using javascript:</p>
<pre><code>var numbersData = alerts.map(function(d) {let num=d[&quot;Number of Times&quot;]; num=num.replaceAll(&quot;,&quot;,&quot;.&quot;); return Number(num);});
</code></pre>
",1
65158363,"<p>If your images are of a fixed height,  you can simple add a negative margin to 'pull' them up by that number of pixels.</p>
<p>Note the <code>margin-top -100px;</code> in the below snippet.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function showpopup() {
  let tooltip = document.getElementById(""tooltiptext"");
  let visible = tooltip.style.display;
  if (visible == ""none"") {
    document.getElementById(""tooltiptext"").style.display = ""block"";
  } else {
    document.getElementById(""tooltiptext"").style.display = ""none"";
  }

}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.tooltip {
  margin-top: -100px;
  display: block;
  background: black;
  border-radius: 5px;
  max-width: 300px;
  width: 300px;
  position: absolute;
  padding: 12px 18px;
  font-family: open-sans-regular, sans-serif;
  font-size: 14px;
  color: white;
  line-height: 22px;
  box-sizing: border-box;
  z-index: 1000;
  outline: none;
}

.tooltip.bottom .arrow {
  top: 0;
  left: 50%;
  border-top: none;
  border-bottom: 10px solid black;
}

.tooltip .arrow {
  width: 0;
  height: 0;
  position: absolute;
  left: 50%;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-top: 10px solid #43b02a;
  margin-top: -10px;
  margin-left: -10px;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;img width=""200"" height=""200"" src=""http://i.stack.imgur.com/o2hxa.png"" onclick=""showpopup()""&gt;&lt;/img&gt;
&lt;div id=""tooltiptext"" class=""bottom tooltip"" style=""display: none;""&gt;
  &lt;div class=""arrow""&gt;
  &lt;/div&gt;
  LMS short explanation
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65112800,"<p>Technically what you've got is working, the loop is executing 9 times.  The main problem is that <code>str.replace(&quot;___&quot;, string);</code> will only ever work once, because you are overwriting what's inside the element.</p>
<p>There are a few things you can do here to improve/modernise the code and fix the issue - you are very close with what you had though.</p>
<pre><code>var hobbies = [&quot;Sample 1&quot;, &quot;Sample 2&quot;, &quot;Sample 3&quot;];

function log(){
  const elem = document.getElementById(&quot;demo&quot;);
  const startStr = &quot;I only like&quot;;

  hobbies.forEach((hobby,i) =&gt; {
    setTimeout(() =&gt; {
      elem.innerHTML = `&lt;p&gt;${startStr} ${hobby}&lt;/p&gt;`
    }, i * 3000);
  })
}
</code></pre>
<p>*Grab the demo element outside of your loop, that way you're not querying your DOM every time the loop runs.</p>
<p>*Declare your starting string so you're not having to mess around with string replace. (This can also be written where ${startStr} is instead as it is a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"" rel=""nofollow noreferrer"">template literal</a>).</p>
<p>*You seem to have a function that does nothing but call another function, so your click event could simply call the latter function of log().</p>
<p>*You could use a forEach rather than a regular foo loop, this means you do not have to care about how many items are in your hobbies array, the forEach will happily go through them all.</p>
<p>Edit: To have this continually loop it would be something like this:</p>
<pre><code>var hobbies = [&quot;Sample 1&quot;, &quot;Sample 2&quot;, &quot;Sample 3&quot;];

function loop(delayTime) {
  const elem = document.getElementById(&quot;demo&quot;);
  const startStr = &quot;I only like&quot;;
  hobbies.forEach((hobby,i) =&gt; {
    setTimeout(() =&gt; {
      elem.innerHTML = `&lt;p&gt;${startStr} ${hobby}&lt;/p&gt;`
    }, i * delayTime);
  })
}

function log(){
  const delayTime = 3000;
  loop(delayTime)
  setInterval(function() {
    loop(delayTime)
  }, hobbies.length * delayTime);
}
</code></pre>
",1
65089549,"<p>There are many ways to achieve it.</p>
<p>One-liner approach utilizing <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals"" rel=""nofollow noreferrer"">template strings</a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/prompt"" rel=""nofollow noreferrer"">prompt</a> (which creates a pop-up window prompting the user to enter something).</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>window.location.replace(`http://${prompt('Input:')}.example.com`)</code></pre>
</div>
</div>
</p>
<p>Using form and its <code>onsubmit</code> attribute (your approach). Note that for ES6, please use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let"" rel=""nofollow noreferrer"">let</a> or <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const"" rel=""nofollow noreferrer"">const</a> instead of <code>var</code>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function resetId(){
    const idInput = document.getElementById(""id"");
    const url = `http://${idInput.value}.example.com`;
    alert(""Value before submit: "" + url);
    window.location.replace(url);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;form action=""#"" method=""post"" onsubmit=""resetId();"" &gt;
    &lt;input type=""text"" name=""id"" value=""domain"" id=""id""&gt;
    &lt;input type=""submit""&gt;
&lt;/form&gt;</code></pre>
</div>
</div>
</p>
<p>An approach without using a form but a button instead.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Same as above
function resetId(){
    const idInput = document.getElementById(""id"");
    const url = `http://${idInput.value}.example.com`;
    alert(""Value before submit: "" + url);
    window.location.replace(url);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;
    &lt;label for=""id""&gt;Input:&lt;/label&gt;
    &lt;input type=""text"" name=""id"" value=""domain"" id=""id""&gt;
&lt;/div&gt;
&lt;button onclick=""resetId()""&gt;submit&lt;/button&gt;</code></pre>
</div>
</div>
</p>
<p>Note: Instead of using <code>&lt;br /&gt;</code> for new lines in the form, consider using <code>&lt;label&gt;</code> and <code>&lt;input&gt;</code> wrapped in a <code>&lt;div&gt;</code> like the following for each line:</p>
<pre><code>&lt;div&gt;
    &lt;label for=&quot;something&quot;&gt;Something:&lt;/label&gt;
    &lt;input type=&quot;text&quot; name=&quot;something&quot; id=&quot;something&quot; /&gt;
&lt;/div&gt;
</code></pre>
",1
65111849,"<p>All you need is to check if <code>relatedTarget</code> of <code>mouseout</code> is within <code>body</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$.fn.parallax = function(resistance, mouse) {
  $e = $(this);
  gsap.to($e, 0.2, {
    x: -((mouse.clientX - window.innerWidth / 2) / resistance),
    y: -((mouse.clientY - window.innerHeight / 2) / resistance)
  });
};


$('body').mousemove(function(e) {
  $('.mouse-with img').parallax(-10, e);
});
$('body').mouseout(function(e) {
  if (!$(e.relatedTarget).closest('body').is(this))
  gsap.to($('.mouse-with img'), 0.5, {
    x: 0,
    y: 0
  });
});</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html {
  font-size: 16px;
  height: 100%;
}

body {
  font-size: 1em;
  font-family: Arial, Helvetica, Sans-serif;
  color: #000;
  line-height: 100%;
  min-height: 100%;
  margin: 0px;
  position: relative;
  overflow: hidden;
  overflow-y: auto;
}

.mouse-with {
  margin: -150px 0 0 -200px;
  position: absolute;
  top: 50%;
  left: 50%;
}

a {
  position: fixed;
  top: 10px;
  right: 10px;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;&lt;script src=""https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js""&gt;&lt;/script&gt;
&lt;link href=""https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"" rel=""stylesheet""/&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/gsap/3.5.1/gsap.min.js""&gt;&lt;/script&gt;
&lt;div class=""mouse-with""&gt;
  &lt;img src=""https://picsum.photos/400/300"" alt="""" /&gt;
&lt;/div&gt;
&lt;a href=""tel:123-456-7890""&gt;123 456-7890&lt;/a&gt;</code></pre>
</div>
</div>
</p>
",1
65108697,"<p>You could map the object by taking the index for the value.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const
    sample = [{ key:""key1"", title: ""title1"",  value: ""value1"" }, { key:""key2"", title: ""title2"",  value: ""value2"" }, { key:""key3"", title: ""title3"",  value: ""value3"" }],
    result = sample.map((o, i) =&gt; ({ ...o, title: o.title + (i + 1) }));

console.log(result);</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>
</div>
</div>
</p>
",1
65095837,"<p>The easiest way to handle this is to proxy the stream through a server where you can return the stream as an HTTP response.  Then, you can do something as simple as:</p>
<pre><code>&lt;video src=&quot;https://example.com/your-stream&quot;&gt;&lt;/video&gt;
</code></pre>
<p>The downside of course is that now you have to cover the bandwidth cost, since the connection is no longer peer-to-peer.</p>
<p>What would be nice is if you could use a Service Worker and have it return a faked HTTP response from the data you're receiving from the peer.  Unfortunately, the browser developers have crippled the Service Worker standards by disabling it if the user reloads the page, or uses privacy modes.  (It seems that they assumed Service Workers were only useful for caching.)</p>
<p>Also, a note on WebRTC... what you're doing is fine.  You don't want to use the normal WebRTC media streams, as not only are they lossy compressed, but they will drop segments to prioritize staying realtime over quality.  This doesn't sound like what you want.</p>
<blockquote>
<p>I've been wondering this - is the raw mediastream returned from something like getusermedia what format is that in?</p>
</blockquote>
<p>The MediaStream is the raw data, but it isn't accessible directly.  If you attach the MediaStream to a Web Audio API graph, whatever format the sound card captured in is converted to 32-bit floating point PCM.  At this point, you can use a script processor node to capture the raw PCM data.</p>
",1
65134245,"<p>If you have a function like this :</p>
<pre><code>function myFunction(){
    return {
        function inner(){
            return 'some data'
        }
    }
}
</code></pre>
<p>When you call <code>myFunction</code> with <code>myFunction()</code> returned value is an object like this:</p>
<pre><code>{
    inner: function (){ return 'some data'; }  
}
</code></pre>
<p>If you want to store <code>inner</code> function just need store your value with it's key from returned object, like this:</p>
<pre><code>let myInnerFunction = myFunction().inner;

...

//and when you want call that
myInnerFunction ()

</code></pre>
<p>In your case this is correct:</p>
<pre><code>let storedFunction = this.function1().function2;
</code></pre>
<p>If you want to run <code>function1</code> and <code>function2</code> when you call there is a simple way:</p>
<pre><code>let storedFunction = () =&gt; {
    return this.function1().function2();
}

// or without arrow function

let storedFunction = function () {
    return this.function1().function2();
}.bind(this)

</code></pre>
",1
65105671,"<p>Output:</p>
<p><a href=""https://i.stack.imgur.com/nG5YG.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/nG5YG.gif"" alt=""enter image description here"" /></a></p>
<p>Here is an example about how you can do it:</p>
<pre><code>import React, { useState } from &quot;react&quot;;
import &quot;./style.css&quot;;

export default function App() {
  const [name, setName] = useState(&quot;&quot;);
  const [number, setNumber] = useState(&quot;&quot;);
  const [serverData, setServerData] = useState([]);

  const handleSubmit = event =&gt; {
    event.preventDefault();
    setServerData(serverData.concat({ name: name, number: number }));
    setName(&quot;&quot;);
    setNumber(&quot;&quot;);
    console.log(serverData);
  };

  const sendToServer = () =&gt; {
    console.log(&quot;server ko post request with following data...&quot;);
    console.log(serverData);
    setName(&quot;&quot;);
    setNumber(&quot;&quot;);
  };
  return (
    &lt;div&gt;
      &lt;form onSubmit={handleSubmit}&gt;
        &lt;input value={name} onChange={e =&gt; setName(e.target.value)} /&gt;
        &lt;input value={number} onChange={e =&gt; setNumber(e.target.value)} /&gt;
        &lt;button&gt;add data&lt;/button&gt;
      &lt;/form&gt;
      &lt;button onClick={sendToServer}&gt;Submit to server&lt;/button&gt;
    &lt;/div&gt;
  );
}

</code></pre>
<p>Here is <a href=""https://stackblitz.com/edit/react-hjiz33?file=src/App.js"" rel=""nofollow noreferrer"">stackblitz</a> link of app.</p>
",1
65119888,"<p>The vanilla CSS solution would be to add <code>word-wrap: break-word;</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var boo = document.getElementById(""boo"");
function add() {
  boo.textContent += ""."";
}
setInterval(add, 100)</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>#boo {
  width: 250px;
  border: 1px solid black;
  word-wrap: break-word;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""boo""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65130341,"<p>The log inside the <code>toggleObjectives</code> can be confusing: that is in the middle of an update. What that log does is show you the current or old value, just before you change the value. So you only get to see the value AFTER you click &quot;Change&quot;, but BEFORE the change is fully processed.</p>
<p>If you want to know the value of the <code>objectivesOpen</code>, I would advise to put the console log directly below the useState command. That is a more logical place.</p>
<p>Like so:</p>
<pre class=""lang-js prettyprint-override""><code>const [objectivesOpen, setObjectivesOpen] = useState([]);
console.log('objectivesOpen = ', objectivesOpen);

const toggleObjectives = () =&gt; {
  setObjectivesOpen([Math.random()]);
}
</code></pre>
<p>Then you get the value of <code>objectivesOpen</code> after each render.
This is the value that is used in later code, e.g. if you want to display the <code>objectivesOpen</code> value to the user in a component.</p>
<p>If you put it here, you will get first <code>[]</code>, the initial empty value.
And then after each click, you get a new console log with the new value AFTER the state has been updated..</p>
<p>Maybe it is helpful to explain the what your code does.</p>
<ul>
<li>On the first run, the value of <code>objectivesOpen</code> will be an empty array (<code>[]</code>), based on the first time you call <code>useState([])</code></li>
<li>When the user clicks the function <code>toggleObjectivesOpen()</code>, the console should log this empty array</li>
<li>Then the asynchronous <code>setObjectiveOpen()</code> is called, passing in a new value of <code>[Math.random()]</code> (let's assume the value is <code>[0.25]</code></li>
<li>It is possible that the user clicks the button again, before the state is updated. If that happens, the console should again show the old <code>[]</code> value of the state.</li>
<li>Or, if the user clicks after the state is updated, then the console shows the
value after the first update (<code>[0.25]</code> from the example above).</li>
<li>After the state is updated, the code in the component will be run again. React will then ignore the <code>useState</code> command. But it will run the rest of the code (including all console.logs) and render all (child) components again.</li>
</ul>
",1
65123243,"<p>Assuming you have setup the input as</p>
<pre><code>let input = [{ Shipper_Name: ... }, {...}, ...];
</code></pre>
<p>Then the following code would do the trick</p>
<pre><code>let output = [];
let shipperName = null;
for (let ii = 0; ii &lt; input.length; ii++) {
  let val = input[ii];
  if (val[&quot;Shipper_Name&quot;] !== shipperName) {
    shipperName = val[&quot;Shipper_Name&quot;];
    output.push({Shipper_Name: shipperName});
  }
  let copy = JSON.parse(JSON.stringify(val));
  delete copy[&quot;Shipper_Name&quot;];
  output.push(copy);
}

console.log(output);
</code></pre>
",1
65084577,"<p>Using <code>ReactiveForms</code>. you can get form value as you needed</p>
<p><strong>GET FORM DATA USING</strong> <code>REACTIVEFORMMODULE</code> :-</p>
<p><strong>app.module.ts</strong></p>
<pre><code>import { BrowserModule } from '@angular/platform-browser';
import { NgModule ,ErrorHandler } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { ReactiveFormsModule } from '@angular/forms';

@NgModule({
declarations: [],
imports: [ FormsModule,ReactiveFormsModule]});

export class AppModule { }
</code></pre>
<p><strong>COMPONENT.TS</strong></p>
<pre><code>import { Component,OnInit } from '@angular/core';
import {FormGroup,FormControl,Validators,FormArray} from '@angular/forms';
import {Observable} from 'rxjs/Observable';
.
.
.
public formName: FormGroup;
constructor(private formsModule: FormsModule) {
 this.formName =  this.formBuilder.group({
   firstName:  [null, Validators.required],
   lastName:  [null, Validators.required],
 })
} 

 onSubmit() {
   console.log(this.formName.value);
 }
</code></pre>
<p><strong>COMPONENT.HTML</strong></p>
<pre><code>&lt;form [formGroup]=&quot;formName&quot; (ngSubmit)=&quot;onSubmit()&quot;&gt;
   &lt;div&gt;
     &lt;input type=&quot;number&quot; formControlName=&quot;firstName&quot;&gt;
   &lt;/div&gt;
   &lt;div&gt;
     &lt;input type=&quot;number&quot; formControlName=&quot;lastName&quot;&gt;
   &lt;/div&gt;
  &lt;button class=&quot;btn btn-primary&quot; type=&quot;submit&quot;&gt;Submit&lt;/button&gt; 
&lt;/form&gt;
</code></pre>
<p><strong>OUTPUT in CONSOLE</strong></p>
<pre><code>{firstName : ... , lastName : ...}
</code></pre>
<p>Hope it will userFull for all !</p>
",1
65099022,"<p>The data you <code>send</code> with <code>XMLHttpRequest</code> is in the request body. Read it with <code>req.getInputStream()</code>. This gives you a <code>ServletInputStream</code>, which you can read as a standard <code>InputStream</code>.</p>
",1
65088811,"<blockquote>
<p>I'm confused as to why it's not returning anything.</p>
</blockquote>
<p>Your function <em>is</em> returning something, it is returning an array which looks like:</p>
<pre><code>[undefined, undefined]
</code></pre>
<p>You need to ensure that you use <code>console.log()</code> to log the returned value to the console. You're getting <code>undefined</code> because of your use of <code>key[obj]</code>. When you use a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in"" rel=""nofollow noreferrer"">for...in</a> loop, the <code>key</code> represents the <em>keys</em> in your object, meaning you need to use <code>obj[key]</code></p>
<blockquote>
<p>Am I on the right track?</p>
</blockquote>
<p>You're right in that you need a loop, however, you're looping over the wrong thing. The question asks you to create a new array where the elements from the original array are replaced with their corresponding values in the object. This means that you need to loop over the elements inside of <code>arr</code>, and treat each element as a <em>key</em> from <code>obj</code>. Using that <em>key</em> you can use <code>obj[key]</code> to get the corresponding value for that key from the object. You would also need to ensure that the key is inside of the object to see whether it holds a value or not.</p>
<p>Logic would be as follows:</p>
<pre><code>FUNCTION elementReplace(arr, obj)
  result &lt;- []
  FOR elemKey in arr DO:
     IF elemKey is a key of obj THEN:
       push obj[elemKey] to result
     ELSE:
       push elemKey to result
     END IF
  END FOR
END FUNCTION
</code></pre>
<blockquote>
<p>I'm not sure if I should be do arr = result.</p>
</blockquote>
<p>You don't need to do <code>arr = result;</code> as this just re-assigns the local <code>arr</code> variable inside your function to the new array <code>result</code> that you're creating. This doesn't achieve much as you're not doing anything with <code>arr</code> in your current code.</p>
<p>Solution (try and attempt the above first before revealing):</p>
<blockquote class=""spoiler"">
<p> <pre><code>
 function elementReplace(arr, obj) {<br />
   const result = [];<br />
   for (const elemKey of arr) { // iterate through each element in the array
     if (obj.hasOwnProperty(elemKey)) // check if object has key
       result.push(obj[elemKey]);
     else
       result.push(elemKey);<br />
   }<br />
   return result;
 }

 const arr1 = [&quot;LeBron James&quot;, &quot;Lionel Messi&quot;, &quot;Serena Williams&quot;];
 const obj1 = {
   &quot;Serena Williams&quot;: &quot;tennis&quot;,   &quot;LeBron James&quot;:
   &quot;basketball&quot;
 };

 console.log(elementReplace(arr1, obj1)); // returns [&quot;basketball&quot;, &quot;Lionel Messi&quot;, &quot;tennis&quot;]
 </code></pre></p>
</blockquote>
<p>Alternatively, you could use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""nofollow noreferrer"">Array.prototype.map()</a> and take advantage of that fact that each value in the object is <a href=""https://developer.mozilla.org/en-US/docs/Glossary/Truthy"" rel=""nofollow noreferrer"">truthy</a>, meaning if you get a <a href=""https://developer.mozilla.org/en-US/docs/Glossary/Falsy"" rel=""nofollow noreferrer"">falsy</a> value from your object, it must be <code>undefined</code>, allowing you to default your values:</p>
<blockquote class=""spoiler"">
<p> <code>const elementReplace = (arr, obj) =&gt; arr.map(key =&gt; obj[key] || key);</code></p>
</blockquote>
",1
65153389,"<p>You can use <code>Array#some</code> along with <code>Array#includes</code> to check if one array contains any of the elements of another array.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const testeArray = [{name:""antonio"", category: [""One"",""Two""]},{name:""joana"", category: [""Two""]}];
const catArray1 = [""One"",""Two""];
const catArray2 = [""One""];
const text = ""an""

const resultArray1 = testeArray.filter((item)=&gt;{
return item.name.includes(text) &amp;&amp; item.category.some(x =&gt; catArray1.includes(x));
})  
console.log(resultArray1);  //should return antonio and joana objects

const resultArray2 = testeArray.filter((item)=&gt;{
return item.name.includes(text) &amp;&amp; item.category.some(x =&gt; catArray2.includes(x));
})  
console.log(resultArray2);   //should return antonio object only </code></pre>
</div>
</div>
</p>
",1
65160101,"<p>I'm not sure to have understand all but why you don't just setStartValue in the onChange and then in the onClick format your date.
to change only the day of the month in a moment object the method is</p>
<pre><code>moment().date(Number);
</code></pre>
<p>so it would give you something like this :</p>
<pre><code>import { Calendar, momentLocalizer } from &quot;react-big-calendar&quot;;
import moment from &quot;moment&quot;;

import &quot;./App.css&quot;;
import &quot;react-big-calendar/lib/css/react-big-calendar.css&quot;;

const localizer = momentLocalizer(moment);
const App = () =&gt; {
  const [eventValue, setEventValue] = useState(&quot;&quot;);
  const [startValue, setStartValue] = useState(&quot;&quot;);
  const [events, setEvents] = useState([
    {
      title: &quot;Finish Calendar&quot;,
      start: moment(),
      end: moment(),
      allDay: false
    }
  ]);

  const addEvent = (e) =&gt; {
    const newEvents = [...events];
    newEvents.push({
      title: eventValue,
      start: moment().date(startValue),
      end: moment()
    });
    console.log(events);
    setEvents(newEvents);
  };
  const startOfMonth = moment().startOf(&quot;month&quot;).format(&quot;DD&quot;);

  return (
    &lt;div className=&quot;App&quot;&gt;
      &lt;div className=&quot;event-input&quot;&gt;
        &lt;label for=&quot;eventInput&quot;&gt;Event:&amp;nbsp;&lt;/label&gt;
        &lt;input
          id=&quot;eventInput&quot;
          name=&quot;eventInput&quot;
          value={eventValue}
          onChange={(e) =&gt; {
            setEventValue(e.target.value);
          }}
        /&gt;
        &lt;label for=&quot;eventInput&quot;&gt;Start&amp;nbsp;&lt;/label&gt;
        &lt;input
          id=&quot;startInput&quot;
          name=&quot;startInput&quot;
          value={startValue}
          onChange={(e) =&gt; {
           
            setStartValue(
              parseInt(startOfMonth) + parseInt(e.target.value) - 1
            );
          }}
        /&gt;
        &lt;button onClick={addEvent}&gt;Add event&lt;/button&gt;
      &lt;/div&gt;
      &lt;Calendar
        localizer={localizer}
        defaultDate={new Date()}
        defaultView=&quot;month&quot;
        events={events}
        style={{ height: &quot;75vh&quot; }}
      /&gt;
      &lt;div className=&quot;list&quot;&gt;
        &lt;ul&gt;
          &lt;li&gt;Display Weekly view X&lt;/li&gt;
          &lt;li&gt;Highlight today X&lt;/li&gt;
          &lt;li&gt;Allow navigation to different weeks X&lt;/li&gt;
          &lt;li&gt;allow adding new events&lt;/li&gt;
          &lt;li&gt;allow editing existing events&lt;/li&gt;
          &lt;li&gt;allow deleting events&lt;/li&gt;
          &lt;li&gt;Persisting data &lt;/li&gt;
          &lt;li&gt;Use apis to load and save data &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default App;
</code></pre>
",1
65132771,"<p>This should work, you had a missing bracket:</p>
<pre><code>function testSize(num) {
      // Only change code below this line
    if (num &lt; 5) {
      return &quot;Tiny&quot;;
    } else if (num &lt; 10) {
      return &quot;Small&quot;;
    } else if (num &lt; 15) {
      return &quot;Medium&quot;;
    } else if (num &lt; 20) {
      return &quot;Large&quot;;
    } else {
      return &quot;Huge&quot;;
    }
  // Only change code above this line
}

testSize(7);
</code></pre>
",1
65133415,"<p>The second part of your question as how to do this automatically on page load is answered rather quickly. Conveniently you already wrapped the functionality inside it's own function - <code>startFunction()</code>. So all you have to do is execute that function after the <code>&lt;body&gt;</code> definition of your html code.</p>
<p>The first part isn't much more difficult as you also almost have anything you need set up yet. The only thing that's missing is looping over the <strong>HTMLCollection</strong> - more or less an array - retrieved by executing <code>document.getElementsByTagName(&quot;a&quot;)</code> using a simple for-loop.</p>
<p>There's a catch though: as you loop over the HTMLCollection and eventually remove an object from the DOM using <code>.remove()</code> you're ultimately changing the collection too. In other words, if you remove an object, the list shrinks by one element. To compensate your loop needs to start with the initial number of elements and decrement by one.</p>
<p>Here's an example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function startFunction() {
  let az = document.getElementsByTagName(""input"")[0].getAttribute(""value"");

  let elements = document.getElementsByTagName(""a"");
  let element;
  for (let a = elements.length - 1; a &gt;= 0; a--) {
    element = elements[a];
    if (!element.innerHTML.startsWith(az)) {
      element.remove();
    }
  }

}

startFunction();</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=""text"" name=""search"" value=""A"" class=""searchbox""&gt;
&lt;div class=""media-body""&gt;
  &lt;div class=""media-heading""&gt;
    &lt;a href=""#""&gt;A doc beginning with A&lt;/a&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=""media-body""&gt;
  &lt;div class=""media-heading""&gt;
    &lt;a href=""#""&gt;Doc beginning with D&lt;/a&gt;
  &lt;/div&gt;

  &lt;div class=""media-body""&gt;
    &lt;div class=""media-heading""&gt;
      &lt;a href=""#""&gt;Something completely different&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65085369,"<p>Here I made you a helping function that takes the animals order to check as a string with the format <code>&quot;animal &lt; animal&quot;</code> ... and the animals array to check against and you can choose any animals array you want and the size of both arrays don't matter it's all dynamic so it will fit lot of uses, now I think it will be easy on you to do the rest :)</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let animals = [""cat"", ""tiger"", ""wolf"", ""lion"", ""dog"", ""elephant"", ""rat""];

function checkAnimalsOrder(animalsArr, orderStr) {
  // store the current index of the orderedAnimals array
  let ind = 0;
  // make an array from that string format ""animal &gt; animal"" ...;
  let orderedAnimals = orderStr.split("" &lt; "");
  // filter the animals array to get only the animal that have the same index
  // of the orderedAnimals array element
  return animalsArr.filter(function(animal, index) {
    if(animalsArr[index] === orderedAnimals[ind]) {
      ind++;
      return animal;
    }
  }).join("""") === orderedAnimals.join("""");
  // finally join the two arrays as a string and check for equality
}

// Testing 
console.log(""checking for 'tiger &lt; lion &lt; rat':"");
console.log(checkAnimalsOrder(animals, ""tiger &lt; lion &lt; rat""));

console.log(""checking for 'tiger &lt; dog &lt; rat':"");
console.log(checkAnimalsOrder(animals, ""tiger &lt; dog &lt; rat""));

console.log(""checking for 'tiger &lt; cat &lt; rat':"");
console.log(checkAnimalsOrder(animals, ""tiger &lt; cat &lt; rat""));

// On the fly
console.log(""checking for 'rat &lt; tiger':"");
console.log(checkAnimalsOrder([""rat"", ""elephant"", ""tiger""], ""rat &lt; tiger""));</code></pre>
</div>
</div>
</p>
",1
65129422,"<p>Use <code>shown.bs.modal</code> event</p>
<p>Here is the demo: <a href=""https://jsfiddle.net/chille1987/ozud4cgq/9/"" rel=""nofollow noreferrer"">https://jsfiddle.net/chille1987/ozud4cgq/9/</a></p>
<pre><code>&lt;link rel=&quot;stylesheet&quot; href=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css&quot;&gt;
&lt;script src=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js&quot;&gt;&lt;/script&gt;
&lt;script src=&quot;https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;

&lt;!-- Button trigger modal --&gt;
&lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot; data-toggle=&quot;modal&quot; data-target=&quot;#exampleModal&quot;&gt;
  Launch demo modal
&lt;/button&gt;

&lt;!-- Modal --&gt;
&lt;div class=&quot;modal fade&quot; id=&quot;exampleModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;exampleModalLabel&quot; aria-hidden=&quot;true&quot;&gt;
  &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;
    &lt;div class=&quot;modal-content&quot;&gt;
      &lt;div class=&quot;modal-header&quot;&gt;
        &lt;h5 class=&quot;modal-title&quot; id=&quot;exampleModalLabel&quot;&gt;Modal title&lt;/h5&gt;
        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;
          &lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;
        &lt;/button&gt;
      &lt;/div&gt;
      &lt;div class=&quot;modal-body&quot;&gt;
        ...
      &lt;/div&gt;
      &lt;div class=&quot;modal-footer&quot;&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-secondary&quot; data-dismiss=&quot;modal&quot;&gt;Close&lt;/button&gt;
        &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Save changes&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


$('#exampleModal').on('shown.bs.modal', function (e) {
  var element = $('&lt;div&gt;Modal is opened&lt;/div&gt;');
  $('.modal-body').append(element);
})
</code></pre>
",1
65132627,"<p>The thing on the right has to match the destructuring thing on the left, in your case the thing on the left is looking for an array with at least four elements, so:</p>
<pre><code>const [container, item, columnLeft, columnRight] = [
  document.createElement(&quot;div&quot;),
  document.createElement(&quot;div&quot;),
  document.createElement(&quot;div&quot;),
  document.createElement(&quot;div&quot;)
];
</code></pre>
<p>or, make a temporary array and use its map method to produce the array of divs</p>
<pre><code>const [container, item, columnLeft, columnRight] = [1,2,3,4].map(() =&gt; document.createElement(&quot;div&quot;));
</code></pre>
",1
65125336,"<p>Use <code>Vue.set</code> (or <code>this.$set</code> in a component) to add properties to a data object at runtime:</p>
<pre class=""lang-js prettyprint-override""><code>for (let test in this.tests) {
   let chipName = &quot;Chip&quot; + test;
   this.$set(this.chips, chipName, true);
}
</code></pre>
<p>From Vue's reactivity <a href=""https://vuejs.org/v2/guide/reactivity.html#For-Objects"" rel=""nofollow noreferrer"">docs</a>:</p>
<blockquote>
<p>Vue cannot detect property addition or deletion. Since Vue performs the getter/setter conversion process during instance initialization, a property must be present in the data object in order for Vue to convert it and make it reactive...  However, it’s possible to add reactive properties to a nested object using the Vue.set(object, propertyName, value) method</p>
</blockquote>
",1
65136393,"<p>You'll need just a couple of changes. I cleaned the code a bit below. The significant change is changing the reference to the call to <code>a()</code>:</p>
<p>NOTE: edited based upon OPs comment.</p>
<pre class=""lang-js prettyprint-override""><code>
class Base {
  a() {
    console.log('in mystuff/base a()');
  }
  b() {
    setTimeout(this.a, 2000);
  }
}
</code></pre>
<p>You can see this work in this repl:</p>
<p><a href=""https://repl.it/@randycasburn/overriding-imports"" rel=""nofollow noreferrer"">https://repl.it/@randycasburn/overriding-imports</a></p>
",1
65161379,"<p>It's not possible at the moment since Alpine.js uses dots (<code>.</code>) to denote directive modifiers.</p>
",1
65101102,"<p>In <a href=""https://docs.microsoft.com/en-us/aspnet/core/mvc/models/model-binding?view=aspnetcore-5.0#sources"" rel=""nofollow noreferrer"">Doc</a> you can see:</p>
<p><code>Don't apply [FromBody] to more than one parameter per action method. Once the request stream is read by an input formatter, it's no longer available to be read again for binding other [FromBody] parameters.</code></p>
<p>So if you want to send more data ,the easiest way is through querystring,like below(change url):</p>
<pre><code>$.ajax({
      method:&quot;POST&quot;,
      data: JSON.stringify(detalleVenta),
      dataType: &quot;json&quot;,
      contentType: &quot;application/json&quot;,
      url: &quot;Venta/GuardarVenta?age=34&amp;name=Marry&quot;,
      traditional: true,         
      success: function(data, textStatus) { 
      if (data == &quot;OK&quot; ){
      location.href = '@Url.Action(&quot;Index&quot;,&quot;Compra&quot;)'          
    }
</code></pre>
<p>Action:</p>
<pre><code>public JsonResult GuardarVenta([FromBody]List&lt;DetalleBinding&gt; detalle,int age,string name)
{
  ...
}
</code></pre>
",1
65098422,"<p>You can't have two different functions with the same name. One will override the other.</p>
<p>I created a single function that accomplishes your goals by passing in the target element and the data as arguments.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function change(elem, data) {
  let counter = 0;
  setInterval(function() {
    elem.innerHTML = data[counter];
    counter++;
    if (counter &gt;= data.length) {
      counter = 0;
    }
  }, 1000);
}

change(document.getElementById(""n1""), [""2.0%"", ""1.7%"", ""1.9%"", ""1.8%"", ""1.9%""]);
change(document.getElementById(""n2""), [""12.0%"", ""2.7%"", ""3.9%"", ""4.8%"", ""5.9%""]);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""n1""&gt;&lt;/div&gt;
&lt;div id=""n2""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65098008,"<p>Or you should stop propagation as described here, to prevent bubbling click event up in the DOM.</p>
<p><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Event/stopPropagation"" rel=""nofollow noreferrer"">Reference here</a></p>
",1
65121524,"<p>Try to add <code>setThings</code> to dependencies array in <code>useEffect</code>.</p>
<pre class=""lang-js prettyprint-override""><code>useEffect(() =&gt; {
  setThings(element);
}, [element, setThings]);
</code></pre>
",1
65088978,"<p>It looks more clear if you wrap your each orderId and name elements with a parent div, and you <code>querySelectorAll</code> the parent divs. I don't think it's possible to have both key and value as variables in a JSON format. Here is what I will do (assume the length of your orderIds and names are the same):</p>
<pre><code>const orderIds = document.querySelectorAll(&quot;.orderid&quot;)
const names = document.querySelectorAll(&quot;.name&quot;)
let records = []

for(let i=0; i &lt; orderIds.length; i++){
  const record = {
     orderId: orderIds[i].textContent,
     name: names[i].textContent
  }
  records.push(record)
}
</code></pre>
<p>Then you send <code>records</code> to your backend and extract data from it.</p>
",1
65123910,"<p>You can subscribe the request and catch the error like this:</p>
<pre><code> this.http.post(url, body).subscribe(
  data =&gt; {
     console.log(data);
  },
  err =&gt; {
     console.log(err);  // err.error for example for specific attribute
  });
</code></pre>
<p>I hope this is helpfull.</p>
",1
65145334,"<p>By default the status code is 200 for res.send(), but for other status codes, you can do that using</p>
<pre><code>res.status(403).send(&quot;You are not authorised to view this&quot;)
</code></pre>
",1
65163784,"<p>try something like this ..</p>
<pre><code>class Game () {
  constructor(){
   //call set interval function here
 }

  //put methods here

}
</code></pre>
<p>Or self calling function</p>
<pre><code>(function () {
  // body
})();
</code></pre>
<p>See more @ <a href=""https://blog.mgechev.com/2012/08/29/self-invoking-functions-in-javascript-or-immediately-invoked-function-expression/"" rel=""nofollow noreferrer"">https://blog.mgechev.com/2012/08/29/self-invoking-functions-in-javascript-or-immediately-invoked-function-expression/</a></p>
<p>Arrow Syntax</p>
<pre><code>(() =&gt; {
  //body
})()
</code></pre>
<p>Arrow Syntax + parameter</p>
<pre><code>((n) =&gt; {
  //body
})()
</code></pre>
",1
65134604,"<p>You could refactor <code>children</code> to be a method and use the <code>@input</code> event handler instead:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>new Vue({
  el: '#app',

  data() {
    return {
      form: {
        children: []
      }
    }
  },

  methods: {
    children(e) {
      const {
        children
      } = this.form;
      const popOrPush = e.target.value &gt; children.length ? 'push' : 'pop';
      const difference = Math.abs(e.target.value - children.length);

      for (let i = 0; i &lt; difference; i++) {
        this.form.children[popOrPush]({
          firstName: '',
          lastName: ''
        });
      }
    }
  }
});

Vue.config.productionTip = false;
Vue.config.devtools = false;</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js""&gt;&lt;/script&gt;
&lt;div id=""app""&gt;
  &lt;form&gt;
    &lt;label for=""childrenCount""&gt;Amount of children&lt;/label&gt;

    &lt;input type=""number"" id=""childrenCount"" min=""0"" @input=""children"" /&gt;

    &lt;template v-if=""form.children.length &gt; 0""&gt;
      &lt;h2&gt;Children&lt;/h2&gt;

      &lt;div
        v-for=""(child, index) in form.children""
        :key=""index""&gt;

        Child {{ index + 1 }}:

        &lt;input
          type=""text""
          placeholder=""First name""
          v-model=""child.firstName""
        /&gt;

        &lt;input
          type=""text""
          placeholder=""Last name""
          v-model=""child.lastName""
        /&gt;
      &lt;/div&gt;
    &lt;/template&gt;
  &lt;/form&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<hr />
<p><strong>EDIT</strong></p>
<p>Apparently I'm too tired to read your question properly, i.e.</p>
<blockquote>
<p>Is there a way to achieve my goal using v-model only? Without buttons and emitting events?</p>
</blockquote>
<p>But, I'll leave this here anyway in case you find it useful.</p>
",1
65156916,"<p>You need to pass <code>id</code> in action, you are not passing it. Change the remove action to be something like:</p>
<pre><code> &lt;button onClick={() =&gt; dispatch({type:'remove', id: item.id})}&gt;close&lt;/button&gt;
</code></pre>
",1
65090257,"<pre class=""lang-js prettyprint-override""><code>var hiddenInput = document.querySelector(&quot;#adress1&quot;);
var select = document.querySelector(&quot;#adress&quot;);

hiddenInput.value = select.value;
</code></pre>

",1
65152633,"<p>You are almost good, you simply need to apply the computed value to <code>WebKitCSSMatrix</code> in order to read the <code>m41</code> and since transform is based on the element dimension you can find the percentage value as well:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function passTeste(arg) {

  const element = document.querySelector(""#mainImage-teste-js &gt; div"")

  const transformValue = window.getComputedStyle(element).transform;
  const w = window.getComputedStyle(element).width;
  var matrix = new WebKitCSSMatrix(transformValue);

  console.log(w);
  console.log(matrix.m41);
  console.log(matrix.m41/parseInt(w)*100+""%"");

}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.container {
  width: 200px;
  overflow: hidden;
}

.product__image--mainImage {
  display: flex;
  transition: 2s;
  transform: translate(-200%);
}

.product__image--mainImage img {
  max-width: 100%;
}

.container&gt;p {
  display: flex;
  justify-content: space-between;
  font-size: 45px;
  cursor: pointer;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""mainImage-teste-js"" class=""container""&gt;
  &lt;div class=""product__image--mainImage""&gt;
    &lt;img src=""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOues59dCMXRYVPt6H8XvWGAuPlwHBprFWEw&amp;usqp=CAU"" /&gt;
    &lt;img src=""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSUEwJ_CKwAt4M1k_UTZSUCVUTy2XWjWLdK3w&amp;usqp=CAU"" /&gt;
    &lt;img src=""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTOues59dCMXRYVPt6H8XvWGAuPlwHBprFWEw&amp;usqp=CAU"" /&gt;
    &lt;img src=""https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSUEwJ_CKwAt4M1k_UTZSUCVUTy2XWjWLdK3w&amp;usqp=CAU"" /&gt;
  &lt;/div&gt;
  &lt;p onclick=""passTeste()""&gt;&gt;&lt;/p&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65098919,"<p>Instead of using a filter, just use the selector directly:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const id = $("".myclass.searchA.searchB"").attr('id');
console.log('id from div which matched the classes: ' + id);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;

&lt;div id=""text1"" class=""myclass searchA searchB searchC""&gt;...&lt;/div&gt;
&lt;div id=""text2"" class=""myclass searchB searchA searchC""&gt;...&lt;/div&gt;
&lt;div id=""text3"" class=""myclass searchD searchB searchA""&gt;...&lt;/div&gt;
&lt;div id=""text3"" class=""myclass searchX searchY searchZ""&gt;...&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<h2>Update</h2>
<p>To the update of your question:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const id1 = $(""#firstdiv .myclass.searchA.searchB"").attr('id');
console.log('ID from the firstdiv that matched the classes: ' + id1);

const id2 = $(""#scnddiv .myclass.searchA.searchB"").attr('id');
console.log('ID from scnddiv that matched the classes: ' + id2);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;

&lt;div id=""firstdiv""&gt;
    &lt;div id=""text1_first"" class=""myclass searchA searchB searchC""&gt;...&lt;/div&gt;
    &lt;div id=""text2_first"" class=""myclass searchB searchA searchC""&gt;...&lt;/div&gt;
    &lt;div id=""text3_first"" class=""myclass searchD searchB searchA""&gt;...&lt;/div&gt;
    &lt;div id=""text3_first"" class=""myclass searchX searchY searchZ""&gt;...&lt;/div&gt;
&lt;/div&gt;

&lt;div id=""scnddiv""&gt;
    &lt;div id=""text1_scnd"" class=""myclass searchA searchB searchC""&gt;...&lt;/div&gt;
    &lt;div id=""text2_scnd"" class=""myclass searchB searchA searchC""&gt;...&lt;/div&gt;
    &lt;div id=""text3_scnd"" class=""myclass searchD searchB searchA""&gt;...&lt;/div&gt;
    &lt;div id=""text3_scnd"" class=""myclass searchX searchY searchZ""&gt;...&lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65096163,"<p>From the example in the express <a href=""https://expressjs.com/en/resources/middleware/cors.html"" rel=""nofollow noreferrer"">CORS guide</a>:</p>
<pre class=""lang-js prettyprint-override""><code>router.use('/first', cors(corsOptions), firstRouter);
</code></pre>
<p>Generally speaking, you can chain multiple middleware this way, using an array:</p>
<pre class=""lang-js prettyprint-override""><code>router.use('/first', [middle1, middle2, middle3], firstRouter);
</code></pre>
",1
65136382,"<p>Your database screenshot shows that there is no document called &quot;citas/2020-12-02&quot;.  It was likely already deleted.  You can tell because the name of the document is in italics.  That italics means that there is no document, but there are nested subcollections organized under it.  Those subcollections will not be deleted when you delete the parent document.  You will have to write some code to delete all of the documents in the subcollections if you want it to disappear.</p>
<p>See also:</p>
<ul>
<li><a href=""https://stackoverflow.com/questions/49286764/delete-a-document-with-all-subcollections-and-nested-subcollections-in-firestore"">Delete a Document with all Subcollections and Nested Subcollections in Firestore</a></li>
</ul>
",1
65136980,"<p>You should manage state and event callback of <code>Mp3Options</code> component in <code>App.js</code>, and pass them as props to <code>Mp3Options</code> component. Please check below for detail.</p>
<p><strong>App.js</strong></p>
<pre><code>import React from 'react';
import MP3Options from './mp3';
import SubmitButton from './submit';

class App extends React.Component {
  state = { codec: 'MP3', mp3EncodingType: 'cbr' };

  onCodecChange = (e) =&gt; {
    this.setState({ codec: e.target.value });
  };

  onMp3EncodingTypeChange = (event) =&gt; {
    this.setState({ mp3EncodingType: event.target.value });
  };

  submitClicked = () =&gt; {
    console.log('Submit button was clicked.');
    console.log(this.state.mp3EncodingType);
  };

  renderComponent = () =&gt; {
    const { codec, mp3EncodingType } = this.state;
    switch (codec) {
      case 'MP3':
        return (
          &lt;MP3Options
            mp3EncodingType={mp3EncodingType}
            onChange={this.onMp3EncodingTypeChange}
          /&gt;
        );
      default:
        return null;
    }
  };

  render() {
    return (
      // Codec options div.
      &lt;div&gt;
        &lt;select
          id=&quot;codecs&quot;
          onChange={this.onCodecChange}
          value={this.state.codec}
        &gt;
          &lt;option value=&quot;AAC&quot;&gt;AAC (.m4a)&lt;/option&gt;
          &lt;option value=&quot;AC3&quot;&gt;AC3 (Dolby Digital)&lt;/option&gt;
          &lt;option value=&quot;ALAC&quot;&gt;ALAC&lt;/option&gt;
          &lt;option value=&quot;CAF&quot;&gt;CAF (.caf)&lt;/option&gt;
          &lt;option value=&quot;DTS&quot;&gt;DTS&lt;/option&gt;
          &lt;option value=&quot;FLAC&quot;&gt;FLAC&lt;/option&gt;
          &lt;option value=&quot;MKA&quot;&gt;MKA (extract audio without encoding it)&lt;/option&gt;
          &lt;option value=&quot;MKV&quot;&gt;MKV (.mkv)&lt;/option&gt;
          &lt;option value=&quot;MP3&quot;&gt;MP3&lt;/option&gt;
          &lt;option value=&quot;MP4&quot;&gt;MP4 (.mp4)&lt;/option&gt;
          &lt;option value=&quot;Opus&quot;&gt;Opus (.opus)&lt;/option&gt;
          &lt;option value=&quot;Vorbis&quot;&gt;Vorbis (.ogg)&lt;/option&gt;
          &lt;option value=&quot;WAV&quot;&gt;WAV&lt;/option&gt;
        &lt;/select&gt;
        {this.renderComponent()}
        &lt;SubmitButton onSubmit={this.submitClicked} /&gt;
      &lt;/div&gt;
    );
  }
}

export default App;
</code></pre>
<p><strong>mp3.js</strong></p>
<pre><code>import React from 'react';
import Mp3Cbr from './Mp3Cbr';
import Mp3Vbr from './Mp3Vbr';

class MP3Options extends React.Component {
  renderComponent = () =&gt; {
    const { mp3EncodingType } = this.props;
    switch (mp3EncodingType) {
      // Show the Mp3Cbr component if CBR or ABR is selected. Show the Mp3Vbr component if VBR is selected.
      case 'cbr':
        return &lt;Mp3Cbr /&gt;;
      case 'abr':
        return &lt;Mp3Cbr /&gt;;
      case 'vbr':
        return &lt;Mp3Vbr /&gt;;
      default:
        return null;
    }
  };

  render() {
    const { onChange } = this.props;
    return (
      &lt;div id=&quot;mp3_encoding_div&quot;&gt;
        &lt;label htmlFor=&quot;mp3_encoding_type&quot;&gt;Encoding Type:&lt;/label&gt;
        &lt;select id=&quot;mp3_encoding_type&quot; onChange={onChange}&gt;
          &lt;option disabled value&gt;
            Select encoding type
          &lt;/option&gt;
          &lt;option value=&quot;cbr&quot;&gt;CBR (Constant Bitrate)&lt;/option&gt;
          &lt;option value=&quot;abr&quot;&gt;ABR (Average Bitrate)&lt;/option&gt;
          &lt;option value=&quot;vbr&quot;&gt;VBR (Variable Bitrate)&lt;/option&gt;
        &lt;/select&gt;
        {this.renderComponent()}
      &lt;/div&gt;
    );
  }
}

export default MP3Options;
</code></pre>
",1
65104468,"<p>You're using React, so you should put api call and html tag into a react component, and save the api response data with component state to trigger re-render, try this:</p>
<pre><code>function NameComponent() {
  React.useEffect(() =&gt; {
    async function getName() {
      const res = await getNamePromise(); // type: Promise&lt;Interface&gt;
      setName(res.name)
    }

    getName()
  }, [])

  React.useEffect(() =&gt; {
    async function getPhoto() {
      const res = await getPhotoPromise(); // type: Promise&lt;Interface&gt;
      setPhoto(res.photo)
    }

    getPhoto()
  }, [])

  const [name, setName] = React.useState()
  const [photo, setPhoto] = React.useState()

  if (!name || !photo) {
    return &lt;div&gt;Loading...&lt;/div&gt;
  }

  return(
    &lt;dl&gt;
      &lt;dd&gt;{name}&lt;/dd&gt;
      &lt;dd&gt;{photo}&lt;/dd&gt;
    &lt;/dl&gt;
  );
} 
</code></pre>
",1
65141333,"<blockquote>
<p>How to pass orderStatus and id here</p>
</blockquote>
<p>In <a href=""https://datatables.net/manual/data/renderers#Functions"" rel=""nofollow noreferrer"">doc about data renderer in DataTables</a>, we can find that the function could be  passed in three parameters.</p>
<p><a href=""https://i.stack.imgur.com/shV3K.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/shV3K.png"" alt=""enter image description here"" /></a></p>
<p>To achieve the requirement, you can try the following code snippet.</p>
<pre><code>{
    &quot;data&quot;: &quot;orderStatus&quot;,
    &quot;render&quot;: function (data, type, row) {

        //get id of current row
        var id = row.id;
        console.log(id);

        //modify the href attribute with id value based on actual requirement

        return `
        &lt;div class=&quot;text-center&quot;&gt;
            &lt;a href=&quot;/Admin/OrderAdmin/UpdateOrder/${data}&quot; class=&quot;btn btn-success text- 
                white&quot; style=&quot;cursor:pointer&quot;&gt;
                &lt;i class=&quot;fas fa-edit&quot;&gt;&lt;/i&gt;
            &lt;/a&gt;
        &lt;/div&gt;
            `;
    }, &quot;width&quot;: &quot;5%&quot;
}
</code></pre>
",1
65114530,"<p>According to the spec the <em>Initial</em> value of the <em>background-color</em> is <strong>transparent</strong></p>
<p>So the first button is rendered with transparent background</p>
<p>Also internally Gecko uses some rules when to apply default theme, see this line <a href=""https://github.com/mozilla/gecko-dev/blob/a147181ece866c1ecd176ac49f112785f960aac0/widget/nsNativeTheme.cpp#L268"" rel=""nofollow noreferrer"">https://github.com/mozilla/gecko-dev/blob/a147181ece866c1ecd176ac49f112785f960aac0/widget/nsNativeTheme.cpp#L268</a></p>
<p>And that explains why when you change background or border style it doesn't apply the default theme</p>
",1
65112906,"<p>In my example, the <code>forEach</code> method is used. And the button is also created using the <code>createElement()</code> method:</p>
<pre><code>var button = document.createElement('button');
</code></pre>
<p>Next, a <code>th</code> tag will be created to place the button there:</p>
<pre><code>var th = document.createElement('th');
</code></pre>
<p>And a class is assigned to the button, with which you can refer to this button by class:</p>
<pre><code>button.className = 'btn_buy';
</code></pre>
<p>With this code, a button is created for all table rows!</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>window.onload = function() {
var tr = document.querySelectorAll('#productTable tbody tr');

Array.from(tr).forEach(function(trArray, index) {
  var button = document.createElement('button');
  var th = document.createElement('th');
  button.innerText = 'buy';
  button.className = 'btn_buy';
  th.append(button);
  tr[index].append(th);    
});
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;table id=""productTable"" class=""table table-bordered table-condensed table-striped""&gt;
 &lt;thead&gt;
   &lt;tr&gt;
      &lt;th&gt;Product Name&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
      &lt;th&gt;Price&lt;/th&gt;
   &lt;/tr&gt;
 &lt;/thead&gt;

 &lt;tbody&gt;
   &lt;tr&gt;
      &lt;th&gt;Soap&lt;/th&gt;
      &lt;th&gt;good for babies&lt;/th&gt;
      &lt;th&gt;75&lt;/th&gt;
   &lt;/tr&gt;
   
   &lt;tr&gt;
      &lt;th&gt;Milk&lt;/th&gt;
      &lt;th&gt;manufactured&lt;/th&gt;
      &lt;th&gt;100&lt;/th&gt;
   &lt;/tr&gt;
   
    &lt;tr&gt;
      &lt;th&gt;Rice&lt;/th&gt;
      &lt;th&gt;red rice 1kg pack&lt;/th&gt;
      &lt;th&gt;130&lt;/th&gt;
   &lt;/tr&gt;
 &lt;/tbody&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</p>
",1
65117455,"<p><code>_data</code> is an array. <code>_data.Created</code> will result in <code>undefined</code>. So you're passing <code>undefined</code> to <code>moment</code> which will fall back to today.</p>
<p>Instead format the date for each item in the array.</p>
<pre><code>async function displayAnnouncements() {
    const resp = await axios.get(`${_something}/_api/lists/GetByTitle('someName')/Items?$select=ID,Title,Body,Created,Link&amp;$orderby=Created%20desc&amp;$top=4`, restHeaders)
    let _data = resp.data.d.results;
    _data.slice(0, 4).forEach(m =&gt; {
        let _newDate = moment(m.Created).utc().format(&quot;MMMM D, YYYY&quot;);
        const itemLink = $(
            `&lt;a href=&quot;#close&quot; data-toggle=&quot;modal&quot; data-target=&quot;#bkEvts-${m.ID}&quot; class=&quot;cont_evts-link&quot; title=&quot;View Announcement&quot;&gt;
                &lt;b&gt;${m.Title}&lt;/b&gt; - &lt;i&gt;${_newDate}&lt;/i&gt;
            &lt;/a&gt;&lt;br&gt;`
        );
    });
};
</code></pre>
",1
65162722,"<p>The issue is that you are setting the style attribute so each time you override all the previous inline style.</p>
<p>You need to do it differently using <code>setProperty</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var mainColor = document.getElementById(""main-color"");
var secondColor = document.getElementById(""second-color"");

function color(cssVariable, inputValue) {
  return cssVariable + "":"" + inputValue
}

mainColor.addEventListener('input', function() {
  document.documentElement.style.setProperty(""--main-color"", this.value);
})

secondColor.addEventListener('input', function() {
  document.documentElement.style.setProperty(""--second-color"", this.value)
})</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>:root {
  --main-color: black;
  --second-color: whitesmoke;
  --main-font-size: 16px;
  color: var(--main-color);
  font-size: var(--main-font-size);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""dropdown-color-container""&gt;
  &lt;input type=""color"" id=""main-color""&gt;
  &lt;input type=""color"" id=""second-color""&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65119852,"<p>You first need to write <code>onchange</code> event handler so whenever select-box value gets changes <code>this</code> handler will get called and then send the value of <code>select</code> to backend page(servlet) .So, ajax code will look like below :</p>
<pre><code>&lt;script src=&quot;https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js&quot;&gt;&lt;/script&gt;
  $('select#selectBox').on('change', function() {
     var value = $(this).val(); //get value from select-box
      $.ajax({
        type: 'POST',//can be post request or get 
        url: url,//put url here where you need to send
        data: {
          'value': value//pass value 
        },
        success: function(response) {
          //result will come here 
           //if recieve as html use           
          $(&quot;somedivclass&quot;).html(response)        
          //if recieve as separted commas         
          var result = response.split(&quot;,&quot;)
          //access same using result[0],result[1] ..etc
          //add value to input using
          $(&quot;#loginid&quot;).val(result[0]);
         //same for other  
    
        }
      });
    })
</code></pre>
<p>At your server end get that value which is passed from ajax using <code>request.getParameter(&quot;value&quot;)</code> inside <code>doPost</code> method of ajax if making <code>POST</code> request.Then ,simply write your query to retrieve record from db and send back same to ajax .So , your code will look like somewhat below :</p>
<pre><code>String value = (String) request.getParameter(&quot;value&quot;);
String query = &quot;select * from Users where yourcolumnanemtocompare=?&quot;;
PreparedStatement ps = con.prepareStatement(query);
ps.setString(1, value);
ResultSet rs = ps.executeQuery();
//if value there 
String text;
if (rs.next()) {
  //change value accordingly..i.e : rs.getstring..
  text = &quot;&lt;input id=&quot; + loginid &quot; type=&quot;
  text &quot; value=&quot; + rs.getInt(1) + &quot; /&gt;&lt;input id=&quot;
  firstname &quot; type=&quot;
  text &quot; value=&quot; + rs.getInt(2) + &quot; /&gt; &lt;input id=&quot;
  lastname &quot; type=&quot;
  text &quot; value=&quot; + rs.getInt(3) + &quot; /&gt;&lt;input id=&quot;
  address &quot; type=&quot;
  text &quot; value=&quot; + rs.getInt(4) + &quot; /&gt;&quot;;
}

response.setContentType(&quot;text/html&quot;); // Set content type 
response.setCharacterEncoding(&quot;UTF-8&quot;);
response.getWriter().write(text); // response to send back.
//or
if (rs.next()) {
  //change value accordingly..i.e : rs.getstring..
  text = rs.getInt(1) + &quot;,&quot; + rs.getInt(2) + &quot;,&quot; + rs.getInt(3) + &quot;,&quot; + rs.getInt(4);
}
response.setContentType(&quot;text/plain&quot;); // Set content type 
response.setCharacterEncoding(&quot;UTF-8&quot;);
response.getWriter().write(text); // response  to send back..
//or use json to send data..
</code></pre>
",1
65098144,"<p>One solution could be to have a submit button that you hide by default (on the first tab) and show once you go to the second (or last if you add more). This way you won't have to change the <code>innerHTML</code> on any element and just toggle a class. Something like that could look like:</p>
<pre><code>&lt;form id=&quot;regForm&quot; name=&quot;regForm&quot; action=&quot;[NEED ACTION]&quot; class=&quot;col-sm-6&quot;&gt;
    ...
    &lt;div style=&quot;overflow:auto;&quot;&gt;
        &lt;div style=&quot;float:right;&quot;&gt;
            &lt;button type=&quot;button&quot; id=&quot;prevBtn&quot; click=&quot;nextPrev(-1)&quot;&gt;Previous&lt;/button&gt;
            &lt;button type=&quot;button&quot; id=&quot;nextBtn&quot; onclick=&quot;nextPrev(1)&quot;&gt;Next&lt;/button&gt;
            &lt;submit type=&quot;submit&quot; class=&quot;hide&quot; value=&quot;Submit&quot; /&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/form&gt;
</code></pre>
<pre><code>function showTab(n) {
    var x = document.getElementsByClassName(&quot;tab&quot;);
    x[n].style.display = &quot;block&quot;;

    if (n == 0) {
        document.getElementById(&quot;prevBtn&quot;).style.display = &quot;none&quot;;
    } else {
        document.getElementById(&quot;prevBtn&quot;).style.display = &quot;inline&quot;;
    }
    if (n == (x.length - 1)) {
        document.getElementById(&quot;nextBtn&quot;).classList.add('hide');
        document.getElementById(&quot;submitBtn&quot;).classList.remove('hide');
    } else {
        document.getElementById(&quot;nextBtn&quot;).classList.remove('hide');
        document.getElementById(&quot;submitBtn&quot;).classList.add('hide');
    }

    fixStepIndicator(n)
}
</code></pre>
<p>For this to work you will need to fill in the <code>action</code> property for the form.</p>
<hr />
<p>Another way you could do this without adding an extra element would be to change the <code>onClick</code> action for the next/submit button.</p>
<pre><code>function showTab(n) {

    var x = document.getElementsByClassName(&quot;tab&quot;);
    var nextSubmitBtn = document.getElementById(&quot;nextBtn&quot;);
    x[n].style.display = &quot;block&quot;;

    if (n == 0) {
        document.getElementById(&quot;prevBtn&quot;).style.display = &quot;none&quot;;
    } else {
        document.getElementById(&quot;prevBtn&quot;).style.display = &quot;inline&quot;;
    }
    if (n == (x.length - 1)) {
        nextSubmitBtn.textContent = &quot;Submit&quot;;
        nextSubmitBtn.onClick = someSubmitFunc;
    } else {
        nextSubmitBtn.textContent = &quot;Next&quot;;
        nextSubmitBtn.onClick = function () { nextPrev(1); };
    }

    fixStepIndicator(n)
}
</code></pre>
<p>This would allow you to keep the same HTML and handle the solution via JS. If you do this remember to keep the current <code>onClick</code> property on the &quot;next&quot; button as that will be the initial function ran (when you first click &quot;next&quot;)</p>
<hr />
<p>A couple tips and notes:</p>
<p>If you are only changing the text of an element (like from &quot;next&quot; to &quot;submit&quot;) it would be best to use a function that only changes the text:</p>
<pre><code>// Pure JS
element.textContnet = 'some text';

// jQuery
$element.text('some other text');
</code></pre>
<p>this will help prevent possible bugs (and potentially security risk) that can come from <code>innerHTML</code>.</p>
<p>You say you are using jQuery but it is only used in one line in the JS code presented. If that is the only line using jQuery library you could easily replace it and not include the library saving on you site size.</p>
<pre><code>// jQuery way to add class (line 111)
$(&quot;#sdate&quot;).addClass(&quot;invalid&quot;);

// Pure JS equivalent 
document.getElementById('sdate').classList.add('invalid');
</code></pre>
<p>Both will get the job done (add a class) and if you prefer to use jQuery more power to you but if that is the only place you use it then this could be an alternative.</p>
",1
65132230,"<p>Instead of saving only the kitty name, you can save all kitty data passing it in your on click handler.</p>
<pre><code>&lt;Dropdown.Item onClick={() =&gt; this.onClickHandler(kitty)}&gt;{kitty.nickName}&lt;/Dropdown.Item&gt;
</code></pre>
<p>Then save it in the state.</p>
<pre><code>onClickHandler = (kitty) =&gt; {
    this.setState({ activeCat: kitty })
}
</code></pre>
<p>Then you can access it.</p>
<pre><code>&lt;p style={{display:&quot;flex&quot;, justifyContent:&quot;center&quot;}}&gt;Selected Cat: {this.state.activeCat.name} {this.state.activeCat.gender}&lt;/p&gt;
</code></pre>
",1
65118413,"<p>You can use state just like other things. What you need to do is check if any element is hovered and toggle the state.</p>
<pre><code>import React, {
  useState,
  useEffect,
  useRef,
  useCallback,
  useMemo
} from &quot;react&quot;;
import &quot;./style.css&quot;;

let canvasWidth = 200;
let canvasHeight = 200;

export function useCanvas(w, h, props) {
  let ref = useRef();
  let elem = (
    &lt;canvas ref={ref} width={canvasWidth} height={canvasHeight} {...props} /&gt;
  );

  let draw = useCallback(
    (box, color) =&gt; {
      let c = ref.current;
      let ctx = c.getContext(&quot;2d&quot;);
      ctx.fillStyle = color;
      ctx.fillRect(box.x, box.y, box.w, box.w);
    },
    [w, h]
  );

  let clear = useCallback(() =&gt; {
    ctx.clearRect(0, 0, w, h);
  }, []);

  return [elem, draw, clear];
}

function getMousePos(e) {
  let rect = e.target.getBoundingClientRect();
  return {
    x: e.clientX - rect.left,
    y: e.clientY - rect.top
  };
}

function isOverABox(box, mousePos) {
  return (
    mousePos.x &gt;= box.x &amp;&amp;
    mousePos.y &gt;= box.y &amp;&amp;
    mousePos.x &lt;= box.x + box.w &amp;&amp;
    mousePos.y &lt;= box.y + box.w
  );
}

export default function App() {
  let [hovered, setHovered] = useState(false);
  let [boxes, setBoxes] = useState([
    { x: 5, y: 5, w: 10 },
    { x: 170, y: 80, w: 10 },
    { x: 80, y: 170, w: 10 }
  ]);

  let [canvas, draw, clear] = useCanvas(canvasWidth, canvasWidth, {
    onMouseMove: e =&gt; {
      let pos = getMousePos(e);
      let isHovered = boxes.some(b =&gt; isOverABox(b, pos));
      if (isHovered) setHovered(true);
      else setHovered(false);
    }
  });

  useEffect(() =&gt; {
    let color = hovered ? &quot;gold&quot; : &quot;black&quot;;
    boxes.forEach(b =&gt; draw(b, color));
  }, [boxes, draw, hovered]);
  return (
    &lt;div&gt;
      &lt;pre&gt;
        &lt;code&gt;hovered: {hovered ? &quot;true&quot; : &quot;false&quot;}&lt;/code&gt;
      &lt;/pre&gt;
      {canvas}
    &lt;/div&gt;
  );
}
</code></pre>
<p>See the <a href=""https://stackblitz.com/edit/react-n2ezug"" rel=""nofollow noreferrer"">demo on stackblitz</a>.</p>
",1
65142440,"<p>By <code>inline-block</code> your objects will be side-by-side and giving both objects <code>width of 100%</code> so they will take their respective parent's width. Finally, in the case of text, I gave <code>overflow-wrap: break-word</code> so the text will not collapse with the image</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>* {
  font-family: ""Poppins"", sans-serif;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

section {
  padding: 100px;
}

.row .co150 {
  position: relative;
  display: inline-block;
  vertical-align: top;
  width: 48%;
}
 .co150 p {
   width: 100%;
   overflow-wrap: break-word;
   
   
 }
.imgBx {
  width: 100%;
}
.imgBx img {
 width: 100%;
 object-fit: contain;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;section class=""about"" id=""about""&gt;
  &lt;div class=""row""&gt;
    &lt;div class=""co150""&gt;
      &lt;h2 class=""titleText""&gt;&lt;span&gt;A&lt;/span&gt;bout Us&lt;/h2&gt;
      &lt;p&gt;udgugqguugdugwugugugduqugdgqwuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuuu aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm
        jjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjjj hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh.
        &lt;br&gt;&lt;br&gt;lorem ipsum dolores umbridge x her husband blalalalallllllllllllllllllllllll .
      &lt;/p&gt;
    &lt;/div&gt;
    &lt;div class=""co150""&gt;
      &lt;div class=""imgBx""&gt;
        &lt;img src=""https://i.picsum.photos/id/425/536/354.jpg?hmac=wBNHXWWIrsjZJiC-motCXU36RWkqnUAAPfVJulwHGHM""&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/section&gt;</code></pre>
</div>
</div>
</p>
<p><a href=""https://jsfiddle.net/vo5zjsqa/"" rel=""nofollow noreferrer"">Working <strong>FIDDLE</strong></a></p>
",1
65099581,"<p>it's because you're not tracking which tasks are done and you're just pushing strings. for your <code>createTask</code> method you need to push an object with a done property to indicate which tasks have been done like so</p>
<pre><code> createTask(task) {
 if (task.trim().length === 0) {
  return;
 }
 this.tasks.push({title: task, done: false});
 this.render();
 }
</code></pre>
<p>update your render to account for tasks already done</p>
<pre><code>render() {
this.ul.innerHTML = &quot;&quot;;
this.tasks.forEach((task) =&gt; {
  const li = document.createElement(&quot;li&quot;);
  const cb = document.createElement(&quot;input&quot;);
  cb.type = &quot;checkbox&quot;;
  cb.addEventListener(&quot;click&quot;, (e) =&gt; {
    this.markTask(e);
  });
  li.appendChild(cb);

  li.append(document.createTextNode(task.title));

  const btn = document.createElement(&quot;button&quot;);
  li.appendChild(btn);
  btn.textContent = &quot;Delete&quot;;
  btn.classList.add(&quot;remove&quot;);
  btn.addEventListener(&quot;click&quot;, (e) =&gt; {
    this.deleteTask(e);
  });
  this.ul.appendChild(li);

   if (task.done) {
    cb.checked = true;
    li.style.textDecoration = &quot;line-through&quot;;
   } else {
    cb.checked = false;
    li.style.textDecoration = &quot;none&quot;;
   }
 });
}
</code></pre>
<p>in your constructor update your tasks variable to see this in effect</p>
<pre><code>constructor() {
this.input = document.getElementById(&quot;input&quot;);
this.ul = document.getElementById(&quot;ul&quot;);
this.form = document.getElementById(&quot;form&quot;);
this.tasks = [{title: 'mill', done: true}, {title: 'jus', done: false}];
this.registerEvent();
}
</code></pre>
<p>hope you get the general idea. I won't do the entire implementation on <code>markTask</code> as this should be enough to give you a view of what the solution should be. good luck.</p>
",1
65150870,"<p>The end result has <code>undefined</code> because you are referencing <code>styles.param</code> (where does <code>styles</code> come from?)</p>
<pre class=""lang-js prettyprint-override""><code>const stylesJoin = (...params) =&gt; {
  let stylesString = &quot;&quot;;

  params.forEach((param) =&gt; {
    stylesString += styles.param + &quot; &quot;; // styles?
  });

  return stylesString;
};
</code></pre>
<p>Since you are simply joining strings together, your entire function can be simplified to</p>
<pre class=""lang-js prettyprint-override""><code>const stylesJoin = (...params) =&gt; params.join(' ');
</code></pre>
",1
65119365,"<p>You need to make sure you bind your callbacks to the current object.</p>
<pre><code>    constructor() {
        super()
        this.client = new Discord.Client()
        this.client.on( &quot;ready&quot;, this.on_connect )
        this.client.on( &quot;message&quot;, this.on_message )
    }
</code></pre>
<p>Needs to be:</p>
<pre><code>    constructor() {
        super()
        this.client = new Discord.Client()
        this.client.on( &quot;ready&quot;, this.on_connect.bind( this ) )
        this.client.on( &quot;message&quot;, this.on_message.bind( this ) )
    }
</code></pre>
<p>Ie. I added <code>bind( this )</code> to each assigned callback.</p>
",1
65130776,"<p>Do you mean when the user type the first letter and then press enter for example?</p>
<p>If so, you can remove tags which are not in the source list by return <code>false</code> in the <code>beforeTagSave</code> callback.</p>
<p>Like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const source = ['ActionScript', 'AppleScript', 'Asp', ...'Python', 'Ruby'];

$('#demo2').tagEditor({
  autocomplete: {
    delay: 0, // show suggestions immediately
    position: {
      collision: 'flip'
    }, // automatic menu position up/down
    source
  },
  forceLowercase: false,
  placeholder: 'Programming languages ...',
  initialTags: ['ActionScript', 'AppleScript'],
  beforeTagSave: (field, editor, tags, tag, val) =&gt; {
    return source.includes(val) &amp;&amp; val;
  }
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;link href=""https://goodies.pixabay.com/jquery/tag-editor/jquery.tag-editor.css"" rel=""stylesheet"" /&gt;
&lt;script src=""https://code.jquery.com/jquery-1.11.1.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://code.jquery.com/ui/1.10.2/jquery-ui.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://goodies.pixabay.com/jquery/tag-editor/jquery.caret.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://goodies.pixabay.com/jquery/tag-editor/jquery.tag-editor.js""&gt;&lt;/script&gt;

&lt;div id=""demo2""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>If it's not the scenario, please create a working snippet which reproduce the issue.</p>
",1
65085153,"<p>Can you try the below code</p>
<pre><code>&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;
&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;
&lt;head&gt;
&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;
&lt;title&gt;Js Check&lt;/title&gt;
&lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.min.js&quot; language=&quot;javascript&quot;&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;
  &lt;form id=&quot;ratingForm&quot; method=&quot;POST&quot;&gt;
    &lt;div class=&quot;form-group&quot;&gt;
      &lt;h4&gt;Rate this product&lt;/h4&gt;
      &lt;!-- Start Star --&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-warning btn-sm rateButton&quot; aria-label=&quot;Left Align&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-star&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; &lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-grey btn-sm rateButton&quot; aria-label=&quot;Left Align&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-star&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; &lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-grey btn-sm rateButton&quot; aria-label=&quot;Left Align&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-star&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; &lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-grey btn-sm rateButton&quot; aria-label=&quot;Left Align&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-star&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; &lt;/button&gt;
      &lt;button type=&quot;button&quot; class=&quot;btn btn-default btn-grey btn-sm rateButton&quot; aria-label=&quot;Left Align&quot;&gt; &lt;span class=&quot;glyphicon glyphicon-star&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt; &lt;/button&gt;
      &lt;!-- End Star --&gt;
      
      &lt;input type=&quot;hidden&quot;  id=&quot;rating&quot; name=&quot;rating&quot; value=&quot;1&quot;&gt;
      &lt;input type=&quot;hidden&quot;  id=&quot;itemId&quot; name=&quot;itemId&quot; value=&quot;&lt;?php echo $_GET['id']; ?&gt;&quot;&gt;
      &lt;input type=&quot;hidden&quot; name=&quot;action&quot; value=&quot;saveRating&quot;&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt; 
      &lt;!--Comment Start--&gt;
      &lt;label for=&quot;usr&quot;&gt;Title*&lt;/label&gt;
      &lt;input type=&quot;text&quot;  id=&quot;title&quot; name=&quot;title&quot; required&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
      &lt;label for=&quot;comment&quot;&gt;Comment*&lt;/label&gt;
      &lt;textarea rows=&quot;5&quot; id=&quot;comment&quot; name=&quot;comment&quot; required&gt;&lt;/textarea&gt;
    &lt;/div&gt;
    &lt;div class=&quot;form-group&quot;&gt;
      &lt;button type=&quot;submit&quot; class=&quot;btn btn-info&quot; id=&quot;saveReview&quot;&gt;Save Review&lt;/button&gt;
    &lt;/div&gt;
    &lt;!--Comment End--&gt;
  &lt;/form&gt;
&lt;/div&gt;
&lt;script&gt;
jQuery(document).ready(function($) {
        
        $('#ratingForm').on('submit', function(event){
          event.preventDefault();
          event.stopImmediatePropagation();
            var formData = $(this).serialize();
            $.ajax({
                type : 'POST',
                dataType: &quot;json&quot;,   
                url : 'action.php',                 
                data : formData,
                success:function(response){
                console.log(response);
                    if(response.success == 1) {
                        $(&quot;#ratingForm&quot;)[0].reset();
                        window.location.reload();
                    } 
                }
            }); 
        });
});
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>
",1
65162155,"<p>The problem is that <code>this.tile</code> in <code>onclick=&quot;download_file(this.title)&quot;</code> is evaluated when the user clicks the element, and at that point <code>this</code> is a different object. The easiest way to fix this is to inject the correct value into the <code>childData.DownloadName</code> immediately when you render the HTML:</p>
<pre><code>html += `&lt;a href=&quot;#&quot; onclick=&quot;download_file('${childData.DownloadName}')&quot; title=&quot;${childData.DownloadName}&quot;&gt;&lt;span class=&quot;task-cat blue&quot;&gt;Download&lt;/span&gt;&lt;/a&gt;`;
</code></pre>
",1
65156713,"<p>You need to draw dom via binary tree algorithm i.e. depth first.</p>
<p>Algorithm is:</p>
<ol>
<li><p>Draw root element, find its children</p>
</li>
<li><p>Start from first child, draw it, find its children</p>
</li>
<li><p>Keep on repeating step 2 until you you reach bottom of the tree.</p>
</li>
<li><p>Then go to next child from step 2 and perform same steps as for the first child.</p>
</li>
</ol>
<p>By following above steps I think you can easily draw DOM using depth first binary tree algorithm.</p>
<p>Take a look at sample below</p>
<pre><code>&lt;body&gt;
&lt;div id=&quot;root&quot;&gt;&lt;/div&gt;
&lt;/body&gt;
const graph = {
  A: ['B', 'C'],
  B: ['D', 'E'],
  C: ['F', 'G'],
  D: [],
  E: [],
  F: [],
  G: [],
  
 }
 
 const root = document.getElementById(&quot;root&quot;); 
 
 const findchildren = (node) =&gt; graph[node]
 
 const drawNode = (node) =&gt; {
    const input = document.createElement(&quot;input&quot;); 
  input.setAttribute(&quot;type&quot;, &quot;text&quot;);
  input.setAttribute(&quot;placeholder&quot;, node);
  root.appendChild(input); 
  const children = findchildren(node)
  if (children.length &gt; 0) {
    children.forEach(item =&gt; drawNode(item))    
  }
 }
 
 drawNode(&quot;A&quot;)
</code></pre>
",1
65163887,"<p>If you are using React and functional components, it would look something like this. You just need to store your input in a state and update the state when your input changes.</p>
<pre class=""lang-js prettyprint-override""><code>function Component () {
    const [input, setInput] = useState(0);

    const handleInputChange = (e) =&gt; {
        setInput(e.target.valueAsNumber || e.target.value);
        console.log(e.target.valueAsNumber || e.target.value);
    }

    return (
        &lt;input type=&quot;number&quot; value={input} onChange={handleInputChange} required pattern=&quot;[0-9]*[.,][0-9]*&quot;/&gt;
        &lt;h4&gt;Data : {input}&lt;/h4&gt;
    )
}
</code></pre>
",1
65135162,"<p>This version makes generic functions for checking whether a node or one of its descendants matches a generic predicate and, using that, for collecting all the nodes matching a predicate along with all their ancestors and children.</p>
<p>Using the latter, we write a simple function which accepts a target name, and returns a function which will find all the nodes with a <code>name</code> property that matches the target, along with all their ancestors and children:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const hasMatch = (pred) =&gt; ({children = [], ...rest}) =&gt;
  pred (rest) || children .some (hasMatch (pred))

const collectFamily = (pred) =&gt; (xs) =&gt; 
  xs .flatMap (
    x =&gt; pred(x) 
      ? [x, ...(x.children || [])] 
    : hasMatch (pred) (x) 
      ? [x, ...collectFamily (pred) (x.children || [])]
    : []
  )

const collectFamilyByName = (target) =&gt; 
  collectFamily((({name}) =&gt; name == target))

const log = (fn) =&gt; (inputs) =&gt; // JSON.stringify avoids StackOverflow console artifacts
  inputs .forEach (o =&gt; console .log (JSON .stringify (fn (o), null, 2)))

const inputs = [
  [{name: ""Group 1"", children: [{name: ""Group 2"", children: [{name: ""Group 3"", children: []}]}]}, {name: ""Group 5"", children: []}],
  [{name: ""Group 1"", children: [{name: ""Group 2"", children: [{name: ""Group 3"", children: []}]}]}, {name: ""Group 5"", children: [{name: 'Group 2', children: []}]}],
]

log (collectFamilyByName ('Group 2')) (inputs)</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper {max-height: 100% !important; top: 0}</code></pre>
</div>
</div>
</p>
<p>I have two example cases.  The first is the one from the question.  The second, following a comment on another answer, adds to the <code>'Group 5'</code> object a child of <code>'Group 2'</code>, and it is collected as I believe you wish.</p>
<p>The code is fairly simple, but I see two potential disadvantages.  First, it recurs separately over the tree for testing and collecting.  I'm sure there is a relatively clean way to combine them, but I don't see it right away.  Second, this will fail to collect descendants of children of nodes that also have the right name.  It stops at their children.  Again, I imagine there's a quick fix for that, but I'm not seeing it at the moment.</p>
<h2>Update - code explanation</h2>
<p>A comment implied that this code could use explanation.  Here's an attempt</p>
<p>We look first at the simplest function, the main one, <code>collectFamilyByName</code>:</p>
<pre class=""lang-js prettyprint-override""><code>const collectFamilyByName = (target) =&gt; 
  collectFamily((({name}) =&gt; name == target))
</code></pre>
<p>This function takes a <code>target</code> string and calls <code>collectFamily</code> passing a function that uses that <code>target</code>.  We don't know yet what <code>collectFamily</code> will do; we just know that it takes a predicate function (one returning <code>true</code> or <code>false</code>) and returns to us a new function.</p>
<p>We could have written this in a few different ways.  Here's one alternative:</p>
<pre class=""lang-js prettyprint-override""><code>const testMatch = function (target) {
  return function (element) {
    return element.name == target
  }
}

const collectFamilyByName = function (target) {
  return collectFamily (testMatch (target))
}
</code></pre>
<p>which by simple substitution would be equivalent to</p>
<pre class=""lang-js prettyprint-override""><code>const collectFamilyByName = function (target) {
  return collectFamily (function (element) {
    return element.name == target
  })
}
</code></pre>
<p>By using more modern arrow functions for the inner function, this would become</p>
<pre class=""lang-js prettyprint-override""><code>const collectFamilyByName = function (target) {
  return collectFamily (element =&gt; element.name == target)
}
</code></pre>
<p>and then for the outer one:</p>
<pre class=""lang-js prettyprint-override""><code>const collectFamilyByName = (target) =&gt;
  collectFamily (element =&gt; element.name == target)
</code></pre>
<p>And finally, we can use parameter destructuring to remove the <code>element</code> parameter, like this:</p>
<pre class=""lang-js prettyprint-override""><code>const collectFamilyByName = (target) =&gt;
  collectFamily (({name}) =&gt; name == target)
</code></pre>
<p>Now, in order to understand <code>collectFamily</code>, we have to understand <code>hasMatch</code>.  Let's expand this again to ES5 style:</p>
<pre class=""lang-js prettyprint-override""><code>const hasMatch = function (pred) {
  return function (element) {
    return pred (element) || 
           element .children .some (function (child) {
             return hasMatch (pred) (child)
           })
  }
}
</code></pre>
<p>This is standard ES5 code, almost, but not quite, equivalent to the version above.  Here we accept a predicate and return a function which accepts an element and returns a boolean.  It will be true if the predicate returns <code>true</code> for the element, or, recurring on the element's children, if <code>hasMatch</code> passed the same predicate and then passed each child, returns true on any of them, using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some"" rel=""nofollow noreferrer""><code>Array.prototype.some</code></a>.</p>
<p>This is simplified into the above again using arrow functions and parameter destructuring.  The one difference is that the ES5 function applies the predicate to the entire object and the ES6 one applies it to a copy of the object that doesn't include <code>children</code>.  If this is not desired, we could skip the parameter destructuring here, but I think it usually makes sense to do it this way.</p>
<p>Finally, the main function is <code>collectFamily</code>, which looks like this:</p>
<pre class=""lang-js prettyprint-override""><code>const collectFamily = (pred) =&gt; (xs) =&gt; 
  xs .flatMap (
    x =&gt; pred(x) 
      ? [x, ...(x.children || [])] 
    : hasMatch (pred) (x) 
      ? [x, ...collectFamily (pred) (x.children || [])]
    : []
  )
</code></pre>
<p>I won't go through the ES6 -&gt; ES5 exercise here.  It works just the same as in the other two.  Instead, let's look at <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flatMap"" rel=""nofollow noreferrer""><code>flatMap</code></a> and the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"" rel=""nofollow noreferrer"">spread syntax</a>.</p>
<ul>
<li><p><strong><code>flatMap</code></strong> is an operation on arrays that works much like <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""nofollow noreferrer""><code>map</code></a>, except that it expects the function to return <em>an array</em> of objects on every call, which it then combines into a single array.</p>
<pre class=""lang-js prettyprint-override""><code>[10, 20, 30] .flatMap ((n) =&gt; [n, n + 1, n + 2])
//=&gt; [10, 11, 12, 20, 21, 22, 30, 31, 32]
</code></pre>
</li>
<li><p><strong>the spread syntax</strong> uses the token <code>...</code> to spread the contents of an array
(or an object, not relevant here) into another array.  So if <code>xs</code> held <code>[1, 2, 3]</code> then <code>[5, 10, ...xs, 20]</code> would yield <code>[5, 10, 1, 2, 3, 20]</code>.</p>
</li>
</ul>
<p>Knowing these, we can understand <code>collectFamily</code>.  It accepts a predicate (which we already know we saw will be one that matches on objects whose <code>name</code> property has the same value as our target value) and returns a function which takes an array of objects.  It calls flatMap on this array, passing a function, so we know that that function must return an array of values, given one element in the original array.</p>
<p>If I were to rewrite this, I might lay it out a little differently to make the body of that function slightly more clear, perhaps like this:</p>
<pre class=""lang-js prettyprint-override""><code>const collectFamily = (pred) =&gt; (xs) =&gt; 
  xs .flatMap (
    (x) =&gt; 
      pred (x) 
        ? [x, ...(x .children || [])] 
      : hasMatch (pred) (x) 
        ? [x, ...collectFamily (pred) (x .children || [])]
      : []
  )
</code></pre>
<p>And the function, which is passed an array value with parameter name <code>x</code>, would have this body:</p>
<pre class=""lang-js prettyprint-override""><code>      pred (x) 
        ? [x, ...(x.children || [])] 
      : hasMatch (pred) (x) 
        ? [x, ...collectFamily (pred) (x.children || [])]
      : []
</code></pre>
<p>We return one of three different values.</p>
<p>In the first case, if the predicate matches our current value (again, remember in this case, that's if the <code>name</code> property of <code>x</code> matches the target, such as <code>'Group 2'</code>), then we return an array including <code>x</code> and all of its children.  We use the <code>|| []</code> so that if <code>x .children</code> were not defined, we would still have an iterable object to spread into our array.  It doesn't matter for the sample data as supplied, but it's useful in many cases.</p>
<p>In the second case, if we have a match somewhere nested more deeply, as reported by <code>hasMatch</code>, we return an array including this node, and all the results found by recursively calling <code>collectFamily</code> with the same predicate against the list of children (again, defaulted to an empty array if they don't exist.)</p>
<p>And in the third case, if neither of those is true, we simply return an empty array.</p>
<hr />
<p>So that's how this works.  There's no magic here, but if you're new to the language, some of the more modern features may seem a bit obscure.  I promise, though, that with a little practice, they'll become second-nature.  They make for much simpler code, and, once you're used to the syntax, they seem to me much easier to read as well.</p>
",1
65147218,"<p>The problem is that the attributes have curly quotes <code>“</code> instead of <code>&quot;</code>.</p>
<p>This is often the result of copy/paste from Word and MS Office products that sometimes change regular quotes to the &quot;smart quotes&quot; that are the directional curly. These are not the same as regular quotes and often cause issues with parsing, since they are multi-byte characters and if not encoded properly will get mangled and read as two separate characters.</p>
<p>Fix the XML to use regular quotes:</p>
<pre><code>&lt;xsd:events xmlns:xsd=&quot;http://epevents.post.ee/xsd&quot;&gt;
    &lt;event id=“1234”&gt;
      &lt;packetCode&gt;ABC123&lt;/packetCode&gt;
      &lt;eventCode&gt;EVENT_CODE&lt;/eventCode&gt;
      &lt;eventDate&gt;2020-12-03T14:34:09.000+02:00&lt;/eventDate&gt;
      &lt;stateCode&gt;STATUS_CODE&lt;/stateCode&gt;
      &lt;eventSource zip=&quot;123&quot;&gt;Some place&lt;/eventSource&gt;
    &lt;/event&gt;
    &lt;event id=“456”&gt;
      &lt;packetCode&gt;DEF456&lt;/packetCode&gt;
      &lt;eventCode&gt;EVENT_CODE&lt;/eventCode&gt;
      &lt;eventDate&gt;2020-12-03T14:40:44.000+02:00&lt;/eventDate&gt;
      &lt;stateCode&gt;STATUS_CODE&lt;/stateCode&gt;
      &lt;eventSource zip=&quot;123&quot;&gt;Some place&lt;/eventSource&gt;
    &lt;/event&gt;
  &lt;/xsd:events&gt;
</code></pre>
<p>And it will generate the expected JSON with an array of two objects for event:</p>
<pre><code>{
    &quot;xsd:events&quot;: {
        &quot;event&quot;: [
            {
                &quot;packetCode&quot;: &quot;ABC123&quot;,
                &quot;eventCode&quot;: &quot;EVENT_CODE&quot;,
                &quot;eventDate&quot;: &quot;2020-12-03T14:34:09.000+02:00&quot;,
                &quot;stateCode&quot;: &quot;STATUS_CODE&quot;,
                &quot;eventSource&quot;: &quot;Some place&quot;
            },
            {
                &quot;packetCode&quot;: &quot;DEF456&quot;,
                &quot;eventCode&quot;: &quot;EVENT_CODE&quot;,
                &quot;eventDate&quot;: &quot;2020-12-03T14:40:44.000+02:00&quot;,
                &quot;stateCode&quot;: &quot;STATUS_CODE&quot;,
                &quot;eventSource&quot;: &quot;Some place&quot;
            }
        ]
    }
}
</code></pre>
",1
65128849,"<p>Use this</p>
<p><code>&lt;%- data[i]['article'] %&gt;</code></p>
<p>Instead of this</p>
<p><code>&lt;%= data[i]['article'] %&gt;</code></p>
<p>More on this <a href=""https://stackoverflow.com/a/51924757/10980464"">here</a></p>
",1
65145619,"<p>Your requirements are not exactly clear, but what is for sure is you should be using <code>reduce</code> not <code>map</code> for this.</p>
<p>Making the result an object is easy, see below, but I'm still not entirely clear how you build the <code>eventN</code> keys correctly. This certainly works for your test case presented here, if it doesn't work for what you want feel free to clarify and I will update as necessary.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var response = [{
    ""endTime"": ""2020-12-06 16:30:00.000Z"",
    ""event"": ""Study"",
    ""startTime"": ""2020-12-06 12:30:00.000Z"",
    'somedata':'js is good'
  },
  {
    ""endTime"": ""2020-12-06 16:30:00.000Z"",
    ""event"": ""gym"",
    ""startTime"": ""2020-12-05 12:30:00.000Z"",
    'somedata':'js is good'
  },
]

let detailsRes = response.reduce((acc, res) =&gt; {
    let start = new Date(moment(res.startTime).format('L'));
    let end = new Date(moment(res.endTime).format('L'));
    let current = new Date(start);
    var n = 0;
    while (current &lt;= end) {
      date = [new Date(current).getFullYear(), new Date(current).getMonth() + 1, new Date(current).getDate()].join('-');
      if(acc[date] == undefined) acc[date] = {totalcount:0}
      acc[date].totalcount++;
      acc[date][""event"" + ++n] = 1;
      var newDate = current.setDate(current.getDate() + 1);
      current = new Date(newDate);
    }
    return acc
  }, {});
  
console.log(detailsRes)</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.1/moment.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
",1
65137902,"<p>First of all, you must not use same id for multiple elements in HTML. This way you will not be able to find correct element and write common logic around it.</p>
<p>Either put unique id for each HTML element or use class for identifying target elements.
Below is the example with <code>class</code> for common element and script has been prepared around it.</p>
<p>Replace all ids with <code>class</code> name and attach click event to the the toggle element. Find required child element using <code>$(this)</code> and perform required operations.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).ready(function() {
  $("".fold"").click(function() {
    var $foldP = $(this).find("".fold_p"");
    $foldP.fadeOut(function() {
      var text = ($foldP.text() == 'Fold it') ? 'Expand it' : 'Fold it';
      $foldP.text(text).fadeIn();
      $foldP.next().slideToggle(""slow"");
    })
  })
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""fold comment-reply-container""&gt;
  &lt;p class=""fold_p toggle-reply""&gt;Fold it&lt;/p&gt;
  &lt;div class=""comment-reply col-sm-14""&gt;
      Some content 1
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=""fold comment-reply-container""&gt;
  &lt;p class=""fold_p toggle-reply""&gt;Fold it&lt;/p&gt;
  &lt;div class=""comment-reply col-sm-14""&gt;
      Some content 2
  &lt;/div&gt;
&lt;/div&gt;
&lt;div class=""fold comment-reply-container""&gt;
  &lt;p class=""fold_p toggle-reply""&gt;Fold it&lt;/p&gt;
  &lt;div class=""comment-reply col-sm-14""&gt;
      Some content 3
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65122478,"<p>How about</p>
<pre><code>ref={el =&gt; {this[&quot;el&quot;+index] = el}}/&gt;
</code></pre>
",1
65113539,"<p>You could collect the wanted preferences and reorder the preferences by iterating all places.</p>
<p>With <code>preference</code> of</p>
<pre><code>{ 1: 1, 2: 3, 3: 3, 4: 1 }
</code></pre>
<p><code>temp</code> has this content</p>
<pre><code>[
    undefined, /* sparse */
    [
        1,
        4
    ],
    undefined, /* sparse */
    [
        2,
        3
    ]
]
</code></pre>
<p>The following iteration omits spars elements and visits only the two arrays.</p>
<p>And because of the random selection the result is not predictable, but in wanted order.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function adjustPreference(preference) {
    let temp = [],
        t = 1;
    
    for (let i = 1; i &lt; 5; i++) {
        (temp[preference[i]] = temp[preference[i]] || []).push(i);
    }
    
    temp.forEach(persons =&gt; {
        while (persons.length) {
            const random = persons.splice(Math.floor(Math.random() * persons.length), 1)[0];
            preference[random] = t++;
        }
    });
    
    return preference;
}

console.log(adjustPreference({ 1: 1, 2: 3, 3: 3, 4: 1 }));</code></pre>
</div>
</div>
</p>
",1
65085847,"<p>Do you use <code>https://github.com/yuhong90/node-google-calendar</code>?</p>
<p>Then insert is already returningn an promise:</p>
<pre><code>var result= async function meet(){
    let link = await calendar.events.insert({
        calendarId: 'primary', 
        conferenceDataVersion: '1', 
        resource: event 
    })
    return link.data.hangoutLink
}
</code></pre>
<p>And please... if you put <code>async</code> infront of it will return you an promise.</p>
<p>Promises are thenable you can use <code>.then()</code> on it to get your result</p>
<pre><code>result().then(res =&gt; {
   console.log(res);
})
</code></pre>
",1
65114825,"<p>You can do this quite simply with <code>Array#reduce</code>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const list=[22,45,63,223,12,56,89];
let evenSum = list.reduce((acc,curr)=&gt;acc + (curr % 2 == 0 ? curr : 0), 0);
console.log('Even sum:', evenSum);
let oddSum = list.reduce((acc,curr)=&gt;acc + (curr % 2 == 1 ? curr : 0), 0);
console.log('Odd sum:', oddSum);</code></pre>
</div>
</div>
</p>
<p>If performance is particularly important, you can calculate both sums with a single <code>reduce</code> operation.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const list=[22,45,63,223,12,56,89];
let [evenSum, oddSum] = list.reduce((acc,curr)=&gt;(acc[curr % 2] += curr, acc), [0, 0]);
console.log('Even sum:', evenSum);
console.log('Odd sum:', oddSum);</code></pre>
</div>
</div>
</p>
",1
65163449,"<pre><code>function alternateColors() {
  const ss=SpreadsheetApp.getActive();
  const sh=ss.getActiveSheet();
  const sr=2;
  const rg=sh.getRange(sr,1,sh.getLastRow()-sr+1,sh.getLastColumn());
  let cA=rg.getBackgrounds();
  cA.forEach(function(r,i){
    r.forEach(function(c,j){
      if(i%2==1) {
        cA[i][j]='#d9d9d9';
      }else{
        cA[i][j]='#ffffff';
      }
    });
  });
  rg.setBackgrounds(cA); 
}
</code></pre>
",1
65133882,"<p>you should define <code>allUsers</code> variable out of if block scope and set that data in if block.
try this one in <code>deleteUser.js</code>:</p>
<pre><code>    deleteUser = document.getElementById(&quot;deleteBtn&quot;)
    
    
    deleteUser.addEventListener('click', function() {
            let allUsers;
            const xhr = new XMLHttpRequest();
            xhr.responseType = &quot;json&quot;
        
            xhr.addEventListener(&quot;readystatechange&quot;, function() {
            if(this.readyState === 4) {
                allUsers = this.response;
          
                
              let currentUser = JSON.parse(localStorage.getItem(&quot;currentUser&quot;))
    
                allUsers = allUsers.filter(allUser =&gt; allUser.username !== currentUser.username);
    
            } });
                           
    
            xhr.open(&quot;DELETE&quot;, &quot;http://localhost:2500/deleteProfile&quot;, true);
                
            xhr.setRequestHeader(&quot;Content-Type&quot;, &quot;application/json&quot;);
                
          
            xhr.send(JSON.stringify(allUser));
        })

</code></pre>
",1
65101389,"<p>How about:</p>
<pre><code>form.effects[0].Sleepy = 0;
setForm({...form});
</code></pre>
",1
65111017,"<p>As already explained, your <code>then</code> callback does return <code>void</code> not the result. You're looking for</p>
<pre><code>getDocument(requestId: string, documentId: DocumentID, requestService: IRequestService): Promise&lt;GetDocumentResult&gt; {
  if (this.storageKey in sessionStorage) {
    const documentsMap: Map&lt;DocumentID, GetDocumentResult&gt; = new Map(JSON.parse(sessionStorage.getItem(this.storageKey)!));
    const document = documentsMap.get(documentId);
    if (document !== undefined) {
      return Promise.resolve(document);
    }
  }

  return requestService.getDocument(requestId, documentId).then(value =&gt; {
    this.setDocument(documentId, value);
    return value;
//  ^^^^^^^^^^^^
  });
}
</code></pre>
<p>Btw, I would recommend to extract the cache lookup and storage (<code>setDocument</code>?) into a separate service, and to have that service keep the <code>documentsMap</code> in memory instead of parsing JSON every time <code>getDocument</code> is called.</p>
",1
65131650,"<p>Did not play around with it, but I'm almost sure that if you view console output of you console where you started nextjs app you will see results there, take a look please. Here is explanation from documentation:</p>
<blockquote>
<p>If you export an async function called getStaticProps from a page, Next.js <strong>will pre-render this page at build time</strong> using the props returned by getStaticProps.</p>
</blockquote>
<p>The key part here will pre-render at build time. So <code>getStaticProps</code> will be called on the server side during server side rendering.</p>
",1
65149333,"<p>FYI, <code>Promise</code> couldn't work with loop that involves callback ie <code>forEach</code>. Alternatively, you could use <code>for of</code></p>
<pre><code>try {
  for (const val of response.data['users']) {
    console.log(&quot;ENTER&quot;);
    var url = 'getDetailUser' + val[&quot;id&quot;];
    var res = await call(url); 
    console.log(&quot;EXIT&quot;)
  }
} catch (error) {
  console.log(error)
}
</code></pre>
",1
65136602,"<p>Your code is valid.</p>
<p><code>undefined</code> is passed as dependencies and it means <code>useEffect</code> runs on every render. So if you want to do some work that shouldn't be run on every render (like adding event listener), you should give a dependency array.</p>
",1
65123475,"<p>Try this one.</p>
<pre class=""lang-js prettyprint-override""><code>setProducts({ ...products, sizes: { ...products.sizes, m: true } });
</code></pre>
",1
65115944,"<p>I'll be honest with you, I can't think of a usecase in which you would need to export/import a simple string array.  Exporting an object (containing an array, perhaps) has a bit more utility.  But the following should work.</p>
<pre class=""lang-js prettyprint-override""><code>// file1.mjs
const myArray = ['data0', 'data1', 'data2'];
export default myArray;
</code></pre>
<pre class=""lang-js prettyprint-override""><code>// file2.mjs
import myArray from './file1.mjs';
console.log('myArray =&gt;', myArray);
</code></pre>
",1
65097120,"<p>As you say, you can't return two response at the same time, I'll solve it having a textarea with the CSV data showing the failing order, with the option to download the text into a file</p>
<p>You can use this Javascript function to download a file from the TextArea</p>
<pre><code>function generateTextFile(textareaElement, filenameWithoutExtension) {
    var textToWrite = textareaElement.val();
    var textFileAsBlob = new Blob([textToWrite], {type:'text/csv'});
    var fileNameToSaveAs = filenameWithoutExtension + &quot;.csv&quot;;

    var downloadLink = document.createElement(&quot;a&quot;);
    downloadLink.download = fileNameToSaveAs;
    downloadLink.innerHTML = &quot;Download File&quot;;
    if (window.webkitURL != null) {
        // Chrome allows the link to be clicked
        // without actually adding it to the DOM.
        downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
    }
    else {
        // Firefox requires the link to be added to the DOM
        // before it can be clicked.
        downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
        downloadLink.onclick = destroyClickedElement;
        downloadLink.style.display = &quot;none&quot;;
        document.body.appendChild(downloadLink);
    }

    downloadLink.click();
}
</code></pre>
",1
65106701,"<p>Yea. Just use <code>import()</code> at your component:</p>
<pre><code>components: {
   my_component: () =&gt; import(path)
}
</code></pre>
",1
65146905,"<p>You can use <code>Array#reduce</code> with an object to store the amount for each price.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const example = [
    {price: 25.1, amount: 32},
    {price: 45.2, amount: 45},
    {price: 25.1, amount: 25},
    {price: 44.0, amount: 13},
    {price: 45.2, amount: 23}
]
const res = Object.values(example.reduce((acc,{price,amount})=&gt;
   ((acc[price] = acc[price] || {price, amount: 0}).amount += amount, acc), {}));
console.log(res);</code></pre>
</div>
</div>
</p>
",1
65131363,"<p>Try not to use state value for tracking button disabled status. Please check below.</p>
<pre class=""lang-js prettyprint-override""><code>import React, { useState } from &quot;react&quot;;

export default function App() {
  const data = [&quot;q&quot;, &quot;c&quot;, &quot;s&quot;, &quot;a&quot;];

  const [iterator, setIterator] = useState(0);
  const [curr, setCurr] = useState(data[iterator]);

  const fetchNext = () =&gt; {
    if (iterator === data.length - 1) {
      return;
    }
    setIterator((prev) =&gt; prev + 1);
    setCurr(data[iterator + 1]);
  };

  const fetchPrevious = () =&gt; {
    if (iterator === 0) {
      return;
    }
    setIterator((prev) =&gt; prev - 1);
    setCurr(data[iterator - 1]);
  };

  const nextDisabled = iterator &gt;= data.length - 1;
  const prevDisabled = iterator &lt;= 0;

  return (
    &lt;div&gt;
      &lt;h1&gt;{curr}&lt;/h1&gt;
      &lt;button disabled={nextDisabled} onClick={fetchNext}&gt;
        next
      &lt;/button&gt;
      &lt;button disabled={prevDisabled} onClick={fetchPrevious}&gt;
        previous
      &lt;/button&gt;
    &lt;/div&gt;
  );
}
</code></pre>
",1
65086343,"<p>This can be done using a click counter. Like this:</p>
<pre><code>let btn_click = false;

document.getElementById(&quot;btn&quot;).onclick = function() {
  btn_click = true;
}
</code></pre>
<p>And also, use the value of the variable <code>btn_click</code> in the if condition:</p>
<pre><code>...
if (document.getElementById(&quot;check&quot;).checked || btn_click == true) {
...
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let btn_click = false;

document.getElementById(""btn"").onclick = function() {
  btn_click = true;
}

function func1(event) {
  alert(""DIV 1"");
  if (document.getElementById(""check"").checked || btn_click == true) {
    event.stopPropagation();
  }
}

function func2() {
  alert(""DIV 2"");
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>div {
  padding: 50px;
  background-color: rgba(255, 0, 0, 0.2);
  text-align: center;
  cursor: pointer;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;h1&gt;The stopPropagation() Method&lt;/h1&gt;

&lt;p&gt;Click DIV 1:&lt;/p&gt;
&lt;div onclick=""func2()""&gt;DIV 2
  &lt;div onclick=""func1(event)""&gt;DIV 1&lt;/div&gt;
&lt;/div&gt;
&lt;input type=""checkbox"" id=""check""&gt; &lt;br&gt;&lt;br&gt;
&lt;button id=""btn""&gt;Stop propagation&lt;/button&gt;</code></pre>
</div>
</div>
</p>
",1
65127278,"<p>There is only one element that has the class name <code>card-body</code>.
So you should indicate <code>document.querySelectorAll(&quot;.card-body&quot;)[0]</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const cardBody = document.querySelectorAll("".card-body"")[0];

const title = document.querySelector(""#tasks-title"");

cardBody.addEventListener(""mouseenter"", run);
cardBody.addEventListener(""mouseleave"", run);

function run(e) {
  console.log(e.type);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""card-body""&gt;
  &lt;hr&gt;
  &lt;h5 class=""card-title"" id=""tasks-title""&gt;Todo's&lt;/h5&gt;
  &lt;div class=""form-row""&gt;
    &lt;div class=""form-group col-md-6""&gt;
      &lt;input class=""form-control"" type=""text"" name=""filter"" id=""filter"" placeholder=""Search A Todo""&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;div&gt;</code></pre>
</div>
</div>
</p>
",1
65150385,"<p>Your code works well, but the problem is with rule <code>display: block</code>, which is in the <code>media query</code>. in the <code>table.vypis tr</code> selector. This rule overrides another block hiding rule. You need to remove <code>display: block</code> out of <code>table.vypis tr</code>.</p>
<pre><code>@media screen and (max-width: 800px) {

...
table.vypis tr {
    border-bottom: 3px solid #ddd;
    display: block;
    margin-bottom: .625em;
}
...

}
</code></pre>
<p>Or a second solution:</p>
<p>Add! <code>!important</code> to rule <code>display: none</code>, selector <code>tbody tr.hidden</code>. It should look like this:</p>
<pre><code>tbody tr.hidden {
 display: none!important;
}
</code></pre>
<p><strong>I advise you to use the second solution!</strong></p>
",1
65088912,"<p>The map was in fact a reference of the <code>creatureMap</code> from <code>unit test</code> script. Modifying the map inside your class will modify the <code>creatureMap</code> in <code>unit test</code>. You can try to create a new Map and copy over all values:</p>
<pre class=""lang-js prettyprint-override""><code>// Start class CreateTurnQueue
initQueue(list = {}) {
   
   const newMap = new Map();
   
   // Both Object and Map has entries method although the order is different
   const iterator = list.entries();
   
   for(const item of iterator) {
      const [point, creature] = item;
      newMap.set(point, creature);
      this.creatureArray.push(creature);
   }
   this.creatureMap = newMap;
   
}
// End class CreateTurnQueue
</code></pre>
<p>Now you don't have a reference to the <code>creatureMap</code> from the <code>unit test</code> script and modify <code>this.creatureMap</code> will not affect the one you passed to the <code>initQueue</code> method as argument.</p>
",1
65136635,"<p>You can use <code>filter</code> function to remove empty strings from array.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const tags = 'hola, hello, hola hello, , hola,';
const res = tags
  .split(',')
  .map((tag) =&gt; tag.trim())
  .filter((tag) =&gt; tag.length !== 0);
console.log(res);</code></pre>
</div>
</div>
</p>
<p>If you want to replace all spaces from the string item of the array, you can do it as below.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const tags = 'h o la, hello, hola hello, , hola,';
const res = tags
  .split(',')
  .map((tag) =&gt; tag.trim().replace(/[\s]+/g, '-').toLowerCase())
  .filter((tag) =&gt; tag.length !== 0);
console.log(res);</code></pre>
</div>
</div>
</p>
",1
65096357,"<h1>Payload is using common entities</h1>
<p>Simply put, the Apollo client's cache keeps everything that's received from queries and mutations, though the schema needs to include <code>id: ID!</code> fields and any query needs to use both the <code>id</code> and <code>__typename</code> fields on relevant nodes for the client to know which part of the cache to update.</p>
<p>This assumes that the mutation payload is common data from the schema that can be retrieved through a normal query. This is the best case scenario.</p>
<p>Given the following schema on the server:</p>
<pre><code>type User {
  id: ID!
  phoneNumber: String!
}

type Query {
  user(id: String!): User!
}

type UpdateUserPayload {
  user: User!
}

type Mutation {
  updateUser(id: String!, phoneNumber: String!): UpdateUserPayload!
}
</code></pre>
<p>And assuming a <a href=""https://www.apollographql.com/docs/react/caching/cache-configuration/"" rel=""nofollow noreferrer"">cache is used on the client</a>:</p>
<pre><code>import { InMemoryCache, ApolloClient } from '@apollo/client';

const client = new ApolloClient({
  // ...other arguments...
  cache: new InMemoryCache(options)
});
</code></pre>
<blockquote>
<ol>
<li><p>The cache <a href=""https://www.apollographql.com/docs/react/caching/cache-configuration/#generating-unique-identifiers"" rel=""nofollow noreferrer"">generates a unique ID</a> for every identifiable object included in the response.</p>
</li>
<li><p>The cache stores the objects by ID in a flat lookup table.</p>
</li>
<li><p>Whenever an incoming object is stored with the same ID as an <em>existing</em> object, the fields of those objects are <em>merged</em>.</p>
<ul>
<li>If the incoming object and the existing object share any fields, the incoming object <em>overwrites</em> the cached values for those fields.</li>
<li>Fields that appear in <em>only</em> the existing object or <em>only</em> the incoming object are preserved.</li>
</ul>
</li>
</ol>
<p>Normalization constructs a partial copy of your data graph on your
client, in a format that's optimized for reading and updating the
graph as your application changes state.</p>
</blockquote>
<p>The client's mutation should be</p>
<pre><code>mutation UpdateUserPhone($phoneNumber: String!, $id: String!) {
  updateUser(id: $id, phoneNumber: $phoneNumber) {
    user {
      __typename  # Added by default by the Apollo client
      id          # Required to identify the user in the cache
      phoneNumber # Field that'll be updated in the cache
    }
  }
}
</code></pre>
<p>Then, any component using this user <em>through the same Apollo client</em> in the app will be up to date automatically. There's nothing special to do, the client will use the cache by default and trigger renders whenever the data changes.</p>
<pre class=""lang-js prettyprint-override""><code>import { gql, useQuery } from '@apollo/client';

const USER_QUERY = gql`
  query GetUser($id: String!) {
    user(id: $id) {
      __typename
      id
      phoneNumber
    }
  }
`;

const UserComponent = ({ userId }) =&gt; {
  const { loading, error, data } = useQuery(USER_QUERY, {
    variables: { id: userId },
  });

  if (loading) return null;
  if (error) return `Error! ${error}`;

  return &lt;div&gt;{data.user.phoneNumber}&lt;/div&gt;;
}
</code></pre>
<p>The <a href=""https://www.apollographql.com/docs/react/data/queries/#setting-a-fetch-policy"" rel=""nofollow noreferrer""><code>fetchPolicy</code> option</a> defaults to <code>cache-first</code>.</p>
<hr />
<h1>The payload is custom data specific to the mutation</h1>
<p>If the data is in fact not available elsewhere in the schema, it won't be possible to use the Apollo cache automatically as explained above.</p>
<h2>Use another state management solution</h2>
<p>A couple options:</p>
<ul>
<li>local storage</li>
<li><a href=""https://reactjs.org/docs/hooks-reference.html#usecontext"" rel=""nofollow noreferrer"">React's context API</a></li>
<li>etc.</li>
</ul>
<p>Here's an <a href=""https://www.apollographql.com/docs/tutorial/mutations/#persist-the-users-token-and-id"" rel=""nofollow noreferrer"">example from the Apollo GraphQL documentation</a> using the <code>localStorage</code>:</p>
<pre class=""lang-js prettyprint-override""><code>const [login, { loading, error }] = useMutation(LOGIN_USER, {
  onCompleted({ login }) {
    localStorage.setItem('token', login.token);
    localStorage.setItem('userId', login.id);
  }
});
</code></pre>
<h2><a href=""https://www.apollographql.com/docs/tutorial/local-state/#define-a-client-side-schema"" rel=""nofollow noreferrer"">Define a client-side schema</a></h2>
<p>This is a pure Apollo GraphQL solution since the client is also a state management library, which <em>enables useful developer tooling and helps reason about the data.</em></p>
<ol>
<li><p>Create a local schema.</p>
<pre><code>// schema.js
export const typeDefs = gql`
  type DataToKeep {
    # anything here
  }

  extend type Query {
    dataToKeep: DataToKeep # probably nullable?
  }
`;
</code></pre>
</li>
<li><p>Initialize a custom cache</p>
<pre><code>// cache.js
export const dataToKeepVar = makeVar(null);

export const cache = new InMemoryCache({
  typePolicies: {
    Query: {
      fields: {
        dataToKeep: {
          read() {
            return dataToKeepVar();
          } 
        },
      }
    }
  }
});
</code></pre>
</li>
<li><p>Apply the schema override at the client's initialization</p>
<pre><code>import { InMemoryCache, Reference, makeVar } from '@apollo/client';
import { cache } from './cache';
import { typeDefs } from './schema';

const client = new ApolloClient({
  cache,
  typeDefs,
  // other options like, headers, uri, etc.
});
</code></pre>
</li>
<li><p>Keep track of the changes in the mutation:</p>
<pre><code>const [myMutation, { data, errors, loading }] = useMutation(MY_MUTATION, {
  onCompleted({ myMutation }) {
    if (myMutation &amp;&amp; myMutation.dataToKeep)
      dataToKeepVar(myMutation.dataToKeep);
  }
});
</code></pre>
</li>
<li><p>Then, query the <code>@client</code> field.</p>
<pre><code>import { gql, useQuery } from '@apollo/client';

const DATA_QUERY = gql`
  query dataToKeep {
    dataToKeep @client {
      # anything here
    }
  }
`;

const AnyComponent = ({ userId }) =&gt; {
  const { loading, error, data } = useQuery(DATA_QUERY);

  if (loading) return null;
  if (error) return `Error! ${error}`;

  return &lt;div&gt;{JSON.stringify(data.dataToKeep)}&lt;/div&gt;;
}
</code></pre>
</li>
</ol>
<p>See also the documentation on <a href=""https://www.apollographql.com/docs/react/local-state/local-state-management/"" rel=""nofollow noreferrer"">managing local state</a>.</p>
",1
65156880,"<p>you can change here as <code>$(this).parents('.add-links').find('a.ajax_add_to_cart')</code>..</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>jQuery(function($){
    
    $('.plus').on('click', function(e) {
        var val = parseInt($(this).prev('input').val());
        $(this).prev('input').val(val + 1).change();
    });
    
    $('.minus').on('click', function(e) {
        var val = parseInt($(this).next('input').val());
        if (val !== 0) {
            $(this).next('input').val(val - 1).change();
        }
    });
    
    $('.add-links').on('change', '.qty', function(event) {
        
        $(this).parents('.add-links').find('a.ajax_add_to_cart').attr('data-quantity',  + $(this).val());
    });
    
    $('.qty').change();
    
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""add-links clearfix""&gt;
    &lt;div class=""quantity buttons_added""&gt;
        &lt;button type=""button"" value=""-"" class=""minus""&gt;-&lt;/button&gt;
        &lt;input type=""number"" class=""input-text qty text"" step=""1"" min=""1"" max="""" name=""quantity"" value=""1"" size=""4"" inputmode=""numeric""&gt;
        &lt;button type=""button"" value=""+"" class=""plus""&gt;+&lt;/button&gt;
    &lt;/div&gt;
    &lt;a href=""#"" data-quantity=""1"" class=""button product_type_simple add_to_cart_button ajax_add_to_cart""&gt;Add to cart&lt;/a&gt;
&lt;/div&gt;

&lt;div class=""add-links clearfix""&gt;
    &lt;div class=""quantity buttons_added""&gt;
        &lt;button type=""button"" value=""-"" class=""minus""&gt;-&lt;/button&gt;
        &lt;input type=""number"" class=""input-text qty text"" step=""1"" min=""1"" max="""" name=""quantity"" value=""1"" size=""4"" inputmode=""numeric""&gt;
        &lt;button type=""button"" value=""+"" class=""plus""&gt;+&lt;/button&gt;
    &lt;/div&gt;
    &lt;a href=""#"" data-quantity=""1"" class=""button product_type_simple add_to_cart_button ajax_add_to_cart""&gt;Add to cart&lt;/a&gt;
&lt;/div&gt;

&lt;div class=""add-links clearfix""&gt;
    &lt;div class=""quantity buttons_added""&gt;
        &lt;button type=""button"" value=""-"" class=""minus""&gt;-&lt;/button&gt;
        &lt;input type=""number"" class=""input-text qty text"" step=""1"" min=""1"" max="""" name=""quantity"" value=""1"" size=""4"" inputmode=""numeric""&gt;
        &lt;button type=""button"" value=""+"" class=""plus""&gt;+&lt;/button&gt;
    &lt;/div&gt;
    &lt;a href=""#"" data-quantity=""1"" class=""button product_type_simple add_to_cart_button ajax_add_to_cart""&gt;Add to cart&lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65149920,"<p>The following can be used in the Search &amp; Replace tool, not in the Find/Replace in Files feature (opened with <kbd>Ctrl+Shift+F</kbd>) because the latter uses another, old regex engine and the former uses the modern ECMAScript 2018+ compliant engine as in most major JavaScript environments:</p>
<ol>
<li>Insert an underscore between each lower- and uppercase letter in a non-whitespace streak of text after a <code>US.TL.PACKAGES:</code> string:</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>(?&lt;=\bUS\.TL\.PACKAGES:\S*?[a-z])(?=[A-Z])
</code></pre>
<p>Replace with a mere <code>_</code>. <em>Make sure the <code>Aa</code> option is checked</em> as matching must be case sensitive:</p>
<p><a href=""https://i.stack.imgur.com/YCt54.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/YCt54.png"" alt=""enter image description here"" /></a></p>
<ol start=""2"">
<li>Make all streaks of letters in a non-whitespace streak of text after a <code>US.TL.PACKAGES:</code> string uppercase:</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>(?&lt;=\bUS\.TL\.PACKAGES:\S*?)[A-Za-z]+
</code></pre>
<p>Replace with <code>\U$0</code>.</p>
<p><a href=""https://i.stack.imgur.com/ZVhXt.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ZVhXt.png"" alt=""enter image description here"" /></a></p>
<p>and the result is</p>
<p><a href=""https://i.stack.imgur.com/N7p59.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/N7p59.png"" alt=""enter image description here"" /></a></p>
",1
65157076,"<p>Your dropdown needs a <code>v-model=&quot;selected&quot;</code> binding to communicate the selected image to the parent:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;ejs-dropdownlist v-model=&quot;selected&quot;&gt;&lt;/ejs-dropdownlist&gt; 
</code></pre>
<pre class=""lang-js prettyprint-override""><code>data() {
  return {
    selected: null, // Used by the dropdown
    images: [...]
  }
}
</code></pre>
<p>A <code>v-for</code> would cause the template to loop through all images so you don't want that.  Remove that and use the <code>selected</code> image for the correct src:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;img v-if=&quot;selected&quot; :src=&quot;require('@/assets/pics/' + selected.url)&quot;&gt;
</code></pre>
<p>Another issue will be that your image objects should have only the name of the image, as the <code>assets</code> path is hardcoded into the <code>src</code> binding:</p>
<pre class=""lang-js prettyprint-override""><code>{
   ...
   url: &quot;samplename.png&quot;
}
</code></pre>
",1
65099649,"<p>There could be multiple reasons:</p>
<ol>
<li>The user has blocked his DM globally / on this specific server</li>
<li>The user and the bot aren't sharing a server</li>
<li>The user blocked the bot</li>
</ol>
<p>To avoid this problem you can add a <code>try{} catch{}</code> block</p>
",1
65091932,"<p>In your app deployment settings, add a repository to link your app with it :</p>
<p><a href=""https://i.stack.imgur.com/KWgGb.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/KWgGb.png"" alt=""enter image description here"" /></a></p>
<p>After that you can enable the automatic deploy on a specific branch and each push or deploy manually a branch.</p>
<p><a href=""https://i.stack.imgur.com/AQTpq.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/AQTpq.png"" alt=""enter image description here"" /></a></p>
",1
65114987,"<p>The canvas rendering context has a property called <strong>globalCompositeOperation</strong> which let's you select a blending mode for drawing shapes.</p>
<p>In your particular case the <strong>xor</strong> mode would be exact what you're looking for as it makes pixels transparent where shapes overlap - as e.g. text on a solid background.</p>
<p>Here's an example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const canvas = document.getElementById('canvas');
const ctx = canvas.getContext('2d');
let text = ""I'm transparent"";


ctx.fillStyle = 'red';
ctx.fillRect(0, 0, canvas.width, canvas.height);
ctx.globalCompositeOperation = 'xor';
ctx.font = '50px Arial';
ctx.fillText(text, canvas.width / 2 - ctx.measureText(text).width / 2, canvas.height / 2);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;img src=""https://picsum.photos/id/76/400/300"" style=""position: absolute;""&gt;
&lt;canvas id=""canvas"" style=""position: absolute;"" width=""400"" height=""300""&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>
</p>
",1
65084864,"<p>You don't need to split your sentence into individual words, as you're not interested in looking at the words, but rather the individual characters in the sentence. With this in mind, you can use the current loop that you have, and for each <code>i</code> grab the current character from the input sentence at index <code>i</code>.</p>
<p>If the current character is a vowel (ie: if it is included in the vowels string), then you know the current character is a vowel, and so, you can add the current character separated by a <code>&quot;b&quot;</code> to your output string. Otherwise, it if its not a vowel, you can just add the current character to the output string.</p>
<p>See example below:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function abaTranslate(sentence) {
  const vowels = 'AEIOUaeiou';
  var newStr = """";

  for (var i = 0; i &lt; sentence.length; i++) {
    var currentCharacter = sentence[i];
    if (vowels.includes(currentCharacter)) { // the current character is a vowel
      newStr += currentCharacter + ""b"" + currentCharacter;
    } else {
      newStr += currentCharacter; // just add the character if it is not a vowel
    }
  }
  return newStr;
}

console.log(abaTranslate(""Cats and dogs"")); // returns ""Cabats aband dobogs""</code></pre>
</div>
</div>
</p>
<p>If you want to use JS methods to help you achieve this, you could use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"" rel=""nofollow noreferrer""><code>.replace()</code></a> with a regular expression. Although, it's probably better to try and understand the above code before diving into regular expressions:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const abaTranslate = sentence =&gt; sentence.replace(/[aeiou]/ig, ""$&amp;b$&amp;"");
console.log(abaTranslate(""Cats and dogs"")); // returns ""Cabats aband dobogs""</code></pre>
</div>
</div>
</p>
",1
65108276,"<p><strong>option 1</strong> call from another script: just expose <code>this.setState</code>  to an method on window and call that method will update it's state</p>
<pre><code>
componentDidMount() {
  window.setPoint = (point)=&gt;this.setState('point',point)
}

// open console and run setPoint(xxx) and check the UI change
</code></pre>
<p><strong>option 2</strong> call expose the method and call from react as you did, but things can be better</p>
<pre><code>&lt;script async src=&quot;https://geowidget.easypack24.net/js/sdk-for-javascript.js&quot;&gt;&lt;/script&gt;
&lt;link rel=&quot;stylesheet&quot; href=&quot;https://geowidget.easypack24.net/css/easypack.css&quot;/&gt;
</code></pre>
<p>you can add these into your template <code>&lt;head&gt;</code> tag, html file or html plugin in webpack, add with script may cause repeats</p>
<p>then you just need to</p>
<pre><code>componentDidMount() {
    easyPack.init({});
    var map = easyPack.mapWidget('easypack-map', (point)=&gt;{
        console.log(point);
        this.setState('point',point)
    });
</code></pre>
",1
65121817,"<p>Firstly,asp-for cannot be recognized in div,and model cannot be modified with selected value in view directly.If you want to change the value of input,you can do like this:</p>
<p>View:</p>
<pre><code>&lt;div class=&quot;form-group row&quot;&gt;
    &lt;label asp-for=&quot;UsColor&quot; class=&quot;col-sm-2 col-form-label&quot;&gt;Color&lt;/label&gt;
    &lt;div class=&quot;col-sm-10&quot;&gt;
        &lt;input asp-for=&quot;UsColor&quot;/&gt;
        &lt;div class=&quot;picker&quot; id=&quot;picker1&quot; /&gt;
    &lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>js:</p>
<pre><code>$(&quot;#picker1&quot;).colorPick({
            'initialColor': '#8e44ad',
            'palette': [&quot;#1abc9c&quot;, &quot;#16a085&quot;, &quot;#2ecc71&quot;, &quot;#27ae60&quot;, &quot;#3498db&quot;, &quot;#2980b9&quot;, &quot;#9b59b6&quot;, &quot;#8e44ad&quot;, &quot;#34495e&quot;, &quot;#2c3e50&quot;, &quot;#f1c40f&quot;, &quot;#f39c12&quot;, &quot;#e67e22&quot;, &quot;#d35400&quot;, &quot;#e74c3c&quot;, &quot;#c0392b&quot;, &quot;#ecf0f1&quot;],
            'onColorSelected': function () {
                console.log(&quot;The user has selected the color: &quot; + this.color)
                this.element.css({ 'backgroundColor': this.color, 'color': this.color });
                $(&quot;#UsColor&quot;).val(this.color);
                return this.color;
            }
        });
</code></pre>
<p>result:
<a href=""https://i.stack.imgur.com/jyVSU.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/jyVSU.gif"" alt=""enter image description here"" /></a></p>
<p>If you want to pass value to action without form,you can use ajax:</p>
<p>js:</p>
<pre><code>$(&quot;#picker1&quot;).colorPick({
            'initialColor': '#8e44ad',
            'palette': [&quot;#1abc9c&quot;, &quot;#16a085&quot;, &quot;#2ecc71&quot;, &quot;#27ae60&quot;, &quot;#3498db&quot;, &quot;#2980b9&quot;, &quot;#9b59b6&quot;, &quot;#8e44ad&quot;, &quot;#34495e&quot;, &quot;#2c3e50&quot;, &quot;#f1c40f&quot;, &quot;#f39c12&quot;, &quot;#e67e22&quot;, &quot;#d35400&quot;, &quot;#e74c3c&quot;, &quot;#c0392b&quot;, &quot;#ecf0f1&quot;],
            'onColorSelected': function () {
                console.log(&quot;The user has selected the color: &quot; + this.color)
                this.element.css({ 'backgroundColor': this.color, 'color': this.color });
               $.ajax({
                type: &quot;POST&quot;,
                   url: '@Url.Action(&quot;ChangeColor&quot;, &quot;Test&quot;)',
                   data: { &quot;color&quot;: this.color }
                 }).done(function (data) {

                });
                return this.color;
            }
        });
</code></pre>
<p>TestController:</p>
<pre><code>public IActionResult ChangeColor(string color) {
            return Ok();
        }
</code></pre>
<p>result:
<a href=""https://i.stack.imgur.com/qxQnR.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/qxQnR.gif"" alt=""enter image description here"" /></a></p>
",1
65107294,"<p>So in this case here you need to have a checkboxgroup and checkbox component. Check the below snippet. Thanks to this <a href=""https://www.npmjs.com/package/@createnl/grouped-checkboxes"" rel=""nofollow noreferrer"">package</a>.</p>
<p>For your purpose you can install the package and use so that bundle size will be less.</p>
<p>For better understanding, added a div to show the values on clicking of each and parent checkbox.</p>
<p><strong>App.js</strong></p>
<pre><code>import React from &quot;react&quot;;
import { CheckboxGroup, AllCheckerCheckbox, Checkbox } from &quot;./Checkbox&quot;;
import &quot;./styles.css&quot;;

const App = () =&gt; {
  const [onChange, setOnChange] = React.useState({});

  return (
    &lt;div&gt;
      &lt;CheckboxGroup onChange={setOnChange}&gt;
        &lt;label&gt;
          &lt;AllCheckerCheckbox /&gt;
          &lt;span&gt;Download the points for the full body&lt;/span&gt;
        &lt;/label&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;label&gt;
              &lt;Checkbox name=&quot;upperbody&quot; /&gt;
              &lt;span&gt;Download only the upper body points&lt;/span&gt;
            &lt;/label&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;label&gt;
              &lt;Checkbox name=&quot;lowerbody&quot; /&gt;
              &lt;span&gt;Download only the lower body points&lt;/span&gt;
            &lt;/label&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;label&gt;
              &lt;Checkbox name=&quot;head&quot; /&gt;
              &lt;span&gt;Download only the head points&lt;/span&gt;
            &lt;/label&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;label&gt;
              &lt;Checkbox name=&quot;fullhands&quot; /&gt;
              &lt;span&gt;Download both hands points&lt;/span&gt;
            &lt;/label&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;label&gt;
              &lt;Checkbox name=&quot;lefthand&quot; /&gt;
              &lt;span&gt;Download left hand points&lt;/span&gt;
            &lt;/label&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;label&gt;
              &lt;Checkbox name=&quot;righthand&quot; /&gt;
              &lt;span&gt;Download right hand points&lt;/span&gt;
            &lt;/label&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/CheckboxGroup&gt;
      &lt;div&gt;
        &lt;h1&gt;Values&lt;/h1&gt;
        &lt;pre&gt;{JSON.stringify(onChange, null, 2)}&lt;/pre&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  );
};

export default App;
</code></pre>
<p>Working <a href=""https://codesandbox.io/s/crazy-austin-dz93l"" rel=""nofollow noreferrer"">condesandbox</a></p>
",1
65149405,"<p>You can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every"" rel=""nofollow noreferrer""><code>Array#every</code></a> to perform the check.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let array = [{
    id : 1,
    name : 'Jerry',
    date : '2020 - 07 - 17',
    subject : 'Math'
  },
  {
    id : 2,
    name : 'Tom',
    date : '2015 - 07 - 17',
    subject : 'Science'
  },
  {
    id : 3,
    name : 'Lily',
    date : '2018 - 07 - 17',
    subject : 'Biology'
  }
];
const today = new Date;
if(array.every(({date})=&gt;new Date(date.replace(/\s+/g, '')) &gt; today)){
  console.log('valid');
} else {
  console.log('invalid');
}</code></pre>
</div>
</div>
</p>
",1
65140995,"<p>That is because your second commit function call is inside Promise then method.</p>
<p>You need to await for users.actions.list().</p>
<p>For example:</p>
<pre class=""lang-js prettyprint-override""><code>  beforeEach(() =&gt; {
    commit = sinon.spy();
    // Note: add users_response here.
    sinon.stub(api.users, &quot;list&quot;).resolves(users_response);
  });

  // Use async here.
  it(&quot;should list users&quot;, async () =&gt; {
    // Use await here.
    await users.actions.list({ commit }, { page, itemsPerPage });
    expect(commit).to.have.been.calledWith(&quot;UNSET_ERROR&quot;);
    // Note: expect with property data, because called with: users.data.
    expect(commit).to.have.been.calledWith(&quot;GET_PAGINATED&quot;, users_response.data);
  });
</code></pre>
",1
65153194,"<p>You can simply add the event listener to the div element. You also need to disable <code>pointerEvents</code> on the cursor element so that the mouse doesn't register as on top of the cursor rather than the div.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.getElementById(""div"").addEventListener(""mousemove"", function() {
  myFunction(event);
});

var mouse;
var cursor = document.getElementById(""cursor"");
function myFunction(e) {
  mouseX = e.clientX;
  mouseY = e.clientY;
  cursor.style.left = (mouseX - 55) + ""px"";
  cursor.style.top = (mouseY - 55) + ""px"";


}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {
  background: #FFFDFA;
}

#cursor {
  height: 100px;
  width: 100px;
  position: absolute;
  backface-visibility: hidden;
  z-index: 9999999;
  pointer-events: none; /* pointer-events: none is needed */
  cursor: none;
}

div {
  background: black;
  width: 200px;
  height: 100px;
  margin: 30px;
  cursor: none;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;img src=""https://www.figurefoundry.xyz/metal-cursor.svg"" id=""cursor""&gt;&lt;/img&gt;

&lt;div id=""div""&gt;&lt;/div&gt; &lt;!--add id--&gt;</code></pre>
</div>
</div>
</p>
<p>EDIT: If you want the cursor to disappear on mouseout:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.getElementById(""div"").addEventListener(""mousemove"", function() {
  myFunction(event);
});

var mouse;
var cursor = document.getElementById(""cursor"");
function myFunction(e) {
  mouseX = e.clientX;
  mouseY = e.clientY;
  cursor.style.left = (mouseX - 55) + ""px"";
  cursor.style.top = (mouseY - 55) + ""px"";
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {
  background: #FFFDFA;
}

#cursor {
  height: 100px;
  width: 100px;
  position: absolute;
  backface-visibility: hidden;
  z-index: 9999999;
  pointer-events: none; /* pointer-events: none is needed */
  cursor: none;
}

div {
  background: black;
  width: 200px;
  height: 100px;
  margin: 30px;
  cursor: none;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;img src=""https://www.figurefoundry.xyz/metal-cursor.svg"" id=""cursor"" hidden&gt;&lt;/img&gt;

&lt;div id=""div"" onmouseenter=""cursor.hidden = false"" onmouseleave=""cursor.hidden=true""&gt;&lt;/div&gt; &lt;!--make cursor invisible on leave and visible on enter--&gt;</code></pre>
</div>
</div>
</p>
",1
65162072,"<p>Try:</p>
<pre><code>const merged = {...extractSourceOfData(), ...extractMaterialType()};
</code></pre>
",1
65126073,"<p>You could use a computed.  Remove the <code>data</code> variable <code>payment_term_pct</code> and use:</p>
<pre class=""lang-js prettyprint-override""><code>data() {
  return {
    newContract: {
      payment_term_days: &quot;&quot;
    }
  }
},
computed: {
  payment_term_pct() {
    const daysToPct = {
      30: 4,
      60: 1.5
    }
    return daysToPct[this.newContract.payment_term_days];
  }
}
</code></pre>
<p>The method references to data should be:</p>
<pre class=""lang-js prettyprint-override""><code>fd.append(&quot;payment_term_days&quot;, this.newContract.payment_term_days);
fd.append(&quot;payment_term_pct&quot;, this.payment_term_pct);
</code></pre>
",1
65132849,"<p><strong>This answer assumes that your images are actually being uploaded to Cloud Storage.</strong></p>
<p>You <strong>cannot</strong> render an image from within a <code>Text tag</code>, the <code>imageRef</code> constant you're declaring is a <code>method</code> which returns a <code>download url</code>, you want to store that url in <code>state</code> to be able to call it from within an <code>image tag</code>.</p>
<p>Code would look something like this:</p>
<pre><code>const [url, setUrl] = useState();

let imageRef = firebase.storage().ref('images/photo-229634742.jpeg');
imageRef
.getDownloadURL()
.then((url) =&gt; {
  setUrl(url);
})
.catch((e) =&gt; console.log('getting downloadURL of image error =&gt; ', e));
</code></pre>
<p>and then you can call it from an Image tag as in <code>&lt;Image source={{uri:url}}/&gt;</code></p>
<p>The reason you need to store the url in <code>state</code> is because the <code>getDownloadUrl()</code> method returns a <strong>promise</strong> rather than a <strong>string</strong> of text. That promise cannot be used directly as a way to render the image. The promise is unaccessible from outside the <code>imageRef function</code> by itself. You can check this out by removing the state like this:</p>
<pre><code>let imageRef = firebase.storage().ref('images/photo-229634742.jpeg');
imageRef
.getDownloadURL()
.catch((e) =&gt; console.log('getting downloadURL of image error =&gt; ', e));
console.log(url)
</code></pre>
<p>You'll see that it returns <strong>undefined</strong>. By storing it in state you expand the scope of it and make it accessible from outside the method. In that way you can call it from anywhere in the file you're working in.</p>
",1
65157453,"<h1>Filling the glass instantly, but bubbles moving</h1>
<p>To instantly fill the glass, you can remove the delay:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).ready(function() {
        /*Look here*/

        $('.pour')
            .css({
                height: '360px'
            })
            .delay(0)
            .slideUp(500);

        $('#liquid')
            .css({
                height: '170px'
            });

        $('.beer-foam')
            .css({
                bottom: '200px'
            });
       
    });</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>body { background-color: #0065bd }
    
    h2 {
        margin: 0 auto;
        width: 400px;
        font-size: 36px;
        text-align: center;
        font-family: 'Lato', Arial, sans-serif;
        color: whiteSmoke;
    }
    
    #container {
        height: 370px;
        margin: 0 auto;
        overflow: hidden;
        position: relative;
        top: -20px;
        width: 248px;
    }
    
    #container div { position: absolute; }
    
    .pour {
        position: absolute;
        left: 45%;
        width: 20px;
        height: 0px;
        background-color: #0065bd;
        border-radius: 10px
    }
    
    #beaker {
        border: 10px solid #FFF;
        border-top: 0;
        border-radius: 0 0 30px 30px;
        height: 200px;
        left: 14px;
        bottom: 0;
        width: 200px;
    }
    
    #beaker:before,
    #beaker:after {
        border: 00px solid #FFF;
        border-bottom: 0;
        border-radius: 30px 30px 0 0;
        content: '';
        height: 30px;
        position: absolute;
        top: -40px;
        width: 30px;
    }
    
    #beaker:before { left: -50px; }
    #beaker:after { right: -50px; }
    
    #liquid {
        background-color: #0065bd;
        border: 10px solid #0065bd;
        border-radius: 0 0 20px 20px;
        bottom: 0;
        height: 0px;
        overflow: hidden;
        width: 180px;
    }
    
    #liquid:after {
        background-color: rgba(255, 255, 255, 0.25);
        bottom: -10px;
        content: '';
        height: 200px;
        left: -40px;
        position: absolute;
        transform: rotate(30deg);
        -webkit-transform: rotate(15deg);
        width: 110px;
    }
    
    #liquid .bubble {
        -webkit-animation-name: bubble;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-timing-function: linear;
        background-color: rgba(255, 255, 255, 0.2);
        bottom: 0;
        border-radius: 10px;
        height: 20px;
        width: 20px;
    }
    
    @-webkit-keyframes bubble {
        0% { bottom: 0; }
        
        50% {
            background-color: rgba(255, 255, 255, 0.2);
            bottom: 80px;
        }
        
        100% {
            background-color: rgba(255, 255, 255, 0);
            bottom: 160px;
        }
    }
    
    .bubble1 {
        left: 10px;
        -webkit-animation-delay: 1000ms;
        -webkit-animation-duration: 1000ms;
    }
    
    .bubble2 {
        left: 50px;
        -webkit-animation-delay: 700ms;
        -webkit-animation-duration: 1100ms;
    }
    
    .bubble3 {
        left: 100px;
        -webkit-animation-delay: 1200ms;
        -webkit-animation-duration: 1300ms;
    }
    
    .bubble4 {
        left: 130px;
        -webkit-animation-delay: 1100ms;
        -webkit-animation-duration: 700ms;
    }
    
    .bubble5 {
        left: 170px;
        -webkit-animation-delay: 1300ms;
        -webkit-animation-duration: 800ms;
    }
    
    /* Foam */
    
    .beer-foam {
        position: absolute;
        bottom: 10px;
    }
    
    .foam-1, .foam-2, .foam-3, .foam-4,
    .foam-5, .foam-6, .foam-7 {
        float: left;
        position: absolute;
        z-index: 999;
        width: 50px;
        height: 50px;
        border-radius: 30px;
        background-color: #fefefe;
    }
    .foam-1 {
        top: -30px;
        left: -10px;
    }
    .foam-2 {
        top: -35px;
        left: 20px;
    }
    .foam-3 {
        top: -25px;
        left: 50px;
    }
    .foam-4 {
        top: -35px;
        left: 80px;
    }
    .foam-5 {
        top: -30px;
        left: 110px;
    }
    .foam-6 {
        top: -20px;
        left: 140px;
    }
    .foam-7 {
        top: -30px;
        left: 160px;
    }
    
    /* Drunk Text */
    
    @-moz-keyframes drunk {
        0% {
            -moz-transform: rotate(0);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        20%, 60% {
            -moz-transform: rotate(80deg);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        40% {
            -moz-transform: rotate(60deg);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        80% {
            -moz-transform: rotate(60deg) translateY(0); opacity: 1;
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        100% {
            -moz-transform: translateY(700px);
            opacity: 0;
        }
    }
    
    @keyframes drunk {
        0% {
            transform: rotate(0);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        20%, 60% {
            transform: rotate(80deg);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        40% {
            transform: rotate(60deg);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        80% {
            transform: rotate(60deg) translateY(0);
            opacity: 1; transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        100% {
            tran</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div id=""container""&gt;
    &lt;div class=""pour""&gt;&lt;/div&gt;
    &lt;div id=""beaker""&gt;
        &lt;div class=""beer-foam""&gt;
            &lt;div class=""foam-1""&gt;&lt;/div&gt;
            &lt;div class=""foam-2""&gt;&lt;/div&gt;
            &lt;div class=""foam-3""&gt;&lt;/div&gt;
            &lt;div class=""foam-4""&gt;&lt;/div&gt;
            &lt;div class=""foam-5""&gt;&lt;/div&gt;
            &lt;div class=""foam-6""&gt;&lt;/div&gt;
            &lt;div class=""foam-7""&gt;&lt;/div&gt;
        &lt;/div&gt;
        
        &lt;div id=""liquid""&gt;
            
            &lt;div class=""bubble bubble1""&gt;&lt;/div&gt;
            &lt;div class=""bubble bubble2""&gt;&lt;/div&gt;
            &lt;div class=""bubble bubble3""&gt;&lt;/div&gt;
            &lt;div class=""bubble bubble4""&gt;&lt;/div&gt;
            &lt;div class=""bubble bubble5""&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 class=""animated drunk""&gt;Please Wait! While you are entered in Game&lt;/h2&gt;</code></pre>
</div>
</div>
</p>
<h1>Pausing the bubbles</h1>
<p>To pause the bubbles, you can use the <code>animation-play-state: paused;</code> property. This particular way would pause your bubbles after 5.7 seconds:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).ready(function() {
        /*Look here*/

        setTimeout( () =&gt; {
            $('.bubble').css(""animation-play-state"", ""paused"");
        }, 5700)

        $('.pour')
            .delay(2000)
            .animate({
                height: '360px'
            }, 1500)
            .delay(1600)
            .slideUp(500);

        $('#liquid')
            .delay(3400)
            .animate({
                height: '170px'
            }, 2500);

        $('.beer-foam')
            .delay(3400)
            .animate({
                bottom: '200px'
            }, 2500);
       
    });</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>body { background-color: #0065bd }
    
    h2 {
        margin: 0 auto;
        width: 400px;
        font-size: 36px;
        text-align: center;
        font-family: 'Lato', Arial, sans-serif;
        color: whiteSmoke;
    }
    
    #container {
        height: 370px;
        margin: 0 auto;
        overflow: hidden;
        position: relative;
        top: -20px;
        width: 248px;
    }
    
    #container div { position: absolute; }
    
    .pour {
        position: absolute;
        left: 45%;
        width: 20px;
        height: 0px;
        background-color: #0065bd;
        border-radius: 10px
    }
    
    #beaker {
        border: 10px solid #FFF;
        border-top: 0;
        border-radius: 0 0 30px 30px;
        height: 200px;
        left: 14px;
        bottom: 0;
        width: 200px;
    }
    
    #beaker:before,
    #beaker:after {
        border: 00px solid #FFF;
        border-bottom: 0;
        border-radius: 30px 30px 0 0;
        content: '';
        height: 30px;
        position: absolute;
        top: -40px;
        width: 30px;
    }
    
    #beaker:before { left: -50px; }
    #beaker:after { right: -50px; }
    
    #liquid {
        background-color: #0065bd;
        border: 10px solid #0065bd;
        border-radius: 0 0 20px 20px;
        bottom: 0;
        height: 0px;
        overflow: hidden;
        width: 180px;
    }
    
    #liquid:after {
        background-color: rgba(255, 255, 255, 0.25);
        bottom: -10px;
        content: '';
        height: 200px;
        left: -40px;
        position: absolute;
        transform: rotate(30deg);
        -webkit-transform: rotate(15deg);
        width: 110px;
    }
    
    #liquid .bubble {
        -webkit-animation-name: bubble;
        -webkit-animation-iteration-count: infinite;
        -webkit-animation-timing-function: linear;
        background-color: rgba(255, 255, 255, 0.2);
        bottom: 0;
        border-radius: 10px;
        height: 20px;
        width: 20px;
    }
    
    @-webkit-keyframes bubble {
        0% { bottom: 0; }
        
        50% {
            background-color: rgba(255, 255, 255, 0.2);
            bottom: 80px;
        }
        
        100% {
            background-color: rgba(255, 255, 255, 0);
            bottom: 160px;
        }
    }
    
    .bubble1 {
        left: 10px;
        -webkit-animation-delay: 1000ms;
        -webkit-animation-duration: 1000ms;
    }
    
    .bubble2 {
        left: 50px;
        -webkit-animation-delay: 700ms;
        -webkit-animation-duration: 1100ms;
    }
    
    .bubble3 {
        left: 100px;
        -webkit-animation-delay: 1200ms;
        -webkit-animation-duration: 1300ms;
    }
    
    .bubble4 {
        left: 130px;
        -webkit-animation-delay: 1100ms;
        -webkit-animation-duration: 700ms;
    }
    
    .bubble5 {
        left: 170px;
        -webkit-animation-delay: 1300ms;
        -webkit-animation-duration: 800ms;
    }
    
    /* Foam */
    
    .beer-foam {
        position: absolute;
        bottom: 10px;
    }
    
    .foam-1, .foam-2, .foam-3, .foam-4,
    .foam-5, .foam-6, .foam-7 {
        float: left;
        position: absolute;
        z-index: 999;
        width: 50px;
        height: 50px;
        border-radius: 30px;
        background-color: #fefefe;
    }
    .foam-1 {
        top: -30px;
        left: -10px;
    }
    .foam-2 {
        top: -35px;
        left: 20px;
    }
    .foam-3 {
        top: -25px;
        left: 50px;
    }
    .foam-4 {
        top: -35px;
        left: 80px;
    }
    .foam-5 {
        top: -30px;
        left: 110px;
    }
    .foam-6 {
        top: -20px;
        left: 140px;
    }
    .foam-7 {
        top: -30px;
        left: 160px;
    }
    
    /* Drunk Text */
    
    @-moz-keyframes drunk {
        0% {
            -moz-transform: rotate(0);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        20%, 60% {
            -moz-transform: rotate(80deg);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        40% {
            -moz-transform: rotate(60deg);
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        80% {
            -moz-transform: rotate(60deg) translateY(0); opacity: 1;
            -moz-transform-origin: top left;
            -moz-animation-timing-function: ease-in-out;
        }
        
        100% {
            -moz-transform: translateY(700px);
            opacity: 0;
        }
    }
    
    @keyframes drunk {
        0% {
            transform: rotate(0);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        20%, 60% {
            transform: rotate(80deg);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        40% {
            transform: rotate(60deg);
            transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        
        80% {
            transform: rotate(60deg) translateY(0);
            opacity: 1; transform-origin: top left;
            animation-timing-function: ease-in-out;
        }
        100% {
            tran</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div id=""container""&gt;
    &lt;div class=""pour""&gt;&lt;/div&gt;
    &lt;div id=""beaker""&gt;
        &lt;div class=""beer-foam""&gt;
            &lt;div class=""foam-1""&gt;&lt;/div&gt;
            &lt;div class=""foam-2""&gt;&lt;/div&gt;
            &lt;div class=""foam-3""&gt;&lt;/div&gt;
            &lt;div class=""foam-4""&gt;&lt;/div&gt;
            &lt;div class=""foam-5""&gt;&lt;/div&gt;
            &lt;div class=""foam-6""&gt;&lt;/div&gt;
            &lt;div class=""foam-7""&gt;&lt;/div&gt;
        &lt;/div&gt;
        
        &lt;div id=""liquid""&gt;
            
            &lt;div class=""bubble bubble1""&gt;&lt;/div&gt;
            &lt;div class=""bubble bubble2""&gt;&lt;/div&gt;
            &lt;div class=""bubble bubble3""&gt;&lt;/div&gt;
            &lt;div class=""bubble bubble4""&gt;&lt;/div&gt;
            &lt;div class=""bubble bubble5""&gt;&lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;h2 class=""animated drunk""&gt;Please Wait! While you are entered in Game&lt;/h2&gt;</code></pre>
</div>
</div>
</p>
<p>If you setthe timeout to <code>5700</code>, you'll end up with something like this, which is pretty close to your image.</p>
<p><a href=""https://i.stack.imgur.com/ESwcs.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/ESwcs.png"" alt=""Sto"" /></a></p>
<h1>Stopping the bubbles (previous solution)</h1>
<p>You could also fiddle with the iteration count and visibility of your bubbles, to kill them after some time, maybe like so:</p>
<pre><code> #liquid .bubble {
        visibility: hidden;  /*Look here*/
        -webkit-animation-name: bubble;
        -webkit-animation-iteration-count: 3;   /*Look here*/
        -webkit-animation-timing-function: linear;
        background-color: rgba(255, 255, 255, 0.2);
        bottom: 0;
        border-radius: 10px;
        height: 20px;
        width: 20px;
    }
    
    @-webkit-keyframes bubble {
        0% { visibility: visible;  /*Look here*/
             bottom: 0; }
        
        50% {
            background-color: rgba(255, 255, 255, 0.2);
            bottom: 80px;
        }
        
        100% {
            background-color: rgba(255, 255, 255, 0);
            bottom: 160px;
        }
    }
</code></pre>
<p>The numbers depend on the exact effect you'll want, but this would be the way I'd do it. This particular set would send some bubbles and then end the bubbling.</p>
",1
65101663,"<p>You need to set the value after your notification of the error to null.</p>
<p>Try this.</p>
<pre><code>function validateSortCode(executionContext) {
    
    var formContext = executionContext.getFormContext();
    
    var sortcode = formContext.getAttribute(&quot;sortcodee&quot;).getValue();
    
    var errorId = &quot;error&quot;;
    
    if(sortcode != &quot;&quot;)
    
    {
        var sortcoderegex = /^(\d){2}-(\d){2}-(\d){2}$/;
        if(sortcoderegex.test(sortcode) == false)
        {
            formContext.ui.setFormNotification(&quot;Please ensure correct format of Sort Code i.e. 12-34-56&quot;, &quot;ERROR&quot;, errorId);

formContext.getAttribute(&quot;sortcodee&quot;).setValue(&quot;&quot;);

        }
        else
        {

formContext.ui.clearFormNotification(errorId);

        }
   }
}
</code></pre>
<p>The above should do the trick</p>
",1
65124911,"<p>It should be <code>this.CapitalizeFirstLetter</code>:</p>
<pre class=""lang-js prettyprint-override""><code>db.collection(&quot;pokemon&quot;).add({
   number: i,
   name: this.CapitalizeFirstLetter(response.data.name),
   weight: response.data.weight / 10,
   height: response.data.height / 10,
   types: types,
   image:
   response.data.sprites.other[&quot;official-artwork&quot;].front_default,
});
</code></pre>
",1
65094672,"<p>It should be like this:</p>
<pre class=""lang-js prettyprint-override""><code>function rollDieAsync() {
  return getPseudoRandomInt()
    .then(random =&gt; {
      var dieVal = (random % 6) + 1
      var reroll = random &gt; 251
      if(reroll){
        return rollDieAsync()
      }else{
        return dieVal
      }
   })
}
</code></pre>
",1
65164272,"<p>Use <code>Promise.race()</code>, which takes an array of promises and returns a promise that resolves or rejects with whichever one goes off first:</p>
<pre><code>async function run() {
    await Promise.race([clickCheckmark(), respond()]);
    send('hi');
}
</code></pre>
",1
65133483,"<p>You can use a regular expression with a negative lookahead.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let str = 'hello{world}';
let res = str.split(/(?![^{]*\})/);
console.log(res);</code></pre>
</div>
</div>
</p>
",1
65155730,"<p>As soon as you do this:</p>
<pre><code>const currencies = [euro, yen];
</code></pre>
<p>there is <strong>no</strong> link from <code>currencies[0]</code> back to <code>euro</code> or from <code>currencies[1]</code> back to <code>yen</code>. <code>[euro, yen]</code> takes the <strong>value</strong> of the <code>euro</code> and <code>yen</code> variables and puts those <strong>values</strong> in the array.</p>
<p>Trying for minimal changes to what you have, you could use an object rather than an array:</p>
<pre><code>for (let [currencyName, currencyValue] of Object.entries({euro, yen})) {    
    const pair = await fetchPairData(currencyValue, dollar);
    const route = new Route([pair], dollar);
    console.log(currencyName, currencyValue + route.midPrice.toSignificant(6));
}
</code></pre>
<p>How that works:</p>
<ul>
<li><code>{euro, yen}</code> is an object literal using shorthand property notation; the longhand would be <code>{euro: euro, yen: yen}</code>. So you end up with an object with properties named <code>&quot;euro&quot;</code> and <code>&quot;yen&quot;</code> with the values from the <code>euro</code> and <code>yen</code> variables.</li>
<li><code>Object.entries</code> creates an array of <code>[name, value]</code> pairs from an object's own enumerable properties. The array ends up being :
<pre><code>[ [&quot;euro&quot;, euroValue], [&quot;yen&quot;, yenValue] ]
</code></pre>
(You could, of course, just do that directly rather than via <code>Object.entries({euro, yen})</code>.)</li>
<li><code>for-of</code> loops through the entries in that array.</li>
<li>I'm using destructuring assignment in the <code>for-of</code> to grab the name and value into separate constants.</li>
</ul>
<p><strong>But</strong>, ideally you'd change your starting point so you had pairs of names (of the currency) and values (the currency value) to start with, rather than creating them based on variable names.</p>
",1
65114495,"<p>ScrollBehavior is <a href=""https://caniuse.com/?search=scroll-behavior"" rel=""nofollow noreferrer"">not supported</a> by IE</p>
<p>Try this</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function scrollIntoWarranty() {
  var el = document.querySelector(""#tr_tab_2"");
  if ('scrollBehavior' in document.documentElement.style) { // behavior is not supported by IE
    var offset = 50;
    window.scroll({ top: (el.offsetTop - offset), left: 0, behavior: 'smooth' });
  } else {
    el.scrollIntoView();
  }
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;a href=""#"" onclick=""scrollIntoWarranty(); return false;""&gt;
  Go to warranty
&lt;/a&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;div id=""tr_tab_2""&gt;Warranty&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65125518,"<p>Use</p>
<pre><code>var questions = Array.from(document.getElementsByClassName(&quot;quiz&quot;)).reduce((carry, item) =&gt; {
  carry.push(item.textContent.trim())
  return carry;
}, []);
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var question = 0;

//var  questions = [
//    ""The color of the sky is...?"",
//    ""Paper comes from...?"",
//    ""How many hours in a day?""
//  ];
var questions = Array.from(document.getElementsByClassName(""quiz"")).reduce((carry, item) =&gt; {
  carry.push(item.textContent.trim())
  return carry;
}, []);

var anim;
var targets;

function prepQuestion() {
  $(""#questions"").text(questions[question]);

  var textWrappers = document.querySelectorAll('#questions');
  textWrappers.forEach(textWrapper =&gt; {
    textWrapper.innerHTML = textWrapper.textContent.replace(/(\S*)/g, m =&gt; {
      return `&lt;span class=""word""&gt;` +
        m.replace(/(-|)?\S(-|@)?/g, ""&lt;span class='letter'&gt;$&amp;&lt;/span&gt;"") +
        `&lt;/span&gt;`;
    });
  });

  targets = Array.from(document.querySelectorAll('#questions .letter'));

  anim = anime.timeline()
    .add({
      targets: targets,
      scale: [3, 1],
      scaleY: [1.5, 1],
      opacity: [0, 1],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 400,
      delay: (el, i) =&gt; 60 * i
    });
}

// init
prepQuestion();

function next() {
  anim = anime.timeline()
    .add({
      targets: targets.reverse(),
      scale: [1, 3],
      scaleY: [1, 1.5],
      opacity: [1, 0],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 100,
      delay: (el, i) =&gt; 30 * i
    });

  anim.complete = () =&gt; {
    if (question == questions.length - 1) {
      question = 0;
    } // reset question
    else {
      question++;
    }

    prepQuestion();
  };
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>#questions {
  font-weight: 900;
  font-size: 2.5em;
  font-family: rr;
}

#questions .letter {
  display: inline-block;
  line-height: 1em;
}

.word {
  white-space: nowrap;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.0/anime.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;

&lt;div class=""quiz""&gt;The color of the sky is...?&lt;/div&gt;
&lt;div class=""quiz""&gt;Paper comes from...?&lt;/div&gt;
&lt;div class=""quiz""&gt;How many hours in a day?&lt;/div&gt;
&lt;div class=""quiz""&gt;A Giraffe is a fish?&lt;/div&gt;

&lt;div id=""questions""&gt;&lt;/div&gt;
&lt;br&gt;
&lt;Button id=""rc"" onclick=""next()""&gt;Next&lt;/Button&gt;</code></pre>
</div>
</div>
</p>
",1
65128351,"<p>By default, when used with Webpack, the runtime only build of Vue is used. If you want to have in-DOM template (your case where Vue template is included directly inside HTML file) or string templates (<a href=""https://vuejs.org/v2/api/#template"" rel=""nofollow noreferrer"">template</a> component option), those are compiled at runtime (when the page is loaded into browser) and that requires Vue build which includes compiler.</p>
<p>Take a look to the docs on how to configure Webpack to use compiler build of Vue - <a href=""https://vuejs.org/v2/guide/installation.html#Runtime-Compiler-vs-Runtime-only"" rel=""nofollow noreferrer"">Runtime + Compiler vs. Runtime-only</a></p>
",1
65110118,"<p>So once the board is solved and if this.solved(board) returns true, you are returning the solved board. But this is only at the last level of recursion chain. You need to check at every level of recursion if this particular move reaches a solved board state. Hence, validate the result of the next level and if it returns a solved board, return the solved board from the current level too. I have made appropriate changes in the solve function-</p>
<pre><code>solve(puzzleString) {
    var board = this.boardParser(puzzleString)
    var emptySpot = this.getDot(board);
    var row = emptySpot[0];
    var column = emptySpot[1];

    // full board condition
    if (this.solved(board)) {
      return puzzleString;
    }

    for (var i = 1; i &lt;= 9; i++) {
      if (this.checkvalue(board, row, column, i)) {
        board[row][column] = i;
        var boardString = this.stringifyBoard(board);
        var result = this.solve(boardString);
        if(result !== false){
            return result;
        }
      }
    }

    // if board is unsolvable return false
    return false;
  }
</code></pre>
",1
65097941,"<p>Give <code>useEffect</code> dependency on which it will trigger when the button will be clicked.</p>
<p>Add new state which will toggle when the button will be clicked:</p>
<pre><code>const App: () =&gt; React$Node = () =&gt; {
  const [isLoading, setLoading] = useState(true);
  const [data, setData] = useState([]);
  const [refetch, setRefetch] = useState(false); // &lt;= this
</code></pre>
<p>Now set <code>refetch</code> as a dependency to <code>useEffect</code>:</p>
<pre><code>useEffect(() =&gt; {
    fetch(&quot;https://exampleapi.dev/&quot;)
      .then((response) =&gt; response.json())
      .then((json) =&gt; setData(json))
      .catch((error) =&gt; console.error(error))
      .finally(() =&gt; setLoading(false));
  }, [refetch]);
</code></pre>
<p>and in the end, just toggle the state of <code>refetch</code>:</p>
<pre><code>&lt;Button
          title=&quot; Refresh&quot;
          onPress={() =&gt; setRefetch(!refetch)}
          style={styles.buttonShare}
          color=&quot;#66BB6A&quot;
        /&gt;
</code></pre>
<p>Final changes should look like this:</p>
<pre><code>import React, { useEffect, useState } from &quot;react&quot;;
import {
  ActivityIndicator,
  FlatList,
  StyleSheet,
  View,
  Text,
  Button,
} from &quot;react-native&quot;;

import { Colors } from &quot;react-native/Libraries/NewAppScreen&quot;;

const App: () =&gt; React$Node = () =&gt; {
  const [isLoading, setLoading] = useState(true);
  const [data, setData] = useState([]);
  const [refetch, setRefetch] = useState(false);

  useEffect(() =&gt; {
    fetch(&quot;https://exampleapi.dev/&quot;)
      .then((response) =&gt; response.json())
      .then((json) =&gt; setData(json))
      .catch((error) =&gt; console.error(error))
      .finally(() =&gt; setLoading(false));
  }, [refetch]);

  return (
    &lt;&gt;
      &lt;View style={styles.container}&gt;
        {isLoading ? (
          &lt;ActivityIndicator /&gt;
        ) : (
          &lt;FlatList
            data={data}
            keyExtractor={({ id }, index) =&gt; id}
            renderItem={({ item }) =&gt; (
              &lt;Text style={styles.content}&gt;{item.content}&lt;/Text&gt;
            )}
          /&gt;
        )}
      &lt;/View&gt;
      &lt;View style={styles.buttonBottom}&gt;
        &lt;Button
          title=&quot; Refresh&quot;
          onPress={() =&gt; setRefetch(!refetch)}
          style={styles.buttonShare}
          color=&quot;#66BB6A&quot;
        /&gt;
      &lt;/View&gt;
    &lt;/&gt;
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: &quot;space-between&quot;,
    backgroundColor: &quot;#1b262c&quot;,
    padding: 30,
    flexDirection: &quot;row&quot;,
    alignItems: &quot;center&quot;,
  },
  FlatList: {
    backgroundColor: Colors.aquamarine,
  },
  content: {
    fontSize: 22,
    textAlign: &quot;left&quot;,
    color: &quot;#bbe1fa&quot;,
  },
  buttonBottom: {
    fontSize: 22,
    padding: 10,
    backgroundColor: &quot;#1b262c&quot;,
  },
});

export default App;
</code></pre>
<p>If you found this answer helpful then don't forget to upvote and accept :)</p>
",1
65127483,"<p>You can move those input out from the elements that will render your DOC document. In order to print the values of those input you can create different element and put it there:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function exportHTML(){    
    // Add inputs values to the document before it rendered:
    var inputs = document.querySelectorAll('input');
    for (var i=0; i &lt; inputs.length; i++) {
        let ps = document.createElement('p');
        document.getElementById(""source-html"").appendChild(ps)
        ps.textContent = inputs[i].value;
    }

    // continue with your code
   var header = ""&lt;html xmlns:o='urn:schemas-microsoft-com:office:office' ""+
        ""xmlns:w='urn:schemas-microsoft-com:office:word' ""+
        ""xmlns='http://www.w3.org/TR/REC-html40'&gt;""+
        ""&lt;head&gt;&lt;meta charset='utf-8'&gt;&lt;title&gt;Export HTML to Word Document with JavaScript&lt;/title&gt;&lt;/head&gt;&lt;body&gt;"";
   var footer = ""&lt;/body&gt;&lt;/html&gt;"";
   var sourceHTML = header+document.getElementById(""source-html"").innerHTML+footer;
   
   var source = 'data:application/vnd.ms-word;charset=utf-8,' + encodeURIComponent(sourceHTML);
   var fileDownload = document.createElement(""a"");
   document.body.appendChild(fileDownload);
   fileDownload.href = source;
   fileDownload.download = 'document.doc';
   fileDownload.click();
   document.body.removeChild(fileDownload);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;body&gt;
&lt;div class=""source-html-outer""&gt;
    &lt;div id=""source-html""&gt;
        &lt;h1&gt;
            &lt;center&gt;Artificial Intelligence&lt;/center&gt;
        &lt;/h1&gt;
        &lt;h2&gt;Overview&lt;/h2&gt;
        &lt;p&gt;
            Artificial Intelligence(AI) is an emerging technology
            demonstrating machine intelligence. The sub studies like &lt;u&gt;&lt;i&gt;Neural
                    Networks&lt;/i&gt;, &lt;i&gt;Robatics&lt;/i&gt; or &lt;i&gt;Machine Learning&lt;/i&gt;&lt;/u&gt;
            are the parts of AI. This technology is expected to be a
            prime part of the real world in all levels.
        &lt;/p&gt;        
        
    &lt;/div&gt;
    &lt;div class=""content-footer""&gt;
        &lt;!-- move this form the div you convert to DOC--&gt;
        &lt;input type=""text"" value=""123456"" /&gt;
        &lt;input type=""text"" value=""123456"" style=""margin-left: 150px;""/&gt;
        &lt;button id=""btn-export"" onclick=""exportHTML();""&gt;Export to word
            doc&lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p><strong>Note: This snippet doesn't work on this site. Copy and paste it to your machine.</strong></p>
",1
65150242,"<p>In response to your last comment: You could try to parse the extracted string into an actual object</p>
<pre><code>var data = JSON.parse(e.data.match(/{[^}]*}/)[0]);
</code></pre>
<p>alternatively (data is not valid JSON)</p>
<pre><code>var data = new Function(&quot;&quot;, &quot;return &quot; + e.data.match(/{[^}]*}/)[0])()
</code></pre>
<p>then you can access the individual properties like this</p>
<pre><code>data.physicalPath
</code></pre>
",1
65135117,"<p>you can use <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties"" rel=""nofollow noreferrer"">css variables</a> for this case.</p>
<p>define two variable in root of page and use these in keyframe :</p>
<pre><code>:root {
    --my-start-width: 0;
    --my-end-width: 280px;
}

...

@keyframes progressBar {
    0% { width: var(--my-start-width); }
    100% { width: var(--my-end-width); }
}

</code></pre>
<p>now you can get and set this property in js with these functions :</p>
<pre><code>//set property: 

document.documentElement.style
    .setProperty('--my-variable-name', '100px');

//get property

getComputedStyle(document.documentElement)
    .getPropertyValue('--my-variable-name'); // returns value

</code></pre>
",1
65084542,"<p>You'll need a table within a table</p>
<p>Something like this</p>
<pre><code>&lt;table id=&quot;showdata&quot;&gt;
    &lt;tr&gt;
        &lt;th&gt;Room1&lt;/th&gt;
        &lt;th&gt;Room2&lt;/th&gt;
        &lt;th&gt;Room3&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
        &lt;td v-for=&quot;(x, key) in ['Room1', 'Room2', 'Room3']&quot; :key=&quot;key&quot; &gt;
            &lt;table&gt;
                &lt;tr v-for=&quot;(detail, key) in roomDetail.filter(({ room }) =&gt; room === x)&quot; :key=&quot;key&quot; &gt;
                    &lt;td&gt;{{ detail.time }}&lt;/td&gt;
                    &lt;td&gt;{{ detail.name }}&lt;/td&gt;
                    &lt;td&gt;{{ detail.status }}&lt;/td&gt;
                    &lt;td&gt;{{ detail.room }}&lt;/td&gt;
                &lt;/tr&gt;
            &lt;/table&gt;
        &lt;/td&gt;
    &lt;/tr&gt;
&lt;/table&gt;
</code></pre>
<p>You'll probably also want the following CSS</p>
<pre><code>td {
    vertical-align: top;
}
</code></pre>
",1
65111073,"<p>If you're using Firebase Authentication to sign the user in, then the email address that it uses has nothing to do with the value you store in the database.</p>
<p>To update the email address that Firebase uses to sign in, you'll <strong>also</strong> want to call <code>firebase.auth().currentUser.updateEmail(this.email)</code> to <a href=""https://firebase.google.com/docs/auth/web/manage-users#set_a_users_email_address"" rel=""nofollow noreferrer"">update the user's email address</a>.</p>
",1
65155390,"<p>First create js variable from php variable</p>
<pre><code>let unique = &quot;&lt;?php echo $settings['show_post_per_page']; ?&gt;&quot;;
unique = unique.toString();
</code></pre>
<p>then concatenate with class name</p>
<pre><code>$('.vertical-center-4' + unique).slick
</code></pre>
",1
65084546,"<pre><code>   const [captures, setCaptures] = useState([]);
   const [flashMode, setFlashMode] = useState(Camera.Constants.FlashMode.off);
   const [capturing, setCapturing] = useState(false);
   const [cameraType, setCameraType] = useState(Camera.Constants.Type.back);

    const setFlashModehandler = (flashMode) =&gt; setFlashMode(flashMode);
    const setCameraTypeHandler = (cameraType) =&gt; setCameraType(cameraType);
    const handleCaptureInHandler = () =&gt; setCapturing(true);

    const handleCaptureOut = () =&gt; {
        if (capturing)
            camera.stopRecording();
    };

    const handleShortCapture = async () =&gt; {
        const photoData = await camera.takePictureAsync();
        setCapturing(false);
        setCaptures([...captures, photoData]);
    };
    
    const handleLongCapture = async () =&gt; {
        setTimeout(() =&gt; capturing &amp;&amp; camera.stopRecording(), 20*1000);
        const videoData = await camera.recordAsync();
        setCapturing(false);
        setCaptures([...captures, videoData]);
</code></pre>
",1
65145418,"<p>Change your <code>data</code> to:</p>
<pre class=""lang-js prettyprint-override""><code>data() {
  return {
    search: &quot;&quot;,
    offer: null
  };
},
</code></pre>
<p>Use the following in your template:</p>
<pre><code>p {{ offer.jobDescription }}
</code></pre>
<p>And change the <code>click</code> handler to:</p>
<pre class=""lang-html prettyprint-override""><code>@click=&quot;openModal(offer)&quot;
</code></pre>
<p>This suggestion from comments should work once <code>offer</code> is defined first in data and passed from the click.  You do set <code>offer</code> in the <code>openModal</code> action.</p>
<p>Your modal should not be inside <code>v-for</code>.  Take it out and hardcode an id:</p>
<pre class=""lang-html prettyprint-override""><code>b-modal(hide-footer=&quot;&quot;, id=&quot;offerModal&quot;)
</code></pre>
<p>Open it:</p>
<pre class=""lang-js prettyprint-override""><code>this.$bvModal.show('offerModal');
</code></pre>
",1
65128841,"<p>Change your funtion to this.</p>
<pre><code>export const getUserByReferrerId = async id =&gt; {
  return await firestore
  .collection(FIRESTORE_COLLECTIONS.USERS)
  .where('grsfId', '==', id)  
  .get();
}
</code></pre>
<p>Try getting data this way.</p>
<pre><code> testCreditFunction = (id) =&gt; {

 let querySnapshot = '';
        
    (async () =&gt; {
      querySnapshot = await getUserByReferrerId(id);
      const snapshot = querySnapshot.docs[0];
      console.log (&quot;snapshot&quot;, snapshot.id);
  })();
</code></pre>
",1
65144294,"<p>While @Terry has the simple solution of wrapping just everything in the promise constructor, you get the real power of promises if you promisify only the <code>requestAnimationFrame</code> call itself:</p>
<pre><code>async function opacityToggle(layerName, opacity) { /*
^^^^^ */
    if (!layerName) return;

    var s = 0;
    while (s &lt; 1) {
//  ^^^^^
        s += 0.01
        s = +s.toFixed(2)
        console.log('s', layerName, s, opacity);
        map.setPaintProperty(layerName, 'fill-opacity', s);

        await new Promise(resolve =&gt; {
//      ^^^^^
            requestAnimationFrame(resolve);
//          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
        });
    }
}
</code></pre>
<p>If you can't use <code>async</code>/<code>await</code> and/or want to do it with the recursive approach, it would be</p>
<pre><code>function opacityToggle(layerName, opacity) {
    if (!layerName) return Promise.resolve();

    var s = 0;
    return animate();

    function animate() {
        if (s &lt; 1) {
            s += 0.01
            s = +s.toFixed(2)
            console.log('s', layerName, s, opacity);
            map.setPaintProperty(layerName, 'fill-opacity', s);
            return new Promise(resolve =&gt; {
//          ^^^^^^
                requestAnimationFrame(resolve);
            }).then(animate);
//            ^^^^^^^^^^^^^^
        } else {
            return Promise.resolve();
        }
    }
}
</code></pre>
",1
65093565,"<p>You don't</p>
<p>MQTT is not a Message Queuing system, it is a Pub/Sub system.
MQTT will only queue messages for existing clients that are currently offline.
There is NO way for a new client to see previous messages published to a topic.</p>
<p>The only exception is if the retained bit is set when the message is published and the broker will only retain the last message published to that topic with the retained bit set. Any new message with that flag set will replace the previous message.</p>
",1
65091665,"<p>Unfortunately, your <code>Object.assign(this, props);</code> is about as automatic as it gets in JavaScript (and even in TypeScript; for now, you can't use destructuring with automatic initialization).</p>
<p>Mostly you don't want to do that with props anyway, see under the line below, but sticking to the question asked:</p>
<p>You could use an array with the names of the props, probably with a reusable utility function, for instance:</p>
<pre><code>constructor(props) {
    super(props);
    grab([&quot;first&quot;, &quot;second&quot;], this, props);
}
</code></pre>
<p>where <code>grab</code> is</p>
<pre><code>function grab(names, target, source) {
    for (const name of names) {
        target[name] = source[name];
    }
    return target;
}
</code></pre>
<p>But mixing string literals with property literals like that can give you a bit of hassle when using refactoring tools that might miss them.</p>
<hr />
<p><strong>However</strong>, assigning props to instance properties is fairly unusual vs. simply using them from <code>this.props</code> (which is set up by <code>React.Component</code>'s constructor), perhaps via destructuring in the method where you want to use them:</p>
<pre><code>render() {
    const {first, second} = this.props;
    return /*... JSX using `first` and `second` ... */;
}
</code></pre>
",1
65095470,"<p>You can add a watcher on the inputData.  Post that there are couple of ways that discount.name can be updated.</p>
<ol>
<li>Either emit the inputData value from the watcher and add a handler in parent component</li>
</ol>
<p>Or</p>
<ol start=""2"">
<li>Not sure what is your usecase here but instead of passing discount.name, you can pass the discount object and then modify the name property of the object - there won't be any warning since you are modifying a property of an object.</li>
</ol>
",1
65117310,"<blockquote>
<p>Sometimes websites won't let you load images without proper a referrer.</p>
</blockquote>
<p>Yes. Plenty of websites do not want to pay to store images and transfer them over the network so that freeloaders can display them on their websites without shouldering the cost.</p>
<blockquote>
<p>In a similar question I have found this answer, that suggests doing something like this</p>
</blockquote>
<p>That fails for two reasons.</p>
<ol>
<li>It is a <a href=""https://developer.mozilla.org/en-US/docs/Glossary/Forbidden_header_name"" rel=""nofollow noreferrer"">forbidden header</a>. Browsers are designed to prevent your JavaScript from lying about where requests are being triggered from.</li>
<li>Most sites hosting images don't grant permission, via CORS, to third-parties to read them with JS. They are even more unlikely to if they do referer checking to stop freeloading!</li>
</ol>
<hr />
<p>If a website doesn't want you displaying images they host, you need to respect that.</p>
<p>Pay for your own image hosting instead.</p>
<p>Don't copy the images from the third-party to your own site unless you are sure they aren't protected by copyright (or you have permission).</p>
",1
65108189,"<p>The code below will disable cell 2 and delete its value if cell 1 has a value and vice versa. In other words: you can't have values in both column 1 and 2.</p>
<pre><code>hot2.addHook( 'afterChange', function( changes, src ) {
  [
    [row, prop, oldVal, newVal] 
  ] = changes;
  if ( prop == 0 &amp;&amp; hot2.getDataAtRowProp( row, prop + 1 ) &amp;&amp; newVal?.length &gt; 0 ) {
    // delete value of cell 2 if cell 1 has a value
    hot2.setDataAtCell( row, prop + 1, '' );
  } else if ( prop == 1 &amp;&amp; hot.getDataAtRowProp( row, prop - 1 ) &amp;&amp; newVal?.length &gt; 0 ) {
    // delete value of cell 1 if cell 2 has a value
    hot2.setDataAtCell( row, prop -1, '' );
  }
})


hot2.updateSettings( {
   cells: function ( row, col, prop ) {
     cellProperties = {};

     if ( prop == 1 &amp;&amp; hot2.getDataAtRowProp( row, prop - 1 ) ) {
       // this disables cell 2 if cell 1 has a value
       cellProperties.readOnly = true;
     } else if ( prop == 0 &amp;&amp; hot2.getDataAtRowProp( row, prop + 1 ) ) {
       // this disables cell 1 if cell 2 has a value
       cellProperties.readOnly = true;
     } else {
       cellProperties.readOnly = false;
     }
     return cellProperties;
   }
})
</code></pre>
",1
65109524,"<p>In dc.js, the axes are straight from <a href=""https://github.com/d3/d3-axis/tree/v2.0.0"" rel=""nofollow noreferrer"">d3-axis</a>.</p>
<p>Access them using <code>chart.xAxis()</code> and <code>chart.yAxis()</code>, and to reduce confusion, <a href=""https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis"" rel=""nofollow noreferrer"">do this in a separate statement</a> from the rest of your chart initialization.</p>
<p>You can use <a href=""https://github.com/d3/d3-axis/tree/v2.0.0#axis_tickFormat"" rel=""nofollow noreferrer"">axis.tickFormat</a> to control how the tick text is formatted.</p>
<p>You can use <a href=""https://github.com/d3/d3-format/blob/v2.0.0/README.md#locale_format"" rel=""nofollow noreferrer"">d3.format</a> to do automatic formatting. It seems like exponent or SI notation might suit what you're doing, although it's not exactly the same as having the exponent in a separate text element like in your screenshot.</p>
<p>Putting it together, this is pretty close</p>
<pre><code>chart.yAxis().tickFormat(d3.format('.1e'))
</code></pre>
<p>The tick formatting question comes up a lot. I wonder where we could put this information so that people don't have to ask.</p>
",1
65129430,"<p>To add some information about rags2riches comment, the function associated to res.on('url', function) will be called for every chunk of data received and d will basically contain the data of this chunk.
If you want to do something when you have received everything, you should use res.on('close', function) or res.on('end', function).
An example here: <a href=""https://blog.bearer.sh/node-http-request/"" rel=""nofollow noreferrer"">https://blog.bearer.sh/node-http-request/</a></p>
",1
65161952,"<p>It sounds like you're looking for <a href=""https://github.com/processing/p5.js/wiki/Global-and-instance-mode"" rel=""nofollow noreferrer"">instance mode</a>.</p>
<p>Instance mode lets you do exactly what you're describing: you can create multiple sketches and add them all to the page.</p>
<p>You can also use the <code>parent()</code> function to put your canvas in a specific div. Shameless self-promotion: <a href=""https://happycoding.io/tutorials/p5js/web-dev"" rel=""nofollow noreferrer"">here</a> is a tutorial that includes placing a canvas in a specific div.</p>
<p>I would start with getting those pieces working before you worry about the scroll. But once you're ready, I would look into setting up a scroll listener in JavaScript and triggering your instance mode sketches at certain values.</p>
<p>Good luck!</p>
",1
65086506,"<p>You have to specify the locale as in the below snippet -</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function addUSComma(n) {
  const display = n;
  return display.toLocaleString('en-US');
}

function addINComma(n) {
  const display = n;
  return display.toLocaleString('en-IN');
}

console.log(addUSComma(123456789));
console.log(addINComma(123456789));</code></pre>
</div>
</div>
</p>
<p>You can read more about setting locales <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString"" rel=""nofollow noreferrer"">here</a></p>
",1
65151636,"<p>The default string output of the <a href=""https://rnfirebase.io/reference/firestore/querysnapshot"" rel=""nofollow noreferrer"">QuerySnapshot</a> object returned by Firestore is not going to be helpful to you.  You should write code to check and iterate its results, using the provided API, as shown in the <a href=""https://rnfirebase.io/firestore/usage#snapshots"" rel=""nofollow noreferrer"">documentation</a>:</p>
<pre><code>const users = await firebase.getAllUsers();
// users is a QuerySnapshot
if (users.size() &gt; 0) {
    users.forEach(doc =&gt; {
        console.log(doc.data())
    })
}
else {
    // decide what you want to do if no results
}
</code></pre>
",1
65137057,"<p>Firstly, you need to understand that the while loop in your <code>runSlow</code> function blocks the thread. This means that in your Promise, where you call <code>runSlow(2500)</code> the code is blocked (waits) for 2.5 seconds before it continues. Therefore, no matter how you write your code, it will always take as long as the longest <code>runSlow()</code> function you have specified. There is basically nothing asynchronous about the code. You can see this if you try the following in your code:</p>
<pre class=""lang-js prettyprint-override""><code>// your code above

promise.then(val =&gt; console.log(&quot;I am done, 2.5 secs later&quot;, val))

console.log(&quot;I should show up immediately&quot;)
</code></pre>
<p>What you will notice is that the <code>console.log(&quot;I should show up immediately&quot;)</code> does not show up immediately, it is delayed by the 2.5 seconds.</p>
<p>The &quot;correct&quot; way to delay the function asynchronously is with this code:</p>
<pre class=""lang-js prettyprint-override""><code>function runSlowAsync(delay) {
  return new Promise(resolve =&gt; {
    setTimeout(resolve, delay, true)
  })
}
</code></pre>
<p>Above the <code>runSlowAsync</code> function returns a Promise, that when resolved will have the value <code>true</code>. Here is the code with the asynchronous runSlow function:</p>
<pre class=""lang-js prettyprint-override""><code>var promise = new Promise(async function(resolve, reject) {
  // do a thing, possibly async, then…

  var it = await runSlowAsync(2500); 

  if (it) {
    resolve(&quot;Stuff worked!&quot;);
  }
  else {
    reject(Error(&quot;It broke&quot;)) 
  }
});

var promise2 = new Promise(async function(resolve, reject) {
  // do a thing, possibly async, then…

  var it = await runSlowAsync(10000);
        
  if (it) {
    resolve(&quot;Stuff worked too!&quot;);
  }
  else {
    reject(Error(&quot;It broke too&quot;));
  }
});
</code></pre>
<h3>Now, how are the promises resolved?</h3>
<p>If we continue with our code from above, when you use <code>promise.then(() =&gt; { //Do something })</code>, you are telling the runtime, ok, once this promise has resolved, <code>then</code> do something. Each promise will then be executed independently. If you use <code>Promise.all([promise, promise1]).then()</code>, you are telling the runtime to wait until all promises are resolved, before <code>then</code> doing something. Therefore in that case, your promises will be resolved only when the longest running one has been resolved. Here the code:</p>
<pre class=""lang-js prettyprint-override""><code>promise.then(() =&gt; console.log(&quot;I am done 2.5 secs later&quot;))
promise1.then(() =&gt; console.log(&quot;I am done 5 secs later&quot;))

Promise.all([promise, promise1]).then(() =&gt; console.log(&quot;All promises resolved&quot;))

// In your console you will see this.

// after 2.5 seconds
// &quot;I am done 2.5 secs later&quot;
// another 2.5 seconds later (after 5 seconds)
// &quot;I am done 5 secs later&quot;
// &quot;All promises resolved&quot;
</code></pre>
",1
65101457,"<p>This is a wild guess, but this is based on the pattern in the documentation you linked to:</p>
<pre><code>await expect(categoryDAO.add(category)).rejects.toThrow({
  ... // Your error.
});
</code></pre>
",1
65145251,"<blockquote>
<p>Error at line 4, character 5: This language feature is only supported for ECMASCRIPT6 mode or better: for-of loop.</p>
</blockquote>
<p>this mean that <code>for..of</code> is not supported by your browser, However you still can use <code>forEach</code> method:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let pixels = document.querySelectorAll(""div#root &gt; div"")
pixels.forEach(e =&gt; e.parentElement.removeChild(e))</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""root"" style=""height:20vh;background-color:green""&gt;
&lt;div&gt; 1 &lt;/div&gt;
&lt;div&gt; 2 &lt;/div&gt;
&lt;div&gt; 3 &lt;/div&gt;
&lt;div&gt; 4 &lt;/div&gt;
&lt;div&gt; 5 &lt;/div&gt;
&lt;div&gt;</code></pre>
</div>
</div>
</p>
",1
65084505,"<p>You can put a function into context just as you would put in a value.</p>
<p>Here is an example:</p>
<pre><code>import React, {useContext} from 'react';

const NavbarContext = React.createContext({resetDisplay: () =&gt; {}});

function Navbar() {
    function resetDisplay() {
        // do stuff in here
    }

    return (
        &lt;NavbarContext.Provider value={{resetDisplay}}&gt;
            &lt;ButtonGroup /&gt;
        &lt;/NavbarContext.Provider&gt;
    );
}


function ButtonGroup() {
    return (
        &lt;div&gt;
            &lt;ResetButton /&gt;
        &lt;/div&gt;
    );
}

function ResetButton() {
    const {resetDisplay} = useContext(NavbarContext);

    return &lt;Button onClick={() =&gt; resetDisplay()} &gt;Reset&lt;/Button&gt;;
}

</code></pre>
",1
65123883,"<h1>console.log returns undefined</h1>
<blockquote>
<pre><code>.then(data =&gt; console.log(data))
.then(function(data){
          tester(data)
</code></pre>
</blockquote>
<p>Your first <code>then</code> returns the return value of <code>console.log</code> which is <code>undefined</code>.</p>
<p>So your second <code>then</code> recieves <code>undefined</code> as its <code>data</code>.</p>
<p>Don't use multiple <code>then</code> callbacks here.</p>
<pre><code> .then(function(data){
           console.log(data)
           tester(data)
</code></pre>
<h1>The JSON doesn't consist of an array</h1>
<p>The JSON you are looking at returns an object.</p>
<p>It doesn't have a <code>length</code>.</p>
<blockquote>
<pre><code>for (var i = 0; i &lt; data.length; i++) {
</code></pre>
</blockquote>
<p>… is going to fail immediately.</p>
<p>You've got <code>data.GameComputers[0]</code> so I'm guessing you want to loop over <code>GameComputers</code> so:</p>
<ol>
<li>Check the length of that: <code>i &lt; data.GameComputers.length</code></li>
<li>Make use of <code>i</code> when you read it: <code>data.GameComputers[i].Name;</code></li>
</ol>
",1
65164069,"<p>In order to automatically click on the submit button, you need to use an <code>onLoad</code></p>
<p>convert your _onSubmit to a windows onload, something like this</p>
<pre><code>window.onload = async (e) =&gt; {
    e.preventDefault();
    setSpinner(false);
    console.log('hello');
    const authResult = await session.signIn(email, password);
    setSpinner(true);
    console.log(session);
    authResult ? setStatus(authResult) : history.push('/dashboard');

}
</code></pre>
",1
65084540,"<p><code>querySelectorAll()</code> returns a list of html elements. So it doesn't have any <code>children</code> property. You will have to loop over all the elements are then get the children. If you want all element's children when you can use <code>flatMap()</code></p>
<pre><code>const tagName = [...document.querySelectorAll('.tags')].flatMap(x =&gt; x.children);
</code></pre>
",1
65102183,"<p>Problem is here</p>
<blockquote>
<p><code>&lt;button onClick={props.finalAnswer(props.choice1)}&gt;{props.choice1}&lt;/button&gt;...</code>.</p>
</blockquote>
<p>You're not actually assigning the function, you're calling the function <code>finalAnswer(choice)</code> and which is trying to change parent<code>(App)</code> state while <code>rending</code> in progress, That's why you're seeing that warning.</p>
<p>You just need to wrap the <code>finalAnswer</code> in a callback.</p>
<p>Try like this</p>
<pre><code>&lt;button onClick={() =&gt; props.finalAnswer(props.choice1) }&gt;{props.choice1}&lt;/button&gt;
... and all for others.
</code></pre>
<p><strong>Note:</strong> There's better way to do your thing, try to find out easy solution instead of handling <code>state</code> individually.</p>
<p>There's a <a href=""https://stackoverflow.com/questions/65101641/how-to-simplify-updating-state-of-quiz-component-in-react"">Similar question here</a>, you can find the easy solution.</p>
",1
65153279,"<p>From styled-components docs:</p>
<blockquote>
<p>Using an older version of styled-components (below 4.0.0) or of React?
Use the innerRef prop instead.</p>
</blockquote>
<p>So, you should change to this:</p>
<pre><code>&lt;StyledDiv onClick={handleClick}&gt;
  &lt;StyledInput innerRef={textInput}&gt;&lt;/StyledInput&gt;
&lt;/StyledDiv&gt;
</code></pre>
",1
65128534,"<p>Your date is I guess stored in Mongodb or some other kind of DB so please remove that formting and then convert to date like</p>
<pre><code>const time = + &quot;/Date(1606867200000)/&quot;.replace(/\D/g, &quot;&quot;);
console.log( new Date( time ));
</code></pre>
",1
65120441,"<p>I would change your component structure to something like:</p>
<pre><code>import React, { useState } from 'react'
import { graphql } from 'gatsby'

 const YourPage = ({data}) =&gt; {
   console.log('data is', data)
   const [filters, setFilters] = useState({
    type: &quot;&quot;,
    category: &quot;&quot;
  });

//your calculations

  return (
    &lt;div&gt;
      Your stuff 
    &lt;/div&gt;
  )
}

export const query = graphql`
  query yourQueryName{
      allStrapiHomes {
        nodes {
          type
          category
        }
      }
  }
`

export default YourPage
</code></pre>
<p>In your code, upon some critical imports, you are missing a few stuff from Gatsby. If you use a <a href=""https://www.gatsbyjs.com/docs/static-query/"" rel=""nofollow noreferrer""><code>staticQuery</code></a>, you will need to add a render mode to it. It may look a bit old-fashioned, it's better to use the <a href=""https://www.gatsbyjs.com/docs/static-query/#usestaticquery"" rel=""nofollow noreferrer""><code>useStaticQuery</code></a> hook provided by Gatsby or adding a page query (my approach).</p>
<p>I've added a <a href=""https://www.gatsbyjs.com/docs/page-query/"" rel=""nofollow noreferrer"">page query</a>. Your data is under <code>props.data.allStrapiHomes.nodes</code>, destructuring props you omit the first step, so your data will be at <code>data.allStrapiHomes.nodes</code>. Both <code>type</code> and <code>category</code> will be an array if they are set like this in the Strapi back-end.</p>
",1
65109537,"<p>When a response is returned from Laravel controller like</p>
<pre class=""lang-php prettyprint-override""><code>return response()-&gt;json([
    'status' =&gt; true,
    'message' =&gt; 'success',
    'cat_products' =&gt; $cat_products,
    'cat_count' =&gt; $cat_count
]);
</code></pre>
<p>Then the actual array is available on the javascript side under the response.data key.</p>
<p>Since you are doing loose comparison in the if statement it is being compared with response.status: 200 and not your supplied <code>&quot;status&quot; =&gt; true</code> in the json response</p>
<pre class=""lang-js prettyprint-override""><code>if (response.status == true) {
    //response.data should contain the data sent as response from controller
    console.log(response.data); 
    
    //response.cat_products.forEach(filter); //filter is a function

    response.data.cat_products.forEach(filter);  //this should work

}
</code></pre>
",1
65145721,"<p>You can check if the <code>scrollBehavior</code> property is supported by checking the style of the HTML element.</p>
<pre><code>const smoothScrollSupported = 'scrollBehavior' in document.documentElement.style;
</code></pre>
",1
65089094,"<p>This is happen because textarea class is same.</p>
<p>Your are almost there. Use <code>this</code> with <code>next</code> to get desire result on textarea.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>//Insert value form dropdown in textarea
$(document).ready(function(){
    $("".js-example-basic"").change(function () {
       $(this).next("".textArea"").val(this.value);
     }).change();
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div&gt;
  &lt;select name=""selectProgram[]"" class=""js-example-basic""&gt;
    &lt;option value=""""&gt;Choose tour&lt;/option&gt;
    &lt;option value=""Tour1""&gt;Tour 1&lt;/option&gt;
    &lt;option value=""Tour2""&gt;Tour 2&lt;/option&gt;
    &lt;option value=""Tour3""&gt;Tour 3&lt;/option&gt;
  &lt;/select&gt;
  &lt;textarea name=""tourText[]"" class=""form-control textArea"" placeholder=""Tour description""&gt;&lt;/textarea&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;select name=""selectProgram[]"" class=""js-example-basic""&gt;
    &lt;option value=""""&gt;Choose tour&lt;/option&gt;
    &lt;option value=""Tour1""&gt;Tour 1&lt;/option&gt;
    &lt;option value=""Tour2""&gt;Tour 2&lt;/option&gt;
    &lt;option value=""Tour3""&gt;Tour 3&lt;/option&gt;
  &lt;/select&gt;
  &lt;textarea name=""tourText[]"" class=""form-control textArea"" placeholder=""Tour description""&gt;&lt;/textarea&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65144469,"<p>You could use <code>find</code> method since <code> this.model.status.tasks</code> is an array :</p>
<pre><code>hasFailedTask() {
 
  return  this.model.status.tasks.find(task=&gt;task.state.includes('FAILED'));
},
</code></pre>
",1
65091511,"<h2>Explanation:</h2>
<ul>
<li><p>My approach would be to get the data of <code>sheet2</code> and use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""nofollow noreferrer"">map</a> to fill in the empty values with the values of <code>sheet1</code>:</p>
<pre><code>vals2.map((v,i)=&gt;[v==''?vals1[i]:v]);
</code></pre>
<p>For the non-empty values keep the original values.</p>
</li>
<li><p>I also added an <code>onOpen()</code> function to create a menu button linked to the <code>CopyCells</code> function.</p>
</li>
<li><p>I use a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator#:%7E:text=The%20conditional%20(ternary)%20operator%20is,if%20the%20condition%20is%20falsy."" rel=""nofollow noreferrer"">ternary operator</a> to simplify the code and I <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat"" rel=""nofollow noreferrer"">flat</a>ten the values from the sheets since we consider values of a column and therefore a <code>1D</code> array makes more sense.</p>
</li>
</ul>
<h2>Solution:</h2>
<pre><code>function CopyCells() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet1 = ss.getSheetByName(&quot;sheet1&quot;); //source sheet
  const sheet2 = ss.getSheetByName(&quot;sheet2&quot;); //target sheet
  const range1 = sheet1.getRange('A5:A800');
  const range2 = sheet2.getRange('C7:C802');
  const vals1 = range1.getValues().flat();
  const vals2 = range2.getValues().flat();
  const fvals = vals2.map((v,i)=&gt;[v==''?vals1[i]:v]);
  range2.clearContent();
  range2.setValues(fvals);
}
 
function onOpen() {
  SpreadsheetApp.getUi()
  .createMenu('Button')
  .addItem('Copy Cells', 'CopyCells')
  .addToUi();
}
</code></pre>
",1
65116954,"<p>Just defining the <code>/files</code> route before serving the static files might work:</p>
<pre class=""lang-js prettyprint-override""><code>// Define `/files` route first
app.use(&quot;/files&quot;, function (req, res) {
  return res.send(&quot;I will be served instead of a files directory&quot;);
});

// Static
app.use(&quot;/&quot;, express.static(__dirname));
</code></pre>
",1
65087883,"<p>In general, there's no problem using <code>onfocusevent</code>.</p>
<p>Here's a hint on how to do this:</p>
<ul>
<li>Create the input field</li>
<li>Add the <code>onfocusout</code> event handler and assign it a JavaScript function</li>
<li>Define the JavaScript function responsible for the validation process (which is, the same function we talked about in step 2)</li>
<li>This function takes the value inside the field and compares it, if it's not inside the range you desire then you can show an alarm or something like this.</li>
</ul>
<p>I made a demo that doesn't involve alarming the user but instead it colors the border with either green or red, when you get desperate pay it a visit:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=""number"" id=""field1"" onfocusout=""validateField(0, 100, 'field1')""/&gt;&lt;br/&gt;&lt;br/&gt;
    &lt;input type=""number"" id=""field2"" onfocusout=""validateField(200, 300, 'field2')""/&gt;&lt;br/&gt;&lt;br/&gt;
    &lt;input type=""number"" id=""field3"" onfocusout=""validateField(400, 500, 'field3')""/&gt;&lt;br/&gt;&lt;br/&gt;
    &lt;script&gt;
        function validateField(min, max, id) {
            const value = document.getElementById(id).value;
            if (value &lt; min || value &gt; max) {
                document.getElementById(id).style.borderColor = ""red"";
            }
            else {
                document.getElementById(id).style.borderColor = ""lime"";
            }
        }
    &lt;/script&gt;</code></pre>
</div>
</div>
</p>
",1
65110481,"<p>When using a <a href=""https://developers.google.com/apps-script/guides/cloud-platform-projects#default_cloud_platform_projects"" rel=""nofollow noreferrer"">default Cloud Platform project</a> for your Apps Script, whatever APIs are used by the script are automatically enabled when the script project is saved.</p>
<p>That's not the case when you <a href=""https://developers.google.com/apps-script/guides/cloud-platform-projects#switching_to_a_different_standard_gcp_project"" rel=""nofollow noreferrer"">switch to a standard GCP project</a>. In this case, the APIs are not automatically enabled, and you have to manually enable them on the GCP project:</p>
<blockquote>
<p>Often an Apps Script application needs access to another Google API. This requires you to enable the API in the corresponding GCP project.</p>
</blockquote>
<p>Since you're using methods that use Drive API (<code>DriveApp.getRootFolder()</code>), you have to enable this API. So which APIs you should enable would depend on your code.</p>
<p>For example, if the code were to use methods related to <a href=""https://developers.google.com/apps-script/reference/gmail/gmail-app"" rel=""nofollow noreferrer"">GmailApp</a>, you would have to enable Gmail API on the GCP project.</p>
<h3>Reference:</h3>
<ul>
<li><a href=""https://developers.google.com/apps-script/guides/cloud-platform-projects#enabling_an_api_in_a_standard_gcp_project"" rel=""nofollow noreferrer"">Enabling an API in a standard GCP project</a></li>
</ul>
",1
65084430,"<p>I think the issue here is <code>self.getDividend();</code> and <code>self.getDivisor();</code> are async operations. They will take some time to complete. By the time you hit the next line <code>const { dividendList , divisorList} = self.state;</code>, these operations are not complete and you will end up getting empty lists.</p>
<p>One way to address this is using moving your doCal function logic after getDividend and getDivisor are completed. You can also execute these in parallel instead of in a sequence. I used async format instead of .then(). It is just a sysntatic sugar. You can achieve the same using .then() if you prefer that way</p>
<pre><code>async function doCalc() {
  const prom1 = axios.get('https://..dividentList');
  const prom2 = axios.get('https://..divisorList');
  const results = await Promise.all([ prom1, prom2]); // wait for both promise to complete
  // look inside results to get your data and set the state
  // continue doCal logic

}
</code></pre>
<p>Using .then()</p>
<pre><code>request1('/dividentList')
.then((res) =&gt; {
    //setState for divident
    return request2('/divisorList'); // this will return a promise to chain on
})
.then((res) =&gt; {
    setState for divisor
    return Promise.resolve('Success') // we send back a resolved promise to continue chaining
})
.then(() =&gt; {
    doCalc logic
})
.catch((err) =&gt; {
    console.log('something went wrong');
});
</code></pre>
",1
65157059,"<p>I think the solution may be to re-execute the contentWayPoint() function at the end of the success callback. However, its likely out of scope by then. There are two simple ways to ensure its not :</p>
<p>The cleanest would be to ensure that the code that sets up your pagination is inside the same (function($) {}) block in main.js - that way it will &quot;capture&quot; the function.</p>
<p>The other, dirtier way, would be to change var contentWaypoint= function... to window.contentWaypoint = function - then use window.contentWaypoint() whenever you need to invoke it. THere are much better ways to doing this, but that might get you going.</p>
",1
65112848,"<p>As mentioned in the comment, there is no point in making the <code>useEffect</code> hook dependent on the <code>count</code>, if you are not going to update the title every time the count changes. The code could be:</p>
<pre><code>const UseEffectCounter1 = () =&gt; {
    const [count, setCount] = useState(0);
    useEffect(() =&gt; {
        document.title = 'You clicked 0 times';
    }, []);
    return (
        &lt;div&gt;
            &lt;button onClick={() =&gt; {setCount(count + 1)}}&gt;+1&lt;/button&gt;
        &lt;/div&gt;
    )
}
</code></pre>
<p>Anyway, if you really want to avoid the hard-coded value, you could do something like:</p>
<pre><code>const UseEffectCounter1 = () =&gt; {
    const initCount = 0;
    const [count, setCount] = useState(initCount);
    useEffect(() =&gt; {
        document.title = `You clicked ${initCount} times`;
    }, [initCount]);
    return (
        &lt;div&gt;
            &lt;button onClick={() =&gt; {setCount(count + 1)}}&gt;+1&lt;/button&gt;
        &lt;/div&gt;
    )
}
</code></pre>
<p>As <code>initCount</code> is never going to change, the useEffect hook will be triggered only once.</p>
",1
65147315,"<p>Here I build an array of small objects to contain the value and the original index in the values array.  Then I sort the new array by value, assign a color to each element by its new index, and re-sort it by original index.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const colors = [""#fb5050"", ""#f74f4f"", ""#f34e4e"", ""#ef4d4d"", ""#ec4b4b"", ""#e84a4a"", ""#e44949"", ""#e04848"", ""#dc4646"", ""#d94545"", ""#d54444"", ""#d14343"", ""#cd4141"", ""#c94040"", ""#c63f3f"", ""#c23e3e"", ""#be3c3c"", ""#ba3b3b"", ""#b63a3a"", ""#b23838""];

const values = [0.020565500406834823, 0.0006918573709419904, 0.03614457831325302, 0.014884840151254727, 0.9638554216867471, 0.005208333333333333, 0.0006248326341158618, 0.14285714285714285, 0.004872900466547537, 0.8571428571428577, 0, 0.2142857142857144, 0, 0.2499999999999991, 0.5000000004656613, 0.45534591194968543, 0.6349489795918367, 0.25, 0.15218156916454706, 0];

// keep track of the old index and sort by value
const valueMap = values.map((val, i) =&gt; ({oldIndex: i, value: val})).sort((a,b) =&gt; a.value - b.value);

// add the appropriate color to each element of the sorted array
valueMap.forEach((val, i) =&gt; val.color = colors[i]);
//check this console.log to verify it sorted/assigned properly
//console.log(JSON.stringify(valueMap));

// resort it by oldIndex
valueMap.sort((a,b) =&gt; a.oldIndex - b.oldIndex);

// get just the array of colors
const newColors = valueMap.map(val =&gt; val.color);
console.log(newColors);</code></pre>
</div>
</div>
</p>
",1
65161595,"<p>You'll need to put it in the <code>options</code> argument (see the <a href=""https://discord.js.org/#/docs/main/stable/class/GuildMemberManager?scrollTo=ban"" rel=""nofollow noreferrer"">docs</a>). You should also probably use <code>member.ban</code> instead of <code>guild.members.ban(member)</code>, but anyways, here's an example:</p>
<pre class=""lang-js prettyprint-override""><code>member.ban({
    reason: &quot;Your reason here&quot;
});
</code></pre>
<p>And the member will be banned, with the reasoning in audit logs showing up properly. You should add an <code>reason</code> argument to your command as well. Don't ask me how though, I haven't touched discord.js in a year and especially not commando. Check the guide for that. Make the mention the first argument and the reason the rest.</p>
",1
65108529,"<p>Always you should delete rows with index 0-9 and you shouldn't change index number, because always you have 10 rows in your table.
It seems that when you click Next button, simple way is to remove all tr from table before calling of the fill function.</p>
",1
65102333,"<p>To organize the data, I think you need <em>two</em> associations to group by: the name <em>and</em> the dates and their counts for that name:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const carts = [
  {
    name: 'Voucher A',
    participants: [
      {
        date: 1
      },
      {
        date: 2
      }
    ]
  }
];

const groupedByNames = {};
for (const { name, participants } of carts) {
  if (!groupedByNames[name]) groupedByNames[name] = {};
  for (const { date } of participants) {
    groupedByNames[name][date] = (groupedByNames[name][date] || 0) + 1;
  }
}
const output = Object.entries(groupedByNames).flatMap(
  ([name, dateCounts]) =&gt; Object.entries(dateCounts).map(
    ([date, count]) =&gt; ({ name, date: Number(date), count })
  )
);
console.log(output);</code></pre>
</div>
</div>
</p>
",1
65137231,"<p>First, you need to use <code>useState</code> of React.</p>
<pre class=""lang-js prettyprint-override""><code>const [state, setState] = React.useState({
  title: &quot;Werk&quot;,
  start: moment().toDate(),
  end: moment(),
  allDay: false,
});
</code></pre>
<p>And then set values and handlers for every <code>input</code> like below:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;input placeholder=&quot;start date&quot;
  value={state.start}
  onChange={e =&gt; setState({...state, start: e.target.value})}
  required&gt;&lt;/input&gt;
</code></pre>
",1
65099055,"<p>You do not need &quot;setInterval&quot; for this action</p>
<p>When the button element is in form element, it defaults to the send function, which in this case refreshes the page. Thus, the contents of the field are cleaned as soon as it has been filled.</p>
<p>I removed the form element. Now, when a button is clicked, the contents of the <code>input</code> element are taken and displayed in the <code>p</code> element</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;
&lt;head&gt;
    &lt;meta charset=""UTF-8""&gt;
    &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1.0""&gt;
    &lt;title&gt;Document&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;

    &lt;input id=""mail"" type=""text"" name=""email"" value=""user@example.com""&gt;
    &lt;button id=""btn"" onclick=""abc()""&gt;click On me&lt;/button&gt;

    &lt;p id='text'&gt;&lt;/p&gt;

    &lt;script&gt;
        function abc() {
            var mail = document.getElementById('mail');
            var text = document.getElementById('text');
            text.innerText = mail.value;
        }
    &lt;/script&gt;

&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>
<hr />
<p><strong>Version with setInterval</strong></p>
<p>After pressing the button &quot;setInterval&quot; will be activated. Every 100ms it will takes all the information from the input element and will fill it in the P element. You can write in the field and the text will immediately appear in the other element. In order not to accumulate spaces after pressing the button, I have set a line in the code that deactivates the button</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function abc() {
    document.getElementById('btn').setAttribute(""disabled"", true);

    setInterval(() =&gt; {
        var mail = document.getElementById('mail');
        var text = document.getElementById('text');
        text.innerText = mail.value;
    }, 100);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input id=""mail"" type=""text"" name=""email"" value=""user@example.com""&gt;
&lt;button id=""btn"" onclick=""abc()""&gt;click On me&lt;/button&gt;

&lt;p id='text'&gt;&lt;/p&gt;</code></pre>
</div>
</div>
</p>
",1
65132870,"<p>You need to have your functions return <code>problemResult</code>, store it, and then compare it to the user input when they enter it.</p>
<p>Presently, you're not listening for user input at all. You could do this via a submit button (i.e. the user is expected to click a button when they've finished) or we could listen as they enter data. Let's do the latter:</p>
<pre><code>btn.addEventListener('click', () =&gt; {
    let result = randomFunc[Math.floor(Math.random() * randomFunc.length)]();
    document.querySelector('#user_input').addEventListener('input', evt =&gt; {
        if (result.toString() === evt.target.value) {
            /* correct! do something here */
        } else {
            /* not correct yet... */
        }
    });
})
</code></pre>
<p>Note how we cast <code>result</code> to a string, so we're comparing apples with apples versus the user input (which, coming from a field value, will always be a string.)</p>
<p>Don't forget to adjust your functions to return <code>problemResult</code>.</p>
",1
65127991,"<p>I think that you can use</p>
<pre><code>&lt;some-component [value]=&quot;formGroupName.get('control2').value&quot;
                (valueChange)=&quot;formGroupName.get('control2').setValue($event)&quot;
&gt;&lt;/some-component&gt;
</code></pre>
",1
65131180,"<p>There are a number of problems to correct prior to resolving the spacing/hiding issue.</p>
<ol>
<li><p>Your table is not being formed properly. If you look your output you'll see that the student data is simply placed between <code>&lt;tr&gt;</code> tags rather <em>inside</em> the <code>tr</code> tag.</p>
</li>
<li><p>Your header row is in a <code>tr</code> rather than a <code>td</code>. There is nothing wrong with this unless you want to do something specific with <em>only the table body</em>.</p>
</li>
<li><p>There is no <code>tbody</code> element - there should be since it makes your coding easier</p>
</li>
<li><p>You placed everything into the <code>table</code> element. The <code>tr</code> elements are the only thing that goes in to the <code>table</code> - note I change that to <code>tbdody</code></p>
</li>
</ol>
<p>Now with all those things fixed up, the answer to your question is to add the following code to your <code>click</code> handler for your <code>button</code>:</p>
<pre class=""lang-js prettyprint-override""><code>  e.target.parentElement.parentElement.removeChild(e.target.parentElement);
</code></pre>
<p>That will delete the <code>tr</code> from the table.</p>
<p>Which you'll see implemented below:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// Student Constructor Object
let students = [];

function Student(id, name, surname, points) {
  this.id = id;
  this.name = name;
  this.surname = surname;
  this.points = points;
  this.DidPass = function() {
    if (this.points &gt; 50) {
      console.log('PASS');
    } else if (this.points &lt; 50) {
      console.log('FAILED')
    }
  }
}

// Create Student

function createStudent() {
  let studentId = document.getElementById('studentID').value;
  let studentName = document.getElementById('studentName').value;
  let studentSurname = document.getElementById('studentSurname').value;
  let studentPoints = document.getElementById('studentPoints').value;


  let newStudent = new Student(studentId, studentName, studentSurname, studentPoints);
  students.push(newStudent);


  let PassNot = true;
  for (let i = 0; i &lt; students.length; i++) {
    PassNot = students[i].DidPass();
  }

  // Delete Btn
  let btnDelete = document.createElement('button');
  btnDelete.classList.add('btnDelete');
  btnDelete.innerHTML = 'Delete Record'
  btnDelete.onclick = function(e) {
    e.target.parentElement.parentElement.removeChild(e.target.parentElement);
    for (let j = 0; j &lt; students.length; j++) {
      if (studentId == students[j].id) {
        students.splice(j);
        tdShowID.innerText = '';
        tdShowName.innerText = '';
        tdShowSurname.innerText = '';
        tdShowPoints.innerText = '';
        tdShowDidPass.innerText = '';
        btnDelete.style.display = 'none';
      }
    }
  }


  let tableBody = document.getElementsByTagName('tbody')[0];
  let tr = document.createElement('tr');
  let tdShowID = document.createElement('td');
  tdShowID.innerText = studentId;
  let tdShowName = document.createElement('td');
  tdShowName.innerText = studentName;
  let tdShowSurname = document.createElement('td');
  tdShowSurname.innerText = studentSurname;
  let tdShowPoints = document.createElement('td');
  tdShowPoints.innerText = studentPoints;
  let tdShowDidPass = document.createElement('td');
  tdShowDidPass.innerText = PassNot;

  tr.appendChild(tdShowID);
  tr.appendChild(tdShowName);
  tr.appendChild(tdShowSurname);
  tr.appendChild(tdShowPoints);
  tr.appendChild(tdShowDidPass);
  tr.appendChild(btnDelete);
  tableBody.appendChild(tr);

}

// Logic
function checkIfStudentExists(studentId) {
  return students.some(student =&gt; student.id === studentId);
}

// Create Student
let btnSubmit = document.getElementById('btnSubmit');
btnSubmit.onclick = function() {
  createStudent();

}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;

&lt;head&gt;
  &lt;meta charset=""UTF-8""&gt;
  &lt;meta name=""viewport"" content=""width=device-width, initial-scale=1.0""&gt;
  &lt;link href='./style/style.css' rel='stylesheet'&gt;
  &lt;title&gt;Student App&lt;/title&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=""container""&gt;
    &lt;div id=""formField"" class='flx'&gt;
      &lt;label for='studentID'&gt;Student ID&lt;/label&gt;
      &lt;input id='studentID' name='studentID' placeholder='student ID' required&gt;
      &lt;label for='studentName'&gt;Student Name&lt;/label&gt;
      &lt;input id='studentName' name='studentName' placeholder='student name' required&gt;
      &lt;label for='studentSurname'&gt;Student Surname&lt;/label&gt;
      &lt;input id='studentSurname' name='studentSurname' placeholder='student surname' required&gt;
      &lt;label for='studentPoints'&gt;Student Points&lt;/label&gt;
      &lt;input id='studentPoints' name='studentPoints' placeholder='student points' required&gt;
      &lt;button id='btnSubmit'&gt;Submit&lt;/button&gt;
    &lt;/div&gt;
    &lt;hr&gt;
    &lt;div id=""results""&gt;
      &lt;table id='table'&gt;
        &lt;th&gt;
          &lt;td&gt;Student ID&lt;/td&gt;
          &lt;td&gt;Student Name&lt;/td&gt;
          &lt;td&gt;Student Surname&lt;/td&gt;
          &lt;td&gt;Student Points&lt;/td&gt;
          &lt;td&gt;Student Grade&lt;/td&gt;
          &lt;td&gt;Delete Record&lt;/td&gt;
        &lt;/th&gt;
        &lt;tbody&gt;

        &lt;/tbody&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;script src='./js/app.js'&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",1
65159472,"<p>You could use a watch:</p>
<pre class=""lang-js prettyprint-override""><code>data() {
  return {
    config: {
      imageUploadURL: '/api/image/store',
      imageUploadParam: 'image',
      imageUploadParams: { id: '' }
    }
  }
},
watch: {
  id(value) {
    this.config.imageUploadParams.id = value;
  }
}
</code></pre>
<p>Now whenever <code>id</code> changes, <code>config.imageUploadParams</code> will be set.</p>
<p>Assigning a variable in JavaScript sets the value at the time of the assignment. Since your id is empty when it's assigned, there's no reference to use later to access future async properties.  Assigning a computed won't help for the same reason.</p>
<p>Using <code>watch</code> for async, and <code>computed</code> for sync is a good general rule</p>
<p><em>Edit from chat</em></p>
<p>It seems <code>&lt;froala&gt;</code> isn't able to respond to your reactive data and is only using the initial config value.  Put a <code>v-if=&quot;id&quot;</code> on the component to prevent it from being created until the id is ready:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;froala v-if=&quot;id&quot;&gt;
</code></pre>
",1
65129583,"<p>In order to execute an animation after the first one you can use the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/animationend_event"" rel=""nofollow noreferrer"">animationend event</a>.  Your code now is:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var slideIndex = 1;
showSlides(slideIndex);

function plusSlides(n) {
    showSlides(slideIndex += n);
}

function currentSlide(n) {
    showSlides(slideIndex = n);
}

function showSlides(n) {
    var i;
    var slides = document.getElementsByClassName(""mySlides"");
    var dots = document.getElementsByClassName(""dot"");
    if (n &gt; slides.length) {slideIndex = 1}
    if (n &lt; 1) {slideIndex = slides.length}
    for (i = 0; i &lt; slides.length; i++) {
        if (slides[i].style.display == 'block') {
            slides[i].className = slides[i].className.replace(""r1"", ""r2"");
        }
    }
    for (i = 0; i &lt; dots.length; i++) {
        dots[i].className = dots[i].className.replace("" active"", """");
    }
    if (document.querySelectorAll('.mySlides.r2').length == 0) {
        // first slide to fade....
        slides[slideIndex-1].style.display = ""block"";
    }
    dots[slideIndex-1].className += "" active"";
}

document.querySelectorAll('.mySlides').forEach(function(ele) {
    ele.addEventListener('animationend', function(e) {
        var prevEle = document.querySelector('.mySlides.r2');
        if (prevEle != null) {
            prevEle.style.display = 'none';
            prevEle.classList.remove(""r2"");
            prevEle.classList.add(""r1"");
            var slides = document.getElementsByClassName(""mySlides"");
            slides[slideIndex - 1].style.display = ""block"";
        }
    })
})</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>/* animation Classes start */
.r1 {
    animation: fadeInUp 1000ms both
}
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translate3d(0, 100%, 0);
    }

    to {
        opacity: 1;
        transform: translate3d(0, 0, 0);
    }
}
.r2 {
    animation: fadeOutUp 1000ms both
}
@keyframes fadeOutUp {
    from {
        opacity: 1;
    }

    to {
        opacity: 0;
        transform: translate3d(0, -100%, 0);
    }
}
/* animation Classes End */
* {box-sizing: border-box}
body {font-family: Verdana, sans-serif; margin:0}
/* Slideshow container */
.slideshow-container {
    position: relative;
    background: #f1f1f1f1;
}
/* Slides */
.mySlides {
    display: none;
    padding: 80px;
    text-align: center;
}
/* Next &amp; previous buttons */
.prev, .next {
    cursor: pointer;
    position: absolute;
    top: 50%;
    width: auto;
    margin-top: -30px;
    padding: 16px;
    color: #888;
    font-weight: bold;
    font-size: 20px;
    border-radius: 0 3px 3px 0;
    user-select: none;
}
/* Position the ""next button"" to the right */
.next {
    position: absolute;
    right: 0;
    border-radius: 3px 0 0 3px;
}
/* On hover, add a black background color with a little bit see-through */
.prev:hover, .next:hover {
    background-color: rgba(0,0,0,0.8);
    color: white;
}
/* The dot/bullet/indicator container */
.dot-container {
    text-align: center;
    padding: 20px;
    background: #ddd;
}
/* The dots/bullets/indicators */
.dot {
    cursor: pointer;
    height: 15px;
    width: 15px;
    margin: 0 2px;
    background-color: #bbb;
    border-radius: 50%;
    display: inline-block;
    transition: background-color 0.6s ease;
}
/* Add a background color to the active dot/circle */
.active, .dot:hover {
    background-color: #717171;
}
/* Add an italic font style to all quotes */
q {font-style: italic;}

/* Add a blue color to the author */
.author {color: cornflowerblue;}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""slideshow-container""&gt;

    &lt;div class=""mySlides r1""&gt;
        &lt;q&gt;I love you the more in that I believe you had liked me for my own sake and for nothing else&lt;/q&gt;
        &lt;p class=""author""&gt;- John Keats&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=""mySlides r1""&gt;
        &lt;q&gt;But man is not made for defeat. A man can be destroyed but not defeated.&lt;/q&gt;
        &lt;p class=""author""&gt;- Ernest Hemingway&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=""mySlides r1""&gt;
        &lt;q&gt;I have not failed. I've just found 10,000 ways that won't work.&lt;/q&gt;
        &lt;p class=""author""&gt;- Thomas A. Edison&lt;/p&gt;
    &lt;/div&gt;

    &lt;a class=""prev"" onclick=""plusSlides(-1)""&gt;❮&lt;/a&gt;
    &lt;a class=""next"" onclick=""plusSlides(1)""&gt;❯&lt;/a&gt;

&lt;/div&gt;

&lt;div class=""dot-container""&gt;
    &lt;span class=""dot"" onclick=""currentSlide(1)""&gt;&lt;/span&gt;
    &lt;span class=""dot"" onclick=""currentSlide(2)""&gt;&lt;/span&gt;
    &lt;span class=""dot"" onclick=""currentSlide(3)""&gt;&lt;/span&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>Without animationend event:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var slideIndex = 1;
showSlides(slideIndex);

function plusSlides(n) {
    showSlides(slideIndex += n);
}

function currentSlide(n) {
    showSlides(slideIndex = n);
}

function showSlides(n) {
    var i;
    var slides = document.getElementsByClassName(""mySlides"");
    var dots = document.getElementsByClassName(""dot"");
    if (n &gt; slides.length) {slideIndex = 1}
    if (n &lt; 1) {slideIndex = slides.length}
    for (i = 0; i &lt; slides.length; i++) {
        if (slides[i].style.display == 'block') {
            slides[i].className = slides[i].className.replace(""r1"", ""r2"");
        }
    }
    for (i = 0; i &lt; dots.length; i++) {
        dots[i].className = dots[i].className.replace("" active"", """");
    }
    if (document.querySelectorAll('.mySlides.r2').length == 0) {
        // first slide to fade....
        slides[slideIndex-1].style.display = ""block"";
    }
    dots[slideIndex-1].className += "" active"";
    setTimeout(function() {
        var prevEle = document.querySelector('.mySlides.r2');
        if (prevEle != null) {
            prevEle.style.display = 'none';
            prevEle.classList.remove(""r2"");
            prevEle.classList.add(""r1"");
            var slides = document.getElementsByClassName(""mySlides"");
            slides[slideIndex - 1].style.display = ""block"";
        }
    }, 200);
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>/* animation Classes start */
.r1 {
    animation: fadeInUp 1000ms both
}
@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translate3d(0, 100%, 0);
    }

    to {
        opacity: 1;
        transform: translate3d(0, 0, 0);
    }
}
.r2 {
    animation: fadeOutUp 1000ms both
}
@keyframes fadeOutUp {
    from {
        opacity: 1;
    }

    to {
        opacity: 0;
        transform: translate3d(0, -100%, 0);
    }
}
/* animation Classes End */
* {box-sizing: border-box}
body {font-family: Verdana, sans-serif; margin:0}
/* Slideshow container */
.slideshow-container {
    position: relative;
    background: #f1f1f1f1;
}
/* Slides */
.mySlides {
    display: none;
    padding: 80px;
    text-align: center;
}
/* Next &amp; previous buttons */
.prev, .next {
    cursor: pointer;
    position: absolute;
    top: 50%;
    width: auto;
    margin-top: -30px;
    padding: 16px;
    color: #888;
    font-weight: bold;
    font-size: 20px;
    border-radius: 0 3px 3px 0;
    user-select: none;
}
/* Position the ""next button"" to the right */
.next {
    position: absolute;
    right: 0;
    border-radius: 3px 0 0 3px;
}
/* On hover, add a black background color with a little bit see-through */
.prev:hover, .next:hover {
    background-color: rgba(0,0,0,0.8);
    color: white;
}
/* The dot/bullet/indicator container */
.dot-container {
    text-align: center;
    padding: 20px;
    background: #ddd;
}
/* The dots/bullets/indicators */
.dot {
    cursor: pointer;
    height: 15px;
    width: 15px;
    margin: 0 2px;
    background-color: #bbb;
    border-radius: 50%;
    display: inline-block;
    transition: background-color 0.6s ease;
}
/* Add a background color to the active dot/circle */
.active, .dot:hover {
    background-color: #717171;
}
/* Add an italic font style to all quotes */
q {font-style: italic;}

/* Add a blue color to the author */
.author {color: cornflowerblue;}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""slideshow-container""&gt;

    &lt;div class=""mySlides r1""&gt;
        &lt;q&gt;I love you the more in that I believe you had liked me for my own sake and for nothing else&lt;/q&gt;
        &lt;p class=""author""&gt;- John Keats&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=""mySlides r1""&gt;
        &lt;q&gt;But man is not made for defeat. A man can be destroyed but not defeated.&lt;/q&gt;
        &lt;p class=""author""&gt;- Ernest Hemingway&lt;/p&gt;
    &lt;/div&gt;

    &lt;div class=""mySlides r1""&gt;
        &lt;q&gt;I have not failed. I've just found 10,000 ways that won't work.&lt;/q&gt;
        &lt;p class=""author""&gt;- Thomas A. Edison&lt;/p&gt;
    &lt;/div&gt;

    &lt;a class=""prev"" onclick=""plusSlides(-1)""&gt;❮&lt;/a&gt;
    &lt;a class=""next"" onclick=""plusSlides(1)""&gt;❯&lt;/a&gt;

&lt;/div&gt;

&lt;div class=""dot-container""&gt;
    &lt;span class=""dot"" onclick=""currentSlide(1)""&gt;&lt;/span&gt;
    &lt;span class=""dot"" onclick=""currentSlide(2)""&gt;&lt;/span&gt;
    &lt;span class=""dot"" onclick=""currentSlide(3)""&gt;&lt;/span&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65115891,"<p>Koa router does not return (req, res) but a context instead<br />
<a href=""https://github.com/ZijianHe/koa-router#router-"" rel=""nofollow noreferrer"">https://github.com/ZijianHe/koa-router#router-</a></p>
<pre><code>router.get('/', (ctx, next) =&gt; {
  ctx.res.statusCode = 200
  ctx.body = 'your json data'
})
</code></pre>
",1
65095504,"<p>What you are basically doing is that:</p>
<pre class=""lang-js prettyprint-override""><code>const today = new Date()
const nextYear = today.getFullYear() + 1
var MockDate = require(&quot;mockdate&quot;)
MockDate.set('2030-11-22')

console.log(nextYear)
</code></pre>
<p>You cannot mock a date that has already been instanciated.</p>
<p>A solution may be:</p>
<pre class=""lang-js prettyprint-override""><code>export const dynamicNextYear = () =&gt; (new Date()).getFullYear() + 1
</code></pre>
<p>This solution only instanciate a date when the function is called, hence <code>MockDate</code> will be able to mock it.</p>
<p>Or you could just use <code>MockDate</code> even before you import your file (I'm not enough js expert to tell you about when and how import resolution occurs).</p>
<p>I've made a <a href=""https://runkit.com/buonomo/5fc67d3bc4dac8001a676c0c"" rel=""nofollow noreferrer"">runkit</a> to fiddle with.</p>
",1
65102994,"<p><strong>Final Output:</strong></p>
<p><a href=""https://i.stack.imgur.com/0YLpM.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/0YLpM.gif"" alt=""enter image description here"" /></a></p>
<p>Make the following changes :</p>
<p><strong>App.js</strong>:</p>
<pre><code>import React, { Component } from 'react';
import { StyleSheet, Text, View, Button } from 'react-native';
import { NavigationContainer } from '@react-navigation/native';
import { createStackNavigator } from '@react-navigation/stack';
import WelcomePage from './WelCome';
import SignUpEmailPage from './Signup';

const Stack = createStackNavigator();

export default class App extends Component {
  render() {
    return (
      &lt;NavigationContainer&gt;
        &lt;Stack.Navigator&gt;
          &lt;Stack.Screen name=&quot;Welcome&quot; component={WelcomePage} /&gt;
          &lt;Stack.Screen name=&quot;SignUpEmail&quot; component={SignUpEmailPage} /&gt;
        &lt;/Stack.Navigator&gt;
      &lt;/NavigationContainer&gt;
    );
  }
}

</code></pre>
<p><strong>Welcome.js:</strong>:</p>
<pre class=""lang-js prettyprint-override""><code>import React, { Component } from 'react';
import {
  StyleSheet,
  Text,
  View,
  Animated,
  TouchableOpacity,
} from 'react-native';
import GetStartedButton from './GetStartedButton';

export default class WelcomePage extends Component {
  constructor(props) {
    super(props);

    this.fadeAnimation = new Animated.Value(0);
  }

  componentDidMount() {
    Animated.timing(this.fadeAnimation, {
      toValue: 1,
      duration: 5000,
      useNativeDriver: true,
    }).start();
  }

  render() {
    return (
      &lt;View style={styles.containerMain}&gt;
        &lt;View style={styles.containerClub}&gt;
          &lt;Animated.Text
            style={[styles.title, { opacity: this.fadeAnimation }]}&gt;
            Word
          &lt;/Animated.Text&gt;
        &lt;/View&gt;

        &lt;View style={styles.containerCaption}&gt;
          &lt;Animated.Text
            style={[styles.caption, { opacity: this.fadeAnimation }]}&gt;
            words words words
          &lt;/Animated.Text&gt;
        &lt;/View&gt;

        &lt;View style={styles.containerBottom}&gt;
          &lt;GetStartedButton
            onPress={() =&gt; this.props.navigation.navigate('SignUpEmail')}
          /&gt;
        &lt;/View&gt;
      &lt;/View&gt;
    );
  }
}

</code></pre>
<p><strong>GetStartedButton.js:</strong></p>
<pre class=""lang-js prettyprint-override""><code>import React, { Component } from 'react';
import { StyleSheet, Text, TouchableOpacity, Animated } from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';

export default class GetStartedButton extends Component {
  constructor(props) {
    super(props);

    this.fadeAnimation = new Animated.Value(0);
  }
  componentDidMount() {
    Animated.timing(this.fadeAnimation, {
      toValue: 1,
      duration: 5000,
      useNativeDriver: true,
    }).start();
  }

  render() {
    return (
      &lt;Animated.View
        style={[styles.container, { opacity: this.fadeAnimation }]}&gt;
        &lt;TouchableOpacity
          onPress={() =&gt; {
            this.props.onPress();
          }}&gt;
          &lt;LinearGradient
            colors={['#DB004C', '#FC008E']}
            style={styles.linearGradient}
            start={{ x: 0, y: 0.5 }}
            end={{ x: 1, y: 0.5 }}&gt;
            &lt;Text style={styles.text}&gt;Get Started&lt;/Text&gt;
          &lt;/LinearGradient&gt;
        &lt;/TouchableOpacity&gt;
      &lt;/Animated.View&gt;
    );
  }
}
</code></pre>
<p>Here is the working <a href=""https://snack.expo.io/@xeteke8423/authentic-truffle"" rel=""nofollow noreferrer"">Expo Snack Demo</a>.</p>
<p>If you found this answer helpful then don't forget to upvote and accept.
Happy Coding...</p>
",1
65157393,"<p>Please find the updated code. You have to use persons[i].id instead of index.</p>
<p><a href=""https://stackblitz.com/edit/angular-datatables-gitter-zbcrwx?file=app/app.component.ts"" rel=""nofollow noreferrer"">https://stackblitz.com/edit/angular-datatables-gitter-zbcrwx?file=app/app.component.ts</a></p>
",1
65116071,"<p>You are attempting to get items out of the array before you put anything in the array. Your code needs to be reorganized like this:</p>
<pre><code>var captions = new Array(14);

captions[0]=&quot;International Space Station fourth expansion [2009]&quot;;
captions[1]=&quot;Assembling the International Space Station [1998]&quot;;
captions[2]=&quot;The Atlantis docks with the ISS [2001]&quot;; 
captions[3]=&quot;The Atlantis approaches the ISS [2000]&quot;; 
captions[4]=&quot;The Atlantis approaches the ISS [2000]&quot;; 
captions[5]=&quot;International Space Station over Earth [2002]&quot;;
captions[6]=&quot;The International Space Station first expansion [2002]&quot;;
captions[7]=&quot;Hurricane Ivan from the ISS [2008]&quot;;
captions[8]=&quot;The Soyuz spacecraft approaches the ISS [2005]&quot;;
captions[9]=&quot;The International Space Station from above [2006]&quot;;
captions[10]=&quot;Maneuvering in space with the Canadarm2 [2006]&quot;;
captions[11]=&quot;The International Space Station second expansion [2006]&quot;;
captions[12]=&quot;The International Space Station third expansion [2007]&quot;;
captions[13]=&quot;The ISS over the Ionian Sea [2007]&quot;;

var htmlCode = &quot;&quot;;

for (var i = 0; i &lt;= 13; i++) {
  htmlCode += &quot;&lt;figure&gt;&quot;;
  htmlCode += &quot;&lt;img alt=' ' src='slide&quot; + i + &quot;.jpg' /&gt;&quot;;
  htmlCode += &quot;&lt;figcaption&gt;&quot; + captions[i] + &quot;&lt;/figcaption&gt;&quot;;
  htmlCode += &quot;&lt;/figure&gt;&quot;;
}

document.getElementById(&quot;gallery&quot;).innerHTML = htmlCode;
</code></pre>
<p>But, to make your code perform better, be succinct, remove unnecessary lines, and avoid reliance on <code>.innerHTML</code> (which has security and performance implications) you should really write it like this:</p>
<pre><code>// Instead of explicit array declaration with an array size, you can
// just use implicit array declaration and the size will be determined
// by how many things you put in it.
var captions = [
  &quot;International Space Station fourth expansion [2009]&quot;,
  &quot;Assembling the International Space Station [1998]&quot;,
  &quot;The Atlantis docks with the ISS [2001]&quot;,
  &quot;The Atlantis approaches the ISS [2000]&quot;,
  &quot;The Atlantis approaches the ISS [2000]&quot;,
  &quot;International Space Station over Earth [2002]&quot;,
  &quot;The International Space Station first expansion [2002]&quot;,
  &quot;Hurricane Ivan from the ISS [2008]&quot;,
  &quot;The Soyuz spacecraft approaches the ISS [2005]&quot;,
  &quot;The International Space Station from above [2006]&quot;,
  &quot;Maneuvering in space with the Canadarm2 [2006]&quot;,
  &quot;The International Space Station second expansion [2006]&quot;,
  &quot;The International Space Station third expansion [2007]&quot;,
  &quot;The ISS over the Ionian Sea [2007]&quot;
];

// Create a new &quot;wrapper&quot; element which will hold the other dynamically
// created elements
var wrapper = document.createElement(&quot;div&quot;);

// Instead of a counting for loop, you can use Array.forEach(), which
// removes the need for you to set up and manage a loop counter
captions.forEach(function(caption, index){
  // You should really avoid string manipulations in a loop, which
  // can be costly in terms of performance. Also, when creating new
  // DOM elements, you should use the DOM API for better control and
  // to eliminate having to concatenate strings.
  let figure = document.createElement(&quot;figure&quot;);
  let img = document.createElement(&quot;img&quot;);
  let figcaption = document.createElement(&quot;figcaption&quot;);

  // Configure the new element properties
  img.alt = &quot; &quot;;
  img.src = &quot;slide&quot; + index + &quot;.jpg&quot;;
  figcaption.textContent = caption;

  // Put the image and figcaption in the figure
  figure.appendChild(img);
  figure.appendChild(figcaption);

  // Append the figure to the wrapper
  wrapper.appendChild(figure);
});

// Now, append the wrapper to the main document
document.getElementById(&quot;gallery&quot;).appendChild(wrapper);
</code></pre>
",1
65117053,"<blockquote>
<p>Symbols are not enumerable in for...in iterations. In addition, Object.getOwnPropertyNames() will not return symbol object properties, however, you can use Object.getOwnPropertySymbols() to get these. - <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol"" rel=""nofollow noreferrer"">MDN</a></p>
</blockquote>
<p>It's how Symbols work. They won't be iterated over. So using <code>Object.keys()</code> will exclude them from the result.</p>
<p>However you can use <a href=""https://developer.mozilla.org/nl/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertySymbols"" rel=""nofollow noreferrer""><code>Object.getOwnPropertySymbols()</code></a> to get the Symbols from the object and then combine them with <code>Object.keys()</code> to create a definitive list of all keys.</p>
<p>Check the example below to see it work. Do note that the stack snippet console interprets the <code>Symbol</code> as <code>null</code>. However when you open the console of your browser you should see the result as it actually is.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const myenum = {
  ""bla"": ""blub"",
  [Symbol(""foo"")]: ""bar"",
  [Symbol(""roger"")]: ""roger""
}

const iterableKeys = Object.keys(myenum);
const symbolKeys = Object.getOwnPropertySymbols(myenum);
const keys = [...iterableKeys, ...symbolKeys];

console.log(keys);

const values = keys.map(key =&gt; myenum[key]);

console.log(values);</code></pre>
</div>
</div>
</p>
<p>And as a shorter alternative which VLAZ suggested using <code>Reflect.ownKeys</code></p>
<blockquote>
<p>Its return value is equivalent to Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target)).</p>
</blockquote>
<p>Which means it already combines the <code>Object.keys()</code> (but using <code>Object.getOwnPropertyNames</code>) and <code>Object.getOwnPropertySymbols()</code> by default.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const myenum = {
  ""bla"": ""blub"",
  [Symbol(""foo"")]: ""bar"",
  [Symbol(""roger"")]: ""roger""
}

const keys = Reflect.ownKeys(myenum);

console.log(keys);

const values = keys.map(key =&gt; myenum[key]);

console.log(values);</code></pre>
</div>
</div>
</p>
",1
65131512,"<p>sendRedirect add an HTTP header &quot;Location&quot;, interpreted by the browser so it automatically redirect to the given location.</p>
<p>So if you call the method after sending data, headers are already sent and cannot work.</p>
<p>Try calling the method before any output.</p>
<p>But a redirect response is not supposed to have any body, because browsers may ignore it if a redirection is specified. If you want first to display your message in javascript, do the redirect in javascript like:</p>
<pre><code>out.println(&quot;location.href = \&quot;&quot; + request.getContextPath() + &quot;\&quot;;&quot;);
</code></pre>
<p>just after your alert:</p>
<pre class=""lang-java prettyprint-override""><code>        PrintWriter out = response.getWriter();
        response.setContentType(&quot;text/html&quot;);

        out.println(&quot;&lt;html&gt;&lt;body&gt;&quot;);  
        out.println(&quot;&lt;script type=\&quot;text/javascript\&quot;&gt;&quot;);  
        if(status.equals(&quot;Fail&quot;)) {
            out.println(&quot;alert('Import Failed !');&quot;);  
        }else {
            out.println(&quot;alert('Import Sucessfull !');&quot;);  
        }
        out.println(&quot;location.href = \&quot;&quot; + request.getContextPath() + &quot;\&quot;;&quot;);
        out.println(&quot;&lt;/script&gt;&quot;);
        out.println(&quot;&lt;/body&gt;&lt;/html&gt;&quot;);
        out.flush();
</code></pre>
",1
65105017,"<pre><code>for(var el of document.querySelectorAll(&quot;#schnittstelle-01 a&quot;))
    el.href = &quot;https://yoursite.com/&quot; + el.href;
</code></pre>
",1
65107974,"<p>You can use recursive to list them</p>
<pre><code>[
  {
    &quot;name&quot;: &quot;data.0.id.no&quot;,
    &quot;value&quot;: null
  },
  {
    &quot;name&quot;: &quot;data.0.id.uid&quot;,
    &quot;value&quot;: null
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.area&quot;,
    &quot;value&quot;: &quot;Universe&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.place&quot;,
    &quot;value&quot;: &quot;LMN&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.code&quot;,
    &quot;value&quot;: &quot;abc&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.group&quot;,
    &quot;value&quot;: &quot;xyz&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.0.definition.type&quot;,
    &quot;value&quot;: &quot;up&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.0.definition.features.featurekey&quot;,
    &quot;value&quot;: &quot;ABC&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.0.definition.features.featureValues&quot;,
    &quot;value&quot;: null
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.0.definition.mandatory&quot;,
    &quot;value&quot;: true
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.0.cost.currency&quot;,
    &quot;value&quot;: &quot;USD&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.0.cost.value&quot;,
    &quot;value&quot;: 1
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.1.definition.type&quot;,
    &quot;value&quot;: &quot;down&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.1.definition.mandatory&quot;,
    &quot;value&quot;: true
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.1.cost&quot;,
    &quot;value&quot;: &quot;100&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.2.definition.type&quot;,
    &quot;value&quot;: &quot;left&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.2.definition.value&quot;,
    &quot;value&quot;: null
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.2.definition.mandatory&quot;,
    &quot;value&quot;: true
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.information1.0.data.2.cost&quot;,
    &quot;value&quot;: false
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.hobby.indoor&quot;,
    &quot;value&quot;: false
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.hobby.outdoor&quot;,
    &quot;value&quot;: true
  },
  {
    &quot;name&quot;: &quot;data.0.id.dataBody.petName&quot;,
    &quot;value&quot;: &quot;Tiger&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.details&quot;,
    &quot;value&quot;: &quot;detail&quot;
  },
  {
    &quot;name&quot;: &quot;data.0.id.phone&quot;,
    &quot;value&quot;: &quot;contact&quot;
  }
]
</code></pre>
<p>The function:</p>
<pre><code>var output = Array();

function iterate(data, name, output)
{
    for(let key in data)
    {
        let value = data[key];

        if(value != null &amp;&amp; (typeof(value) == &quot;object&quot; || typeof(value) == &quot;array&quot;))
        {
            iterate(value, name + &quot;.&quot; + key, output);
        }
        else
        {
            output.push({name:name + &quot;.&quot; + key, value:value});
        }
    }
}


iterate(data, &quot;data&quot;, output);

console.log(&quot;Output&quot;, JSON.stringify(output, 0, 2));
</code></pre>
",1
65137929,"<p>for conditional rendering, you need to mock state like</p>
<pre><code>import AddContent from '../COMPONENT';
import Lock from '../COMPONENT'

it('should render AddContent component', () =&gt; {
  const wrapper = shallow(&lt;MyComponent {...props} /&gt;);
  wrapper.setState({ addingNewContent: true });
  const component = wrapper.find(AddContent);
  expect(component.length).toBe(1);
});

it('should render Lock Component', () =&gt; {
  const wrapper = shallow(&lt;MyComponent {...props} /&gt;);
  wrapper.setState({ addingNewContent: true });
  const component = wrapper.find(Lock);
  expect(component.length).toBe(1);
});
</code></pre>
<p>It's better to have separate test cases.</p>
",1
65130651,"<p>This may be an issue with the Vue CLI (webpack) <code>devServer</code> hostname.  Try this in <em>vue.config.js</em>:</p>
<pre class=""lang-js prettyprint-override""><code>module.exports = {
   devServer: {
      host: 'localhost'
   }
};
</code></pre>
",1
65089848,"<p>You need to remember objects with the <code>id</code> that you've seen earlier so you can compare them with the object you're looking at &quot;now&quot; in each loop iteration. A <code>Map</code> is a good way to do that in modern JavaScript, or an object created with <code>Object.create(null)</code> in ES5.</p>
<pre><code>const lastSeen = new Map();
for (const entry of myArray) {
    const {id, date, percentage} = entry;
    const last = lastSeen.get(id);
    if (last) {
        if (date &gt; last.date &amp;&amp; percentage &gt; last.percentage) {
            // ...this entry is newer than the previous one with the matching ID
            // Replace the previous one (and possibly do something with `stuff`?)
            lastSeen.set(id, entry);
        }
    } else {
        lastSeen.set(id, entry);
    }
}
</code></pre>
<p>Live Example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const myArray = [ { id: 'first', date: '2020-11-30', percentage: 10 }, { id: 'second', date: '2020-10-30', percentage: 20 }, { id: 'first', date: '2020-09-30', percentage: 30 } ];
const lastSeen = new Map()
for (const entry of myArray) {
    const {id, date, percentage} = entry;
    const last = lastSeen.get(id);
    if (last) {
        console.log(`Checking ${id} / ${date} / ${percentage}...`);
        if (date &gt; last.date &amp;&amp; percentage &gt; last.percentage) {
            // ...this entry is newer than the previous one with the matching ID
            // Replace the previous one (and possibly do something with `stuff`?)
            console.log(`Replacing ${id}...`);
            lastSeen.set(id, entry);
        } else {
            console.log(`Not replacing ${id}`);
        }
    } else {
        console.log(`${id} is new, adding...`);
        lastSeen.set(id, entry);
    }
}</code></pre>
</div>
</div>
</p>
<p>I haven't included setting <code>stuff</code> above because it's not clear what <code>let stuff = stuff;</code> in your original code was meant to do. You can find the latest ones per <code>id</code> in <code>lastSeen</code> or do something where indicated above to handle <code>stuff</code>.</p>
<p>In ES5-level code (but here in 2020 about to be 2021, I strongly recommend writing modern code and using a transpiler if you need to support obsolete environments):</p>
<pre><code>var lastSeen = Object.create(null);
for (let i = 0; i &lt; myArray.length; ++i) {
    var entry = myArray[i];
    var last = lastSeen[entry.id];
    if (last) {
        if (entry.date &gt; last.date &amp;&amp; entry.percentage &gt; last.percentage) {
            // ...this entry is newer than the previous one with the matching ID
            // Replace the previous one (and possibly do something with `stuff`?)
            lastSeen[entry.id] = entry;
        }
    } else {
        lastSeen[entry.id] = entry;
    }
}
</code></pre>
<p>Live Example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const myArray = [ { id: 'first', date: '2020-11-30', percentage: 10 }, { id: 'second', date: '2020-10-30', percentage: 20 }, { id: 'first', date: '2020-09-30', percentage: 30 } ];
var lastSeen = Object.create(null);
for (let i = 0; i &lt; myArray.length; ++i) {
    var entry = myArray[i];
    var last = lastSeen[entry.id];
    if (last) {
        console.log(`Checking ${entry.id} / ${entry.date} / ${entry.percentage}...`);
        if (entry.date &gt; last.date &amp;&amp; entry.percentage &gt; last.percentage) {
            // ...this entry is newer than the previous one with the matching ID
            // Replace the previous one (and possibly do something with `stuff`?)
            console.log(`Replacing ${entry.id}...`);
            lastSeen[entry.id] = entry;
        } else {
            console.log(`Not replacing ${entry.id}`);
        }
    } else {
        console.log(`${entry.id} is new, adding...`);
        lastSeen[entry.id] = entry;
    }
}</code></pre>
</div>
</div>
</p>
",1
65083316,"<p>the addEventListener callback has an event param which includes the input value on it so the function should be like this</p>
<pre class=""lang-js prettyprint-override""><code> bgc.addEventListener(&quot;change&quot;, function(event){
    bod.style.backgroundColor  = event.target.value;
  });
</code></pre>
<p>no need for the loop.</p>
",1
65142672,"<p>Use the <code>escape()</code> function. your could should use it like this: <code>escape(tempDesc)</code>. It is needed here because you have to escape the quote in order to archive that its proceeded like a normal char and not as the end of the enquoted string like in:</p>
<p>&quot;this String is in &quot;quotes&quot; but still has quotes in it&quot;.</p>
<p><code>&quot;this String is in \&quot;quotes\&quot; but still has quotes in it&quot;.</code></p>
",1
65138228,"<h2>Refer this:</h2>
<hr />
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function showpopup() {
  let tooltip = document.getElementById(""tooltiptext"");
  let visible = tooltip.style.display;
  if (visible == ""none"") {
    document.getElementById(""tooltiptext"").style.display = ""block"";
  } else {
    document.getElementById(""tooltiptext"").style.display = ""none"";
  }

}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>img {
  cursor: pointer;
  margin-top: 30px;
}

.tooltip {
  display: block;
  background: black;
  border-radius: 5px;
  max-width: 300px;
  width: 300px;
  position: absolute;
  padding: 12px 18px;
  font-family: open-sans-regular, sans-serif;
  font-size: 14px;
  color: white;
  line-height: 22px;
  box-sizing: border-box;
  z-index: 1000;
  outline: none;
}

.tooltip.bottom .arrow {
  top: 0;
  left: 50%;
  border-top: none;
  border-bottom: 10px solid black;
}

.tooltip .arrow {
  width: 0;
  height: 0;
  position: absolute;
  left: 50%;
  border-left: 10px solid transparent;
  border-right: 10px solid transparent;
  border-top: 10px solid #43b02a;
  margin-top: -10px;
  margin-left: -10px;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;img width=""200"" height=""200"" src=""http://i.stack.imgur.com/o2hxa.png"" onclick=""showpopup()""&gt;&lt;/img&gt;
&lt;div id=""tooltiptext"" class=""bottom tooltip"" style=""display: none;""&gt;
  &lt;div class=""arrow""&gt;
  &lt;/div&gt;
  LMS short explanation
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",1
65096606,"<p>the line chart works differently than the pie chart shown in the provided example.</p>
<p>pie charts can only have one series.<br />
whereas line charts can have multiple series.</p>
<p>to highlight the series when hovering the legend,<br />
we need to provide the column number of the series,<br />
rather than the row associated with the &quot;pie slice&quot;.<br />
and we need to provide <code>null</code> as the row index...</p>
<p>see following working snippet...</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>google.charts.load('current', { 'packages': ['line'] });
google.charts.setOnLoadCallback(drawChart);

function drawChart() {
  var data = new google.visualization.DataTable();
  data.addColumn('string', 'Day');
  data.addColumn('number', 'Yes');
  data.addColumn('number', 'No');

  data.addRows([
    ['19/11/2020 \n 02:48:16', 1.2, 1.6],
    ['19/11/2020 \n 02:48:22', 1.2, 1.6],
    ['19/11/2020 \n 02:48:28', 1.3, 1.6]
  ]);

  var options = {
    legend: {
      position: 'none'
    },
    height: '100%',
    width: '100%',
    vAxis: {
      viewWindow: {
        min: 1,
        max: 1.95,
      }
    },
    colors: ['#1976D2','#E53935']
  };

  var chart = new google.charts.Line(document.getElementById('linechart_material'));
  chart.draw(data, google.charts.Line.convertOptions(options));

  $('#legend tr').hover(function () {
    chart.setSelection([{ column: $(this).data('column'), row: null }]);
  }, function () {
    chart.setSelection([]);
  })
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.color {
        width: 2.5rem;
        height: 1.5rem;
        border-radius: 0.1875rem;
    }

    #linechart_material {
        width: 500px;
        height:200px;
        padding-top:5px;
    }
    
    .title {
    margin-bottom: -0.0005rem;
}

.subtitle {
    color: gray;
    font-size: 16px;
}

.state {
    width: 2.5rem;
    height: 1.5rem;
    border-radius: 0.1875rem;
    color: white;
    margin-left: 3px;
    padding-left: 5px;
    padding-right: 5px;
    padding-bottom: 4px;
    font-weight: 600;
}

.state-open {
    background-color: #00ba54;
}

.state-closed {
    background-color: #d00000;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://www.gstatic.com/charts/loader.js""&gt;&lt;/script&gt;
&lt;div id=""linechart_material""&gt;&lt;/div&gt;


&lt;table class=""table-hover""&gt;
  &lt;tbody id=""legend""&gt;
    &lt;tr data-column=""1""&gt;
      &lt;td&gt;
        &lt;div class=""color"" style=""background-color:#1976D2""&gt;&lt;/div&gt;
      &lt;/td&gt;
      &lt;td style=""padding-left:20px; padding-right:20px; padding-top:5px; padding-bottom:5px;""&gt;
        Yes
      &lt;/td&gt;
      &lt;td&gt;
        1.3
      &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr data-column=""2""&gt;
      &lt;td&gt;
        &lt;div class=""color"" style=""background-color:#E53935""&gt;&lt;/div&gt;
      &lt;/td&gt;
      &lt;td style=""padding-left:20px; padding-right:20px; padding-top:5px; padding-bottom:5px;""&gt;
        No
      &lt;/td&gt;
      &lt;td&gt;
        1.6
      &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</code></pre>
</div>
</div>
</p>
",1
65121595,"<p>Loop through the DIVs in one section, and append that DIV followed by a DIV from the second section.</p>
<p>The second append always uses <code>.first()</code> because it's removing the first DIV from the second section, so the next corresponding DIV will then be first.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$("".first &gt; div"").each(function() {
  $("".merged"").append(this);
  $("".merged"").append($("".second &gt; div"").first());
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;section class=""first""&gt;
  &lt;div&gt;One&lt;/div&gt;
  &lt;div&gt;Two&lt;/div&gt;
  &lt;div&gt;Three&lt;/div&gt;
&lt;/section&gt;

&lt;section class=""second""&gt;
  &lt;div&gt;Four&lt;/div&gt;
  &lt;div&gt;Five&lt;/div&gt;
  &lt;div&gt;Six&lt;/div&gt;
&lt;/section&gt;

&lt;section class=""merged""&gt;
&lt;/section&gt;</code></pre>
</div>
</div>
</p>
",1
65114120,"<p>You make the request after every render.
add <code>[]</code> as second argument of <code>useEffect()</code> in order to make the request once after first render.</p>
<pre><code>const [items, setItems] = useState([{}]);
useEffect(() =&gt; {
    axios.get('/item').then(res =&gt; {
       setItems(res.data)
    }).catch(err =&gt; console.log(err));
}, [])
</code></pre>
",1
65127305,"<p>You'll need double escaping. This is how I found that out:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// how does it look this way?
console.log(document.querySelector(`#foo &gt; option[value^='#P1']`));
// aha!
console.log(document.querySelector(`#foo &gt; option[value='#P1\\\\""']`));
// jQuery too?
console.log($(`#foo &gt; option[value='#P1\\\\""']`)[0]);
// how about value=""\☺""?
console.log(document.querySelector(`#foo &gt; option[value='\\\\☺']`));

// fun use
document.body.appendChild( Object.assign( document.createElement(""div""), {
    style: ""font-size:4rem; top:-15px;position:absolute;left:5rem;"",
    innerHTML: document.querySelector(`#foo &gt; option[value='\\\\☺']`).value.slice(1), 
  } )
);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;p id='P1""'&gt;Hello World&lt;/p&gt;
&lt;datalist id=""foo""&gt;
&lt;option value='#P1\""' /&gt;
&lt;option value=""\☺"" /&gt;
&lt;/datalist&gt;</code></pre>
</div>
</div>
</p>
",1
65161627,"<p>Convert the two terms to lowercase before comparing them:</p>
<pre class=""lang-js prettyprint-override""><code>export default {
  computed: {
    filteredOffers() {
      const searchTerm = this.search.toLowerCase();
      return this.items.filter((offer) =&gt; {
        return offer.title.toLowerCase().match(searchTerm);
      });
    }
  }
}
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const items = [
  { title: 'Foo bar' },
  { title: 'The Milk Is Delicious' },
  { title: 'Baz qux' },
  { title: 'I drink chocolate milk' },
]

const search = 'milk'
const searchTerm = search.toLowerCase()
const result = items.filter((offer) =&gt; {
  return offer.title.toLowerCase().match(searchTerm)
})

console.log(result)</code></pre>
</div>
</div>
</p>
",1
65106835,"<p>You're too close for the solution. Check whether the below code fulfills your task:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const objectFruits = [{
    fruits: 'apple'
  },
  {
    fruits: 'banana'
  },
  {
    fruits: 'strawberry'
  },
  {
    fruits: 'manggo'
  },
];

const objectMyFavorite = [{
    fruits: 'apple'
  },
  {
    fruits: 'apple'
  },
  {
    fruits: 'banana'
  },
];

const getAllFruits = {
  fruits: objectFruits.map(item =&gt; item.fruits)
}
const getAllMyFavorite = {
  fruits: objectMyFavorite.map(item =&gt; item.fruits)
}

let myView = '';

for (let i = 0; i &lt; getAllFruits['fruits'].length; i++) {
  const nameFruits = getAllFruits['fruits'][i];
  const filterMyFavorite = getAllMyFavorite['fruits'].filter(function(fruitss) {
    return fruitss == nameFruits
  });
  // and how I delete the empty and just show array if value is not null and show it to user

    if (filterMyFavorite.length &gt; 0){
      myView += `&lt;p&gt;${filterMyFavorite}&lt;/p&gt;`
   }
}

document.getElementById(""test"").innerHTML = myView</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
  &lt;meta charset=""utf-8""&gt;
  &lt;meta name=""viewport"" content=""width=device-width""&gt;
  &lt;title&gt;test&lt;/title&gt;
  &lt;link href=""style.css"" rel=""stylesheet"" type=""text/css"" /&gt;
&lt;/head&gt;

&lt;body&gt;
  &lt;div id=""test""&gt;

  &lt;/div&gt;
  &lt;script src=""script.js""&gt;&lt;/script&gt;
&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",1
65108345,"<blockquote>
<p>Does this mean that such an architecture cannot used Javascript?</p>
</blockquote>
<p>No. It means JS cannot read data from the cookie.</p>
<blockquote>
<p>I see requests back to the application (trying to update dynamic content through both HTTP requests and websocket connections) being redirected to my identity provider (and blocked by CORS policy) since they do not have access to the login cookie.</p>
</blockquote>
<p>The CORS policy should not block requests because cookies are missing.</p>
<p>If a cookie is missing then it is probably because you are (a) getting your origins mixed up and that origin doesn't have a cookie or (b) you didn't enable the <code>credentials</code> <a href=""https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters"" rel=""nofollow noreferrer"">option</a> for a cross-origin request.</p>
<blockquote>
<p>Is it common to disable the HTTPOnly flag to allow Javascript to work?</p>
</blockquote>
<p>No.</p>
<blockquote>
<p>My understanding is that Javascript from a malicious website at a different origin trying to access my application would be blocked by CORS anyway, so would keeping the HTTPOnly flag only help against attacks where the attacker managed to inject Javascript into my application?</p>
</blockquote>
<p>Yes. XSS attacks are so common that there are many tools to mitigate against them. This is one of them.</p>
",1
65096518,"<p>jQuery's <a href=""https://api.jquery.com/children/"" rel=""nofollow noreferrer""><code>children()</code></a> returns all children of the selector. In your context, you'll get all of the links instead of the one that was clicked. Here's a demonstration:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).on(""click"", "".alphabet"", function() {
  let $children = $(this).children();
  $children.each((k, item) =&gt; console.log(item.id));
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""alphabet""&gt;
  &lt;a id=""a""&gt;a&lt;/a&gt;
  &lt;a id=""b""&gt;b&lt;/a&gt;
  &lt;a id=""c""&gt;c&lt;/a&gt;
  &lt;a id=""d""&gt;d&lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>One idea is to target the <code>&lt;a&gt;</code> tags instead of the <code>&lt;div&gt;</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).on(""click"", "".alphabet a"", function() {
  console.log(this.id);
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""alphabet""&gt;
  &lt;a id=""a""&gt;a&lt;/a&gt;
  &lt;a id=""b""&gt;b&lt;/a&gt;
  &lt;a id=""c""&gt;c&lt;/a&gt;
  &lt;a id=""d""&gt;d&lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>Another idea is to use the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Event/target"" rel=""nofollow noreferrer"">event target</a>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(document).on(""click"", "".alphabet"", function(e) {
  console.log(e.target.id);
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""alphabet""&gt;
  &lt;a id=""a""&gt;a&lt;/a&gt;
  &lt;a id=""b""&gt;b&lt;/a&gt;
  &lt;a id=""c""&gt;c&lt;/a&gt;
  &lt;a id=""d""&gt;d&lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>Finally, unless the <code>.alphabet</code> element or its children are dynamically generated, <a href=""https://learn.jquery.com/events/event-delegation/"" rel=""nofollow noreferrer"">event delegation</a> is likely not necessary. You can bind the event handler directly to the link elements, like so:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('.alphabet a').on(""click"", function(e) {
  console.log(this.id);
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div class=""alphabet""&gt;
  &lt;a id=""a""&gt;a&lt;/a&gt;
  &lt;a id=""b""&gt;b&lt;/a&gt;
  &lt;a id=""c""&gt;c&lt;/a&gt;
  &lt;a id=""d""&gt;d&lt;/a&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>Also see <a href=""https://stackoverflow.com/questions/203198/event-binding-on-dynamically-created-elements"">Event binding on dynamically created elements?</a></p>
",1
65137966,"<blockquote>
<ul>
<li>add <code>speed</code> to <code>x</code> by every second.</li>
<li>whatever the function execute how many times (also by every second).</li>
</ul>
</blockquote>
<p>This could be a basic math question. Answer is quite simple:</p>
<blockquote>
<p>Divide the <code>speed</code> variable to <code>attemptedFPS</code> pieces.</p>
</blockquote>
<p>Because it will get added back within your loops.</p>
<p>To test, this loop will run <code>1000/attemptedFPS</code> times, and whatever you set <code>attemptedFPS</code> to what, the result will always be <code>x += speed</code> (10 as the example).</p>
<pre class=""lang-js prettyprint-override""><code>for (let i = 0; i &lt; 1000; i += 1000/attemptedFPS) {
  x += speed / attemptedFPS;
}

// result: 9.999999999999996;
</code></pre>
<p>But as you can see, it should be <code>10</code> exactly. This is because Floating point precision problem in JavaScript. I'd suggest <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision"" rel=""nofollow noreferrer""><code>Number.toPrecision())</code></a> to handle this problem, however it should works.</p>
<pre><code>for (let i = 0; i &lt; 1000; i += 1000/attemptedFPS) {
  x += speed / attemptedFPS;
  x = +parseFloat(x.toPrecision(12));
}

// result: 10;
</code></pre>
<p>So, answer to your question:</p>
<pre class=""lang-js prettyprint-override""><code>setInterval(function(){
  x += speed / attemptedFPS;
  x = +parseFloat(x.toPrecision(12));
}, 1000/attemptedFPS);
</code></pre>
",1
65112216,"<p>You can't avoid the callback.  You will need to check <code>hasPendingWrites</code> in your code to determine if you want to do anything in the callback.</p>
<p>The reason why the callback always fires for local uncommitted write is because developers typically want to keep their UIs up to date ASAP with pending document changes, assuming that they are going to be written.  If that's not the case for you, you will need to use that property to determine what the user should see in your own UI based on the state of the document.</p>
",1
65087244,"<p>If you're using <code>import { something } from './config.ts'</code>, you're using JavaScript modules, but your code in <code>config.ts</code> is using CommonJS modules. Some bundlers and such may let you mix them, but it's best not to.</p>
<p>To make <code>config.ts</code> a JavaScript module compatible with that <code>import</code> declaration (which expects a named export called <code>something</code>), change it to:</p>
<pre><code>export const something = 123;
</code></pre>
<hr />
<p>Or, of course, to use <code>config.ts</code> via CommonJS, your code using it would be:</p>
<pre><code>const { something } = require(&quot;./config.ts&quot;);
</code></pre>
<p>...but given the error you're getting, I think your project is set up to use JavaScript modules (<code>import</code>/<code>export</code>), which here in almost 2021 is probably best (now that we have <a href=""https://github.com/tc39/proposal-dynamic-import"" rel=""nofollow noreferrer"">dynamic import</a> to handle the cases where static modules don't quite do the job).</p>
",1
65155728,"<p>You should be more specific about the variable names. Also, you can use <code>this</code> keyword to refer the current select element inside the function. Not sure why you are using the in-line event handler:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=""button"" class=""btn btn-sm btn-w1"" name=""txtval"" id=""txtval""&gt;
&lt;select class=""lbbg selsm-2 inblock-2 "" name=""rupeeitems"" id=""rupeeitems""&gt;
  &lt;option value=""""&gt;Select&lt;/option&gt;
  &lt;option value=""RUB Dollar""&gt;RUB&lt;/option&gt;
  &lt;option value=""AFN Dinaar""&gt;AFN&lt;/option&gt;
  &lt;option value=""EUR Dollar""&gt;EUR&lt;/option&gt;
&lt;/select&gt;

&lt;!-- This one is working properly --&gt;
&lt;input type=""button"" class=""btn btn-sm btn-w1"" name=""txtprice"" id=""txtprice""&gt;
&lt;select class=""lbbg selsm-2 inblock-2 "" name=""cmbitems"" id=""cmbitems""&gt;
  &lt;option value=""""&gt;Select&lt;/option&gt;
  &lt;option value=""USD Dollar""&gt;USD&lt;/option&gt;
  &lt;option value=""Euro Dollar""&gt;EUR&lt;/option&gt;
  &lt;option value=""Aud Dollar""&gt;AUD&lt;/option&gt;
  &lt;option value=""Bahrien ""&gt;BHD&lt;/option&gt;
&lt;/select&gt;
&lt;script&gt;
  var selectRupee = document.getElementById('rupeeitems');
  var inputRupee = document.getElementById('txtval');
  selectRupee.onchange = function() {
    inputRupee.value = this.value;
  }

  var selectCmb = document.getElementById('cmbitems');
  var inputCmb = document.getElementById('txtprice');
  selectCmb.onchange = function() {
    inputCmb.value = this.value;
  }
&lt;/script&gt;</code></pre>
</div>
</div>
</p>
",1
65121459,"<p><code>colnames(df) &lt;- c(&quot;&quot;,&quot;&quot;)</code> does not do what you want here. You want <code>colnames = FALSE</code> in your <code>renderTable()</code> call.</p>
<p><a href=""https://i.stack.imgur.com/31dH5.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/31dH5.png"" alt=""no header row with colnames = FALSE"" /></a></p>
<p>Here is a simple example. Note that the result is the same with or without the <code>colnames&lt;-</code> line. I can reproduce your image with <code>colnames = TRUE</code></p>
<p><a href=""https://i.stack.imgur.com/JpXYM.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/JpXYM.png"" alt=""header row present with default colnames argument"" /></a></p>
<pre class=""lang-r prettyprint-override""><code>library(shiny)
ui &lt;- fluidPage(
    flowLayout(
        mainPanel(
           tableOutput(&quot;testTable&quot;)
        )
    )
)
server &lt;- function(input, output) {
    dat &lt;- data.frame(a = c(1,2,3),b = c(4,5,6),c = c(7,8,9))
    colnames(dat) &lt;- c(&quot;&quot;,&quot;&quot;,&quot;&quot;)
    output$testTable &lt;- renderTable(dat, colnames = FALSE, bordered = TRUE)
}
shinyApp(ui = ui, server = server)
</code></pre>
",1
65131938,"<p>Based on the algorithm given by the OP in the chat, the code word sequencing is wrong</p>
<p>Compare sorted sequence with unsorted sequence instead of the other way</p>
<p>Replace <code>key_array_unsorted[i] == key_array_sorted[j]</code> with <code>key_array_sorted[i] == key_array_unsorted[j]</code></p>
",2
65118170,"<p>querySelector and childNodes</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const spans = [...document.querySelectorAll("".locDescription"")];
const details = spans.map(span =&gt; {
  const name = span.querySelector(""b"").textContent;
  const id = span.childNodes[2].nodeValue;
  return { name, id };
});
console.log(details);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;span class=""locDescription""&gt;&lt;b&gt;Name1&lt;/b&gt;&lt;br&gt; ID1&lt;/span&gt;
&lt;span class=""locDescription""&gt;&lt;b&gt;Name2&lt;/b&gt;&lt;br&gt;ID2&lt;/span&gt;
&lt;span class=""locDescription""&gt;&lt;b&gt;Name3&lt;/b&gt;&lt;br&gt; ID3&lt;/span&gt;</code></pre>
</div>
</div>
</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const spans = Array.from(document.querySelectorAll("".locDescription""));
const details = spans.map(function(span){
  const name = span.querySelector(""b"").textContent;
  const id = span.childNodes[2].nodeValue;
  return { name: name, id: id };
});
console.log(details);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;span class=""locDescription""&gt;&lt;b&gt;Name1&lt;/b&gt;&lt;br&gt; ID1&lt;/span&gt;
&lt;span class=""locDescription""&gt;&lt;b&gt;Name2&lt;/b&gt;&lt;br&gt;ID2&lt;/span&gt;
&lt;span class=""locDescription""&gt;&lt;b&gt;Name3&lt;/b&gt;&lt;br&gt; ID3&lt;/span&gt;</code></pre>
</div>
</div>
</p>
",2
65128613,"<p>You can apply <code>lookAt</code> to any <code>Object3D</code>. <a href=""https://threejs.org/docs/#api/en/core/Object3D.lookAt"" rel=""nofollow noreferrer""><code>Object3D.lookAt( ... )</code></a></p>
<p>You have already discovered that <code>lookAt</code> causes the shapes to point in the <code>+Z</code> direction, and are compensating for that. But it can be taken a step further with the introduction of a <a href=""https://threejs.org/docs/#api/en/objects/Group"" rel=""nofollow noreferrer""><code>Group</code></a>. <code>Group</code>s are also derived from <code>Object3D</code>, so they also support the <code>lookAt</code> method.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let W = window.innerWidth;
let H = window.innerHeight;

const renderer = new THREE.WebGLRenderer({
  antialias: true,
  alpha: true
});
document.body.appendChild(renderer.domElement);

const scene = new THREE.Scene();

const camera = new THREE.PerspectiveCamera(28, 1, 1, 1000);
camera.position.set(10, 10, 50);
camera.lookAt(scene.position);
scene.add(camera);

const light = new THREE.DirectionalLight(0xffffff, 1);
light.position.set(0, 0, -1);
camera.add(light);

const group = new THREE.Group();
scene.add(group);

const arrowMat = new THREE.MeshLambertMaterial({color:""green""});

const arrowGeo = new THREE.ConeBufferGeometry(2, 5, 32);
const arrowMesh = new THREE.Mesh(arrowGeo, arrowMat);
arrowMesh.rotation.x = Math.PI / 2;
arrowMesh.position.z = 2.5;
group.add(arrowMesh);

const cylinderGeo = new THREE.CylinderBufferGeometry(1, 1, 5, 32);
const cylinderMesh = new THREE.Mesh(cylinderGeo, arrowMat);
cylinderMesh.rotation.x = Math.PI / 2;
cylinderMesh.position.z = -2.5;
group.add(cylinderMesh);

function render() {
  renderer.render(scene, camera);
}

function resize() {
  W = window.innerWidth;
  H = window.innerHeight;
  renderer.setSize(W, H);
  camera.aspect = W / H;
  camera.updateProjectionMatrix();
  render();
}

window.addEventListener(""resize"", resize);

resize();

let rad = 0;

function animate() {
  rad += 0.05;
  group.lookAt(Math.sin(rad) * 100, Math.cos(rad) * 100, 100);
  renderer.render(scene, camera);
  requestAnimationFrame(animate);
}
requestAnimationFrame(animate);</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html,
body {
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
  overflow: hidden;
  background: skyblue;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://threejs.org/build/three.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
<p>The key here is that the cone/shaft are made to point in the <code>+Z</code> direction, and then added to the <code>Group</code>. This means their orientations are now <em>local to the group</em>. When the group's <code>lookAt</code> changes, the shapes follow suit. And because the &quot;arrow&quot; shapes point in the group's local <code>+Z</code> direction, that means they also point at whatever position was given to <code>group.lookAt(...);</code>.</p>
<h2>Further work</h2>
<p>This is just a starting point. You'll need to adapt this to how you want it to work with constructing the arrow at the correct position, with the correct length, etc. Still, the grouping pattern should make <code>lookAt</code> easier to work with.</p>
",2
65107064,"<blockquote>
<p>so in catch block if i return something is considered resolved and so the outer function then() is called?</p>
</blockquote>
<p>Yes.</p>
<blockquote>
<p>in this case the only way is to keep the propagation of the error throwing an exception in the catch?</p>
</blockquote>
<p>I would suggest not to put the <code>.catch()</code> inside <code>_get</code>. Instead, write</p>
<pre><code>function callDoStuff(id: number) {
  doStuff(id).then(() =&gt; {
    notification.success({ message: 'Success', description: 'Template deleted!' });
  }, (error: Error) =&gt; {
    notification.error({ message: 'Error', description: error.message })
  });
}
</code></pre>
",2
65130344,"<p>You can use event delegation on the parent <code>&lt;ul&gt;</code>.</p>
<pre><code>$('ul.nav').on('click', '.nav-item:contains(&quot;Support&quot;)', function(e){
    loadRequests();
    //do something else
});
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('ul.nav').on('click', '.nav-item:contains(""Support"")', function(e) {
  console.log('clicked');
  //do something else
});
$('button').click(function(e) {
  $('ul.nav').append(`&lt;li class=""nav-item""&gt;
                    &lt;a class=""nav-link"" data-toggle=""tab"" href=""#@n.href"" role=""tab"" aria-selected=""true"" id=""@n.aId""&gt;
                        ${Math.random() &lt; 0.5 ? 'something else' : 'Support'}
                    &lt;/a&gt;
                &lt;/li&gt;`);
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;ul class=""nav nav-tabs  nav-tabs-line"" role=""tablist""&gt;
  &lt;li class=""nav-item""&gt;
    &lt;a class=""nav-link"" data-toggle=""tab"" href=""#@n.href"" role=""tab"" aria-selected=""true"" id=""@n.aId""&gt;
                        Support
                    &lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;button&gt;Add Tab&lt;/button&gt;</code></pre>
</div>
</div>
</p>
",2
65157366,"<p>This can be achieved by using passing the object to the <code>Object#freeze</code> method.</p>
<p>From MDN <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze"" rel=""nofollow noreferrer"">docs</a>:</p>
<blockquote>
<p>The <code>Object.freeze()</code> method freezes an object. A frozen object can no
longer be changed; freezing an object prevents new properties from
being added to it, existing properties from being removed, prevents
changing the enumerability, configurability, or writability of
existing properties, and prevents the values of existing properties
from being changed. In addition, freezing an object also prevents its
prototype from being changed. freeze() returns the same object that
was passed in.</p>
</blockquote>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const settings = {};
settings.backgroundColor = '#FFF'; 
settings.textColor       = '#333'; 
settings.shadowColor     = '#DDD';

Object.freeze(settings)

settings.textColor = ""#FFF"";
console.log(settings)

settings.newColor = ""#FFF"";
console.log(settings)

delete settings.textColor
console.log(settings)</code></pre>
</div>
</div>
</p>
<p>Note - The operations above throws <code>TypeError</code> in <em>strict mode</em></p>
<p>The above method makes a shallow freezing of the object, but any child object property can be modified:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const obj1 = {
  internal: {}
};

Object.freeze(obj1);
obj1.internal.a = 'aValue';

console.log(obj1.internal.a)</code></pre>
</div>
</div>
</p>
<p>To freeze the entire object graph you need to freeze individual object properties of the object recursively:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function deepFreeze(object) {
  // Retrieve the property names defined on object
  const propNames = Object.getOwnPropertyNames(object);
  // Freeze properties before freezing self
  propNames.forEach(name =&gt; {
    const value = object[name];

    if (value &amp;&amp; typeof value === ""object"") {
      deepFreeze(value);
    }
  });
  return Object.freeze(object);
}

const obj2 = {
  internal: {
    a: null
  }
};

deepFreeze(obj2);

obj2.internal.a = 'anotherValue'; 
console.log(obj2.internal.a)</code></pre>
</div>
</div>
</p>
",2
65084986,"<p>You can access properties on your object by variable in the following way:</p>
<pre><code>item[column]
</code></pre>
<p>where column is a keyof item, so this should work:</p>
<pre><code>search(column): void {
      this.listOfData = this.listOfData.filter((item: DataItem) =&gt;
        item[column]indexOf(filterFormData.formInput) !== -1
      );
}
</code></pre>
",2
65096348,"<p><a href=""https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/date#Value"" rel=""nofollow noreferrer"">The MDN docs on &lt;input type=&quot;date&quot;&gt;</a> state that:</p>
<blockquote>
<p>the parsed value is always formatted yyyy-mm-dd</p>
</blockquote>
<p>So you shouldn't pass a <code>Date</code> object in your inputs' <code>value</code> attribute, since a <code>Date</code>'s default string representation is something like:</p>
<p><em>Tue Dec 01 2020 09:52:36 GMT-0800 (Pacific Standard Time)</em></p>
<p>when <code>value</code> should be:</p>
<p><em>2020-12-01</em></p>
<p>What appears in the <code>&lt;input type=&quot;date&quot;&gt;</code> text box is up to the browser locale, you cannot change the way the date appears in a native date picker.</p>
<p>A few other pointers as well:</p>
<ul>
<li><p><code>new Date(Date.now())</code> is redundant, you may use <code>new Date()</code> without any arguments to get a <code>Date</code> object pointing to the present instead.</p>
</li>
<li><p>You cannot use <code>replace()</code> functions on <code>Date</code> objects - not before turning them into Strings, you'll get an Error otherwise. You probably meant to do:</p>
<pre class=""lang-js prettyprint-override""><code>Intl.DateTimeFormat(&quot;fr-CA&quot;, {
                year: &quot;numeric&quot;,
                month: &quot;numeric&quot;,
                day: &quot;numeric&quot;,
              }).format(new Date(endDate)).replaceAll('-', '/')
</code></pre>
</li>
<li><p>Speaking of <code>replace()</code>, you don't have to chain <code>replace()</code> twice to substitute all dashes (-) for slashes (/). You can use a <code>replaceAll()</code> like above, or type <code>replace(/-/g, '/')</code> (notice the &quot;g&quot; after the regular expression object).</p>
</li>
</ul>
<p>Not that the above pointers solve your problem. You still have to convert your <code>Date</code> in a &quot;yyyy-MM-dd&quot; string.</p>
",2
65126188,"<p>You instanciated a new instance of the class.This is why is it undefined. There is a few way you could fix this problem. I would suggest exporting the created model and using this model in your other file.</p>
<pre class=""lang-js prettyprint-override""><code>//model.js
   const token = new Tokens();
    token.setAccessToken(access_token);
    token.setRefreshToken(refresh_token);
    export default token;
 
// scheduler.js
import { test } from './models/model.js'

// Here, the test is going to be the same as declared before.
console.log('xxx',test.getAccessToken())
</code></pre>
<p>Here, you can see that the newly instanciated class is imported into the <code>scheduler</code>, to be used.</p>
<p>Another way you could acheive this is to use a singleton pattern. A singleton is a class that contains only one instance. Using this pattern, the data will be the same whereever you are trying to call the function.</p>
<pre><code>export default class TokensSingleton {
    this.instance = null;

    constructor(){ /* ... */}

    static getInstance() {
        if(!TokensSingleton.instance) {
            TokensSingleton.instance = new TokensSingleton();
        }
        
        return TokensSingleton.instance;
    }

    /* ... */
}


//index.js
    const token = TokenSingleton.getInstance();
    token.setAccessToken('test');
    token.setRefreshToken(refresh_token);

// scheduler.js
import Tokens from './models/tokens.js'


const test = TokenSingleton.getInstance();
console.log('xxx',test.getAccessToken()) // xxx, test
</code></pre>
<p>Please note that this code is untested.</p>
",2
65148144,"<p>Try to not use a computed property in another one :</p>
<pre><code>    positions_filtered: function () {
      return this.configPositions.filter((positions) =&gt; {
        return this.myNodes.find((node) =&gt; {
          return !node.deleted &amp;&amp;  positions.node_id == node.node_id
        })
      })
    },

</code></pre>
",2
65097709,"<p>Iterate through the array first while keeping track of the lowest sum found so far. At the end, the result is the number such that adding it to the lowest sum found results in 1:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const minX = (arr) =&gt; {
  let recordMin = 0;
  let sum = 0;
  for (const elm of arr) {
    sum += elm;
    recordMin = Math.min(recordMin, sum);
  }
  return -recordMin + 1;
};

console.log(minX([-2, 3, 1, -5]));
console.log(minX([-2, 3, 1, -5, 999]));</code></pre>
</div>
</div>
</p>
",2
65150328,"<p>Your arrow function immediately, and unconditionally returns another function, not a promise!</p>
<pre class=""lang-js prettyprint-override""><code>const getData = () =&gt; (dispatch =&gt; new Promise(...))
</code></pre>
<p><code>getData()</code> is a function, so <code>.then</code> does not exist on it.</p>
<p>Try it yourself</p>
<pre class=""lang-js prettyprint-override""><code>console.assert(typeof getData() !== &quot;function&quot;, &quot;`.then` doesn't exist on a function&quot;);
</code></pre>
<p>Honestly, this code ought to remove the dispatch callback and let the callee use a <code>.then</code> handler, that's what promises are for.</p>
<pre class=""lang-js prettyprint-override""><code>const getData = async () =&gt; {
    const data = await apiService.getByParameter(abc);

    return update(data);
});
</code></pre>
",2
65122886,"<p>you need to wait the received data before to rendering the page. You can do 2 things:</p>
<p><strong>1)</strong> use a boolean and <code>ngIf</code> directive so:</p>
<pre><code>loadingData = true;
ngOnInit() {
    this._assingedSiteService.getAssignedSitesForLogInUser().subscribe((res) =&gt; {
        this.sites = res;
        console.log(this.sites);
        this.loadingData = false;
      }, (error) =&gt; {
        console.log(error);
      }
    );
}
</code></pre>
<p>template</p>
<pre><code>  &lt;select class=&quot;form-control&quot; *ngIf=&quot;!loadingData&quot;&gt;
    &lt;option *ngFor=&quot;let site of sites&quot;&gt;
      {{site.siteName | json}}
    &lt;/option&gt;
  &lt;/select&gt;
</code></pre>
<p><strong>2)</strong> which I prefer, if you have no logic inside your subscription, use <code>async</code> pipe inside your template:</p>
<pre><code>sites$: Observable&lt;Site&gt;;

ngOnInit() {
   this.sites$ = this._assingedSiteService.getAssignedSitesForLogInUser();
}
</code></pre>
<p>template:</p>
<pre><code>  &lt;select class=&quot;form-control&quot;&gt;
    &lt;option *ngFor=&quot;let site of sites$ | async&quot;&gt;
      {{site.siteName | json}}
    &lt;/option&gt;
  &lt;/select&gt;
</code></pre>
",2
65131048,"<p>you can use the <a href=""https://developers.google.com/chart/interactive/docs/reference#dateformat"" rel=""nofollow noreferrer"">DateFormat class</a>, to format the date values.</p>
<p>by default, the tooltip will display the formatted value.</p>
<p>create the date format using a format pattern...</p>
<pre><code>var formatMonth = new google.visualization.DateFormat({
  pattern: 'MMM yyyy'
});
</code></pre>
<p>then use the <code>format</code> method to format the data table column...<br />
<code>format(dataTable, columnIndex)</code></p>
<pre><code>formatMonth.format(data, 0);
</code></pre>
<p>see following working snippet...</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>google.charts.load('current', {
  packages: ['corechart'],
  language: 'nl'
}).then(function () {
  var data = google.visualization.arrayToDataTable([["""",""Appels"",""Peren"",""Bananen"",""dec?""],[new Date(2018, 0, 15),5217,4162,3014,0],[new Date(2018, 1, 15),4691,3582,2552,0],[new Date(2018, 2, 15),5427,4651,4160,0],[new Date(2018, 3, 15),4272,3571,3765,0],[new Date(2018, 4, 15),4409,3266,3020,0],[new Date(2018, 5, 15),4566,3566,3131,0],[new Date(2018, 6, 15),4628,3329,3742,0],[new Date(2018, 7, 15),4175,3309,3390,0],[new Date(2018, 8, 15),4794,3695,3047,0],[new Date(2018, 9, 15),5075,3976,2856,0],[new Date(2018, 10, 15),7568,6737,3056,0],[new Date(2018, 11, 15),7978,7551,4634,0],[new Date(2019, 0, 15),5300,5101,3730,0],[new Date(2019, 1, 15),4526,4310,3342,0],[new Date(2019, 2, 15),5399,5053,4335,0],[new Date(2019, 3, 15),4380,4187,4045,0],[new Date(2019, 4, 15),4940,4560,3854,0],[new Date(2019, 5, 15),4819,4529,3617,0],[new Date(2019, 6, 15),5158,4723,4783,0],[new Date(2019, 7, 15),4813,4290,3673,0],[new Date(2019, 8, 15),5935,5147,3504,0],[new Date(2019, 9, 15),5886,5362,3620,0],[new Date(2019, 10, 15),8565,7706,5652,0],[new Date(2019, 11, 15),9373,8416,4719,0],[new Date(2020, 0, 15),6054,6173,4367,0],[new Date(2020, 1, 15),5691,5458,4340,0],[new Date(2020, 2, 15),14864,6467,8200,0],[new Date(2020, 3, 15),21182,9031,7064,0],[new Date(2020, 4, 15),16590,9828,6981,0],[new Date(2020, 5, 15),13621,10060,7240,0],[new Date(2020, 6, 15),9966,7411,6878,0],[new Date(2020, 7, 15),9771,6948,6265,0],[new Date(2020, 8, 15),11033,7584,4794,0],[new Date(2020, 9, 15),13606,8981,5241,0],[new Date(2020, 10, 15),24279,11658,5889,0],[new Date(2020, 11, 15),2615,1523,439,49463]]);

  var formatMonth = new google.visualization.DateFormat({
    pattern: 'MMM yyyy'
  });
  formatMonth.format(data, 0);

  var options = {'title':'Consumptie per maand',
                 'titleTextStyle': { 'fontSize': 15 },
                 'width':640,
                 'height':240,
                 'legend': { 'position':'bottom' },
                 'series': {""0"":{""color"":""66aabb""},""1"":{""color"":""66ddee""},""3"":{""color"":""e8f8ff""},""2"":{""color"":""bbeeff""}},
                 'chartArea': { 'width': '90%', 'left': 60, 'right': 20 },
                 'bar': { 'groupWidth': '80%' },
                 'isStacked':true};
  var chart = new google.visualization.ColumnChart(document.getElementById('chart2'));
  chart.draw(data, options);
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://www.gstatic.com/charts/loader.js""&gt;&lt;/script&gt;
&lt;div id=""chart2""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<hr />
<p>NOTE: formatting the data table sets the formatted value of each cell of the data table column.</p>
<p>you can also provide the formatted value directly in the data by using object notation.<br />
if you wanted, you could load the data table rows as follows...</p>
<pre><code>[{v: new Date(2018, 0, 15), f: 'jan 2018'},5217,4162,3014,0]
</code></pre>
<p>where <code>v:</code> is the value, and <code>f:</code> is the formatted value...</p>
",2
65125008,"<p>It is because you are passing in the data as a string rather than actual JSX elements. While you CAN do this it is very close to never being a good idea.</p>
<p>There are many ways to skin a cat but consider something like the following</p>
<pre><code>const getAssets = data =&gt; {
  return 
    (
        &lt;div&gt;
            &lt;ul&gt;
              {data.slice(0,5).map((improperAsset) =&gt; (&lt;li&gt;{improperAsset}&lt;/li&gt;))}
            &lt;/ul&gt;
        &lt;/div&gt;
    );
};
</code></pre>
<p>If your &quot;improperAsset&quot; contains html and needs to be rendered as such, I would consider either moving these improper assets into separate components or using a library to handle HTML parsing otherwise you run serious risk of introducing cross site scripting vulnerabilities into your site.</p>
",2
65110626,"<p>The bad practice is to use <code>v-if</code> and <code>v-for</code> in the same element, but the following syntax is allowed :</p>
<pre><code>&lt;div
            class=&quot;eachemoji&quot;
            v-for=&quot;(emojis, index) in emojis_filtered&quot;
            :key=&quot;index&quot;
          &gt;
            &lt;template v-if=&quot;emojis.nodeid == nodes.node_id&quot;&gt;{{ emojis.emoji_text }}&lt;/template&gt;
          &lt;/div&gt;

</code></pre>
<p>or make the computed like :</p>
<pre><code>    emojis_filtered() {
      return this.configEmoji.filter((emojis) =&gt; {
        return  this.myNodes.some(node=&gt;emojis.nodeid == node.node_id)
      })
    },
</code></pre>
",2
65134054,"<p>The function <code>recursePosts</code> is reloading and reinitializing multiple variables like <code>ss</code>, <code>sheet</code> and <code>rows</code> multiple times in the inner functions. You should make those variables constant in the parent scope and call those methods only once</p>
<pre><code>const config = {
  ss: null,
  mb_sheet: null,
  users_sheet: null,
  comments_sheet: null,
  mb_rows: null,
  users_rows: null,
  comments_rows: null,
};

function initAll_() {
  config.ss = SpreadsheetApp.openById(SPREAD_SHEET_ID);
  [config.mb_sheet, config.users_sheet, config.comments_sheet] = [
    MESSAGE_BOARD,
    USERS,
    COMMENT_VOTES,
  ].map(name =&gt; config.ss.getSheetByName(name));
  [config.mb_rows, config.users_rows, config.comments_rows] = [
    config.mb_sheet,
    config.users_sheet,
    config.comments_sheet,
  ].map(sheet =&gt; sheet.getDataRange().getValues());
}


function GetMessageBoardChildren(message_id) {
  /*Initialize everything once and only once*/initAll_();
  console.time('Gettingcomments'); 
  //Removed var ss = SpreadsheetApp.openById(SPREAD_SHEET_ID);
  // var sheet = ss.getSheetByName(MESSAGE_BOARD);
  var rows = /*Modified*/ config.mb_rows;
  /*stuff*/
}

function GetUserNameByUserId(ID) {
  // var ss = SpreadsheetApp.openById(SPREAD_SHEET_ID);
  // var sheet = ss.getSheetByName(USERS);
  var rows = config.users_rows
  /*stuff*/
}

function GetVotesByCommentId(comment_id) {
  // var ss = SpreadsheetApp.openById(SPREAD_SHEET_ID);
  // var sheet = ss.getSheetByName(COMMENT_VOTES);
  var rows = config.comments_rows;
  /*stuff*/
}
</code></pre>
<hr />
<p>If you want modular loading of variables, you can use the <a href=""https://stackoverflow.com/questions/65150194/how-to-use-global-variables-while-avoiding-permissio"">lazy loading technique described here</a></p>
<pre><code>/**
 * A sheet configuration object containing class sheet and
 *   it's full datarange values
 * @typedef {Object} SheetConfig
 * @property {GoogleAppsScript.Spreadsheet.Sheet} sheet
 * @property {Object[][]} values
 */

/**
 * Global configuration object
 * @type {{
 * ss:GoogleAppsScript.Spreadsheet.Spreadsheet,
 * [x:string]:SheetConfig|GoogleAppsScript.Spreadsheet.Spreadsheet}}
 */
const config = {
  get ss() {
    delete this.ss;
    return (this.ss = SpreadsheetApp.getActive());
  },
};
(function addSheetGettersToConfig_() {
  /*Add 3 {SheetConfig}  to config object*/
  [MESSAGE_BOARD,USERS,COMMENT_VOTES,].forEach(name =&gt;
    Object.defineProperty(config, name, {
      enumerable: true,
      configurable: true,
      get: function() {
        delete this[name];
        return (this[name] = {
          sheet: this.ss.getSheetByName(name),
          get values() {
            delete this.values;
            return (this.values = this.sheet.getDataRange().getValues());
          },
        });
      },
    })
  );
})();

console.log('config before');
console.log(config);

function test_lazyLoading() {
  console.log(config['Sheet1'].values);
  console.log('config after');
  console.log(config);
}
</code></pre>
",2
65109742,"<p>Using regex to amend HTML is not good practice. Use a library which can parse a string to a DOM structure and amend it there. As you've tagged the question with jQuery, you can use that in this instance.</p>
<p>The following example finds all <code>a</code> elements within the string and replaces them with an <code>iframe</code> whose <code>src</code> is set to the same value as the original <code>href</code>. Try this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var input = 'check out this video! &lt;a href=""https://www.youtube.com/watch?v=STsWJ63QgCg&amp;ab_channel=BonApp%C3%A9tit""&gt;https://www.youtube.com/watch?v=STsWJ63QgCg&amp;ab_channel=BonApp%C3%A9tit&lt;/a&gt;';

let $input = $(`&lt;div&gt;${input}&lt;/div&gt;`);
let $a = $input.find('a');
$a.replaceWith(i =&gt; `&lt;iframe src=""${$a.eq(i).prop('href')}"" frameborder=""0"" allowfullscreen=""true"" allow=""autoplay""&gt;&lt;/iframe&gt;`);

console.log($input.html());</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
",2
65153274,"<p>I think this is what you're looking for:</p>
<pre><code>^(?=.*?[A-Z].*?[A-Z])(?=.*?[a-z])(?=.*?[0-9])(?=.*?[#!@$%^&amp;]).{8,}$
</code></pre>
",2
65124085,"<pre class=""lang-js prettyprint-override""><code>var string = &quot;[36.79025,3.01642],[36.71477,2.99761]&quot;;
var arr = JSON.parse(`[${string}]`);
console.log(arr);
</code></pre>
<pre><code>[[36.79025,3.01642],[36.71477,2.99761]]
</code></pre>
",2
65111482,"<p>You can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"" rel=""nofollow noreferrer""><code>Array#find</code></a>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const arr = ['Fruit','Vegetables','B Pies','M Pies','Quorn'];
let res = arr.find(x =&gt; x[0] === 'V');
console.log(res);</code></pre>
</div>
</div>
</p>
<p>If there may be multiple elements beginning with that letter, you can use <code>Array#filter</code> to get an array of results.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const arr = ['Fruit','Vegetables','B Pies','M Pies','Quorn', 'V2'];
let res = arr.filter(x =&gt; x[0] === 'V');
console.log(res);</code></pre>
</div>
</div>
</p>
",2
65113002,"<p>Please see the below snippet.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let storage = [];
let addButton = document.getElementById('add_button');
let findButton = document.getElementById('find_button');
let thingContainer = document.getElementById('thing_container');

addButton.onclick = () =&gt; {
  let newElement = document.createElement(""li"");
  newElement.style.background = ""purple"";
  newElement.textContent = input.value;
  thingContainer.appendChild(newElement);
  storage.push(newElement);
};

findButton.onclick = () =&gt; {
  for (let i = 0; i &lt; storage.length; i++) {
    if (storage[i].textContent.indexOf(find_form.value) &gt;= 0) {
      storage[i].style.display = ""block"";
    } else {
      storage[i].style.display = ""none"";
    }
  }
};</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;body&gt;

    &lt;div class = ""to_do_list""&gt;

            &lt;div class = ""add""&gt;&lt;/div&gt;
            &lt;div id = ""delete""&gt;&lt;/div&gt;
                
            &lt;input id = ""input"" type = ""text"" name = """"&gt;

            &lt;button id = ""add_button""&gt;Add&lt;/button&gt;

            &lt;div class = ""find""&gt;&lt;/div&gt;
            &lt;input id = ""find_form"" type = ""text"" placeholder = ""Find""&gt;
            &lt;button id = ""find_button"" type = ""submit""&gt;Start&lt;/button&gt;

            &lt;div id= ""thing_container""&gt;&lt;/div&gt;

    &lt;/div&gt;
    
&lt;/body&gt;</code></pre>
</div>
</div>
</p>
",2
65150547,"<p>Use <code>Array.map()</code> for each row. For the <code>th</code> iterate the keys, and for the <code>td</code> use <code>Object.entries()</code> to get both the keys (for the item's keys) and values:</p>
<pre><code>{
  data.map(graph =&gt; (
    &lt;div key={graph.ID} className=&quot;tables&quot;&gt;
      &lt;table&gt;
        &lt;tr&gt;
        {
          Object.keys(graph)
            .map(key =&gt; &lt;th key={key}&gt;{key}&lt;/th&gt;)
        }
        &lt;/tr&gt;
        &lt;tr&gt;
        {
          Object.entries(graph)
            .map(([key, val]) =&gt; &lt;th key={key}&gt;{val}&lt;/th&gt;)
        }
        &lt;/tr&gt;
      &lt;/table&gt;
    &lt;/div&gt;
  ))
}
</code></pre>
",2
65110033,"<p>You can go back seven days, then just use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/setHours"" rel=""nofollow noreferrer""><code>Date#setHours()</code></a> to adjust the time portion:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var date = new Date(""2020-12-02T16:53:12.215""); //assume a stable time
//go seven days back
date.setDate(date.getDate() - 7);
//set the time to 12:00:00.000
date.setHours(12, 0, 0 , 0);

console.log(date.toString());        //human-readable
console.log(date.getTime());         //Unix timeastamp in milliseconds
console.log(date.getTime() / 1000);  //regula Unix timeastamp in seconds</code></pre>
</div>
</div>
</p>
",2
65149805,"<p>You can use <code>Array.split()</code> with a regular expression to split at the comma before a number, map the array, and split at every comma, and use destructuring to get the values, and then return an object:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const StarWars = '1, Darth Vader, Sith, Dark Side, 2, Obi-Wan Kenobi, Jedi, Light side'

const result = StarWars
  .split(/,\s+(?=[0-9]+)/) // split at every comma with spaces before a number
  .map(str =&gt; {
     const [id, name, position, side] = str.split(/,\s+/) // split at every comma with spaces
     return ({ id, name, position, side })
   })

console.log(result)</code></pre>
</div>
</div>
</p>
",2
65118378,"<p>David here, from the Zapier Platform team. Great question!</p>
<p>The answer is definitely to pull all these functions into a custom app. We've got info about that here: <a href=""https://github.com/zapier/zapier-platform/blob/master/packages/cli/README.md"" rel=""nofollow noreferrer"">https://github.com/zapier/zapier-platform/blob/master/packages/cli/README.md</a></p>
<p>That'll give you the flexibility needed to write and organize your JS code however you'd like.</p>
<blockquote>
<p>The problem here is that I would end up with 150 different &quot;create&quot; steps, which wouldn't be very easy to use. I haven't been able to find anywhere if it is possible to have &quot;dynamic&quot; create-steps just as the inputFields where you can search to find the options you need.</p>
</blockquote>
<p>The editor has a dropdown to search for actions easily. Here's me filtering Slack for &quot;create&quot; actions having to do with <code>message</code>:</p>
<p><img src=""https://cdn.zappy.app/bf5d783d2309a2c760d41ba57fd2bbc3.png"" alt="""" /></p>
<p>It would be up to you to name your functions well, but it wouldn't be too hard to find them after that.</p>
<p>We do a similar thing with our <strong>Formatter by Zapier</strong> app, where the &quot;Text&quot; category has a ton of little functions:</p>
<p><img src=""https://cdn.zappy.app/e92804c459032b4349add08dbbe4da14.png"" alt="""" /></p>
",2
65105250,"<h3>Answer:</h3>
<p><em>Turning off notification emails isn't possible, but you can instead set up a Gmail filter to force these emails to skip the inbox.</em></p>
<p><em>It is also not possible to programmatically simulate the UI alert being clicked, nor is it possible to auto-close the box after 10 seconds. You could instead use a toast message to inform the user, instead of a message box, as a workaround</em>.</p>
<h3>Dealing with the Failure Emails:</h3>
<ul>
<li>In the failure notification email, the first paragraph will show something like this:</li>
</ul>
<blockquote>
<p>Your script, Sciript Name, has recently failed to finish successfully. A summary of the failure(s) is shown below. To configure the triggers for this script, or change your setting for receiving future failure notifications, <a href=""https://stackoverflow.com/questions/65104377/"">click here</a>.</p>
</blockquote>
<p>Following the 'click here' link takes your to triggers, but as you can see, you can only change the freuquency of these emails, not turn them off:</p>
<p><a href=""https://i.stack.imgur.com/upRAB.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/upRAB.png"" alt=""enter image description here"" /></a></p>
<p>To remove these automatically from the inbox, head to <a href=""https://mail.google.com"" rel=""nofollow noreferrer"">https://mail.google.com</a> and enter the following in the search bar:</p>
<pre><code>from:apps-scripts-notifications@google.com &quot;Script name&quot; 
</code></pre>
<p>replacing <code>Script name</code> with the name of the script which you are receiving notifications about. Make sure to keep them inside the quotation marks.</p>
<p>Next, click the down arrow (▼) on the right-hand side of the search bar, and click <code>Create filter</code>.</p>
<p>Here, select your behaviour: I recommend either selecting <code>Skip the Inbox (Archive it)</code> if you want to keep the email without it cluttering your inbox, or simply <code>Delete it</code> if you don't wish to see them at all.</p>
<p>You can also check the box next to <code>Also apply filter to matching conversations.</code> if you have many in your inbox already.</p>
<p>Click <code>Create filter</code> and you're done - you will no longer receive these emails.</p>
<h3>Toasts</h3>
<p>As I previously mentioned, it isn't possible to time-out or auto-close a message box.</p>
<p>If, however, you only wish to inform the user of some information, and having them click okay isn't necessary, you can instead <a href=""https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet#toastmsg,-title,-timeoutseconds"" rel=""nofollow noreferrer"">display a toast message in Sheets</a>:</p>
<pre><code>var ss = SpreadsheetApp.getActiveSpreadsheet();
ss.toast('Thanks for doing the thing!', 'Title', 10);
</code></pre>
<p>This will appear like so:</p>
<p><a href=""https://i.stack.imgur.com/7kLCZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/7kLCZ.png"" alt=""enter image description here"" /></a></p>
<p>I hope this is helpful to you!</p>
<h3>References:</h3>
<ul>
<li><a href=""https://developers.google.com/apps-script/reference/spreadsheet/spreadsheet#toast(String,String,Number)"" rel=""nofollow noreferrer"">Class Spreadsheet - <code>toast(msg, title, timeoutSeconds)</code> | Apps Script | Google Developers</a></li>
</ul>
",2
65114432,"<p>You are adding the event listeners both in the HTML and JS.</p>
<p>Remove the onclick=&quot;...&quot; part of the buttons in the HTML and all should be good.</p>
<p>To stop the number being undefined, set sessionStorage.correct to 0 before you call any functions:</p>
<pre><code>&lt;script&gt;
    sessionStorage.correct = 0;
    ...
</code></pre>
",2
65097506,"<p>Just map arrays with key/value and create an object from the entries.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const
    array = [""name1"", ""name2"", ""name3""],
    object = Object.fromEntries(array.map(k =&gt; [k, '']));

console.log(object);</code></pre>
</div>
</div>
</p>
",2
65145972,"<p>The following example shows one way in which you can use Thymeleaf to populate a table, and then use DataTables to display one row at a time (with &quot;previous&quot; and &quot;next&quot; buttons):</p>
<pre><code>&lt;!doctype html&gt;
&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;
    &lt;head&gt;
        &lt;meta charset=&quot;UTF-8&quot;&gt;
        &lt;title&gt;Demo&lt;/title&gt;
        &lt;script src=&quot;https://code.jquery.com/jquery-3.5.1.js&quot;&gt;&lt;/script&gt;
        &lt;script src=&quot;https://cdn.datatables.net/1.10.22/js/jquery.dataTables.js&quot;&gt;&lt;/script&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://cdn.datatables.net/1.10.22/css/jquery.dataTables.css&quot;&gt;
        &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;https://datatables.net/media/css/site-examples.css&quot;&gt;

        &lt;style&gt;
            .dataTables_paginate {
                float: left !important;
            }
        &lt;/style&gt;
    &lt;/head&gt;

    &lt;body&gt;

        &lt;div style=&quot;margin: 20px; width: 150px;&quot;&gt;
            &lt;table id=&quot;table_id&quot;&gt;
                &lt;thead&gt;
                    &lt;tr&gt;
                        &lt;td&gt;Users&lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/thead&gt;
                &lt;tbody&gt;
                    &lt;tr th:each=&quot;info : ${userInfo}&quot;&gt;
                        &lt;td&gt;
                            &lt;p th:text=${info.name}&gt;&lt;/p&gt;
                            &lt;p th:text=${info.dob}&gt;&lt;/p&gt;                                     
                        &lt;/td&gt;
                    &lt;/tr&gt;
                &lt;/tbody&gt;
            &lt;/table&gt;
        &lt;/div&gt;

        &lt;script type=&quot;text/javascript&quot;&gt;
            $(document).ready(function () {
                $('#table_id').DataTable({
                    &quot;dom&quot;: &quot;tp&quot;,
                    &quot;ordering&quot;: false,
                    &quot;pagingType&quot;: &quot;simple&quot;,
                    &quot;lengthMenu&quot;: [ 1 ]
                });
            });
        &lt;/script&gt;

    &lt;/body&gt;
&lt;/html&gt;
</code></pre>
<p>This creates a very simple display like this, with almost no CSS styling applied:</p>
<p><a href=""https://i.stack.imgur.com/NL4wZ.png"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/NL4wZ.png"" alt=""enter image description here"" /></a></p>
<p>The Thymeleaf iterator needs to be placed in the tably body's <code>&lt;tr&gt;</code> tag, not in a cell tag.</p>
<p>The HTML table must be defined with both a <code>&lt;thead&gt;</code> and a <code>&lt;tbody&gt;</code> section, for DataTables to be able to use it.</p>
<p>The DataTables options are:</p>
<p><code>&quot;dom&quot;: &quot;tp&quot;</code> - displays only the table (<code>t</code>) and the pagination (<code>p</code>) controls.</p>
<p><code>&quot;ordering&quot;: false</code> - disables column ordering.</p>
<p><code>&quot;pagingType&quot;: &quot;simple&quot;</code> - shows only the &quot;previous&quot; and &quot;next&quot; buttons.</p>
<p><code>&quot;lengthMenu&quot;: [ 1 ]</code> - forces DataTables to show only one row at a time</p>
",2
65127355,"<p>just inverse the next!!</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code> var question = 0;

var questions = Array.from(document.getElementsByClassName(""quiz"")).reduce((carry, item) =&gt; {
  carry.push(item.textContent.trim())
  return carry;
}, []);

var anim;
var targets;

function prepQuestion() {
  $(""#rect"").text(questions[question]);

  var textWrappers = document.querySelectorAll('#rect');
  textWrappers.forEach(textWrapper =&gt; {
    textWrapper.innerHTML = textWrapper.textContent.replace(/(\S*)/g, m =&gt; {
      return `&lt;span class=""word""&gt;` +
        m.replace(/(-|)?\S(-|@)?/g, ""&lt;span class='letter'&gt;$&amp;&lt;/span&gt;"") +
        `&lt;/span&gt;`;
    });
  });

  targets = Array.from(document.querySelectorAll('#rect .letter'));

  anim = anime.timeline()
    .add({
      targets: targets,
      scale: [3, 1],
      scaleY: [1.5, 1],
      opacity: [0, 1],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 400,
      delay: (el, i) =&gt; 60 * i
    });
}

// init
prepQuestion();

function next() {
  anim = anime.timeline()
    .add({
      targets: targets.reverse(),
      scale: [1, 3],
      scaleY: [1, 1.5],
      opacity: [1, 0],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 100,
      delay: (el, i) =&gt; 30 * i
    });

  anim.complete = () =&gt; {
    if (question == questions.length - 1) {
      question = 0;
    } // reset question
    else {
      question++;
    }

    prepQuestion();
  };
}

function previous() {
  anim = anime.timeline()
    .add({
      targets: targets.reverse(),
      scale: [1, 3],
      scaleY: [1, 1.5],
      opacity: [1, 0],
      translateZ: 0,
      easing: ""easeOutExpo"",
      duration: 100,
      delay: (el, i) =&gt; 30 * i
    });

  anim.complete = () =&gt; {
    if (question == 0) {
      question = questions.length - 1;
    } // reset question
    else {
      question--;
    }

    prepQuestion();
  };
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>        #rect {
  font-weight: 900;
  font-size: 2.5em;
  font-family: rr;
}

#rect .letter {
  display: inline-block;
  line-height: 1em;
}

#quizss {
display:none;
}

.word {
  white-space: nowrap;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""/scripts/snippet-javascript-console.min.js?v=1""&gt;&lt;/script&gt;
    &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.0/anime.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;



&lt;div id=""quizss""&gt;
&lt;div class=""quiz""&gt;Question-1 : The color of the sky is...?&lt;/div&gt;
&lt;div class=""quiz""&gt;Question-2 : Paper comes from...?&lt;/div&gt;
&lt;div class=""quiz""&gt;Question-3 : How many hours in a day?&lt;/div&gt;
&lt;div class=""quiz""&gt;Question-4 : A Giraffe is a fish?&lt;/div&gt;
&lt;/div&gt;



&lt;div id=""rect""&gt;&lt;/div&gt;



&lt;br&gt;
&lt;Button id=""rc"" onclick=""next()""&gt;Next&lt;/Button&gt;
&lt;Button id=""rc"" onclick=""previous()""&gt;previous&lt;/Button&gt;</code></pre>
</div>
</div>
</p>
",2
65113403,"<p>The difference is that in your <code>reduce</code>, you are creating the functions as</p>
<pre><code>() =&gt; { createElement( 'div', 'hello world') }
</code></pre>
<p>while in your hardcoded version (and also in the <code>forEach</code> loop in @Boussadjra's anwer) they are created as</p>
<pre><code>() =&gt; createElement('div', 'hello world')
</code></pre>
<p>which actually <strong><code>return</code></strong> the created element. It's nothing to do with the use of <code>reduce</code>, which is fine.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const ReplicatorComponent = {
  template: `&lt;div&gt;
    &lt;h1&gt;replicator-component&lt;/h1&gt;
    &lt;slot name='element_1'&gt;&lt;/slot&gt;
    &lt;slot name='element_2'&gt;&lt;/slot&gt;
    &lt;slot name='element_3'&gt;&lt;/slot&gt;
  &lt;/div&gt;`
};

const records = [
  { ""index"": 1 },
  { ""index"": 2 },
  { ""index"": 3 },
];

Vue.component('my-component', {
  render: function(createElement) {
    return createElement(ReplicatorComponent, {
      attrs: {
        elements: records.length
      },
      scopedSlots: records.reduce((a,x) =&gt; ({
        ...a, 
        ['element_' + x.index]: () =&gt; 
          createElement( 'div', 'hello world')
       }), {})
    });
  },
});

new Vue({
  el: '#app',
  data: () =&gt; ({})
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdn.jsdelivr.net/npm/vue@2.x/dist/vue.js""&gt;&lt;/script&gt;

&lt;div id=""app""&gt;
  &lt;my-component&gt;&lt;/my-component&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",2
65090632,"<p>Use a <a href=""https://www.typescriptlang.org/docs/handbook/generics.html"" rel=""nofollow noreferrer"">generic</a> type</p>
<pre><code>
interface Props {
  isPrime: boolean;
}
interface Other {
  isEdit: boolean;
}
type TFunc&lt;T, U&gt; = (a: T, b: U) =&gt; any;
const myFunc = &lt;T, U&gt;(c: TFunc&lt;T, U&gt;) =&gt; (a: T) =&gt; (b: U) =&gt; c(a, b);

const funcA = myFunc&lt;Props, Other&gt;((props: Props, other: Other) =&gt; {
  // ..somecode
});
</code></pre>
",2
65089171,"<p>Yes, but what you're doing is creating a <strong>new</strong> obejct on each loop iteration. Instead, just add to the object you already have:</p>
<pre><code>newObj[valor[i]] = prop[i];
</code></pre>
<p>(I assume your <code>value</code> parameter is called <code>valor</code> in your real code, you've changed it in one place but not another.)</p>
<hr />
<p>Note that unless you're using <code>changePropValues</code> elsewhere, <a href=""https://stackoverflow.com/questions/65089139/can-i-fill-a-object-with-a-for/65089171#comment115071509_65089139"">Yury's suggestion</a> for doing <code>objecte</code> is nice and simple.</p>
",2
65119795,"<p>Everything is explained in the comments of the code.</p>
<h3>If you don't care that &quot;deter&quot; matches the word &quot;undetermined&quot;</h3>
<pre class=""lang-js prettyprint-override""><code>.filter((frontMatter) =&gt; {
  // Get the front matter into a string, separated by spaces
  const concat = Object.values(frontMatter).join(&quot; &quot;).toLowerCase();

  // Look for a string in quotes, if not then just find a word
  const regex = /\&quot;([\w\s\\\-]+)\&quot;|([\w\\\-]+)/g;

  // Get all the queries
  const queries = [...searchValue.toLowerCase().matchAll(regex)].map((arr) =&gt; arr[1] || arr[2]);

  // Make sure that every query is satisfied
  return queries.every((q) =&gt; concat.includes(q));
});
</code></pre>
<h3>If you DO care that &quot;deter&quot; should NOT match the word &quot;undetermined&quot;</h3>
<pre class=""lang-js prettyprint-override""><code>.filter((frontMatter) =&gt; {
  // Get the front matter into a string, separated by spaces
  // The prepended and appended spaces are important for the regex later!
  const concat = ` ${Object.values(frontMatter).join(&quot; &quot;).toLowerCase()} `;

  // Look for a string in quotes, if not then just find a word
  const regex = /\&quot;([\w\s\\\-]+)\&quot;|([\w\\\-]+)/g;

  // Get all the queries
  const queries = [...searchValue.toLowerCase().matchAll(regex)].map((arr) =&gt; arr[1] || arr[2]);

  // Make sure that every query is satisfied
  // [\\s\\.?!_] and [\\s\\.?!_] check for a space or punctuation at the beginning and end of a word
  // so that something like &quot;deter&quot; isn't matching inside of &quot;undetermined&quot;
  return queries.every((q) =&gt; new RegExp(`[\\s\\.?!_]${q}[\\s\\.?!_]`).test(concat));
});
</code></pre>
",2
65145480,"<p>You can get the <code>for</code> attribute by using <code>e.srcElement.htmlFor</code> or <code>e.target.htmlFor</code>.</p>
<p>P.S. - <code>for</code> is not a tag, it is an attribute. You can get value of any attribute by using <a href=""https://www.w3schools.com/jsref/met_element_getattribute.asp"" rel=""nofollow noreferrer"">getAttribute()</a>.</p>
",2
65151494,"<p>In most modern JavaScript environments you can use the ECMAScript Internationalization API to achieve this.  In particular <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat"" rel=""nofollow noreferrer""><code>DateTimeFormat</code></a> exposes functions that you can use.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const d1 = new Date(2020, 0, 1);
const d2 = new Date(2020, 6, 1);

const dtf1 = new Intl.DateTimeFormat('en', { timeZoneName: 'long'});
const dtf2 = new Intl.DateTimeFormat('fr', { timeZoneName: 'long'});

console.log(dtf1.formatToParts(d1).find(x =&gt; x.type ==='timeZoneName').value);
console.log(dtf1.formatToParts(d2).find(x =&gt; x.type ==='timeZoneName').value);
console.log(dtf2.formatToParts(d1).find(x =&gt; x.type ==='timeZoneName').value);
console.log(dtf2.formatToParts(d2).find(x =&gt; x.type ==='timeZoneName').value);</code></pre>
</div>
</div>
</p>
<p>In the above example, I show formatters for two different languages and two different dates.  This highlights that the value will be different depending on whether standard time or daylight time is in effect.</p>
<p>A couple of other points:</p>
<ul>
<li><p>If you omit the <code>Date</code> object passed to <code>formatToParts</code>, it will use the current date and time (same as <code>new Date()</code>).</p>
</li>
<li><p>If you pass <code>undefined</code> instead of a language code, it will use the user's default language.</p>
</li>
<li><p>You can also use the <code>timeZoneName</code> option when calling other methods on <code>DateTimeFormat</code>, or when calling <code>toLocaleString</code> and similar functions on a <code>Date</code> object instance.  I used <code>formatToParts</code> to make it easy to get <em>just</em> the time zone name without doing any string manipulation.</p>
</li>
</ul>
",2
65094997,"<ol>
<li>Clean things up a bit by using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes"" rel=""nofollow noreferrer""><code>includes()</code></a> instead of <code>indexOf()</code></li>
<li>You can't return from <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""nofollow noreferrer""><code>forEach()</code></a>, but you can also use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/includes"" rel=""nofollow noreferrer""><code>includes()</code></a> on <code>toExcl</code> to accomplish what you require.</li>
</ol>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const monTr=['u/1','I/4', 'G1','G23', 'LD', 'E1', 'E2 /3', 'LL', 'VAR', 'III', 'VUV', 'V - 11', 'II', 'PB', 'V', '-', 'IV'];
const toExcl=['VAR', 'VUV', 'EIT'];

const b = monTr.map(function(inp, index) {
  if (inp.includes('I') || inp.includes('V')) {
    return index;
  } 
}).filter(index =&gt; index != null); 
console.log(b);

const c = monTr.map(function(inp, index) {
  if (inp.includes('I') || inp.includes('V') &amp;&amp; !toExcl.includes(inp)) {
    return index
  }
}).filter(index =&gt; index != null); 
console.log(c);</code></pre>
</div>
</div>
</p>
",2
65117929,"<p>You'll want <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"" rel=""nofollow noreferrer""><code>.find</code></a>.</p>
<pre class=""lang-js prettyprint-override""><code>        function myFunction() {

            let result;

            result = Object.keys( myObject ).find( function ( tmp ) {

                if ( condition[ tmp ] === true ) {

                    return tmp; // i would like to return the value of tmp

                }

            });

            alert( result ); // returns &quot;true&quot; or &quot;false&quot; but not the value of &quot;tmp&quot;

        }
</code></pre>
",2
65122740,"<p>Might I suggest trying out <code>scrollIntoView</code> as a possible solution?</p>
<pre class=""lang-js prettyprint-override""><code>function comment_jump(id){
    var el = document.getElementById(id);
    el.scrollIntoView();
}

</code></pre>
<p>From Mozilla's docs:</p>
<p><strong>scrollIntoView()</strong> <em>method scrolls the element's parent container such that the element on which scrollIntoView() is called is visible to the user</em></p>
<p>So it will scroll the comment container for you to the desired element.</p>
",2
65084322,"<pre class=""lang-js prettyprint-override""><code>let socket = new WebSocket(&quot;wss://ws01.casinocoin.org:4443&quot;);

socket.onopen = function(e) {
  console.log(&quot;[open] Connection established&quot;);
  console.log(&quot;Sending to server&quot;);

  socket.send(`{&quot;id&quot;: 1,&quot;command&quot;: &quot;tx&quot;,&quot;transaction&quot;: &quot;165A993C454CE13201073DA4DA362A143B04EEFFDD9CC5CB44EB94E9CC165B46&quot;}`);

  socket.onmessage = function(event) {
    console.log(`[message] Data received from server: ${event.data}`);
    
    // this goes within socket.onmessage
    $.ajax({
        type: &quot;POST&quot;,
        url: 'post.php',
        data: event.data, // event.data goes here
        success: function(data){
            alert(data);
        }
    });
  };

  socket.onclose = function(event) {
    if (event.wasClean) {
      console.log(`[close] Connection closed cleanly, code=${event.code} reason=${event.reason}`);
    } else {
      // e.g. server process killed or network down
      // event.code is usually 1006 in this case
      console.log('[close] Connection died');
    }
  };

  socket.onerror = function(error) {
    console.log(`[error] ${error.message}`);
  };
}
</code></pre>
",2
65163008,"<p>I recommend you <a href=""https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver"" rel=""nofollow noreferrer"">MutationObserver</a> to watch for changes being made to the DOM tree. Once the element is part of the DOM you can call disconnect() function.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const targetNode = document.querySelector(""body"");

const observer = new MutationObserver((mutationList, observer)=&gt; {
  mutationList.forEach( (mutation) =&gt; {
   if(mutation.type === 'childList') {
     console.log(mutation.addedNodes);
   }
  })

});
observer.observe(targetNode, {
  childList: true,
});

setTimeout(() =&gt; {
  const someElement = document.createElement(""div"");
  someElement.className = ""some-element"";
  someElement.textContent = ""Some Element"";
  document.body.appendChild(someElement);
}, 1000);</code></pre>
</div>
</div>
</p>
",2
65132189,"<p>I think you're looking for:</p>
<pre><code>db.collection(&quot;settings&quot;).doc(key).update(...)
</code></pre>
<p>Also see the documentation on <a href=""https://firebase.google.com/docs/firestore/manage-data/add-data#set_a_document"" rel=""nofollow noreferrer"">setting a document</a>, which covers pretty much this use-case,.</p>
",2
65137330,"<p>This most likely because the console is displaying the current state of the HTMLCollection being referenced using <code>console.log({ handleContainer });</code> over the snapshot of the first element (which may not exist yet) which is happening when you perform <code>console.log({ handleContainer: handleContainer[0] });</code>...</p>
<p>Could you try adding a timeout like below and seeing what happens? This will hopefully give enough time for the library and DOM to load up and make it queryable at effect function run...</p>
<pre><code> useEffect(() =&gt; {    
   setTimeout(() =&gt; {
        const handleContainer = document.getElementsByClassName('handle-container');
        console.log({ handleContainer: handleContainer[0] });
   }, 1000);
 }, [document]);
</code></pre>
<p>If this shows the expected element, then it would indicate that when the effect is called without a timer the class element that needs to be referenced using <code>{ handleContainer: handleContainer[0] }</code> does not yet exist but because the console is displaying a reference of the HTMLCollection object using <code>{ handleContainer }</code> it would would still display it in the console as it is not dereferencing it from the children array.</p>
<p>Refs: <a href=""https://developer.mozilla.org/en-US/docs/Web/API/HTMLCollection"" rel=""nofollow noreferrer"">MDN - HTMLCollection</a></p>
",2
65143343,"<p>Do it as below -</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var lender = [
  [{
      ""name"": ""IFC"",
      ""amount"": 50
    },
    {
      ""name"": ""ABC"",
      ""amount"": 10
    }
  ],
  [{
      ""name"": ""DEF"",
      ""amount"": 40
    },
    {
      ""name"": ""GHI"",
      ""amount"": 100
    }
  ]
];

var names = [""Gary"", ""Neil"", ""Luke"", ""Ben""];

var pageNumbers = [
  [""page 0""],
  [""page 1""]
];
var lenderObj = {
  ""lenders"": {
  }
}

//Loop
var nameIterator = 0;
for(var i = 0; i &lt; lender.length; i++) {
    lenderObj.lenders[pageNumbers[i]] = {};  
  var lenderItem = lender[i];
  for(var j = 0; j &lt; lenderItem.length; j++) {
    lenderObj.lenders[pageNumbers[i]][names[nameIterator]] = {};
    lenderObj.lenders[pageNumbers[i]][names[nameIterator]].financiers = lenderItem[j];
    nameIterator++;
  }
}
console.log(lenderObj);</code></pre>
</div>
</div>
</p>
",2
65083587,"<p>You're looking for <code>Object3D.traverse()</code>, which recursively loops through all the descendants of the object, including children, grand-children, and so on.</p>
<p><a href=""https://threejs.org/docs/#api/en/core/Object3D.traverse"" rel=""nofollow noreferrer"">https://threejs.org/docs/#api/en/core/Object3D.traverse</a></p>
<p>Once in the traverse callback, you could check the object <code>.type</code> to see if it's a CSS2DObject.</p>
",2
65123215,"<p>Try to add <code>focusTarget</code></p>
<pre><code>    var options = {
        width: 600,
        height: 400,
        focusTarget: 'category', // try to add
        legend: { position: 'top', maxLines: 3 },
        bar: { groupWidth: '75%' },
        isStacked: true
      };
</code></pre>
<p>Please Check For More:- <a href=""https://developers.google.com/chart/interactive/docs/customizing_tooltip_content"" rel=""nofollow noreferrer"">https://developers.google.com/chart/interactive/docs/customizing_tooltip_content</a></p>
",2
65094953,"<p>Your input is not valid JSON, but it's close. If you have any control over it, you should change it to be valid Json. If you don't you could do something like this:</p>
<pre><code>// Create keys for the properties of the objects. This uses the offset
// of the start of the property as its key.
let jsonify = distribution_bins.replace(/{/g, &quot;[&quot;);
jsonify = jsonify.replace(/}/g, &quot;]&quot;);

// Wrap +INF in quotes.
jsonify = jsonify.replace(/\+INF/g, `&quot;+INF&quot;`);

// Parse.
const distribution_data = JSON.parse(jsonify);
</code></pre>
",2
65142775,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const data = {
  sample1: {
    4: 2245,
    5: 2175,
    6: 3495,
    7: 1845,
    11.5: 1674,
    12.5: 1649
  },
  sample2: {
    4: 3295,
    5: 3600,
    8: 2625,
    9: 2830,
    11.5: 2879,
    12.5: 3090
  },
  sample3: {
    4: 3295,
    5: 3600,
    6: 2625,
    9: 2830,
    11.5: 2879,
    12.5: 3090
  }
};

const keys = Object.keys(data);

const mergedInnerKeys = Array.from(
  new Set(
    keys
      .reduce((val, key) =&gt; [...val, ...Object.keys(data[key])], [])
      .sort((a, b) =&gt; a - b)
  )
);

const res = mergedInnerKeys.map((key) =&gt; ({
  index: key,
  ...keys.reduce(
    (v, k) =&gt; ({
      ...v,
      [k]: data[k][key] !== undefined ? data[k][key].toString() : ''
    }),
    {}
  )
}));
console.log(res);</code></pre>
</div>
</div>
</p>
",2
65120844,"<p>since you are getting array in the response and its from an employee type it should be something like that:</p>
<pre><code>this.http.get(&quot;http://localhost:8080/api/all&quot;).subscribe(
(response: Array&lt;Employee&gt;) =&gt;{
  this.employees = response;
});
</code></pre>
",2
65104656,"<pre><code>const fs = require(&quot;fs&quot;);

var myKey = fs.readFileSync(&quot;mykey.pem&quot;, &quot;utf8&quot;).replace(&quot;-----BEGIN RSA PRIVATE KEY-----&quot;, &quot;&quot;).replace(&quot;-----END RSA PRIVATE KEY-----&quot;, &quot;&quot;).trim();

console.log(&quot;My key is: &quot;, myKey);
</code></pre>
<p>Keep in mind, this will only work if there is one key in the file instead of a list of keys, but you should get the gist.</p>
",2
65104450,"<p>I'm not familiar with your syntax, I usually do something like this:</p>
<pre><code>Users.findOne({username: req.body.username}, 'username', (err, result) =&gt; {
    if(err) {
        throw err
    }
    if(!result) {
        return res.status(400).send('Cannot find user');
    }
    // your verification
}
</code></pre>
",2
65106074,"<p>There’s a reason why the property is defined as <code>string | string[]</code> (and this is why you use TypeScript in the first place). Probably, there are several values for a header key, so simply “assuming” it to be <strong>always</strong> a <code>string</code> is <strong>wrong</strong>!</p>
<p>Simplest solution -- do a type check before you try to invoke <code>.substr</code> as follows:</p>
<pre><code>if (typeof ip === 'string' &amp;&amp; ip.substr(0, 7) == &quot;::ffff:&quot;) {
  // …
</code></pre>
<p>Better would be, to also handle the case that it actually is an array. But the logic depends on your specific requirements.</p>
",2
65150527,"<p>The dispatched action <strong>should</strong> return <code>undefined</code>, because it does not return anything. You are misunderstanding how data flows in the Redux/reducer pattern.</p>
<p>Here's the basic flow of a Redux update:</p>
<ol>
<li>Action is dispatched.</li>
<li>All reducers receive the action object.</li>
<li>All reducers return their new or previous state depending on that action's contents.</li>
<li><code>connect</code> sees that the Redux state has changed, and triggers a re-render of the children components.</li>
<li>You may now use the updated data from your Redux store through props (mapped in <code>mapStateToProps</code>).</li>
</ol>
<p>You cannot call an action and receive the updated state as the return value. It breaks the fundamental pattern of how data flows/updates in Redux.</p>
",2
65161504,"<p>Unshift is the easiest, just use the reverse construction of the push</p>
<pre class=""lang-js prettyprint-override""><code>let arr = [1,2,3,4]
arr = [0, ...arr]
</code></pre>
<p>Shift can be rewritten using array destructuring, taking the first element and then spreading the rest back into the array-</p>
<pre class=""lang-js prettyprint-override""><code>let arr = [1,2,3,4];
[first, ...arr] = arr;
</code></pre>
<p>For <code>pop</code> and <code>splice</code> there is not really a <em>shortcut</em> you can follow, but you can always just reassign after doing the operation:</p>
<pre class=""lang-js prettyprint-override""><code>arr.pop()
arr = arr
</code></pre>
",2
65135516,"<p>You can't. The Worker knows its own location, accessible through <a href=""https://developer.mozilla.org/en-US/docs/Web/API/WorkerLocation"" rel=""nofollow noreferrer""><code>self.location</code></a>, but it doesn't have access to the one of its creator.</p>
<p>The only way is to have your main thread to pass that info to your Worker, e.g through <code>postMessage</code>.</p>
",2
65097580,"<blockquote>
<p>Is this because D3 v5 uses the fetch API to return a promise?</p>
</blockquote>
<p>Yes. A promise does not have an <code>reduce</code> method. A simple solution would be to change <code>sample</code> to an <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function"" rel=""nofollow noreferrer"">async function</a>, then <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/await"" rel=""nofollow noreferrer""><code>await</code></a> the value.</p>
<pre><code>sample();

async function sample() {
  const data = await d3.csv('../static/sample.csv');

  uncount = (data, accessor) =&gt;
    data.reduce((arr, item) =&gt; {
      const count = accessor(item)
      for (let i = 0; i &lt; count; i++) {
        arr.push({
          ...item
        })
      }
      return arr
    }, []);

  const boxes = uncount(data, d =&gt; d.boxes);

  const nest = d3
    .nest()
    .key(d =&gt; d.venue)
    .entries(boxes);
}
</code></pre>
<p>Note that an async function always returns a promise.</p>
",2
65148927,"<p>You could do something like this:</p>
<pre><code>function myFunction(target, icon) { // create a function that accepts arguments
  const element = document.getElementById(target) // query whatever element you pass to it.
  if (element.getAttribute('type') === 'password') {
    element.setAttribute('type', 'text');
    icon.classList.add('fa-eye-slash');
    icon.classList.remove('fa-eye');
  } else {
    icon.classList.remove('fa-eye-slash');
    icon.classList.add('fa-eye');
    element.setAttribute('type', 'password');
  }
}

icon.addEventListener('click', () =&gt; myFunction('pass', icon)); // add the event listeners wrapped in anonymous function so it's not called immediately
icon2.addEventListener('click', () =&gt; myFunction('repeat_pass', icon2));
</code></pre>
",2
65146790,"<p>if you want this output:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;option value=&quot;helloworld&quot; id=&quot;helloworld&quot;&gt;hello world&lt;/option&gt;
&lt;option value=&quot;helloindia&quot; id=&quot;helloindia&quot;&gt;hello india&lt;/option&gt;
&lt;option value=&quot;hellousa&quot; id=&quot;hellousa&quot;&gt;hello usa&lt;/option&gt;
</code></pre>
<p>You can remove spaces with this regex replace <code>str.replace(/\s/g, '')</code></p>
<pre class=""lang-js prettyprint-override""><code>textArray.forEach((doc) =&gt; {
          let modifiedDoc = doc.replace(/\s/g, '') 
          selectIssueId.innerHTML += 
`&lt;option value=&quot;${modifiedDoc}&quot; id=&quot;${modifiedDoc}&quot;&gt;
      ${doc}
 &lt;/option&gt;`; 
        });
</code></pre>
<p><strong>Note</strong> that we use <code>modifiedDoc</code> for the value and id and <code>doc</code> for the display value</p>
",2
65149108,"<p>You can use <code>indexOf</code> to look for all occurrences of a string in the <code>textContent</code> of the element and use <code>appendChild</code> to add anchor elements.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function addLink(el, text){
  let t = el.textContent;
  el.textContent = '';
  let idx, prev = 0;
  while((idx = t.indexOf(text, prev)) !== -1){
    el.append(t.slice(prev, idx));
    const a = document.createElement('a');
    a.href = '/' + text;
    a.textContent = text;
    el.appendChild(a);
    prev = idx + text.length;
  }
  el.append(t.slice(prev));
}
addLink(document.querySelector('p'), 'ipsum');</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;p&gt;Lorem ipsum dolor sit amet&lt;/p&gt;</code></pre>
</div>
</div>
</p>
",2
65084442,"<p>In TypeScript, <code>:</code> is used to explicitly indicate the type of a variable or parameter.</p>
<p>So we have:</p>
<pre><code>let myAdd2
</code></pre>
<p>A variable named <code>myAdd2</code></p>
<pre><code> : (baseValue: number, increment: number) =&gt; number 
</code></pre>
<p>Whose type is a function that takes a number called <code>baseValue</code> and another number called <code>increment</code>, and returns a number.</p>
<pre><code>= function (x, y) {
  return x + y;
};
</code></pre>
<p>and whose value is this function here.</p>
<p>In the case of <code>myAdd</code>, the function's type is not explicitly specified. The <code> : (baseValue: number, increment: number) =&gt; number</code> part is left out. So its type <em>inferred</em> based on the value being assigned to it.</p>
",2
65136571,"<p>Your approach for replacing the characters won't actually work at the moment.</p>
<p>The way that the replace function works is like this:</p>
<p>replace(strMatch, strReplace) will create a new string from your old string with all of the instances of <code>strMatch</code> replaced by <code>strReplace</code> and return it. (More information at this link: <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace"" rel=""nofollow noreferrer"">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace</a>)</p>
<p>What you have at the moment won't work correctly in your instance for 2 reasons</p>
<ol>
<li><p>Having the replace function being called in a for loop means the replacement will be done on the input string <code>dna.length</code> times. You would actually only want this to be done once</p>
</li>
<li><p>Chaining multiple replaces like that is counter productive. Looking at the first 2 replace calls: The first one replaces all your instances of <code>A</code> with <code>T</code>, leaving you with <code>TTTGC</code>. The second one then replaces all your instances of <code>T</code> with <code>A</code>, leaving you with <code>AAAGC</code> and so on. Notice how each chaining of the replace function is being called on a new string, not your original one.</p>
</li>
</ol>
<p>One way you could go about getting this task done would be to loop over the array string (as you already are), but instead of calling the replace function, you just want to append to a string the value for the corresponding replacement of dna[i].</p>
<p>I would probably end up doing something like this (but there are all sorts of ways you could get it done! This is definitely not the best solution)</p>
<pre><code>static dnaStrand(dna: string): string {
  let newDna: string = '';
  const map: Record&lt;string, string&gt; = {'A': 'T', 'T': 'A', 'G': 'C', 'C': 'G'};
  for (let i = 0; i &lt; dna.length; i++){
    newDna += map[dna[i]]; 
  }

  return newDna;
}
</code></pre>
",2
65125119,"<p>You're throwing the error from <code>setTimeout</code>, not from a promise callback. As with any other timer callback, nothing will handle that error and it will go straight to the browser's host code, which will probably dump it to the console.</p>
<p>If you want to reject the promise you've returned, use <code>reject</code>:</p>
<pre><code>function messup() {
    var promise = new Promise(function(resolve, reject){
        setTimeout(function() {
            reject(new Error(&quot;Thrown from messup()&quot;));
            resolve('hello from messup function'); // This line is pointless now
        }, 1000);
    });
    return promise;
}
</code></pre>
<p>If you want to have any synchronous errors in the timer callback caught and passed to <code>reject</code>, you can use <code>try</code>/<code>catch</code> for that:</p>
<pre><code>function messup() {
    var promise = new Promise(function(resolve, reject){
        setTimeout(function() {
            try {
                throw new Error(&quot;Thrown from messup()&quot;);
                resolve('hello from messup function'); // This line will never be reached
            } catch (e) {
                reject(e);
            }
        }, 1000);
    });
    return promise;
}
</code></pre>
",2
65147501,"<p>You could have a conditional check in place, e.g.:</p>
<pre><code>import React, { useState, useEffect  } from 'react';
import { Table } from 'react-materialize';
import axios from 'axios';

const CoursesTable = () =&gt; {

  const [courses, setCourses] = useState([]);
  const [isLoading, setLoading] = useState(true);

  useEffect(() =&gt; {
    const fetchData = async () =&gt; {
      const coursesData = await axios.get('http://localhost:8001/')
      setCourses(coursesData.data)
      setLoading(false);
    }
    fetchData()
  }, [])
  if(isLoading) { return &lt;div&gt; Loading ... &lt;/div&gt; };
  return (
    &lt;Table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th data-field=&quot;course-name&quot;&gt;
            Name
          &lt;/th&gt;
          &lt;th data-field=&quot;course-prof&quot;&gt;
            Prof.
          &lt;/th&gt;
          &lt;th data-field=&quot;course-code&quot;&gt;
            Code
          &lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        {
          courses.length &gt;= 1
          ? courses.map(course =&gt; 
              &lt;tr key={course._id}&gt;
                &lt;td&gt;
                  {course.name}
                &lt;/td&gt;
                &lt;td&gt;
                  {course.prof}
                &lt;/td&gt;
                &lt;td&gt;
                  {course.code}
                &lt;/td&gt;
              &lt;/tr&gt;
            )
          : &lt;tr&gt;
              &lt;td&gt;There is no course&lt;/td&gt;
            &lt;/tr&gt;
        }
      &lt;/tbody&gt;
    &lt;/Table&gt;
  );
}

export default CoursesTable;
</code></pre>
",2
65117932,"<p>Here's the simple way to keep two divs aligned. Javascript doesn't dispatch event on actions from scripts by default, so there's no need to keep track of which div is being scrolled.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const divs = document.querySelectorAll( 'div' );

divs.forEach(div =&gt; div.addEventListener( 'scroll', e =&gt; {
  
  divs.forEach(d =&gt; {
  
    d.scrollTop = div.scrollTop;
    d.scrollLeft = div.scrollLeft;
  
  });
  
}) );</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html, body {

  height: 100%;
  
}
body {

  display: flex;
  padding: 0;
  margin: 0;

}
div {

  width: 50%;
  height: 100%;
  overflow: scroll;

}
span {

  width: 200vw;
  height: 300vh;
  display: block;
  background: linear-gradient(90deg, transparent, yellow), linear-gradient( 0deg, red, blue, green );
  
}
#div2 {

  margin-top: 30px;
  
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""div1""&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div id=""div2""&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<h3>With Relative Scroll in Different Sized Containers</h3>
<p>If you want to accomplish this with differently sized containers and relative scroll, just normalize the scroll value and multiply it again:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const divs = document.querySelectorAll( 'div' );

divs.forEach(div =&gt; div.addEventListener( 'scroll', e =&gt; {
  
  const offsetTop = div.scrollTop / (div.scrollHeight - div.clientHeight);
  
  const offsetLeft = div.scrollLeft / (div.scrollWidth - div.clientWidth);
  
  divs.forEach(d =&gt; {
  
    d.scrollTop = offsetTop * (d.scrollHeight - d.clientHeight);
    d.scrollLeft = offsetLeft * (d.scrollWidth - d.clientWidth);
    
  });
  
}) );</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html, body {

  height: 100%;
  
}
body {

  display: flex;
  padding: 0;
  margin: 0;

}
div {

  width: 50%;
  height: 100%;
  overflow: scroll;

}
span {

  width: 200vw;
  height: 300vh;
  display: block;
  background: linear-gradient(90deg, transparent, yellow), linear-gradient( 0deg, red, blue, green );
  
}
#div2 span {
  
  height: 500vh;
  width: 500vw;
  
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div id=""div1""&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;
&lt;div id=""div2""&gt;&lt;span&gt;&lt;/span&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",2
65157164,"<p>First try to use <code>JSON.parse(response).map</code> to convert that 2D array to array of objects then return the <code>NavItem</code> inside the map callback :</p>
<pre><code>setKinds(JSON.parse(response).map((curr)=&gt;{
    return {id:curr[0],name:curr[1]}
}))
</code></pre>
<p>and</p>
<pre><code>{kinds.map((kind,index)=&gt;{

   return &lt;NavItem key={index}&gt;{kind.name}&lt;/NavItem&gt;
}
</code></pre>
",2
65157002,"<p>Since you're using typescript you could use <a href=""https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#optional-chaining"" rel=""nofollow noreferrer"">optional chaining</a> :</p>
<pre><code>{ singleCategory.courses?.length &gt; 0
    &amp;&amp; singleCategory.courses?.map((course: CoursesInterface) =&gt; (
                                    &lt;h2 key={course.id}&gt;{course.title}&lt;/h2&gt;
                                )
  )}
</code></pre>
<p>because at the first rendering that property is not available.</p>
",2
65087188,"<p>Not sure is elegant enough. I would not use functional programming for this,  where simple loop is enough.  This assignment is very tricky because of border condition ( when condition fires, it shall apply to the next value).  This would mean  either some if clause  or simply iterating in reverse direction.   Thanks to @Yoshi for pointing it out</p>
<p>Simple java code:</p>
<pre><code>double[] values = {0.35, 0.12,0.05,0.25,0.23 };

double cumulative = 0;
for(int i = values.length-1; i &gt;= 0 ; i--) {
    cumulative += values[i];
    double c = cumulative &lt; 0.5 ?  cumulative  :1 - cumulative + values[i];
    System.out.println(&quot;c[&quot; + i + &quot;]=&quot; + c );
}
</code></pre>
<p>Produces:</p>
<pre><code>c[4]=0.23
c[3]=0.48
c[2]=0.52
c[1]=0.47
c[0]=0.35
</code></pre>
<hr />
<p>A javascript version would be:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const data = [
    { value: 0.35, name: 'a' },
    { value: 0.12, name: 'b' },
    { value: 0.05, name: 'c' },
    { value: 0.25, name: 'd' },
    { value: 0.23, name: 'e' },
];

for(let i = data.length - 1, cumulated = 0; i &gt;= 0; i--) {
    cumulated += data[i].value;

    data[i].cumulated = cumulated &lt; 0.5 ? cumulated : 1 - cumulated + data[i].value;
}

console.log(data);</code></pre>
</div>
</div>
</p>
",2
65141430,"<p>You could take a dynamic approach with an object for the wanted keys.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function max(search, keys) {
    const temp = search.reduce((r, [key, ...data]) =&gt; {
        if (!r[key]) r[key] = [key, ...data];
        else data.forEach((v, i) =&gt; { if (r[key][i + 1] &lt; v) r[key][i + 1] = v; });
        return r;
    }, {});

    return keys.map(key =&gt; temp[key]);
}

console.log(max([['#S!', 1, 1], ['#$@', 2, 5], ['#S!', 10, 12], ['#$@', 21, 5]], ['#S!','#$@']));
console.log(max([[""A"", 1, 2],[""A"", 12, 23],[""A"", 11, 23], [""A"", 14, 42], [""A"", 71, 32], [""B"", 113, 42], [""B"", 145, 62], [""C"", 91, 32], [""C"", 14, 222], [""C"", 111, 2]], [""A"", ""B"", ""C""]));</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>
</div>
</div>
</p>
",2
65140837,"<p>You could take <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign"" rel=""nofollow noreferrer""><code>Object.assign</code></a> with an empty array as target and the given array and an object with an index property.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const arr = [1, 2, 3];

const modifiedClone = Object.assign([], arr, { [arr.length - 1]: 4 }); 

console.log(modifiedClone);</code></pre>
</div>
</div>
</p>
",2
65140482,"<p>For firefox you have to add the event onwheel:</p>
<pre><code>&lt;div id=&quot;scroll-container&quot; @onmousewheel=&quot;MouseWheelEventHandler&quot; @onwheel=&quot;MouseWheelEventHandler&quot;&gt;
    [...]
&lt;/div&gt;

@code 
{
    private async Task MouseWheelEventHandler()
    {
        System.Console.WriteLine(&quot;Scroll&quot;);
    }
}
</code></pre>
<p><a href=""https://blazorfiddle.com/s/csqrf9rh"" rel=""nofollow noreferrer"">Fiddle</a></p>
",2
65117792,"<p>Your code is close, but the <code>value</code> is simply the value at the current index, so you can't use it to access other values in the array. Instead, the third argument you pass to the <code>filter</code> callback can access the array.</p>
<p>The other issue you have is that, if you want to get <em>both</em> numbers, you'll probably want to check the revers (i.e., if a number is <code>g</code> greater than the previous number).</p>
<p>You'll see here that this returns all instances that match, so if you only wanted the first instance I would recommend using an array method like <code>find</code> rather than <code>filter</code>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const g = 4;

const primes = [2, 3, 5, 7, 11, 13, 17, 19];

const filtered = primes.filter((value, index, arr) =&gt; {
  return value + g === arr[index + 1] || value - g === arr[index - 1];
});

console.log(filtered);</code></pre>
</div>
</div>
</p>
<p>If you <em>did</em> indeed want only the first match, you could just use the <code>find</code> method to get the first value and you would know that the second value is <code>g</code> greater than the first.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const g = 4;

const primes = [2, 3, 5, 7, 11, 13, 17, 19];

const first = primes.find((el, index, arr) =&gt; el + g === arr[index + 1]);

console.log([first, first + g]);</code></pre>
</div>
</div>
</p>
",2
65124057,"<ol>
<li>You can not get the style by <code>xxx.style</code> of an element if the style is not defined inline, so <code>document.getElementById(&quot;B5&quot;).style.display</code> is always going to be <code>&quot;&quot;</code> by default.</li>
</ol>
<blockquote>
<p>Solution: use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle"" rel=""nofollow noreferrer""><code>window.getComputedStyle(document.getElementById(&quot;B5&quot;))</code></a> instead</p>
</blockquote>
<ol start=""2"">
<li>The default <code>display</code> of <code>button</code> is <code>inline-block</code>, not <code>block</code>. So <code>display === &quot;block&quot;</code> will never work.</li>
</ol>
<blockquote>
<p>Solution: use <code>display !== &quot;none&quot;</code> instead</p>
</blockquote>
<p>Here's an example of how it should be done:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function reduce() { 
  if (window.getComputedStyle(document.getElementById(""B5"")).display !== ""none"") {
    document.getElementById(""B5"").style.display = ""none"";
  } else {
    // restore the style of B5 to its original state
    document.getElementById(""B5"").style.display = """";
  }
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;button id=""B1"" onclick=""reduce()""&gt;Button 1&lt;/button&gt;
&lt;button id=""B5"" &gt;Button 2 (to hide)&lt;/button&gt;</code></pre>
</div>
</div>
</p>
",2
65159279,"<p>You want to access the text <em>inside</em> your <code>li</code> elements. You can do this via <code>textContent</code> as shown below:</p>
<pre class=""lang-js prettyprint-override""><code>selectedElements.forEach(element =&gt; {
  console.log(element);
  console.log(parseInt(element.textContent));
});
</code></pre>
",2
65133955,"<p>Just take the difference between two consecutive values: the sign of that difference should flip in each iteration of your loop over the array:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function isUpDown(arr) {
  if (arr.length &lt; 3 || arr[0] === arr[1]) return false;
  for (let i = 2, sign = Math.sign(arr[0] - arr[1]); i &lt; arr.length; i++, sign = -sign) {
    if (sign !== Math.sign(arr[i] - arr[i-1])) return false;
  }
  return true;
}

console.log(isUpDown([-3, -2, -4, 4, 2, 5, 0, 3, -10, 4])); // true
console.log(isUpDown([3, -2, -4, 4, 5, 7, 10, 3, -10, 4])); // false</code></pre>
</div>
</div>
</p>
",2
65116379,"<p>You are getting a <a href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/204"" rel=""nofollow noreferrer"">204 status code</a>, which means the request went through successfully but there is no content at all, hence you are trying to log nothing.</p>
<blockquote>
<p>The HTTP 204 No Content success status response code indicates that the request has succeeded, but... The common use case is to return 204 as a result of a PUT request, updating a resource, without changing the current content of the page displayed to the user. If the resource is created, 201 Created is returned instead. If the page should be changed to the newly updated page, the 200 should be used instead.</p>
</blockquote>
<p>You also need, as suggested in previous comments, open the dev console and check the status of the promise itself. This promise seems to be successful.</p>
<p>If this answer helps solving the issue, <strong>consider</strong> accepting the answer or upvoting it. Thanks.</p>
",2
65149191,"<p>To achieve this, you can use the <a href=""https://api.jquery.com/wrapall/"" rel=""nofollow noreferrer"">wrapAll</a> function.</p>
<p>Simply: <code>$(&quot;.button-column&quot;).wrapAll(&quot;&lt;div class='button-row'&gt;&lt;/div&gt;&quot;)</code>;
`</p>
",2
65091734,"<p><code>restOfArray</code> is itself an array and you are trying to use it as index of another array. <code>array[restOfArray]</code> will always return <code>undefined</code>.</p>
<p>you should pass <code>restOfArray</code> instead of <code>array[restOfArray]</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const slowAdd = (array)=&gt;{
    
    if(array.length === 0) return 0;

    const restOfArray = array.slice(1);

    return array[0] + slowAdd(restOfArray);

}

const dataArray = [2, 5, 7]
console.log(slowAdd(dataArray));

//Same Problem with this one.

const fastSum = (array)=&gt;{
    return _fastSum(array, 0);
};
const _fastSum = (array, start)=&gt;{
    if(start === array.length) return 0;

    return array[start] + _fastSum(array, start + 1);

}

console.log(fastSum(dataArray));</code></pre>
</div>
</div>
</p>
",2
65151674,"<p>There's not a specific &quot;right FP way&quot; to do this. It's about incorporating various techniques that serve your purpose. Here, I'll use the <code>fp-ts</code> library to
show you the concepts of</p>
<ol>
<li><p>the IO monad (to model a synchronous effect, bc your function is called &quot;....DoesSomething...&quot;, so we imagine it's writing a Foo to disk)</p>
</li>
<li><p>functional composition (using <code>flow</code> here, which turns a bunch of functions into a single function)</p>
</li>
<li><p>immutability (immutable data reduces the possible errors you can encounter by ensuring the data is always as you expect)</p>
</li>
<li><p>lenses, in the category of optics, which deal with focusing on a single prop in an object and are basically a pair of getter and (immutable) setter functions</p>
</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>import * as IO from 'fp-ts/es6/IO'
import { flow } from 'fp-ts/es6/function'
import { Lens } from 'monocle-ts'

// Just for fun, model writing a Foo to disk
declare const writeFooToDisk: (foo:Foo) =&gt; IO.IO&lt;Foo&gt;
interface Foo {
  id: string
  bar: string
}

// How to instantiate a Foo
const makeFoo = (id:string):Foo =&gt; ({id, bar: 'initial value'})

/* 
 * How to update bar within a Foo; FP prefers immutable data structures.
 * Here, setBar('new val')(oldFoo) does not change oldFoo but returns a new Foo
 */
const setBar = (bar:string) =&gt; (foo:Foo):Foo =&gt; ({...foo, bar})

/*
 * Here's how you might change your someFunction... (sFTR) to be functional.
 * I assume &quot;does something&quot; means there's a side effect (HTTP fetch, DB read, 
 * disk write). With a side effect, you want to wrap it in an IO (if sync) or
 * Task (if async). For simplicity, I'm assuming the function can never produce
 * an error.
 */
const sFTR: (foo:Foo) =&gt; IO.IO&lt;Foo&gt; = flow(
  IO.of,
  IO.chain(writeFooToDisk),
  IO.map(foo =&gt; setBar(foo.bar==='initial value'?'initial value changed':'value changed')(foo))
)

///// We can improve this with lenses, another thing in FP:

/*
 * A lens is essentially two functions: a getter and an immutable setter
 * assume type S { A: unknown }, then
 *
 * sLens.get is (s:S) =&gt; A, you pass state and it gives you property
 *
 * sLens.set is (a:A) =&gt; (s:S) =&gt; S, you pass new property, then state, and it
 * gives up updated state
 *
 * some libs provide `modify`, which is like `set` but it takes a function
 * rather than a value, and it modifies the property based on its current value
 */
const barLens = Lens.fromProp&lt;Foo&gt;()('bar')

// This is what we'll pass `modify`
const updateBar = (bar:string) =&gt; bar==='initial value' 
  ? 'initial value changed' 
  : 'value changed'

/*
 * We define a function &quot;flow&quot; that lifts a Foo into IO, then writes to disk,
 * then modifies bar, and returns the updated Foo (still wrapped in IO)
 */
const sFTRWithLens: (foo:Foo) =&gt; IO.IO&lt;Foo&gt; = flow(
  IO.of,
  IO.chain(writeFooToDisk),
  IO.map(barLens.modify(updateBar))
)

// type IO&lt;A&gt; is just ()=&gt;A, so we can unwrap the Foo like so:
const foo = makeFoo('howdy')
const newFooIO = sFTRWithLens(foo) // IO&lt;Foo&gt;
newFooIO() // Foo

// Or, using flow again. This creates a Foo, writes it to disk, updates bar,
// and returns the updated Foo
flow(makeFoo, newFooIO, newFooIO)('howdy') // { id: 'howdy', bar: 'updated initial value' }
</code></pre>
",2
65149704,"<p>You can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""nofollow noreferrer""><code>Array#filter</code></a>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let args = [[ 64, 120 ],[ 65, 100 ],[ 70, 150 ],[ 56, 90 ],[ 75, 190 ],[ 60, 95 ],[ 68, 110 ]];
args = args.sort((a,b)=&gt;a[0] != b[0] ? a[0] - b[0] : b[1] - a[1])
  .filter((x, i)=&gt;i === args.length - 1 || x[1] &lt;= args[i+1][1]);
console.log(JSON.stringify(args));</code></pre>
</div>
</div>
</p>
",2
65111727,"<p>Use <code>.textContent</code> instead so that characters with special meaning in HTML are not interpreted as HTML.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const pre = document.querySelector('pre');
pre.textContent = `&lt;div&gt;Some content&lt;/div&gt;`;</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;pre&gt;&lt;/pre&gt;</code></pre>
</div>
</div>
</p>
",2
65153496,"<p>You just need to loop on single array and access the value on corresponding index. You don't need a nested loop here.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var words = [""play"", ""game""];


$(""#wordBank span"").each(function(index){
    $(this).attr('data-word', words[index]);
});
  
console.log(document.querySelector('#wordBank').outerHTML)</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div id=""wordBank""&gt;
    &lt;span&gt;Play&lt;/span&gt;
    &lt;span&gt;Game&lt;/span&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",2
65086060,"<p>There are 100 ways to achieve that:</p>
<pre><code>//1 one way    
const a = &quot;point1,point2&quot;
console.log(a.split(',').join('/'))//will output point1/point2

//Another way    
console.log(a.replace(',','/'))//will output point1/point2

//...For the rest learn the basic of javascript and find answers alone
</code></pre>
<p>Stop running...take your time to learn basic before tackling little projects</p>
",2
65127386,"<p>This is a rather special requirement, that probably &gt; 99% of cases where something needs to be sorted, won’t ever need - so I don’t think you will find it in any existing implementation. Not saying that this could not probably done, when you implement a sort algorithm yourself, but to have this “built-in” to standard sort functionality, would be a performance drain on the majority of use cases that don’t need it.</p>
<p>I would just sort the array first, and then loop over original and sorted array after, until I find the first different item.<br />
How good or bad that will do in terms of performance, really depends on the size of your data set. If it gets too slow, you could still try a divide &amp; conquer approach here: Check the elements in the middle of both arrays first - if those are still the same, continue searching the same way in the second half, if not, in the first.</p>
",2
65091850,"<p>Looking for specific handler</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const handlerIs = ($ele, handler, func) =&gt; {
  const events = $._data($ele.get(0), ""events"");
  func = func.toString();
  return events &amp;&amp; 
    events[handler]?.some(ev =&gt; ev.handler.toString() === func);
};

const $ele = $(""button"");

const clicked = () =&gt; alert(""clicked"");

$ele.on(""click"", clicked)
$ele.on(""click"", clicked)

if (handlerIs($ele, ""click"", clicked)) {
  console.log(`click clicked exists on ${$ele.get(0).tagName}`);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js""&gt;&lt;/script&gt;

&lt;button type=""button""&gt;Mouseover or click&lt;/button&gt;</code></pre>
</div>
</div>
</p>
<p>Just looking for click handlers</p>
<p>It could be implemented as a $fn to be called $ele.hasHandler...</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const hasHandler = ($ele,handler) =&gt; Object.keys($._data($ele.get(0), ""events""))
  .filter(key =&gt; key===handler).length&gt;0;


const $ele = $(""button"");

$ele.on(""click"",function() { alert(""clicked"") }); // define click once

if (!hasHandler($ele,""click"")) { // test before trying again
   $ele.on(""click"",function() { console.log(""another click"") }); 
}
else console.log(`click already found on ${$ele.get(0).tagName}`)

/* 
Object.entries($._data($ele.get(0), ""events""))
  .forEach(ent =&gt; console.log(ent[0],ent[1][0].handler))
*/</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/2.1.4/jquery.min.js""&gt;&lt;/script&gt;

&lt;button type=""button""&gt;Mouseover or click&lt;/button&gt;</code></pre>
</div>
</div>
</p>
",2
65136435,"<p>The error message is correct, the second parameter of <code>reduce</code> is the next entry of the array being reduced, which in this case is the <code>promises</code> array.</p>
<p>So the immediate solution is to <code>await</code> the promise without trying to call it:</p>
<pre><code>const r = await nextAsyncFunction;  // no () on the end
</code></pre>
<p>Why the <code>nextAsyncFunction</code> name was used instead of <code>nextPromise</code> or variation thereof is not self evident - it's certainly confusing and led to errors.</p>
<p>Aside from that there seems to be some bugs waiting to happen:</p>
<ul>
<li><p>If the <code>&quot;Bad request&quot;</code> message is sent, the code continues to execute and tries to update the database and resolve the promise pushed by the <code>forEach</code> function. Subsequently <code>res.send(ret)</code> will (is likely to?) error as an attempt to send a second set of response headers. Try thowing a <code>Bad Request</code> error and catching it in a promise <code>catch</code> handler to send the <code>400</code> response.</p>
</li>
<li><p>there is no attempt to wait for asynchronous processing to finish before executing</p>
<pre><code>  res.send(ret)
</code></pre>
<p>which would send an empty array if it succeeded.</p>
</li>
</ul>
<p>The <code>reduce(async (previousPromise, nextPromise)</code> construct is a rather complicated way of waiting for promises to be resolved in turn by using <code>for ... of</code> :</p>
<pre><code>(async function() {
   for( promise of promises) {
       ret.push( await promise);
   }
}()
.then( ()=&gt; res.send(ret));
.catch( ()=&gt; // server error response?
</code></pre>
<p>Handling requests that are a mixture of valid and invalid <code>pj</code> request values may require further attention.</p>
",2
65120075,"<p>You could <code>map</code> through <code>arr</code>, with each element, filter <code>item</code> to which match the term</p>
<p>After that, <code>filter</code> the <code>arr</code> again to reject the elements whose <code>item</code> is empty</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const arr = [ { category: ""Diner"", item: [ { name: ""Chicken Rice"", price: 200 }, { name: ""Mutton Rice"", price: 300 }, ], }, { category: ""Breakfast"", item: [ { name: ""Tea Bisuit"", price: 100 }, { name: ""Bread Butter"", price: 300 }, { name: ""Green Tea"", price: 80 }, ], }, ]

const term = ""Green Tea""

const res = arr
  .map((categoryAndItems) =&gt; ({
    category: categoryAndItems.category,
    item: categoryAndItems.item.filter((item) =&gt; item.name === term),
  }))
  .filter((categoryAndItems) =&gt; categoryAndItems.item.length &gt; 0)

console.log(res)</code></pre>
</div>
</div>
</p>
",2
65132483,"<p>See comments in the code. There are several errors (1-6):</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var examGrade;
var letter;
function start(){
    var NUMBER_OF_STUDENTS = 20;
    for(var i = 0; i &lt; NUMBER_OF_STUDENTS; i++){

        var examGrade = getRandomInt(50,100); // 2. This is how you generate random numbers (see function getRandomInt)
        var letter = getLetterGrade(examGrade);
        document.writeln(""you received "" + letter + "" for your grade of "" + examGrade + ""&lt;br&gt;""); // 3. Use ""document.writeln"" to write lines in browser

    }
}

/* Copied from: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random */
function getRandomInt(min, max) {
  min = Math.ceil(min);
  max = Math.floor(max);
  return Math.floor(Math.random() * (max - min) + min); //The maximum is exclusive and the minimum is inclusive
}

// 4. You need to return the letter from the function
function getLetterGrade(examGrade){ // 5. You need to catch the value sent to the function here
    if (examGrade &gt;= 91 &amp;&amp; examGrade &gt;= 100){ // 6. You need to use the parameter ""examGrade"" (not ""n"")
       return ""A"";

    }else if (examGrade &gt;= 81 &amp;&amp; examGrade &gt;= 90){
      return ""A"";

    }else if (examGrade &gt;= 71 &amp;&amp; examGrade &gt;= 80){
       return ""C"";

    }else if (examGrade &gt;= 61 &amp;&amp; examGrade &gt;= 70){
     return ""D"";

    }else if (examGrade &lt;61){ 
       return ""F"";
    }

}

start() // 1. Need to run the function ""start""</code></pre>
</div>
</div>
</p>
",2
65154373,"<p>Sounds like you just need to chunk the array into sixths before mapping:</p>
<pre><code>const videosChunked = [];
for (let i = 0; i &lt; videos.length; i += 6) {
  videosChunked.push(videos.slice(i, i + 6));
}
</code></pre>
<pre><code>videosChunked.map((chunk, chunkIndex) =&gt; (
  chunk =&gt; (
    &lt;div&gt;
      {chunk.map((video, i) =&gt; (
          &lt;div key={i}&gt;
            &lt;a&gt;                                                             
              &lt;div&gt;
                &lt;span&gt;Clip {chunkIndex * 6 + i + 1}&lt;/span&gt;
                &lt;label&gt;{video.duration}&lt;/label&gt;
              &lt;/div&gt;
            &lt;/a&gt;
          &lt;/div&gt;
      ))}
    &lt;/div&gt;
  )
));
</code></pre>
",2
65109455,"<p>JWTs want UNIX timestamps ... seconds since <code>1970-01-01T00:00Z</code>.</p>
<p>You get those from Javascript timestamps by doing stuff like this:</p>
<pre><code>const nowTime = Math.floor(Date.now() * 0.001)
</code></pre>
<p>Javascript timestamps are UNIX timestamps in milliseconds, not seconds.</p>
<p>And of course 10min is 600s. So you should be able to do this to get your start and expiry times.</p>
<pre class=""lang-js prettyprint-override""><code> const nowTime = Math.floor(currentDate.getTime() / 1000)
 const payload = {
  iat: nowTime,
  exp: 600 + nowTime
 }
</code></pre>
<p>No moment.js required.</p>
",2
65134164,"<p>It's because you're declaring <code>deap</code> inside your <code>if</code> statements:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>if ('notify' == ""Initial"") {
  let deap = ""Activation "";
} else if ('notify' == ""Update"") {
  let deap = ""Update "";
} else {
  let deap = ""De-Activation "";
}

console.log(deap);</code></pre>
</div>
</div>
</p>
<p>If you declare it outside and reassign it inside your <code>if</code> blocks, it should work:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let deap;

if ('notify' == ""Initial"") {
  deap = ""Activation "";
} else if ('notify' == ""Update"") {
  deap = ""Update "";
} else {
  deap = ""De-Activation "";
}

console.log(deap)</code></pre>
</div>
</div>
</p>
",2
65095369,"<p>You have multiple possibilities:</p>
<ol>
<li>Paragraph with class &quot;calender&quot;:</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>document.querySelector('p.calender:last-of-type')
</code></pre>
<ol start=""2"">
<li>Element with the classes &quot;p&quot; and &quot;calender&quot;:</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>document.querySelector('.p.calender:last-of-type')
</code></pre>
<ol start=""3"">
<li>Select all elements either paragraph elements or calender class:</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>document.querySelectorAll('.calendar, p:last-of-type')
</code></pre>
<ol start=""4"">
<li>Paragraph inside an element with class &quot;calender&quot; will use your error-throwing code, so obviously that is not what you want.</li>
</ol>
",2
65108441,"<p><code>snapshot.val()</code> doesn't accept any argument.</p>
<p>If you attach an async callback to read the data at your <code>'Cords/' + img</code> reference, you can receive the data using <code>snapshot.val()</code>. If the data is an object and you want to get the value by key, you can do it like this:</p>
<pre><code>function decryptImg(){
  firebase.database()
    .ref('Cords/' + img)
    .on('value', function(snapshot){
      const image = snapshot.val()
      console.log('Canvas: ' + image.Canvas)
  })
}
</code></pre>
<p>For more info check <a href=""https://firebase.google.com/docs/database/admin/retrieve-data#node.js"" rel=""nofollow noreferrer"">https://firebase.google.com/docs/database/admin/retrieve-data#node.js</a></p>
",2
65111366,"<p>Maps have the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/entries"" rel=""nofollow noreferrer""><code>entries()</code></a> method which returns <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators"" rel=""nofollow noreferrer"">an iterator</a> over the key-value pairs. Iterators are lazy, so you have to consume it to transform it. One way is to turn into an array and then use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""nofollow noreferrer""><code>Array#filter</code></a> and <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""nofollow noreferrer""><code>Array#map</code></a> to get the keys:</p>
<pre><code>Array.from(checkedItems.entries())
    .filter(([key, value]) =&gt; value)
    .map(([key]) =&gt; key)
</code></pre>
<p>However, there is a better way to do this lazily using <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator"" rel=""nofollow noreferrer"">generators</a>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function* filter(predicate, it) {
  for (const item of it) {
    if (predicate(item))
      yield item;
  }
}

function* map(fn, it) {
  for (const item of it) {
    yield fn(item);
  }
}


const checkedItems = new Map()
  .set(""1""  , true)
  .set(""1.5"", true)
  .set(""2""  , false);
  
const iterator = checkedItems.entries();
const onlyTrue = filter(([key, value]) =&gt; value, iterator);
const onlyTrueKeys = map(([key]) =&gt; key, onlyTrue);

console.log(Array.from(onlyTrueKeys));</code></pre>
</div>
</div>
</p>
<p>This will only generate a single array at the end.</p>
<p>The <code>filter</code> and <code>map</code> generator functions can be combined together</p>
<pre><code>const onlyTrueKeys = map(
  ([key]) =&gt; key,
  filter(
    ([key, value]) =&gt; value,
    checkedItems.entries()
  )
);
</code></pre>
<p>But it might be easier to partially apply and then compose them with a helper function:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function* filter(predicate, it) {
  for (const item of it) {
    if (predicate(item))
      yield item;
  }
}

function* map(fn, it) {
  for (const item of it) {
    yield fn(item);
  }
}

function transform(iterator, ...transformers) {
  return transformers.reduce((it, transform) =&gt; transform(it), iterator);
}


const checkedItems = new Map()
  .set(""1""  , true)
  .set(""1.5"", true)
  .set(""2""  , false);

const onlyTrueKeys = transform(
  checkedItems.entries(),
  
  filter.bind(null, ([key, value]) =&gt; value),
  map.bind(null, ([key]) =&gt; key),
  Array.from
);

console.log(onlyTrueKeys);</code></pre>
</div>
</div>
</p>
<p>This can also be made into a class, if you prefer:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function* filter(it, pred) {
  for (const item of it) {
    if (pred(item))
      yield item;
  }
}

function* map(it, fn) {
  for (const item of it) {
    yield fn(item);
  }
}

class LazyTransformer {
  constructor(iterator) {
    this.iterator = iterator;
  }
  
  filter(predicate) {
    this.iterator = filter(this.iterator, predicate);
    return this;
  }
  
  map(fn) {
    this.iterator = map(this.iterator, fn);
    return this;
  }
  
  toArray() {
    return Array.from(this.iterator);
  }
}


const checkedItems = new Map()
  .set(""1""  , true)
  .set(""1.5"", true)
  .set(""2""  , false);

const transformer = new LazyTransformer(checkedItems.entries());

transformer
  .filter(([key, value]) =&gt; value)
  .map(([key]) =&gt; key);

console.log(transformer.toArray());</code></pre>
</div>
</div>
</p>
",2
65095954,"<p>Javascript pack is not rendered for each request/visitor - whole point is that it is packed once per deploy and is the same for all (except for when you have several packs, dynamic module loading and other advanced techniques, but still code is not changed per request). In fact, older method with asset pipeline is very similar in this aspect.</p>
<p>Do not try using ruby inside the pack, but instead think of a way to pass the parameter to the js code.</p>
<p>For example, you can pass it via a adding some html tag an querying it from javascript:
In view:</p>
<pre><code>&lt;meta name=&quot;nation_id&quot; content=&quot;&lt;%= params[:nation_id] %&gt;&quot; /&gt;
</code></pre>
<p>in js:</p>
<pre class=""lang-js prettyprint-override""><code>nation_id = document.querySelector('meta[name=&quot;nation_id&quot;]').content;
return `/search.json?nation_id=${nation_id}&amp;q=${phrase}`;
</code></pre>
<p>PS. also you might need to escape your <code>phrase</code> with <code>encodeURIComponent</code></p>
",2
65092473,"<p>Try it like so:</p>
<pre class=""lang-js prettyprint-override""><code>camera.position.set(0, 0, 75);

object.position.set(0, 0, -150);

const controls = new OrbitControls(camera, renderer.domElement);
controls.target.copy(object.position);
controls.update();
</code></pre>
<p>The idea of the above code is to make use of the <a href=""https://threejs.org/docs/index.html#examples/en/controls/OrbitControls.target"" rel=""nofollow noreferrer"">target</a> property of <code>OrbitControls</code> which represents the focus point. There is no need to manually call <code>lookAt()</code> on the camera object.</p>
",2
65100392,"<p>Try something like this. I changed this line in your code:</p>
<pre><code> &lt;div style={{  width: '100%', height: '100%', backgroundColor: 'red', position: 'absolute', opacity: '20%'}}&gt; &lt;/div&gt;
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const App = () =&gt; {

  return (
  
    &lt;div&gt;
            &lt;figure style={{
                position: 'fixed',
                top: 0,
                left: 0,
                backgroundImage: `url(https://placekitten.com/1000/1000)`,
                backgroundSize: 'fit',
                backgroundPosition: 'top',
                width: '100%',
                height: '100%',
                margin: 0
            }}&gt;&lt;/figure&gt;
      &lt;div style={{  width: '100%', height: '100%', backgroundColor: 'red', position: 'absolute', opacity: '20%'}}&gt; &lt;/div&gt;
        &lt;div style={{
            position: 'absolute',
                      top: '50%',
                      left: '50%',
                      transform: 'translate(-50%, -50%)',
                      width: '412px',
            color: 'white'
          }}&gt;
            &lt;h1&gt;Div content&lt;/h1&gt;
            &lt;p&gt;Would like to add a backdrop over the parent div&lt;/p&gt;
            &lt;p&gt;Make the background a light gray over the image&lt;/p&gt;
            &lt;p&gt;As it stands, any background related color I put on this div does not work. (see the backgroundColor set to red on one of the parent divs&lt;/p&gt;

        
      &lt;/div&gt;

    &lt;/div&gt;
  )
}


ReactDOM.render(
    &lt;App /&gt;,
    document.getElementById('app')
);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js""&gt;&lt;/script&gt;
&lt;div id=""app""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",2
65113963,"<p>There are a few techniques that can get you <em>closer</em> to determining whether the function was overwritten:</p>
<ul>
<li>In Chrome, at least, <code>plugins</code> exists on <code>Navigator.prototype</code>, not on <code>window.navigator</code>. If the code is running in Chrome and the property is directly on <code>navigator</code>, it has been overwritten.</li>
</ul>
<pre><code>const definitelyPatched = navigator.hasOwnProperty('plugins');
</code></pre>
<ul>
<li>If the property has been put on the prototype, check that the property descriptor matches the default: it should be enumerable and configurable. If it's not, it's been overwritten.</li>
</ul>
<pre><code>const descriptor = Object.getOwnPropertyDescriptor(Navigator.prototype, 'plugins');
const definitelyPatched = descriptor.set || !descriptor.enumerable || descriptor.configurable;
</code></pre>
<ul>
<li>In combination with the above, a nearly foolproof method would be to bypass the patched function's custom <code>toString</code> by using <code>Function.prototype.toString</code> and <code>.call</code>:</li>
</ul>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const fn = function() {
  return [1, 2, 3, 4, 5];
};
fn.toString = function() {
  return '[native code]';
};

Object.defineProperty(Navigator.prototype, 'plugins',
  {
      get: fn,
});

const descriptor = Object.getOwnPropertyDescriptor(Navigator.prototype, 'plugins');
console.log(Function.prototype.toString.call(descriptor.get));</code></pre>
</div>
</div>
</p>
<p>This would only fail if <code>Function.prototype.toString</code> has been overwritten too, and such patching can be detected <a href=""https://github.com/tc39/proposal-function-implementation-hiding"" rel=""nofollow noreferrer"">in multi-realm environments</a>.</p>
",2
65102615,"<p>Run the below code if you want to output a single index of the stack array on each click.</p>
<p><strong>EDIT:</strong> Included comments in code.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var stipends = document.getElementById(""stipends"");
var stack = [""stack1.PNG"", ""stack2.PNG"", ""stack3.PNG""];

//currentStack = 0 starts the index at 0
//we will use this to iterate over the array in sequential order starting with the first item
var currentStack = 0;

function nextStack() {
//declare array length as a var 
 var len = stack.length;

//on click, check if currentStack value is less than len
 if(currentStack &lt; len){
 
//console log the item in the stack array that has a matching index
   console.log(stack[currentStack]);

//apply the same output as image source
   stipends.src = stack[currentStack];
   
//continue adding to the currentStack for the next loop until finished
   currentStack++;
 }
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input type=button value=""Produce Stipends"" onclick=""nextStack()"" /&gt;
&lt;img id=""stipends"" src=""nostack.PNG""&gt;</code></pre>
</div>
</div>
</p>
",2
65143831,"<p>When you do <code>document.querySelector(&quot;.trash&quot;)</code> it will fetch the first element on the page with a trash class. That is why the first row gets deleted.</p>
<p>What you should probably do is search for the parentElements class from the event you are getting.
Something like this:</p>
<pre><code>function toDelete(event) {
  let row=event.target.closest(&quot;.parents-class&quot;);
  row.remove();
}
</code></pre>
<p><code>event.target</code> will give you a reference to the object on which the event was dispatched. In your case this is probably the element that was clicked. From there we try to move up the DOM to the parent that we want to delete and then remove it.</p>
<p>Alternatively you could search for the closest <code>tr</code> tag and directly delete it that way:</p>
<pre><code>function toDelete(event) {
  let row=event.target.closest(&quot;tr&quot;);
  row.remove();
}
</code></pre>
",2
65101109,"<p>Maybe this would be helpful:</p>
<pre><code>
$.getJSON(url, function (data) {
    var events = data.resultsPage.results.event;
    console.log(events);

    // Initially filter out all the events with status &quot;cancelled&quot; so they won't be rendered
    const filteredEvents = events.filter(event =&gt; event.status !== &quot;cancelled&quot;);
    // Running on the filtered events
    filteredEvents.forEach(function (item, index, array) {
    ...
    });
  });
</code></pre>
",2
65136224,"<p>My advice is use async await.</p>
<pre><code>const getQuestions = await axios.get(url);
if(getQuestions){
 const getchoices = await axios.get(url);
}
</code></pre>
<p>remember await can only be used in an async function</p>
",2
65156282,"<blockquote>
<p>I have to upgrade a small private function in a 1500 LoC JS module, written in The Revealing Module Pattern.</p>
</blockquote>
<p>I take it you mean you have to do this at runtime, from outside the &quot;module&quot; function. This is usually called &quot;monkeypatching.&quot;</p>
<p>You can't, unless you expose that private in <strong>some</strong> way.</p>
<blockquote>
<p>The only working solution I found is to rewrite <code>function private_method(){}</code> to <code>this.private_method = function(){...}</code> which binds it to the window, so I can change it in runtime.</p>
</blockquote>
<p>If you can do that, then it appears you can change the source code (leading me to <a href=""https://stackoverflow.com/questions/65156074/change-the-behavior-of-a-function-in-closure#comment115189864_65156074"">this question</a> on the question).</p>
<p>But if you can change the source code, then you can do this (see <code>***</code> comments):</p>
<pre><code>var module = module || function (){
    function init(){
        (function not_important(){console.log(&quot;I do some other stuff&quot;)})()
    }

    function public_method(){
        private_method()
    }

    function private_method(){
        console.log(&quot;original private method&quot;)
    }

    return {
        init: init,
        public_method: public_method,
        // *** Provide yourself functions to get `private_method` (and any
        // others you may want) and update it
        __privates__: {
            private_method: {
                get: function() {
                    return private_method;
                },
                set: function(fn) {
                    // *** Function declarations effectively create variables;
                    // you can write to them:
                    private_method = fn;
                }
            }
        }
    }
}()

// *** Where you want to make your change
module.__privates__.private_method.set(function() { /* ... */ });
</code></pre>
<p>You can generalize (and arguably simplify) that by putting all private methods on an object that you call them through, but it means either calling them with a different <code>this</code> than they may be expecting or making those calls a bit more awkward:</p>
<pre><code>var module = module || function (){
    /*** An object with the private functions you need to do this for
    var privates = {};

    function init(){
        (function not_important(){console.log(&quot;I do some other stuff&quot;)})()
    }

    function public_method(){
        // *** Calling it via that object, which has an effect on `this`
        privates.private_method()
        // *** If you want `this` to be the same as it would have been
        // with the raw call above (the global object or `undefined` if
        // you're in strict mode), you can use the comma trick:
        // (0,privates.private_method)()
    }

    privates.private_method = function private_method(){
        console.log(&quot;original private method&quot;)
    };

    return {
        init: init,
        public_method: public_method,
        // *** Expose that object with the private functions
        __privates__: privates
    }
}()

// *** Where you want to make your change
module.__privates__.private_method = function() { /* ... */ };
</code></pre>
",2
65139181,"<p>Your use of <code>setUserID(user.uid)</code> will not immediately cause the <code>userID</code> variable to contain the new value.  It will only contain that new value the <em>next</em> time the component renders (not <em>this</em> time it's about to render).</p>
<p>If you want to use the user's UID in the database query coming up immediately, you will need to use its value locally.</p>
<pre><code>const uid = user.uid
setUserID(uid)
firebase.database().ref(&quot;users/&quot;+ uid +&quot;/public/profile/pic&quot;).on(&quot;value&quot;, (snapshot)=&gt;{
    setPfp(snapshot.val().pfpUrl)
})
</code></pre>
<p>See that <code>uid</code> is a local variable whose value is able to be used immediately in the query.</p>
",2
65092570,"<pre><code>var unchangedListings = listings;
</code></pre>
<p>This means, <code>unchangedListings</code> is indicating to the value of the <code>listings</code>, so if you change the <code>unchangedListings</code> value, it means that you are also updating the <code>listings</code>.</p>
<p><strong>To prevent this, you need to clone the value. You should deep clone the object.</strong></p>
<pre><code>var currentLowestSeller = JSON.parse(JSON.stringify(listings[0]))
</code></pre>
<p>or</p>
<pre><code>var currentLowestSeller = Object.assign({}, listings[0])
</code></pre>
",2
65111772,"<p><code>WithLatestFrom</code> emits only when its source Observable emits, since <code>of('')</code> emits before the source to withLatestFrom, your <code>withLatestFrom</code> is never triggered.</p>
<p>The following code will not work:</p>
<pre><code>of('1 + 1')
  .pipe(
    withLatestFrom(new Promise(x =&gt; x(&quot;== 2&quot;))),
    map(([res1,res2]) =&gt; console.log(res1, res2))
  )
  .subscribe();
</code></pre>
<p>but this will:</p>
<pre><code>of('1 + 1')
  .pipe(
    delay(100), // &lt;= delay source execution
    withLatestFrom(new Promise(x =&gt; x(&quot;== 2&quot;))),
    map(([res1,res2]) =&gt; console.log(res1, res2))
  )
  .subscribe();
</code></pre>
",2
65083754,"<p>Try setting up <code>express.json()</code> inside the app:</p>
<pre><code>const express = require('express');
const app = express();
app.use(express.json()) 

app.post('/clicked', (req, res) =&gt; {
  console.log(req.a);
  console.log(req.b);
  console.log(req.body);
  res.sendStatus(201);
});
</code></pre>
",2
65125994,"<p>You've a reactivity issue because you're assigning a value to a nested field which is not reflected in template , to solve this try to use <code>this.$set</code> :</p>
<pre><code>this.$set(this.budget,'personnelBudget',
 {...this.budget.personnelBudget, 
  [year]:this.budget.personnelBudget[year].replace(/,/g, &quot;&quot;)})
</code></pre>
<p>then try try pass the input as string :</p>
<pre><code>   &lt;input ... v-on:blur=&quot;formatMoney('personnelBudget',year)&quot; v-model=&quot;budget.personnelBudget[year]&quot;/&gt;
</code></pre>
<p>and</p>
<pre><code> formatMoney(input,year) {
                           
  this.$set(this.budget,'personnelBudget',
    {...this.budget[input], 
     [year]:this.budget[input][year].replace(/,/g, &quot;&quot;)})
</code></pre>
",2
65103131,"<blockquote>
<p>In an ideal world I'd be able to attach a callback function to the automatic download of the fonts</p>
</blockquote>
<p>I wouldn't call it an ideal world yet, but you can actually do that.</p>
<p>The <a href=""https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/ready"" rel=""nofollow noreferrer""><code>document.fonts.ready</code></a> Promise resolves when all the fonts necessary to render visible text on the page have loaded.</p>
<p>Not far from there, you can iterate through <code>document.fonts</code> which holds all the <a href=""https://developer.mozilla.org/en-US/docs/Web/API/FontFace"" rel=""nofollow noreferrer"">FontFaces</a> that have been declared and check if they have loaded or not, along with their defined <a href=""https://developer.mozilla.org/en-US/docs/Web/API/FontFace/unicodeRange"" rel=""nofollow noreferrer"">unicode-range</a> if required.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>document.fonts.ready.then( () =&gt; {
  const loaded_fonts = [ ...document.fonts ]
    // simplify the objects for logging here
    .map( ({unicodeRange, status}, index) =&gt; ({ unicodeRange, status, index }) )
    .filter( ({status}) =&gt; status === ""loaded"" );

  console.log( loaded_fonts );
});</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>/* cyrillic-ext index:0 */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu72xKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
}
/* cyrillic index:1*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu5mxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
}
/* greek-ext index:2*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7mxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+1F00-1FFF;
}
/* greek index:3*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4WxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0370-03FF;
}
/* vietnamese index:4 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7WxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;
}
/* latin-ext index:5 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7GxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}
/* latin index:6 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}


body {
  font-family: ""Roboto"";
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>Hello thế giới</code></pre>
</div>
</div>
</p>
<p>If you need to load a particular one before using it on a canvas, you can call <a href=""https://developer.mozilla.org/en-US/docs/Web/API/FontFaceSet/load"" rel=""nofollow noreferrer""><code>document.fonts.load(&quot;your font&quot;, the_text_to_render)</code></a> which will load all the <em>FontFaces</em> required to render <code>the_text_to_render</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>( async () =&gt; {
  // &lt;DEMO only&gt;
  // just to be sure the font was not loaded yet
  await document.fonts.ready;
  logLoadedFontsCount( ""after document.fonts ready"" );
  // &lt;/DEMO only&gt;
  
  // now try to draw using that font face anyway
  const canvas = document.querySelector( ""canvas"" );
  const ctx = canvas.getContext( ""2d"" );
  const font_shorthand = ""30px Roboto"";
  const text = ""Привет мир"";

  // force loading fonts
  await document.fonts.load( font_shorthand, text );
  // now we can use it
  ctx.font = font_shorthand;
  ctx.fillText( text, 30, 50 );

  // &lt;DEMO only&gt;
  logLoadedFontsCount( ""after loading of customs fonts"" );
  // &lt;/DEMO only&gt;
} )();

// &lt;DEMO only&gt;
// logs how many FontFaces are currently loaded
function logLoadedFontsCount( when = """" ) {
  const loaded_fonts = [ ...document.fonts ]
    .filter( ({status}) =&gt; status === ""loaded"" );
  console.log( ""%s fonts loaded %s"", loaded_fonts.length, when );
} 
// &lt;/DEMO only&gt;</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>/* cyrillic-ext index:0 */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu72xKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0460-052F, U+1C80-1C88, U+20B4, U+2DE0-2DFF, U+A640-A69F, U+FE2E-FE2F;
}
/* cyrillic index:1*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu5mxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0400-045F, U+0490-0491, U+04B0-04B1, U+2116;
}
/* greek-ext index:2*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7mxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+1F00-1FFF;
}
/* greek index:3*/
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4WxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0370-03FF;
}
/* vietnamese index:4 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7WxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9, U+20AB;
}
/* latin-ext index:5 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu7GxKKTU1Kvnz.woff2) format('woff2');
  unicode-range: U+0100-024F, U+0259, U+1E00-1EFF, U+2020, U+20A0-20AB, U+20AD-20CF, U+2113, U+2C60-2C7F, U+A720-A7FF;
}
/* latin index:6 - should be loaded */
@font-face {
  font-family: 'Roboto';
  font-style: normal;
  font-weight: 400;
  src: url(https://fonts.gstatic.com/s/roboto/v20/KFOmCnqEu92Fr1Mu4mxKKTU1Kg.woff2) format('woff2');
  unicode-range: U+0000-00FF, U+0131, U+0152-0153, U+02BB-02BC, U+02C6, U+02DA, U+02DC, U+2000-206F, U+2074, U+20AC, U+2122, U+2191, U+2193, U+2212, U+2215, U+FEFF, U+FFFD;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;canvas&gt;&lt;/canvas&gt;</code></pre>
</div>
</div>
</p>
",2
65162761,"<p>You have various mistakes, including not splitting the string into an array, unnecessarily wrapping it in an array, and not returning your <code>finalArr</code>.</p>
<pre class=""lang-js prettyprint-override""><code>function findIntersection(strArr) {
    const arr1 = strArr[0].split(&quot;, &quot;);
    const arr2 = strArr[1].split(&quot;, &quot;);
    const finalArr = [];
    arr1.forEach(el1 =&gt; {
        arr2.forEach(el2 =&gt; {
            if (el1 === el2) {
                finalArr.push(el1);
            }
        });
    });
    return finalArr;
}
</code></pre>
<p>Alternatively, use a faster solution with sets:</p>
<pre class=""lang-js prettyprint-override""><code>function findIntersection(strArr) {
    const arr1 = new Set(strArr[0].split(&quot;, &quot;));
    const arr2 = strArr[1].split(&quot;, &quot;);
    return arr2.filter(el =&gt; arr1.has(el));
}
</code></pre>
",2
65147964,"<p>In your example, <code>signal</code> is a key for the object <code>signalData[signals].data</code>. You are calling it as a function with this line</p>
<pre class=""lang-js prettyprint-override""><code>output.push(signalData[signals].data(signal));
</code></pre>
<p>Instead, try this, in order to access the property on the object.</p>
<pre class=""lang-js prettyprint-override""><code>output.push(signalData[signals].data[signal]);
</code></pre>
",2
65117962,"<p>Your component has no idea that something has changed when you click the button. You will need to use <a href=""https://reactjs.org/docs/state-and-lifecycle.html"" rel=""nofollow noreferrer"">state</a> in order to inform React that a rerender is required:</p>
<pre><code>import React, {useState} from 'react'

function Room() {
    const [check, setCheck] = useState(null);

    const ibegyouwork = () =&gt; {
        setCheck(&lt;button&gt;New button&lt;/button&gt;);
    } 

    return (
        &lt;div&gt;
            &lt;button onClick={ibegyouwork}&gt;Display my button now !!!!&lt;/button&gt;
            {check}
        &lt;/div&gt;
    );
}

export default Room;
</code></pre>
<p>When you call <code>setCheck</code>, React basically decides that a rerender is required, and updates the view.</p>
",2
65086166,"<p>As you can see in the <a href=""https://codemirror.net/mode/index.html"" rel=""nofollow noreferrer"">Codemirror website</a>, you can see that when we click on the <code>Java</code> mode, it redirects us to <a href=""https://codemirror.net/mode/clike/index.html"" rel=""nofollow noreferrer"">c-like mode</a>. So, you can use <code>c-like</code> mode js file your purpose.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>CodeMirror.fromTextArea(document.getElementById(""codepane""), {
  mode: ""text/x-java"",
  indentWithTabs: true,
  smartIndent: true,
  lineNumbers: true,
  lineWrapping: true,
  matchBrackets: true,
  autofocus: true,
  theme: ""ambiance"",
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;link href=""https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/codemirror.min.css"" rel=""stylesheet"" /&gt;
&lt;link href=""https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/theme/ambiance.min.css"" rel=""stylesheet"" /&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/codemirror.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.58.3/mode/clike/clike.min.js""&gt;&lt;/script&gt;

&lt;textarea id=""codepane""&gt;
private class InnerClass {
  public int zero() {
    return 0;
  }
}
&lt;/textarea&gt;</code></pre>
</div>
</div>
</p>
<p><strong>Note</strong> - There might be some errors as I am not familiar with codemirror, but the above snippet must solve your issue.</p>
<p><strong>Edit</strong> - You can use <code>&quot;text/x-java&quot;</code> as the mode and load the <code>click.js</code> as given in the edited snippet to configure proper syntax highlighting.</p>
",2
65159198,"<p>When a browser loads a web page, it does an HTTP GET and gets back a static piece of HTML.  Let's call that the &quot;original content&quot;.  It then parses that HTML and runs any <code>&lt;script&gt;</code> tags it finds in that HTML.  Those script tags may then modify the content you see.  In particular some sites make additional HTTP requests to retrieve additional content and then they insert that content into the page.  The produces what I will call the &quot;full content&quot;.  Those scripts may even continue running over time to continue to update the content.</p>
<p>When you do a <code>fetch()</code> of some URL, that retrieves what was labeled above as the &quot;original content&quot;.  That's all it does.  <code>fetch()</code> just does the initial HTTP GET for that URL.  It doesn't parse the resulting HTML and it doesn't run any of the <code>&lt;script&gt;</code> tags it could find in that HTML.  Thus, <code>fetch()</code> does not produce the &quot;full content&quot; as described above.  Sometimes, the &quot;original content&quot; is sufficient for your work and sometimes the &quot;full content&quot; is what you need - it really depends upon the specific web site.</p>
<p>To get the &quot;full content&quot;, you have to feed the &quot;original content&quot; to a browser-like environment that can &quot;run&quot; it to let its scripts do their things, to provide a DOM environment for those scripts to run in so you can then query the resulting DOM to get the &quot;full content&quot;.  puppeteer is one such tool for obtaining the &quot;full content&quot;.  It actually uses the Chromium engine (same engine the Chrome browser uses) to literally &quot;run&quot; the web page and let its <code>&lt;script&gt;</code> tags do their thing and you can then obtain the &quot;full content&quot; from it after those scripts run.</p>
<p><code>fetch()</code>, by itself, cannot get the &quot;full content&quot; because it doesn't parse or run the page's scripts and doesn't offer a DOM environment for them to run in either.  That's what a tool like puppeteer can do.</p>
<blockquote>
<p>How can I request a fully loaded HTML? Is it possible without pretending to be a real user (puppeteer)?</p>
</blockquote>
<p>If the site builds its &quot;full content&quot; uses Javascript in <code>&lt;script&gt;</code> tags, then you have to use a tool like puppeteer to get the &quot;full content&quot;.  It's not just a matter of waiting.  You need a tool that actually runs the scripts in the page.</p>
",2
65147279,"<p>async/await does not work inside a forEach loop in the way you expect. The loop does not return a promise that you can await, and will not finish before moving on to the following code.  Use a for loop instead.  Also, you can use each reference as if it was a DocumentReference object.</p>
<pre><code>    let user_posts = []
    const array = query.data().anunturi_postate
    for (ref of array) {
        let post = await ref.get()
        let post_data = await post.data() 
        console.log(post_data) // data looks ok
        user_posts.push(post_data)
    })

    console.log(&quot;user_posts:&quot;, user_posts)
</code></pre>
",2
65097237,"<p>Is this what you are looking for?</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>    var input = document.getElementById(""Phone_num"");
    input.addEventListener(""blur"", function(){
        const phone = document.getElementById(""Phone_num"").value;
    const phoneFormatRex = /^\+?[0-9(),.-]+$/;
    var match = phoneFormatRex.exec(phone);
    if (match) {
        document.getElementById(""Phone_num"").value = phone;
    }
    else {
        document.getElementById(""Phone_num"").value = """";
    }
    })</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;input class=""UserInfo"" type=""text"" placeholder=""phone Format"" id=""Phone_num""&gt;</code></pre>
</div>
</div>
</p>
",2
65155603,"<p>You can do as below:</p>
<p>Step 1  : Create one <code>superadmin</code> manually give <code>isAdmin</code> = 2</p>
<p>Step 2 : Above created <code>superadmin</code> can only add/register sub admin, give <code>isAdmin</code> = 1</p>
<p>Step 3:  And last, from normal regostration, you can give <code>isAdmin</code> = 0</p>
<p>so <code>isAdmin</code> = 2 (superadmin), <code>isAdmin</code> = 1 (subadmin) and <code>isAdmin</code> = 0 (normal user)</p>
<p><strong>Note</strong>: 2,1 value for <code>isAdmin</code> is my suggestion, you can change if you want as per your requirements.</p>
",2
65095058,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const data = [
  {
    code: ""prod1"",
    quantity: 13,
    pricePerItem: 10,
    totalCost: 130
  },
  {
    code: ""prod1"",
    quantity: 7,
    pricePerItem: 11,
    totalCost: 77
  },
  {
    code: ""prod2"",
    quantity: 10,
    pricePerItem: 9,
    totalCost: 90
  },
  {
    code: ""prod2"",
    quantity: 9,
    pricePerItem: 10,
    totalCost: 90
  }
];

console.log(
  data.reduce((acc, current) =&gt; {
    if (!acc[current.code]) {
      acc[current.code] = { quantity: 0, total: 0 };
    }
    return {
      ...acc,
      [current.code]: {
        quantity: acc[current.code].quantity + current.quantity,
        total: acc[current.code].total + current.totalCost
      }
    };
  }, {})
);</code></pre>
</div>
</div>
</p>
",2
65150606,"<p>When you <code>app.import</code> a vendor file, it does not get executed in the same node environment as <code>ember-cli-build.js</code> at build time, but rather on your user's browser at run time, so there is no way to pass the environment as a parameter.</p>
<p>However, Ember automatically makes the environment available in the browser in the following manner. This is how you can set it on the window object in an initializer:</p>
<pre class=""lang-js prettyprint-override""><code>import ENV from 'config/environment';

export function initialize() {
  window.env = ENV.environment;
}

export default { initialize };
</code></pre>
<p>This will make the environment available on the window object as soon as your ember app boots. If your vendor file accesses it then, this will work.</p>
<p>However, this may not be early enough. You may need the <code>env</code> variable to be available as soon as the the new-relic.js file is read by the browser. In order to handle such a use case, you may need to use the <code>contentFor</code> hook in an addon. There is a nice addon already written for you to do this: <code>ember-cli-content-for-config</code>. With it, you can add this to your <code>index.html</code>:</p>
<pre><code>&lt;script&gt;
  window.env = '{{content-for 'config.environment'}}';
&lt;/script&gt;
</code></pre>
<p>See the README for the addon here: <a href=""https://github.com/bmac/ember-cli-content-for-config"" rel=""nofollow noreferrer"">https://github.com/bmac/ember-cli-content-for-config</a></p>
<p>You will also need to alter new-relic.js to look for the <code>env</code> variable in the global namespace (window object).</p>
",2
65089287,"<p>There is a small issue with your data, <code>Ghost</code> and <code>Car</code> have the same ID. When this is fixed, you can use the following code to create the result array:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const products = [{
    id: ""A32S"",
    title: ""Car""
  },
  {
    id: ""D12E"",
    title: ""Rabbit""
  },
  {
    id: ""A33S"",
    title: ""Ghost""
  },
  {
    id: ""34SC"",
    title: ""Apple""
  },
];

const newProducts = [{
    id: ""A32S"",
    title: ""Ferrari""
  },
  {
    id: ""D12E"",
    title: ""Rabbit""
  },
  {
    id: ""A33S"",
    title: ""Ghost""
  }
]

const changes = [];

function hasSameValue(product, otherProduct, key) {
  return product[key] === otherProduct[key];
}

function exists(product, productArray) {
  for (const existingProduct of productArray) {
    if (hasSameValue(product, existingProduct, ""id"")) return true;
  }
  return false;
}

function getExistingProduct(id, productArray) {
  for (const product of productArray) {
    if (product.id === id) return product;
  }
}

for (const product of newProducts) {
  if (exists(product, products)) {
    const existingProduct = getExistingProduct(product.id, products);
    if (!hasSameValue(product, existingProduct, ""title"")) {
      changes.push(product);
    }
  }
}

for (const product of products) {
  if (!exists(product, newProducts)) {
    changes.push({
      id: product.id,
      removed: true
    });
  }
}

console.log(changes);</code></pre>
</div>
</div>
</p>
",2
65130723,"<h2>Explanation:</h2>
<p>Your goal is to hide a column if it is empty with the exception of the first three columns in the range.</p>
<ul>
<li><p>One approach to achieve this to iterate over all columns in the desired range and check if they contain at least one non-empty value (<code>length&gt;0</code>). If the length is <code>0</code>, meaning that all values in this column are empty, then hide it.</p>
</li>
<li><p>In more detail, I use a <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"" rel=""nofollow noreferrer"">forEach</a> loop to iterate over each column. Each column is given by a simple <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""nofollow noreferrer"">map</a> expression:</p>
<p><code>data.map(d =&gt; d[col])</code> where <code>col</code> takes values <code>0, 1, 2, ..</code>.</p>
</li>
<li><p>I <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter"" rel=""nofollow noreferrer"">filter</a> on the non-empty values and hide only columns if the length of the non-empty array is <code>0</code>.</p>
</li>
<li><p>Since the data range starts from column <code>C</code> which is the 3rd column, I hide column <code>col+3</code>. Be careful with this, since it depends on the input range.</p>
</li>
<li><p>Finally, your goal is to keep the first 3 columns (Roles 1,2,3) fixed-unhidden regardless if they contain values or not. To do that, add an extra condition in the <code>if</code> condition to check if column is larger than <code>2</code>: <code>col&gt;2</code>.</p>
</li>
</ul>
<h2>Solution:</h2>
<pre><code>function hidecolumns() {
  var sh = SpreadsheetApp.getActiveSpreadsheet();
  var ss = sh.getSheetByName(&quot;Project Team Resources&quot;);
  var data = ss.getRange(&quot;C5:N10&quot;).getValues();
  data[0].forEach((_,col)=&gt;{                 
     if(data.map(d =&gt; d[col]).filter(e=&gt;e!='').length==0 &amp;&amp; col&gt;2){
       ss.hideColumns(col+3);
     }
  });
}
</code></pre>
<p><a href=""https://stackoverflow.com/a/27637038/7215091"">underscore as a parameter reference</a></p>
",2
65151746,"<p>That's exactly right. Each of these methods return a new object (that also has those methods). It's very similar to doing something like <code>someString.toUpperCase().split(&quot;&quot;)</code> in normal Javascript.
This will first get the string, run the built-in <code>toUpperCase</code> function on it, and then run another built-in function <code>split</code> on the returned string.</p>
<p>You're just stacking methods and building new objects after each call.</p>
<p>Its possible because each of these methods return the newly modified object.</p>
",2
65097731,"<p><strong>Output:</strong></p>
<p><a href=""https://i.stack.imgur.com/xloeO.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/xloeO.gif"" alt=""enter image description here"" /></a></p>
<p>Full Example:</p>
<pre><code>import React, { Component } from &quot;react&quot;;

export default class App extends Component {
  constructor(props) {
    super(props);
    this.state = {
      a: [&quot;Apple&quot;, &quot;pear&quot;, &quot;plum&quot;, &quot;currant&quot;, &quot;strawberry&quot;],
      b: [&quot;Amelia&quot;, &quot;Oliver&quot;, &quot;Sophie&quot;, &quot;Alfie&quot;, &quot;Jacob&quot;],
      c: [&quot;mercedes&quot;, &quot;bmw&quot;, &quot;audi&quot;, &quot;volkswagen&quot;, &quot;hyundai&quot;],
      index: null
    };
  }

  setIndex = i =&gt; {
    console.log(i);
    this.setState({
      index: i
    });
    console.log(this.state.index);
  };
  render() {
    return (
      &lt;div&gt;
        {this.state.index !== null &amp;&amp; (
          &lt;div&gt;
            &lt;List
              a={this.state.a[this.state.index]}
              b={this.state.b[this.state.index]}
            /&gt;
          &lt;/div&gt;
        )}
        &lt;div&gt;
          &lt;ul&gt;
            {this.state.a.map((arr, idx) =&gt; (
              &lt;li
                onClick={() =&gt; {
                  console.log(&quot;hi&quot;);
                  this.setIndex(idx);
                }}
              &gt;
                {arr}
              &lt;/li&gt;
            ))}
          &lt;/ul&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    );
  }
}

class List extends Component {
  constructor(props) {
    super(props);
  }
  render() {
    return (
      &lt;div&gt;
        &lt;ul&gt;
          &lt;li&gt;{this.props.a}&lt;/li&gt;
          &lt;li&gt;{this.props.b}&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    );
  }
}
</code></pre>
<p>You can check the working example here: <a href=""https://stackblitz.com/edit/react-hmdoz6?file=src/App.js"" rel=""nofollow noreferrer"">stackblitz</a></p>
",2
65091382,"<p>I think your best approach would be to use a standardized grid system, there are many around, for example <a href=""https://en.wikipedia.org/wiki/Military_Grid_Reference_System"" rel=""nofollow noreferrer"">MGRS</a> is the one NATO uses and can give us varying levels of accuracy.</p>
<p>We can use a module such as <a href=""https://www.npmjs.com/package/mgrs"" rel=""nofollow noreferrer"">mgrs</a> to get us the grid reference for a user's lat/long, then we can group these users using, for example, lodash's <a href=""https://lodash.com/docs/4.17.15#groupBy"" rel=""nofollow noreferrer"">groupBy</a>. One could also use Array.reduce for this purpose, but _.groupBy is very handy for this type of problem.</p>
<pre><code>const mgrs = require(&quot;mgrs&quot;);
const _ = require(&quot;lodash&quot;);

// Some sample users living within a few kms 
let users = [
    { first: 'Andreias', last: 'Aragão', lat: 51.51697, lon: -0.11894 },
    { first: 'Babür', last: 'Erberk', lat: 51.50041, lon: -0.12823 },
    { first: 'William', last: 'Jørgensen', lat: 51.49879, lon: -0.13041 },
    { first: 'Clyde', last: 'Crawford', lat: 51.50928, lon: -0.1226 },
    { first: 'Silvijn', last: 'Werts', lat: 51.49843, lon: -0.12066 },
    { first: 'Jokubas', last: 'Laastad', lat: 51.50517, lon: -0.12312 },
    { first: 'Rebecca', last: 'Lawson', lat: 51.5018, lon: -0.12786 },
    { first: 'Oscar', last: 'Opland', lat: 51.50123, lon: -0.13245 },
    { first: 'Cláudio', last: 'Costa', lat: 51.50354, lon: -0.13123 },
    { first: 'Juan', last: 'Ruiz', lat: 51.50796, lon: -0.12884 }
]

// Add user MGRS grid square
users = users.map(user =&gt; {
    // Get MGRS grid location accurate to ~1km
    user.mgrs = mgrs.forward([user.lon, user.lat], 2);
    return user;
})

const usersByLocation = _.groupBy(users, &quot;mgrs&quot;);
console.log(usersByLocation);
</code></pre>
<p>This will give us an output that looks like so:</p>
<pre><code>{
    '30UXC9911': [
        {
          first: 'Andreias',
          last: 'Aragão',
          lat: 51.51697,
          lon: -0.11894,
          mgrs: '30UXC9911'
        }
      ],
      '30UXC9909': [
        {
          first: 'Babür',
          last: 'Erberk',
          lat: 51.50041,
          lon: -0.12823,
          mgrs: '30UXC9909'
        },
        {
          first: 'William',
          last: 'Jørgensen',
          lat: 51.49879,
          lon: -0.13041,
          mgrs: '30UXC9909'
        },
        {
          first: 'Silvijn',
          last: 'Werts',
          lat: 51.49843,
          lon: -0.12066,
          mgrs: '30UXC9909'
        },
        {
          first: 'Jokubas',
          last: 'Laastad',
          lat: 51.50517,
          lon: -0.12312,
          mgrs: '30UXC9909'
        },
        {
          first: 'Rebecca',
          last: 'Lawson',
          lat: 51.5018,
          lon: -0.12786,
          mgrs: '30UXC9909'
        },
        {
          first: 'Oscar',
          last: 'Opland',
          lat: 51.50123,
          lon: -0.13245,
          mgrs: '30UXC9909'
        },
        {
          first: 'Cláudio',
          last: 'Costa',
          lat: 51.50354,
          lon: -0.13123,
          mgrs: '30UXC9909'
        }
      ],
      '30UXC9910': [
        {
          first: 'Clyde',
          last: 'Crawford',
          lat: 51.50928,
          lon: -0.1226,
          mgrs: '30UXC9910'
        },
        {
          first: 'Juan',
          last: 'Ruiz',
          lat: 51.50796,
          lon: -0.12884,
          mgrs: '30UXC9910'
        }
      ]
}
</code></pre>
",2
65137681,"<p>You have to create a function and reuse the code like this</p>
<p>Update HTML with:</p>
<pre><code>&lt;div class=&quot;mainContainer&quot;&gt;
  &lt;div id=&quot;h&quot; class=&quot;itemContainer&quot;&gt;H&lt;/div&gt;
  &lt;div id=&quot;m&quot; class=&quot;itemContainer&quot;&gt;M&lt;/div&gt;
  &lt;div id=&quot;s&quot; class=&quot;itemContainer&quot;&gt;S&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<p>JS:</p>
<pre><code>function makeCircle(circle) {
  container = document.querySelector('#'+circle);

  for(i = 0; i &lt; 30; i++){
    container.innerHTML += '&lt;div class=&quot;item '+circle+' &quot;&gt;&lt;/div&gt;';
    if((i % 5) == 0){ 
      document.querySelectorAll('.item.'+circle)[i].style.setProperty(&quot;--width&quot;, 4+&quot;px&quot;);
    }       
    document.querySelectorAll('.item.'+circle)[i].style.transform = &quot;rotate(&quot; + i * 6 + &quot;deg)&quot;;     
  }
}

makeCircle('h');
makeCircle('m');
makeCircle('s');
</code></pre>
",2
65113108,"<p>Licence component looks good to me!</p>
<p>All you have to do is change up how you set it up on App. Props need to be passed on the tag, like this:</p>
<pre><code>
import './App.css';
import Licence from './Licence';

function App() {
  return (
    &lt;&gt;
    &lt;Licence test={&quot;Test123&quot;} /&gt;
    &lt;/&gt;
  );
}
export default App;

</code></pre>
",2
65084311,"<p>Never mind I think I found the problem. Change the return type of the save function from</p>
<pre><code>public save(): Observable&lt;ISaveResult&gt; | Observable&lt;boolean&gt;
</code></pre>
<p>to</p>
<pre><code>public save(): Observable&lt;ISaveResult | boolean&gt;
</code></pre>
",2
65117205,"<p>The problem is that when <code>showTaskDate</code> is <code>undefined</code> you don't render anything, you simply return <code>undefined</code>.</p>
<p>You can change your <code>return</code> to use conditionals and return <code>null</code> to render nothing if there is no <code>showTaskDate</code> set.</p>
<pre><code>export const TaskDate = ({ setTaskDate, showTaskDate, setShowTaskDate }) =&gt; {
  return (
    showTaskDate ? (
      &lt;div className=&quot;task-date&quot; data-testid=&quot;task-date-overlay&quot;&gt;
        &lt;ul className=&quot;task-date__list&quot;&gt;
         ...
        &lt;/ul&gt;
      &lt;/div&gt;
    ) : null
  );
};
</code></pre>
",2
65151820,"<p>It should work fine, just make sure you have that function in <code>methods</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>Vue.component('mycomp', {
  template: `
  &lt;div&gt;
    &lt;button @click=""$emit('do', { text: 'return object from component'})""&gt;Emit&lt;/button&gt;
  &lt;/div&gt;
  `
})

new Vue({
  el: ""#app"",
  methods: {
    wrapDo(objectFromComp, myIntegerParameter) {
      console.log(objectFromComp, myIntegerParameter);
    }
  },
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/vue/2.5.17/vue.js""&gt;&lt;/script&gt;
&lt;div id=""app""&gt;
  &lt;mycomp @do=""wrapDo($event, 5)""&gt;&lt;/mycomp&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",2
65103977,"<p>Output:</p>
<p><a href=""https://i.stack.imgur.com/iHDnk.gif"" rel=""nofollow noreferrer""><img src=""https://i.stack.imgur.com/iHDnk.gif"" alt=""enter image description here"" /></a></p>
<pre><code>import React from &quot;react&quot;;
import ReactDOM from &quot;react-dom&quot;;

import App from &quot;./App&quot;;

ReactDOM.render(&lt;App /&gt;, document.getElementById(&quot;root&quot;));

var bImg = prompt(&quot;Which image do you want to set as background image?&quot;);
const bStyle = {
  backgroundImage: `url(${bImg})` // i stored the link here
};

const rootElement = document.getElementById(&quot;root&quot;);
ReactDOM.render(
  &lt;div style={bStyle}&gt;
    // I stored it here but still it won't show up
    &lt;h1&gt;Hello world!!&lt;/h1&gt;
  &lt;/div&gt;,
  rootElement
);

</code></pre>
<p>If you found this answer helpful then don't forget to upvote and accept
:)
Happy Coding...</p>
<p><a href=""https://stackblitz.com/edit/react-hsy7pk?file=src/index.js"" rel=""nofollow noreferrer"">StackBlitz Demo</a></p>
",2
65147972,"<p>There are a couple of errors with your code. First, <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName"" rel=""nofollow noreferrer""><code>getElementsByClassName()</code></a> returns an array-like object, so if you want to grab the first element with given class name, you need to do it like with arrays: <code>var btnRock = document.getElementsByClassName(&quot;rock&quot;)[0]</code>.</p>
<p>You could also use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector"" rel=""nofollow noreferrer""><code>querySelector()</code></a> instead, which returns the first element, so it might be easier to use: <code>var btnRock = document.querySelector(&quot;.rock&quot;)</code>.</p>
<p>Second, you only generate <code>var myRandom</code> on page load. You need to move it to your <code>onClick</code> handlers. This way, whenever you click on a button, you generate a new random item.</p>
<p>I know naming is hard, but <code>myArray</code> and <code>myRandom</code> are terrible choices.</p>
<p>The code below is far from perfect and I would change a lot more things, but it works. I just hope you can learn something new from it.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""false"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var playerCount = 0;
var computerCount = 0;
var items = [""rock"", ""paper"", ""scissors""];
var playerScore = document.querySelector("".player-score"");
var computerScore = document.querySelector("".computer-score"");
var winner = document.querySelector("".winner"");
var btnRock = document.querySelector("".rock"");
var btnPaper = document.querySelector("".paper"");
var btnScissors = document.querySelector("".scissors"");

function getRandomItem() {
  return items[Math.floor(Math.random() * items.length)];
}

btnRock.onclick = function() {
  var randomItem = getRandomItem();
  if (randomItem === items[2]) {
    playerCount++;
    playerScore.textContent = playerCount;
    winner.textContent = 'Player';
  } else if (randomItem === items[0]) {
    winner.textContent = 'Draw';
  } else {
    computerCount++;
    computerScore.textContent = computerCount;
    winner.textContent = 'Computer';
  }
};

btnPaper.onclick = function() {
  var randomItem = getRandomItem();
  if (randomItem === items[0]) {
    playerCount++;
    playerScore.textContent = playerCount;
    winner.textContent = 'Player';
  } else if (randomItem === items[1]) {
    winner.textContent = 'Draw';
  } else {
    computerCount++;
    computerScore.textContent = computerCount;
    winner.textContent = 'Computer';
  }
};

btnScissors.onclick = function() {
  var randomItem = getRandomItem();
  if (randomItem === items[1]) {
    playerCount++;
    playerScore.textContent = playerCount;
    winner.textContent = 'Player';
  } else if (randomItem === items[2]) {
    winner.textContent = 'Draw';
  } else {
    computerCount++;
    computerScore.textContent = computerCount;
    winner.textContent = 'Computer';
  }
};</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;Winner: &lt;span class=""winner""&gt;-&lt;/span&gt;&lt;/div&gt;
&lt;button class=""rock""&gt;Rock&lt;/button&gt;
&lt;button class=""scissors""&gt;Scissors&lt;/button&gt;
&lt;button class=""paper""&gt;Paper&lt;/button&gt;
&lt;div&gt;Player: &lt;span class=""player-score""&gt;0&lt;/span&gt;&lt;/div&gt;
&lt;div&gt;Computer: &lt;span class=""computer-score""&gt;0&lt;/span&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",2
65150828,"<p>As described over in <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify"" rel=""nofollow noreferrer"">MDN</a>, <code>JSON.stringify</code> returns <code>undefined</code> when a function is passed as an argument:</p>
<blockquote>
<p>undefined, Functions, and Symbols are not valid JSON values. If any
such values are encountered during conversion they are either omitted
(when found in an object) or changed to null (when found in an array).
JSON.stringify() can return undefined when passing in &quot;pure&quot; values
like JSON.stringify(function(){}) or JSON.stringify(undefined).</p>
</blockquote>
",2
65125039,"<p>create instance of your class before export.
Try some like:</p>
<pre><code>class User {
...
}

const userRoute =  new User()
export {userRoute}

</code></pre>
<blockquote>
<p><strong>Updated based in doc of <code>routing-controllers</code></strong></p>
</blockquote>
<p>according to the <a href=""https://github.com/typestack/routing-controllers"" rel=""nofollow noreferrer"">github</a> page of that library, the use in express should be like this:</p>
<pre><code>
@Controller()
export class UserController {

    @Get(&quot;/users&quot;)
    getAll(@Req() request: Request, @Res() response: Response) {
        return response.send(&quot;Hello response!&quot;);
    }

}


import &quot;reflect-metadata&quot;;
import { useExpressServer } from &quot;routing-controllers&quot;;

let express = require(&quot;express&quot;); // or you can import it if you have installed typings
let app = express(); // your created express server
// app.use() // you can configure it the way you want
useExpressServer(app, { // register created express server in routing-controllers
    controllers: [UserController] // and configure it the way you need (controllers, validation, etc.)
});
app.listen(3000); // run your express server

</code></pre>
<p>take a look at their doc</p>
",2
65152140,"<p>Try adding this to the bottom of your function.js file:</p>
<pre><code>module.exports = {Christmas}
</code></pre>
",2
65091833,"<ul>
<li>You could use <a href=""https://developer.mozilla.org/en/docs/Web/API/Window/localStorage"" rel=""nofollow noreferrer"">localStorage()</a> to store a value.</li>
<li>Set CSS <code>body</code> to <code>font-size: 16px;</code></li>
<li>Set al your other elements to font-size defined in <strong>relative units</strong> like i.e: <code>em</code> or <code>rem</code>.</li>
<li>Change the font size just to <code>body</code> using JS and see all the other elements adjust accordingly.</li>
</ul>
<h2>Using two <code>-/+</code> buttons</h2>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const EL_body = document.querySelector(""body"");
const ELS_fontSize = document.querySelectorAll("".fontSize"");
localStorage.fontSize = localStorage.fontSize || 16; // Read or default to 16px

function changeSize() {
  EL_body.style.fontSize = `${localStorage.fontSize}px`;
}

ELS_fontSize.forEach(el =&gt; el.addEventListener(""click"", function() {
  localStorage.fontSize = parseInt(localStorage.fontSize) + parseInt(el.value);
  changeSize();
}));

// Change size on subsequent page load
changeSize();</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;button class=""fontSize"" type=""button"" value=""-2""&gt;A-&lt;/button&gt;
&lt;button class=""fontSize"" type=""button"" value=""2""&gt;A+&lt;/button&gt;

&lt;h1&gt;Lorem ipsum...&lt;/h1&gt;
&lt;p&gt;Lorem ipsum...&lt;/p&gt;</code></pre>
</div>
</div>
</p>
<h2>Using radio buttons</h2>
<pre class=""lang-js prettyprint-override""><code>const EL_body = document.querySelector(&quot;body&quot;);
const ELS_fontSize = document.querySelectorAll(&quot;[name='fontSize']&quot;);
localStorage.fontSize = localStorage.fontSize || 16; // Read or default to 16px

function changeSize() {
  ELS_fontSize.forEach(el =&gt; el.checked = el.value === localStorage.fontSize);
  EL_body.style.fontSize = `${localStorage.fontSize}px`;
}

ELS_fontSize.forEach(el =&gt; el.addEventListener(&quot;change&quot;, function() {
  localStorage.fontSize = el.value;
  changeSize();
}));

// Change size on subsequent page load
changeSize();
</code></pre>
<pre class=""lang-css prettyprint-override""><code>[name=&quot;fontSize&quot;]+span {
  display: inline-block;
  padding: 5px 10px;
  border: 1px solid currentColor;
}

[name=&quot;fontSize&quot;]:checked+span {
  color: #0bf;
}
</code></pre>
<pre class=""lang-html prettyprint-override""><code>&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;fontSize&quot; value=&quot;14&quot; hidden&gt;&lt;span&gt;A-&lt;/span&gt;&lt;/label&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;fontSize&quot; value=&quot;16&quot; hidden checked&gt;&lt;span&gt;A&lt;/span&gt;&lt;/label&gt;
&lt;label&gt;&lt;input type=&quot;radio&quot; name=&quot;fontSize&quot; value=&quot;18&quot; hidden&gt;&lt;span&gt;A+&lt;/span&gt;&lt;/label&gt;

&lt;h1&gt;Lorem ipsum...&lt;/h1&gt;
&lt;p&gt;Lorem ipsum...&lt;/p&gt;
</code></pre>

<h2>Using a select box</h2>
<pre class=""lang-js prettyprint-override""><code>const EL_body = document.querySelector(&quot;body&quot;);
const EL_fontSize = document.querySelector(&quot;#fontSize&quot;);
localStorage.fontSize = localStorage.fontSize || 16; // Read or default to 16px

function changeSize() {
  EL_fontSize.value = localStorage.fontSize; // Update select value;
  EL_body .style.fontSize = `${localStorage.fontSize}px`;
}

EL_fontSize .addEventListener(&quot;change&quot;, function() {
  localStorage.fontSize = this.value;
  changeSize();
});

// Change size on subsequent page load
changeSize(); 
</code></pre>
<pre class=""lang-html prettyprint-override""><code>&lt;select id=&quot;fontSize&quot;&gt;
  &lt;option value=&quot;14&quot;&gt;Small&lt;/option&gt;
  &lt;option value=&quot;16&quot;&gt;Normal&lt;/option&gt;
  &lt;option value=&quot;18&quot;&gt;Big&lt;/option&gt;
&lt;/select&gt;
&lt;h1&gt;Lorem ipsum...&lt;/h1&gt;
&lt;p&gt;Lorem ipsum...&lt;/p&gt;
</code></pre>

",2
65138857,"<p>change your <code>forEach</code> to <code>map</code></p>
<p><code>map</code> returns a new array, in this case its an array of components</p>
<p><code>forEach</code> simply iterates over each item, it doesn't return anything.</p>
<p><a href=""https://codesandbox.io/s/epic-keldysh-u9x8i"" rel=""nofollow noreferrer"">https://codesandbox.io/s/epic-keldysh-u9x8i</a></p>
",2
65093705,"<p>To do something after a hook state was updated you need to use a <code>useEffect</code> and pass the state to the dependencies array</p>
<pre><code>useEffect(() =&gt; {
    console.log(question)
},[question]) 
</code></pre>
<p>This will only run after every time the <code>question</code> state is updated.</p>
",2
65146122,"<p>Basic JS to disable/enable the button when the selection changes.</p>
<pre><code> function enableBtn(select){
    var btn = document.getElementById('orderButton');
    if(select == 'SELECIONE' ){
        btn.disabled = true;
    } else {
        btn.disabled = false;
    }
 }

</code></pre>
<p>Disable the button on page load.
When the selection changes check to enable the button</p>
<pre><code>&lt;select th:name=&quot;orderBy&quot; th:onChange=&quot;enableBtn(this.value)&quot;&gt;
   &lt;option th:each=&quot;orderBy : ${T( com.example.demo.OrderTypes).values()}&quot;
           th:value=&quot;${orderBy}&quot; th:text=&quot;${orderBy.displayValue}&quot; &gt;&lt;/option&gt;
&lt;/select&gt; &lt;br/&gt; &lt;br/&gt;
&lt;input id=&quot;orderButton&quot; type=&quot;submit&quot; value=&quot;Ordenar&quot; disabled&gt;
</code></pre>
",2
65106914,"<blockquote>
<p>how to export a constant which is inside a function?</p>
</blockquote>
<p>There are two answers to this:</p>
<ol>
<li><p>You don't. It doesn't make sense. Instead, you move the constant out of the function and export it.</p>
</li>
<li><p>You do it exactly as you have done, but the constant won't be in the module's exports until <code>MyFunctionA</code> has been executed at least once. This is possible because the CommonJS-style modules that you're using are dynamic and can change at runtime. However, making your exports dependent on a function call is asking for trouble, as you've discovered.</p>
</li>
</ol>
<p>So taking #1 on board, we get:</p>
<pre><code>// my function in File_A.js
const myVariable = &quot;hello&quot;; // Odd name for a constant? ;-)
module.exports.myVariable = myVariable;
const MyFunctionA = () =&gt; {
    return (
        /*...*/
    );
};
</code></pre>
<p>A couple of notes on that:</p>
<ol>
<li><p><code>MyFunctionA</code> still closes over the constant and references it exactly the way it used to.</p>
</li>
<li><p><code>myVariable</code> doesn't become a global, because the top-level scope of a CommonJS module isn't global scope.</p>
</li>
</ol>
",2
65095422,"<p>Here you go: your collision detection needed a little fine polishing.</p>
<p>See the Example below.</p>
<p>Happy Coding</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var canvas = document.getElementById(""ok"");
var ctx = canvas.getContext(""2d"");
var loggingMachine = document.getElementById(""loggy"");
var score = 0;
const Rg = Math.floor(Math.random() * 480);
function ball(x) {
  this.x = x;
  this.y = 0;
  this.width = 20;
  this.height = 20;
}
var firstBall = new ball(Rg);
function newBall() {
  if (firstBall.y &lt; 480) {
    ctx.clearRect(0, 0, 480, 480);
    ctx.fillRect(firstBall.x, firstBall.y, firstBall.width, firstBall.height);
    firstBall.y++;
  } else {
  
  const playerStart = player.x;
  const playerEnd = player.x + player.width;
  
  const ballStart = firstBall.x;
  const ballEnd = firstBall.x + firstBall.width;
  
  const test1 = ballEnd - playerStart;
  const test2 = ballStart - playerEnd;
  
    if (
      test1 &gt;= 0 &amp;&amp; test2 &lt;= 0
    ) {
      alert(""yawwo"");
    }
    firstBall.y = 0;
    firstBall.x = Math.floor(Math.random() * 480);
  }
}
function paddle(x) {
  this.x = x;
  this.y = 470;
  this.width = 70;
  this.height = 20;
}

var player = new paddle(50);
function renderPlayer() {
  ctx.fillRect(player.x, player.y, player.width, player.height);
  document.addEventListener(""keydown"", logKey);

  function logKey(e) {
    if (e.code === ""ArrowLeft"") {
      player.x = player.x - 0.01;
    } else if (e.code === ""ArrowRight"") {
      player.x = player.x + 0.01;
    }
    loggingMachine.innerText = score;
  }
}

function tick() {
  newBall(Rg);
  renderPlayer();
  setTimeout(tick, 5);
}
tick();</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;canvas id=""ok"" width=""480"" height=""480""&gt;&lt;/canvas&gt;
&lt;p id=""loggy""&gt;&lt;/p&gt;
&lt;script src=""script.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
",2
65121908,"<p>In the example code snippet</p>
<pre><code>useEffect(() =&gt; {
  // snapshot - to check, if there is a change (like a new entry) in the database
  db.collection(&quot;products&quot;).onSnapshot(snapshot =&gt; {
      setProducts(snapshot.docs.map(doc =&gt; doc.data()))
  })
}, []);
</code></pre>
<p><code>db.collection(&quot;products&quot;)</code> manages its own asynchronous event handling. When a &quot;snapshot&quot; event is received it invokes the <code>onSnapshot</code> callback and updates state. There is nothing to await on, especially since there is no value returned.</p>
<p>You should also note that <code>useEffect</code> hook callbacks are 100% <em><strong>synchronous code</strong></em>, they <em>can't</em> be marked <code>async</code> and <code>await</code> any code calls. They can, however, call <code>async</code> functions that do their own awaiting and such.</p>
<h3>About the questions in your title</h3>
<p>Use a <code>useEffect</code> hook <em>any time</em> you want to issue any side-effect from the component lifecycle, like console logging state, make data fetches, dispatching actions. This is mostly due to the fact that the <em>entire</em> function body of a functional react component is to be considered a pure function. <code>useEffect</code> with dependencies is more akin to a class-based component's <code>componentDidMount</code>, <code>componentDidUpdate</code>, and <code>componentWillUnmount</code> lifecycle methods. Alone they are just called as part of the react component lifecycle.</p>
<p>Use <code>axios</code>, or <code>fetch</code>, or any other data fetching code whenever you need to fetch <em>that</em> data.</p>
",2
65110339,"<p>I've created a <a href=""https://codesandbox.io/s/nifty-turing-1dvbw?file=/src/App.js"" rel=""nofollow noreferrer"">simplified working version</a> of your code.  Everything appears to work.  Compare your code to that:</p>
<pre><code>import React from &quot;react&quot;;
import &quot;./styles.css&quot;;
import {
  Button,
  Container,
  CssBaseline,
  Grid,
  TextField,
  Typography
} from &quot;@material-ui/core&quot;;
import { BrowserRouter, Route, Switch, useParams } from &quot;react-router-dom&quot;;

const BasicTextFields = () =&gt; {
  const { rowId } = useParams();
  const testVar = 55;

  const selectedOfficeListRow = [{ id: 1 }, { id: 2 }].find(
    (i) =&gt; i.id === parseInt(rowId)
  );

  const handleSubmit = (event) =&gt; {
    console.log(rowId, testVar);
    event.preventDefault();
  };

  return (
    &lt;Container component=&quot;main&quot; maxWidth=&quot;sm&quot;&gt;
      &lt;CssBaseline /&gt;
      &lt;div&gt;
        &lt;Typography component=&quot;h1&quot; variant=&quot;h5&quot;&gt;
          Sign up
        &lt;/Typography&gt;
        &lt;form noValidate onSubmit={handleSubmit}&gt;
          &lt;Grid container spacing={2}&gt;
            &lt;Grid item xs={12}&gt;
              &lt;TextField
                autoComplete=&quot;fname&quot;
                name=&quot;firstName&quot;
                variant=&quot;outlined&quot;
                required
                fullWidth
                id=&quot;firstName&quot;
                label=&quot;First Name&quot;
                autoFocus
                defaultValue={selectedOfficeListRow.town}
              /&gt;
            &lt;/Grid&gt;
          &lt;/Grid&gt;
          &lt;Button type=&quot;submit&quot; fullWidth variant=&quot;contained&quot; color=&quot;primary&quot;&gt;
            Sign Up
          &lt;/Button&gt;
        &lt;/form&gt;
      &lt;/div&gt;
    &lt;/Container&gt;
  );
};

export default function App() {
  return (
    &lt;div className=&quot;App&quot;&gt;
      &lt;h1&gt;Hello CodeSandbox&lt;/h1&gt;
      &lt;h2&gt;Start editing to see some magic happen!&lt;/h2&gt;
      &lt;BrowserRouter&gt;
        &lt;Switch&gt;
          &lt;Route path=&quot;/:rowId&quot; component={BasicTextFields} /&gt;
        &lt;/Switch&gt;
      &lt;/BrowserRouter&gt;
    &lt;/div&gt;
  );
}

</code></pre>
",2
65090951,"<p>Use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"" rel=""nofollow noreferrer"">reduce</a></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const matchesValues = ( array ) =&gt; {
  return array.reduce((previousValue, currentValue, currentIndex) =&gt; {
    if (currentIndex === 0 || (array[currentIndex - 1] + currentValue) === 10) {
      previousValue.push(currentValue);
    }

    return previousValue;
  }, []);
};

console.log(matchesValues([2,8,5,5,5,6]));</code></pre>
</div>
</div>
</p>
",2
65102736,"<p>You can do the following,</p>
<pre><code>const result = arr1.map(item =&gt; {
  const index = arr2.findIndex(asset =&gt; asset.assetLocation_ID === item.location_ID);
  if(index &gt; -1) {
      return {...item, location: arr2[index].location_Name};
  }
  return item;
</code></pre>
<p>Or if you want to know what is wrong in your code,</p>
<pre><code>for (let i in arr1) {
    arr1[i].asset_Location = arr2.find((one) =&gt; {
       // we need to return true or false from this method. You were assigning `one.assetLocation_ID` to `arr1[i].location_ID` instead of comparing them.
       return arr1[i].location_ID === one.assetLocation_ID;
    }).location_Name;
}
</code></pre>
<p>To learn more about the find method read <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find"" rel=""nofollow noreferrer"">this</a> article.</p>
",2
65141001,"<p>Remove the <code>timeDate</code> dependency from the <code>useEffect</code> hook and use a <a href=""https://reactjs.org/docs/hooks-reference.html#functional-updates"" rel=""nofollow noreferrer"">functional state update</a> in <code>updateTimeInfo</code>.</p>
<ol>
<li><p>Setup interval once when the component mounts, return cleanup function to clear interval.</p>
<pre><code>useEffect(() =&gt; {
  const tickClock = setInterval(() =&gt; {
    updateTimeInfo(SECOND_IN_MS);
  }, SECOND_IN_MS);

  return () =&gt; clearInterval(tickClock);
}, []);
</code></pre>
</li>
<li><p>The functional state update allows each enqueued <code>timeDate</code> state update to correctly update from the previous state.</p>
<pre><code>const updateTimeInfo = (addedTime) =&gt; {
  setTimeDate((timeDate) =&gt; addTime(timeDate, addedTime));
  //other info omitted, won't affect the code
};
</code></pre>
</li>
</ol>
<p>How it works:</p>
<p>The interval runs <code>updateTimeInfo</code> once per second. The button is simply also invoking <code>updateTimeInfo</code> but in an asynchronous way, i.e. whenever the +1 hour button is clicked. These two should occur independently from each other.</p>
<p>Without the functional state update then only the initial <code>timeDate</code> state value is closed over in the effect and time will only update each time from the initial state value.</p>
<p>Code</p>
<pre><code>const SECOND_IN_MS = 1000;
const HOUR_IN_MS = 1000 * 60 * 60;

const addTime = (date, time) =&gt; new Date(date.getTime() + time);

const Clock = () =&gt; {
  const [timeDate, setTimeDate] = useState(addTime(new Date(), SECOND_IN_MS));

  const updateTimeInfo = (addedTime) =&gt; {
    setTimeDate((timeDate) =&gt; addTime(timeDate, addedTime));
    //other info omitted, won't affect the code
  };

  useEffect(() =&gt; {
    const tickClock = setInterval(() =&gt; {
      updateTimeInfo(SECOND_IN_MS);
    }, SECOND_IN_MS);

    return () =&gt; clearInterval(tickClock);
  }, []);

  return (
    &lt;&gt;
      &lt;span&gt;
        {timeDate.toLocaleTimeString([], {
          hour: &quot;2-digit&quot;,
          hour12: true,
          minute: &quot;2-digit&quot;,
          second: &quot;2-digit&quot;
        })}
      &lt;/span&gt;
      &lt;button type=&quot;button&quot; onClick={() =&gt; updateTimeInfo(HOUR_IN_MS)}&gt;
        +1 hour
      &lt;/button&gt;
      &lt;button type=&quot;button&quot; onClick={() =&gt; updateTimeInfo(-HOUR_IN_MS)}&gt;
        -1 hour
      &lt;/button&gt;
    &lt;/&gt;
  );
};
</code></pre>
<p><a href=""https://codesandbox.io/s/react-having-troubles-creating-a-ticking-clock-that-can-change-time-manually-bv94y?fontsize=14&amp;hidenavigation=1&amp;module=%2Fsrc%2FApp.js&amp;theme=dark"" rel=""nofollow noreferrer""><img src=""https://codesandbox.io/static/img/play-codesandbox.svg"" alt=""Edit react-having-troubles-creating-a-ticking-clock-that-can-change-time-manually"" /></a></p>
",2
65084475,"<p>The <code>transitionend</code> event contains a <code>propertyName</code> property, which refers to the property transition that ended. Here, you can examine the event to check which property caused the event to fire. Since the longest transition is the border radius, check if the <code>propertyName</code> is one of the border radiuses:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function changeStyle() {
  const elem = document.getElementById(""elem"");
  const logs = document.getElementById(""logs"");
  elem.style.backgroundColor = ""red"";
  elem.style.borderRadius = ""30px"";

  elem.ontransitionend = (e) =&gt; {
    if (e.propertyName === ""border-bottom-right-radius"") {
      logs.insertAdjacentText(""beforeend"", ""transition ended"");
    }
  }
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>#elem {
  height: 100px;
  width: 100px;
  color: white;
  background-color: blue;
  transition: background-color 0.5s, border-radius 0.6s;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div onclick=""changeStyle()"" id=""elem""&gt;
  click me !
&lt;/div&gt;

&lt;span id=""logs""&gt;&lt;/span&gt;</code></pre>
</div>
</div>
</p>
",2
65088860,"<p>Your state is not in constructor method. When we use extended classes in react js we initialize our state in constructor method. This is not needed when we use functional components, reducing complexity and one of many reasons why functional components gained popularity.</p>
<p>Besides it I've done more you can see comments in code explaining other things.</p>
<pre><code>class Navbar extends Component {
  constructor() {
    super(); // super allows you to access parent class's methods and allows us to use &quot;this.&quot; in constructor().
    this.state = {
      clicked: false,
      scrolled: false,
    };
    // Note here too these bindings are necessary to make `this` work in the callback
    // In general, we use binding whenever we use &quot;setState&quot; when handling an event
    this.handleSroll = this.handleScroll.bind(this);
    this.handleClick = this.handleClick.bind(this);
  }

  handleScroll = () =&gt; {
    const offset = window.scrollY;
    if (offset &gt; 200) {
      this.setState({ scrolled: !this.state.scrolled });
    }
  };

  handleClick = () =&gt; {
    this.setState({ clicked: !this.state.clicked });
  };

  render() {
    return (
      &lt;div onScroll={this.handleScroll}&gt;
        {/* Note here this.scroll.scrolled changes to this.state.scrolled */}
        &lt;nav
          className={this.state.scrolled ? &quot;NavbarItems&quot; : &quot;NavbarItems Scroll&quot;}
        &gt;
          &lt;h1 className=&quot;navbar-logo&quot;&gt;
            React &lt;i className=&quot;fab fa-react&quot;&gt;&lt;/i&gt;
          &lt;/h1&gt;
          &lt;div className=&quot;menu-icon&quot; onClick={this.handleClick}&gt;
            &lt;i
              className={this.state.clicked ? &quot;fas fa-times&quot; : &quot;fas fa-bars&quot;}
            &gt;&lt;/i&gt;
          &lt;/div&gt;
          &lt;ul className={this.state.clicked ? &quot;nav-menu active&quot; : &quot;nav-menu&quot;}&gt;
            {MenuItems.map((items, index) =&gt; {
              return (
                &lt;li key={index}&gt;
                  &lt;a className={items.cName} href={items.url}&gt;
                    {items.title}
                  &lt;/a&gt;
                &lt;/li&gt;
              );
            })}
          &lt;/ul&gt;
          &lt;Button&gt; Contact US &lt;/Button&gt;
        &lt;/nav&gt;
      &lt;/div&gt;
    );
  }
}

export default Navbar;
</code></pre>
<ul>
<li><p>More <a href=""https://stackoverflow.com/questions/40433463/what-does-calling-super-in-a-react-constructor-do"">info</a> on <code>super();</code></p>
</li>
<li><p>Why we need to bind <a href=""https://www.freecodecamp.org/news/this-is-why-we-need-to-bind-event-handlers-in-class-components-in-react-f7ea1a6f93eb/"" rel=""nofollow noreferrer"">[info]</a></p>
</li>
<li><p>Go through react's official <a href=""https://reactjs.org/docs/handling-events.html"" rel=""nofollow noreferrer"">docs</a> about handling events</p>
</li>
</ul>
<p>I also suggest you to read about functional components.</p>
",2
65120556,"<p>You have to be careful about mutating your objects. It is best to deep clone your objects and arrays.</p>
<p>Here is another way to write your code:</p>
<pre class=""lang-js prettyprint-override""><code>const allData = [];
for (let i = 0; i &lt; allDetails.length; i++) {
    const detail = allDetails[i];
    const cells = [];
    for (let j = 0; j &lt; baseObj.cells.length; j++) {
        const cell = {...baseObj.cells[j]};
        switch (cell.key) {
            case 'id':
                cell.value = detail.id;
                break;
            case 'name':
                cell.value = detail.name;
                break;
        }
        cells.push(cell)
    }
    const row = {objKey: detail.objKey, index: i + 1, cells};
    allData.push(row);
}
</code></pre>
",2
65102622,"<p>You may try this regex:</p>
<pre><code>/\/\/(\S+?(?:jpe?g|png|gif))/ig
</code></pre>
<p><a href=""https://regex101.com/r/1ry39k/1"" rel=""nofollow noreferrer"">RegEx Demo</a></p>
<p><strong>RegEx Details:</strong></p>
<ul>
<li><code>\/\/</code>: Match <code>//</code></li>
<li><code>(</code>: Start capture group #1</li>
<li><code>\S+?</code>: Match 1+ non-whitespaces (lazy)</li>
<li><code>(?:jpe?g|png|gif)</code>: Match <code>jpg</code>, <code>jpeg</code>, <code>png</code> or <code>gif</code></li>
<li><code>)</code>: End capture group</li>
</ul>
",2
65143583,"<p>Assuming your <code>Quantities</code> object is meant to look like:</p>
<pre><code>{
    &lt;Ingredient Name&gt;: { quantities: &lt;value&gt; }
}
</code></pre>
<p>you need to change your <code>handleChange</code> to look like this</p>
<pre><code>const handleChange = (event) =&gt; {
    setQuantities({
        ...Quantities,
        [Ingredients.Name]: {
            ...(Quantities[Ingredients.Name] ?? {}),
            quantities: event.target.value
        }
    });
};
</code></pre>
<p>Explanation</p>
<p>When updating state in React, it is important to replace objects rather than mutating existing ones, as this is what tells React to rerender components. This is commonly done using the spread operator, and with array functions such as <code>map</code> and <code>filter</code>. For example:</p>
<pre><code>const myObject = { test: 1 };
myObject.test = 2; // Mutates existing object, wrong!
const myNewObject = { ...myObject, test: 2 }; // Creates new object, good!
</code></pre>
<p>Note the spread operator doesn't operate below the first level, what I mean by that is, objects within the object will be copied by reference, for example:</p>
<pre><code>const myObject = { test : { nested: 1 } };
const myObject2 = { ...myObject };
myObject2.test.nested = 2;
console.log(myObject.test.nested); // outputs 2
</code></pre>
<p>Also in my answer, I have used the nullish coalescing operator (<code>??</code>), this will return it's right operand if the left operand is <code>null</code> or <code>undefined</code>,  for example:</p>
<pre><code>null ?? 'hello'; // resolves to &quot;hello&quot;
undefined ?? 'world'; // resolves to &quot;world&quot;
&quot;foo&quot; ?? &quot;bar&quot;; // resolves to &quot;foo&quot;
</code></pre>
<p>In my answer I used it to fallback to an empty object if <code>Quantities[Ingredients.Name]</code> is undefined.</p>
<p>Finally, I used square brackets when using a variable as an object key as this causes the expression to be evaluated before being used as a key:</p>
<pre><code>const myKey = 'hello';
const myObject = {
    [myKey]: 'world';
};
console.log(myObject); // { hello: 'world' }
</code></pre>
",2
65139755,"<p>First at all, you only need a button to fire an JS onclick event. In every other case you use a div to style a &quot;button&quot;. Also a button is not an empty tag and therefor needs a closing tag <code>&lt;button&gt;Text&lt;/button&gt;</code></p>
<p>Just like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>a {
  text-decoration: none;
  color: black;
}

a div {
  border: 1px solid black;
  width: min-content;
  white-space: nowrap;
  padding: 5px;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;a href=""""&gt;&lt;div&gt;I'm a Link-Button&lt;/div&gt;&lt;/a&gt;</code></pre>
</div>
</div>
</p>
<p>to change the color during hover, you dont need JS. You can simply use the <code>:hover</code> pseudo selector like this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>a {
  text-decoration: none;
  color: black;
}

a div {
  border: 1px solid black;
  width: min-content;
  white-space: nowrap;
  padding: 5px;
}

a:hover div {
  background-color: red;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;a href=""""&gt;&lt;div&gt;I'm a Link-Button&lt;/div&gt;&lt;/a&gt;</code></pre>
</div>
</div>
</p>
<p>As you insist on using your invalid HTML and seem not to understand the use of :hover the same for your code:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.hoverMe:hover .changeColor {
  background-color: red;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;a class=""hoverMe"" href=""""&gt;
  &lt;div class=""somediv1""&gt;
    &lt;div class=""somediv2""&gt;
      &lt;div class=""somediv3""&gt;
        &lt;button class=""changeColor""&gt;Button 1&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/a&gt;


&lt;a class=""hoverMe"" href=""""&gt;
  &lt;div class=""somediv1""&gt;
    &lt;div class=""somediv2""&gt;
      &lt;div class=""somediv3""&gt;
        &lt;button class=""changeColor""&gt;Button 2&lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/a&gt;</code></pre>
</div>
</div>
</p>
",2
65090923,"<p>You could add axios to <a href=""https://v3.vuejs.org/api/application-config.html#globalproperties"" rel=""nofollow noreferrer""><code>app.config.globalProperties</code></a> in order to access it inside any child component :</p>
<pre><code>const app = createApp(App)
app.config.globalProperties.axios=axios
</code></pre>
<p>in child component use <code>this.axios</code></p>
<p>but you couldn't access it inside the store context because <code>this</code> in the actions refers to the store instance, so you should import axios inside the store file and use it like :</p>
<pre><code>import { createStore } from 'vuex';
import axios from 'axios';
export const store = createStore({
    state: {
        todos: []
    },
    getters: {
        todos(state) {
            return state.todos
        }
    },
    mutations: {
        FILL_ITEMS(state, payload) {
            state.todos = payload
        }
    },
    actions: {
        fillItems({ commit }) {
            axios
                .get(&quot;https://jsonplaceholder.typicode.com/todos&quot;)
                .then(res =&gt; commit('FILL_ITEMS', res.data))
        }
    }
})
</code></pre>
<p>or you could assign <code>axios</code> to the store instance (It's not recommended specially with typescript) :</p>
<pre><code>const app = createApp(App)
store.axios = axios
app.use(store)
app.mount(&quot;#app&quot;)
</code></pre>
<p><a href=""https://codesandbox.io/s/vue-3-ts-forked-q67kd?fontsize=14&amp;hidenavigation=1&amp;theme=dark"" rel=""nofollow noreferrer""><img src=""https://codesandbox.io/static/img/play-codesandbox.svg"" alt=""Edit vue 3 ts (forked)"" /></a></p>
",2
65138090,"<p>It's not possible. A ModuleSpecifier (what comes after the <code>from</code>) must be a string, and needs to point to a <em>standalone JavaScript file</em> with exports. It can't reference another script tag on the page, only a file.</p>
<p>Usually, a <code>&lt;script type=&quot;module&quot;&gt;</code> on the page itself is only used <em>once</em>, and is used to call other modules. For example, rather than your original code, you'd usually see or have something like:</p>
<pre><code>&lt;script type=&quot;module&quot;&gt;
    import foo from &quot;str.js&quot;
    console.log(foo) // str
&lt;/script&gt;
</code></pre>
<pre><code>// str.js
export default &quot;str&quot;
</code></pre>
",2
65139355,"<p>There is a lot going on here so let me see if I can explain.</p>
<p>First, what you are expecting as the output of this file is not the actual data in this file. If you are going to create a binary format you need to document it. For example - the points in this file are not separated by commas and semicolons, they are simply a single byte Ascii character followed by 3 - 8 byte numbers. As a note - the numbers used for the points are encoded in the opposite order of the rest of the file.</p>
<p>When you load a file from the OS you are getting the raw bytes of the file. Those bytes need to be converted into something usable and that is why there are APIs like <code>TextDecoder</code> and <code>FileReader</code>. <code>TextDecoder</code> is designed to take a file that was encode as a text file (UTF-8, UTF-16, etc...) and convert it to a JavaScript string. This is not a text file, it is binary so you can't use <code>TextDecoder</code></p>
<p>The reason that you are seeing the output that you are is because when you display a binary file in a text editor (The console is a text editor) it display each byte as the corresponding Ascii character. That is why you are seeing all the garbled text - they are actually ascii characters. The text editor doesn't know that they are supposed to be 8 byte numbers.</p>
<p>So, basically there are no JavaScript APIs that will convert this binary file into text because it doesn't know how - it doesn't know what the bytes it is reading represent. It also doesn't know how many bytes to read at a time (1 for a UTF-8 character, 2 for a UTF-16 character or 4 for an integer). You need to parse this file manually which isn't as scary as it seems. Right now you are using an <code>Int8Array</code> which will work but you have to use Array indexing and you will have to use bit shifting to get the numbers. You should use <code>DataView</code> because it provides an API to read different types from the byte stream.</p>
<p>This is an example of how to parse this file.</p>
<pre class=""lang-js prettyprint-override""><code>let position = 0;
let h3d;
function onfilechange(evt) {
    const selFile = evt.target.files[0];
    const reader = new FileReader();
    reader.onloadend = function (e) {
        h3d = new DataView(e.target.result);
        while (position &lt; h3d.byteLength) {
            if (isOpenBracket(h3d.getUint8(position++))) {
                // we are looking to see if we are starting a closing tag
                // don't increment position here - we just want to peek
                if (isSlash(h3d.getUint8(position))) {
                    while (!isCloseBracket(h3d.getUint8(position++))) {
                        // we don't need the closing tag so we will skip over it
                        // just read forward to the closing braket
                        // after this completes the 'position' will be on the byte representing the closing tag
                    }
                    // go back to the outer while loop
                    continue;
                }
                let tag = readTag(h3d, position);
                switch (tag) {
                    case 'PONTOS':
                    case 'POINTS':
                        const points = readPoints();
                    case 'FACES':
                        const faces = readFaces();
                     
                    // add other tags you want to parse

                }
            }
        }
    };
    reader.readAsArrayBuffer(selFile);
}

document.getElementById('file').addEventListener('change', onfilechange);

function readTag() {
    const tag = [];
    // start reading tag
    // read until we find the closing bracket
    // after this completes the 'position' will be on the byte representing the closing tag
    while (!isCloseBracket(val = h3d.getUint8(position++))) {
        tag.push(val);
    }
    return String.fromCodePoint(...tag);
}

function readPoints() {
    const points = {}; // or use a Map
    // do this until we hit the openning bracket of the closing tag
    while (!isOpenBracket(val = h3d.getUint8(position++))) {
    // the points are an upper case letter followed by 3 - 8 byte numbers
    // so if we hit an uppercase letter read the next 3 - 8 byte sequences as numbers
        if (isChar(val)) {
            let arr = [];
            // we need to read these number as LittleEndian because that is how they are in the file
            arr.push(h3d.getFloat64(position, true));
            position += 8;
            arr.push(h3d.getFloat64(position, true));
            position += 8;
            arr.push(h3d.getFloat64(position, true));
            position += 8;

            points[String.fromCodePoint(val)] = arr;
        }
    }
    return points;
}

function readFaces() {
    // don't know what to do here because I don't know what the format of this data is.
}
// these functions check Ascii values - no need to covert them to strings
function isWhitesapce(value) {
    return value === 32 ||
        value === 9 ||
        value === 10 ||
        value === 11 ||
        value === 12 ||
        value === 13
}

function isOpenBracket(value) {
    return value === 60;
}
function isCloseBracket(value) {
    return value === 62;
}
function isSlash(value) {
    return value === 47;
}
function isChar(value) {
// upper case letters
    return value &gt;= 41 &amp;&amp; value &lt;= 90;
}
</code></pre>
<p>This is just quick and dirty. I would create a separate class that parses this file format.</p>
<p>A few things to note:</p>
<ol>
<li>When using DataView you have to keep track of the position you are reading from. It doesn't move the pointer forward automatically.</li>
<li>In the <code>readPoints</code> function the endianness of the <code>getFloat64</code> is set to true to use Little Endian because the data for the points in the file are encoded backwards.</li>
</ol>
<p>That should be enough to figure out how to parse the rest of the file. You just need to know what the data format in each tag is.</p>
",2
65096079,"<ol>
<li>You can use a <code>switch</code> statement:</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>switch (sort) {
    case 'color':
    case 'type':
        newShirtArray = shirts.sort(/* ... */);
        break;

    case 'size':
        newShirtArray = shirts.sort(/* ... */);
        break;
}
</code></pre>
<ol start=""2"">
<li>For converting you shirt size to number, you can use an object:</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>const ShirtSizes = {
    XS: 0, S: 1, M: 2, L: 3, XL: 4,
};
const shirt1Size = ShirtSizes[shirt1.size];
</code></pre>
<ol start=""3"">
<li>If your environment allows this, use more concise ES2015 arrow functions:</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>case 'size':
    newShirtArray = shirts.sort((s1, s2) =&gt; ShirtSizes[s1.size] - ShirtSizes[s2.size]);
    break;
</code></pre>
<ol start=""4"">
<li>For <code>type</code> and <code>color</code>, as you guessed, you can use this:</li>
</ol>
<pre class=""lang-js prettyprint-override""><code>case 'color':
case 'type':
    newShirtArray = shirts.sort((s1, s2) =&gt; {
        if (s1[sort] &gt; s2[sort]) {
            return 1;
        } else if (s1[sort] &lt; s2[sort]) {
            return -1;
        } else {
           return 0;
        }
    });
</code></pre>
<p>I hope this will help a bit.</p>
",2
65096038,"<p>You do this by keeping track of the last result you provided and when you last provided it, <em>outside</em> the function, and then using that when the function is called to decide whether to update that information:</p>
<pre><code>const minInterval = 5000;       // 5 seconds (for example)
let lastResult = null;          // Last result provided
let nextAvailable = Date.now(); // When the next can be provided
function onceEvery() {
    const now = Date.now();
    if (now &lt; nextAvailable) {
        return lastResult;
    }
    lastResult = /*...calculate result...*/;
    nextAvailable = now + minInterval;
    return lastResult;
}
</code></pre>
<p>Live Example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const minInterval = 5000;       // 5 seconds (for example)
let lastResult = null;          // Last result provided
let nextAvailable = Date.now(); // When the next can be provided
function onceEvery() {
    const now = Date.now();
    if (now &lt; nextAvailable) {
        console.log(Date.now(), ""Too soon, returning last value:"", lastResult);
        return lastResult;
    }
    lastResult = (lastResult || 0) + 1;
    nextAvailable = now + minInterval;
    console.log(Date.now(), ""Calculated new value:"", lastResult);
    return lastResult;
}

// Call it every second or so
setInterval(onceEvery, 1000);</code></pre>
</div>
</div>
</p>
",2
65143295,"<p>You should learn more about using react hooks. Anyway, you can refer to below for your issue.</p>
<pre class=""lang-js prettyprint-override""><code>const [data, setData] = useState('');

const storeData = async (value) =&gt; {
  try {
    setData(value);
    await AsyncStorage.setItem('locatie', value);
  } catch (e) {
    console.log(e);
  }
};

const getInfo = async () =&gt; {
  const res = await AsyncStorage.getItem('locatie');
  setData(res);
};

useEffect(() =&gt; {
  getInfo();
}, []);
</code></pre>
",2
65109227,"<p>I figured out the problem. I was using getter methods in the User model without a <code>get</code> keyword (facepalm) which made it self calling and hence recursion occurred.</p>
",2
65121333,"<p>Don't convert to a data URL, go directly to a <em>Buffer</em> using node-canvas <a href=""https://github.com/Automattic/node-canvas#canvastobuffer"" rel=""nofollow noreferrer""><code>toBuffer()</code></a> method.</p>
<p>Then you can use this <em>Buffer</em> with <a href=""https://github.com/form-data/form-data#usage"" rel=""nofollow noreferrer""><em>form-data</em></a> directly.</p>
<pre><code>const buf = canvas.toBuffer();
fd.append('file', buf);
</code></pre>
",2
65104222,"<p>Why not just use <a href=""https://python-socketio.readthedocs.io/en/latest/api.html#asyncclient-class"" rel=""nofollow noreferrer"">socket.io's <code>AsyncClient</code></a> or <a href=""https://python-socketio.readthedocs.io/en/latest/api.html#asyncserver-class"" rel=""nofollow noreferrer""><code>AsyncServer</code></a> class and just <a href=""https://python-socketio.readthedocs.io/en/latest/client.html#emitting-events"" rel=""nofollow noreferrer""><code>await sio.emit()</code></a>?</p>
<p>Failing that, you're looking for <a href=""https://docs.python.org/3/library/asyncio-sync.html#asyncio.Event"" rel=""nofollow noreferrer"">an <code>Event</code></a> async primitive:</p>
<pre><code>import asyncio as aio

async main():
    ev = aio.Event()

    def cb(ackdata):
       print(1)
       print(2)
       ev.set()

    await socketio.emit(&quot;eventname&quot;,data,callback=cb)
    await ev.wait()
    print(3)
</code></pre>
",2
65141051,"<p>In order to send the file, first you need to read it in side your code. You can read the file and then send. Otherwise, you can use the below example which uses <code>fs</code> library to read the file and then <code>node-fetch</code> library to send the file.</p>
<p>First, install the <code>node-fetch</code> library:</p>
<pre><code>npm i node-fetch
</code></pre>
<p>Then, try the below example:</p>
<pre><code>const fetch = require('node-fetch');
var FormData = require('form-data');
let fs = require('fs');
let file = fs.createReadStream('C:/Users/marco/Pictures/programming/Cattura.png');
var formData = new FormData();
formData.append('file', file );
formData.append('email', 'test@test.com' );

// @ts-ignore
fetch('https://srv-store6.gofile.io/uploadFile', {
    method: 'POST',
    body: formData
})
.then(function(res) {
    return res.json();
}).then(function(json) {
    console.log(json);
});
</code></pre>
",2
65108314,"<p>I would change your router to expect the user-id/email in the url as a path-parameter, which express will then populate under <code>req.params</code></p>
<pre><code>router.get('/user-orders/:id', (req, res) =&gt; {
   Order.find({ &quot;userData.email&quot;: req.params.id}, (error, order) =&gt; { ... });
}
</code></pre>
<p>Then, in your frontend you need to adjust the url to something like:</p>
<pre><code>userOrders(userIdOrEmail) {
   return this.http.get&lt;User&gt;(`${this.userOrdersUrl}/${userIdOrEmail}`);
}
</code></pre>
",2
65115974,"<p>This will do it:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let splitTwos = (str) =&gt; str.match(/\w{1,2}/g).map(e =&gt; e.length == 2?e:e+""_"")

console.log(splitTwos(""abcde""))
console.log(splitTwos(""abcdef""))</code></pre>
</div>
</div>
</p>
",3
65122979,"<p>Use querySelector to find DOM element and change appenChild to appendChild like this</p>
<pre><code>let icons = [&quot;fab fa-html5&quot;, &quot;fab fa-css3&quot;];
let ir = document.querySelector('#stacks-icons');
let i = document.createElement('li');
i.className = icons[1];
ir.appendChild(i);
</code></pre>
",3
65129619,"<p>You're using duplicate <code>id</code>'s and <code>document.getElementById</code> returns a single element. Use class instead and loop through them:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var countDate = new Date(""Jan 01, 2021 00:00:00"").getTime();

function newYear() {
  var now = new Date().getTime();
  gap = countDate - now;

  var second = 1000;
  var minute = second * 60;
  var hour = minute * 60;
  var day = hour * 24;

  var d = Math.floor(gap / day);
  var h = Math.floor((gap % day) / hour);
  var m = Math.floor((gap % hour) / minute);
  var s = Math.floor((gap % minute) / second);

  var dayDivs = document.querySelectorAll("".day"");
  var hourDivs = document.querySelectorAll("".hour"");
  var minuteDivs = document.querySelectorAll("".minute"");
  var secondDivs = document.querySelectorAll("".second"");

  for (let i = 0; i &lt; dayDivs.length; i++) {
    dayDivs[i].innerText = d;
    hourDivs[i].innerText = h;
    minuteDivs[i].innerText = m;
    secondDivs[i].innerText = s;
  }
}

setInterval(function() {
  newYear();
}, 1000);</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.countdown {
  display: flex;
  justify-content: center;
}

.countdown .separator {
  font-weight: 400;
}

.countdown div {
  position: relative;
  width: 100px;
  height: 100px;
  line-height: 100px;
  text-align: center;
  color: #45deb0;
  margin: 0 -15px;
  font-size: 3em;
  font-weight: 500;
}

.countdown div:before {
  content: attr(data-time);
  position: absolute;
  bottom: -10px;
  left: 0;
  width: 100%;
  height: 35px;
  color: #45deb0;
  font-size: 0.35em;
  line-height: 35px;
  font-weight: 300;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""countdown""&gt;
  &lt;div class=""day"" data-time=""Dagen""&gt;na&lt;/div&gt;
  &lt;div class=""separator""&gt;&lt;span&gt;:&lt;/span&gt;&lt;/div&gt;
  &lt;div class=""hour"" data-time=""Uren""&gt;na&lt;/div&gt;
  &lt;div class=""separator""&gt;&lt;span&gt;:&lt;/span&gt;&lt;/div&gt;
  &lt;div class=""minute"" data-time=""Uren""&gt;na&lt;/div&gt;
  &lt;div class=""separator""&gt;&lt;span&gt;:&lt;/span&gt;&lt;/div&gt;
  &lt;div class=""second"" data-time=""Seconden""&gt;na&lt;/div&gt;
&lt;/div&gt;


&lt;p&gt;How can I make the second countdown widget(the one in bottom) work with same codes?&lt;/p&gt;

&lt;div class=""countdown""&gt;
  &lt;div class=""day"" data-time=""Day""&gt;na&lt;/div&gt;
  &lt;div class=""separator""&gt;&lt;span&gt;:&lt;/span&gt;&lt;/div&gt;
  &lt;div class=""hour"" data-time=""Hour""&gt;na&lt;/div&gt;
  &lt;div class=""separator""&gt;&lt;span&gt;:&lt;/span&gt;&lt;/div&gt;
  &lt;div class=""minute"" data-time=""Minute""&gt;na&lt;/div&gt;
  &lt;div class=""separator""&gt;&lt;span&gt;:&lt;/span&gt;&lt;/div&gt;
  &lt;div class=""second"" data-time=""Second""&gt;na&lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",3
65114010,"<p>You can write a simple helper function:</p>
<pre><code>function addClass(className, elements) {
    elements.forEach(function (element) {
        element.classList.add(className); 
    });
}
</code></pre>
<p>Then use it:</p>
<pre><code>addClass('h6', [startDate, endDate, startTime, endTime]);
</code></pre>
<p>If you are able to target newer syntax, you can write the helper function like this:</p>
<pre><code>function addClass(className, elements) {
    for (let element of elements) {
        element.classList.add(className);
    }
}
</code></pre>
",3
65116557,"<p>The issue is that you have a button in a form and the form treats the button as a submit button. Because of this, when you press Enter in the input, the form calls the <code>onClick</code> function of the button, thus toggling the dropdown menu.</p>
<p>To fix this you can add the prop <code>type=&quot;button&quot;</code> to the <code>&lt;button&gt;</code> element to tell the form that the button is just a normal button and not a submit button.</p>
<p>Alternatively, you can move the dropdown menu and button outside of the form, but I'm assuming that's a more invasive change than you'd like.</p>
<p>Here's an example of what you currently have:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function CurrentExample() {
    return (
        &lt;form onSubmit={(event) =&gt; {event.preventDefault(); console.log(""form submit"")}}&gt;
            &lt;input type=""text""/&gt;

            &lt;button onClick={() =&gt; console.log(""button click"")}&gt;Click&lt;/button&gt;
        &lt;/form&gt;
    )
}

const root = document.querySelector(""#root"");
ReactDOM.render(&lt;CurrentExample/&gt;, root);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js""&gt;&lt;/script&gt;

&lt;div id=""root""/&gt;</code></pre>
</div>
</div>
</p>
<p>And an updated example using <code>type=&quot;button&quot;</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function FixedExample() {
    return (
        &lt;form onSubmit={(event) =&gt; {event.preventDefault(); console.log(""form submit"")}}&gt;
            &lt;input type=""text""/&gt;

            &lt;button type=""button"" onClick={() =&gt; console.log(""button click"")}&gt;Click&lt;/button&gt;
        &lt;/form&gt;
    )
}

const root = document.querySelector(""#root"");
ReactDOM.render(&lt;FixedExample/&gt;, root);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js""&gt;&lt;/script&gt;

&lt;div id=""root""/&gt;</code></pre>
</div>
</div>
</p>
",3
65151888,"<p>Months are zero-indexed, so the month you want to initialize it with is actually 11. It doesn't know what to do with 12, that would be month number 13.</p>
",3
65097693,"<p>If you're looking to do this recursively, I would suggest using a generic transformation function that handles the recursive object structure and delegates to a supplied function the actual work of transforming the leaf nodes.</p>
<p>In this version, the <code>transform</code> function does all the heavy lifting.  It calls the supplied function on scalar values and recursively calls itself on objects and arrays, recreating the structure of the original with the new values.  This is quite reusable.</p>
<p>We create our <code>hashObject</code> function by passing <code>transform</code> a function which does the sha256 encoding of our values.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const transform = (fn) =&gt; (obj) =&gt;
  Array.isArray (obj)
    ? obj .map (transform (fn))
  : Object (obj) === obj
    ? Object .fromEntries (Object .entries (obj) 
        .map (([k, v]) =&gt; [k, transform (fn) (v)])
      )
  : fn (obj)

const hashObj = transform ((n) =&gt; sha256 (String (n)))

const meow = {big: 20, baz: {foo: {cat: 3, bar: 5, qux: [1, 2, 3]}}};
               // added to demonstrate arrays --------^

console .log (hashObj (meow))</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper {max-height: 100% !important; top: 0}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://unpkg.com/js-sha256@0.9.0/src/sha256.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
",3
65122779,"<p>There are two things going on:</p>
<ol>
<li><p>In many environments (including most browsers), <code>console.log</code> doesn't use <code>toString</code>, and</p>
</li>
<li><p>Your <code>complex</code> function doesn't return an object that uses <code>complex.prototype</code> as its prototype, so it doesn't have your <code>toString</code>. You're creating the object you return using <code>{}</code>, which creates an object directly inheriting from <code>Object.prototype</code>.</p>
</li>
</ol>
<p>If you want to call <code>complex</code> without <code>new</code>, you need to explicitly use <code>complex.prototype</code> when creating your object, for instance via <code>Object.create(complex.prototype)</code>. (And then when logging, trigger <code>toString</code> on purpose, either calling it directly or converting to string in various other ways.)</p>
<p>Example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function complex(real, imaginary){
    var z = Object.create(complex.prototype);
    z.real = real;
    z.imaginary = imaginary;
    return z;
}
complex.prototype.toString = function(){ return this.real + "" + "" + this.imaginary + ""*i"";};

var z = complex(1, 1);
console.log(String(z));</code></pre>
</div>
</div>
</p>
<p>You could call <code>complex</code> via <code>new</code> if you like (but I'm guessing you chose not to on purpose). Just FWIW:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function Complex(real, imaginary){
    this.real = real;
    this.imaginary = imaginary;
}
Complex.prototype.toString = function(){ return this.real + "" + "" + this.imaginary + ""*i"";};

var z = new Complex(1, 1);
console.log(String(z));</code></pre>
</div>
</div>
</p>
<p>or even</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>class Complex {
    constructor(real, imaginary) {
        this.real = real;
        this.imaginary = imaginary;
    }
    toString() {
        return this.real + "" + "" + this.imaginary + ""*i"";
    }
}

const z = new Complex(1, 1);
console.log(String(z));</code></pre>
</div>
</div>
</p>
<hr />
<p>Side note: I've changed &quot;imagenary&quot; to &quot;imaginary&quot; above, which is the correct spelling in English. (Most of the text in your code seemed to be in English, but apologies if it's just that you translated the code in the question from another language and just forgot to translate &quot;imagenary&quot;.)</p>
",3
65136018,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function FillSquare(e) {
  e.classList.toggle('red');
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.eqi-container {
  border: 10px solid black;
  display: flex;
  justify-content: space-between;
}

.eqi-container div {
  width: 50px;
  height: 50px;
  background: white;
  border: 10px solid red;
}
.eqi-container div.red {
  background:red;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""eqi-container""&gt;
  &lt;div onClick=""FillSquare(this)""&gt;&lt;/div&gt;
  &lt;div onClick=""FillSquare(this)""&gt;&lt;/div&gt;
  &lt;div onClick=""FillSquare(this)""&gt;&lt;/div&gt;
  &lt;div onClick=""FillSquare(this)""&gt;&lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",3
65096586,"<p><code>.style</code> contains only inline styles (set via that property, or the HTML attribute with the same name). It's not affected by style sheets at all. <code>getComputedStyle</code> gets you the current effective value for that property, regardless of where it came from.</p>
",3
65086435,"<p>Here's some code that works with recursion. It first finds all the options for the first query, and then recursively calls itself with the array of the objects with the same value for the given query, and at the deepest point, if there is no more queries, it returns the array of objects that meet all the previous queries.</p>
<p>I can answer any questions about this, but I feel like this is explained enough in the comments and this description.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const people = [
  {
    name: ""Jim"",
    color: ""blue"",
    gender: ""male""
  },
  {
    name: ""Susan"",
    color: ""green"",
    gender: ""female""
  },
  {
    name: ""Sam"",
    color: ""blue"",
    gender: ""male""
  },
  {
    name: ""Eddie"",
    color: ""green"",
    gender: ""male""
  },
  {
    name: ""Eva"",
    color: ""blue"",
    gender: ""female""
  }
];



const deepNest = (arr, [first, ...rest]) =&gt; {
  let output = {};
  if (first) {
    let options = [...arr.reduce((set, val) =&gt; set.add(val[first]), new Set())].sort(); // Get the options (Set() is a built in thing to remove duplicates), and the sort them alphabetically
    for (let option of options) {
      let val = arr.filter((val) =&gt; val[first] === option); // Get the values that have the same value for the option for the query
      output[option] = deepNest(val, rest); // Recursion
    }
  } else {
    output = arr;
  }
  return output;
}

display(deepNest(people, [""gender"", ""color""]), [""gender"", ""color""]);
display(deepNest(people, [""color"", ""gender""]), [""color"", ""gender""]);
display(deepNest(people, [""color"", ""name"", ""gender""]), [""color"", ""name"", ""gender""]);

// My own custom display function, since console.log() makes it look wack
function display(json, query) {
  const div = document.createElement(""div"");
  const h2 = document.createElement(""h2"");
  h2.innerText = `[""${query.join(""\"", \"""")}""]`;
  const pre = document.createElement(""pre"");
  pre.innerText = JSON.stringify(json, null, 2);
  
  div.appendChild(h2);
  div.appendChild(pre);
  
  document.querySelector(""body"").appendChild(div);
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html,
body {
  background: whitesmoke;
}

pre {
  color: black;
  background: white;
  border: 2px solid black;
  border-radius: 1rem;
  padding: 1rem;
}</code></pre>
</div>
</div>
</p>
",3
65106021,"<p>To work with path, there is the default <a href=""https://nodejs.org/api/path.html"" rel=""nofollow noreferrer""><code>path</code> module</a></p>
<pre><code>const path = require('path')
console.log(path.join('c:/Oracle', '../'))
</code></pre>
",3
65099570,"<p>You don't need the extra quotes:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var i;
for (i = 0; i &lt; document.getElementsByTagName(""button"").length; i++) {
  document.getElementsByTagName(""button"")[i].style.left = String(Math.floor(Math.random() * 600)) + ""px"";
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.game button {
  display: inline;
  position: absolute;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""game"" id=""divi""&gt;
&lt;button class=""game""&gt;&lt;/button&gt;
&lt;button class=""game""&gt;&lt;/button&gt;
&lt;button class=""game""&gt;&lt;/button&gt;
&lt;button class=""game""&gt;&lt;/button&gt;
&lt;button class=""game""&gt;&lt;/button&gt;
&lt;button class=""game""&gt;&lt;/button&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",3
65120511,"<p>Just use an indexed for loop</p>
<pre class=""lang-js prettyprint-override""><code>for(let i = 0;i &lt; home_team.length; i++) {
  console.log(home_team[i] + &quot;VS&quot; + away_team[i]);
}
</code></pre>
<p>You can also use <code>forEach</code></p>
<pre><code>home_team.forEach((item, index) =&gt; console.log(item + &quot;VS&quot; + away_team[index]));
</code></pre>
",3
65111356,"<p>First off: What the function does is <strong>not</strong> just rounding. It converts a number to a string (doing some rounding along the way).</p>
<p>If you really want a string, your best bet is probably to trim off trailing zeros that don't have a <code>.</code> in front of them:</p>
<pre><code>return value.toFixed(3).replace(/([^.])0+$/, &quot;$1&quot;);
</code></pre>
<p>Live Example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function roundNumber(value) {
    return value.toFixed(3).replace(/([^.])0+$/, ""$1"");
}
console.log(roundNumber(1/3)); //Should output 0.333
console.log(roundNumber(1/2)); //Should output 0.5, NOT 0.500
console.log(roundNumber(1/8)); //Should output 0.125
console.log(roundNumber(1/4)); //Should output 0.25</code></pre>
</div>
</div>
</p>
",3
65143411,"<p>Sure, are you looking for <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_Operator"" rel=""nofollow noreferrer"">ternary operator</a> like this?:</p>
<pre><code>var marker = L.marker(new L.LatLng(a[9], a[8]), {
   title: title,
   icon: a[6] === 3 ? a[11] : a[12],
});
</code></pre>
<p>You can always call a function to do more logic if needed.</p>
<pre><code>const resolveIcon = (a) =&gt; {
    if (a[6] === 3) {
        return a[11];
    }
    return a[12];
}

var marker = L.marker(new L.LatLng(a[9], a[8]), {
   title: title,
   icon: resolveIcon(a),
});
</code></pre>
",3
65133036,"<blockquote>
<p>&quot;TypeError: Cannot read property 'address' of undefined&quot;.</p>
</blockquote>
<p>What the above error message essentially means is that he <code>userWalletInfo</code> object is <code>undefined</code> and there is no <code>address</code> property on <code>undefined</code>.</p>
<p>The reason for <code>userWalletInfo</code> being undefined is because you are fetching it using an async function, what it means is that when your render() first executes, the value of <code>userWalletInfo</code> is still <code>undefined</code>.</p>
<p><strong>Why is userWalletInfo undefined on initial render?</strong></p>
<p>Because, although you might've made the async function call already, the async functions are not executed on the Javascript main thread, instead they are sent to a WEB API environment as soon as the line of code containing the async function call is executed.</p>
<p>However, the code outside the async function call is still synchronous, which means it will execute and <strong>not</strong> wait for the async call to complete and return the data.</p>
<p>Now, in order to not have this error anymore, all you need to do is have a conditional statement. i.e, you will need to check if the <code>userWalletInfo</code> object exists before trying to retrieve the <code>address</code> property to show on the DOM.</p>
<p>You can do that in multiple ways:</p>
<ol>
<li>Have a simple if statement</li>
<li>Use optional chaining operator <code>?</code> like so: <code>userWalletInfo?.address</code> (this just acts like an if-statement. However this is ES 2020 syntax therefore you will need to polyfill if you want to support old browsers).</li>
<li>Use <code>Short-circuiting</code> like user @Shimi has mentioned in her answer.</li>
<li>Let <code>userWalletInfo</code> defaults to empty object. <code>const [userWalletInfo] = useState({})</code>. The effect is similar to optional chaining in that it prevents accessing property of <code>undefined</code> runtime error.</li>
</ol>
<p>If you want to know more details about how the Javascript event loop and asynchronous function calls work, please read my answer from here: <a href=""https://stackoverflow.com/a/64757187/14386332"">How Async calls, event loop and callback queue work.</a></p>
",3
65151224,"<p>Use <code>Array.flatMap()</code> to iterate the <code>scenarios</code> and flatten the results, with <code>Array.map()</code> to iterate the items, and combine them with the scenarios:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const scenarios = ['a/2020-12-01', 'b/2020-12-04'];
const items = ['201/17', '201/28', '207/3', '208/4', '208/12'];

const res = scenarios.flatMap(scen =&gt;
  items.map(item =&gt; `${scen}/${item}`)
);

console.log(res);</code></pre>
</div>
</div>
</p>
",3
65160917,"<p>If you're looking to get each element of the array as a separate object then try this:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const input = [
  'ecl:hzl byr:1926 iyr:2010,pid:221225902 cid:61 hgt:186cm eyr:2021 hcl:#7d3b0c',
  'hcl:#efcc98 hgt:178 pid:433543520,eyr:2020 byr:1926,ecl:blu cid:92,iyr:2010',
  'iyr:2018,eyr:2026,byr:1946 ecl:brn,hcl:#b6652a hgt:158cm,pid:822320101'
]

const output = input.map((string) =&gt; {  // for each string in array
  const pairs = string.split(/[\ ,]/);  // split by space or comma
  const object = {};                    // create an object
  for (pair of pairs) {                 // for each pair in string
    const parts = pair.split("":"");      // split by colon
    if (parts.length == 2) {            // if you get 2 parts after splitting
      object[parts[0]] = parts[1];      // use the first part as a key and the second as a value
    }
  }
  return object;
});

console.log(output);</code></pre>
</div>
</div>
</p>
",3
65087068,"<p>The function you're looking for is <code>libphonenumber.getCountries()</code> (<a href=""https://gitlab.com/catamphetamine/libphonenumber-js#getcountries-string"" rel=""nofollow noreferrer"">documentation</a>).</p>
<p>I added a call to this function at the beginning of your script with the code to generate the country option list:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script src=""https://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js""&gt;&lt;/script&gt;
    &lt;link rel=""stylesheet"" href=""https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css""&gt;
    &lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.16.0/umd/popper.min.js""&gt;&lt;/script&gt;
    &lt;script src=""https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js""&gt;&lt;/script&gt;
    &lt;script src=""https://unpkg.com/libphonenumber-js@^1.7.6/bundle/libphonenumber-min.js""&gt;&lt;/script&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;label for=""inputContactNumber""&gt;Contact Number&lt;/label&gt;
        &lt;div class=""input-group mb-3""&gt;
            &lt;div class=""input-group-prepend""&gt;

        
            &lt;select class=""select-country"" class=""btn contact-btn dropdown-toggle""&gt;
            &lt;/select&gt;
        &lt;/div&gt;
        &lt;input class=""input-phone phone-format"" class=""form-control phone-format"" type=""text"" name=""contactNo"" placeholder=""Enter contact number"" required//&gt;
    &lt;/div&gt;


&lt;script type=""text/javascript""&gt;

    const countries = libphonenumber.getCountries();
    const optionList = countries.map( country =&gt; `&lt;option&gt;${country}&lt;/option&gt;` );
    $("".select-country"").html( optionList );

    $("".phone-format"").keyup(function () {
        const val_old = $(this).val();
        const newString = new libphonenumber.AsYouType($("".select-country"").val()).input(val_old);
        $(this).focus().val(newString);
    });
&lt;/script&gt;


&lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>
<p>I also changed <code>var</code> to <code>const</code>. Always use <code>const</code> when you can, or <code>let</code> if you need to mutate (reassign) a variable. And a minor point, in this line:</p>
<p><code>$(this).focus().val('').val(newString);</code></p>
<p>You don't need to do the <code>val('')</code>, just set the new value.</p>
",3
65118714,"<p>Call this function in the callback function of radio value changed event.</p>
<pre><code>function sortCitoyens(citoyens, isAsc) {
    if(isAsc){
        citoyens.sort((a,b)=&gt;a.id-b.id)
    }else{
        citoyens.sort((a,b)=&gt;b.id-a.id)
    }
}
</code></pre>
",3
65141375,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const arr = [
  ""name:Adam age:20 height:180cm"",
  ""name:Sally age:30 height:170cm"",
  ""name:Mike age:35 height:185cm"",
  ""name:David age:40 height:190cm""
]

let result = arr.map(e =&gt; Object.fromEntries(e.split(' ').map(n=&gt;n.split("":""))))

console.log(result)</code></pre>
</div>
</div>
</p>
",3
65156253,"<p>That happens because at the time you print, you are constructing an object which has a key named &quot;v&quot;... that is what <code>{v}</code> does.</p>
<p>You can solve this by creating the object at the moment that you have access to the <code>x</code> variable, and do  <code>{x}</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var x = 5;
function get(v) {
    console.log(Object.entries(v)[0].join("" = ""));
}
get({x});</code></pre>
</div>
</div>
</p>
",3
65103667,"<p>This is my code it is changing the stylesheet.</p>
<pre><code>&lt;html&gt;

&lt;head&gt;
    &lt;title&gt;
        Change Css
    &lt;/title&gt;
    &lt;script lang=&quot;javascript&quot;&gt;
        function colorChanger() {
            var len = document.getElementById(&quot;string&quot;).value.length;
            if (len &lt; 50) {
                swapStyleSheet(&quot;first_50.css&quot;);
            } else if (len &gt; 50 &amp;&amp; len &lt; 100) {
                swapStyleSheet(&quot;second_100.css&quot;);
            }
        }

        function swapStyleSheet(strName) {
            document.getElementById(&quot;cssChanger&quot;).href = strName;
        }
    &lt;/script&gt;
    &lt;link href=&quot;first_50.css&quot; id=&quot;cssChanger&quot; /&gt;
&lt;/head&gt;

&lt;body&gt;
    &lt;input type=&quot;text&quot; id=&quot;string&quot; value=&quot;&quot;&gt;&lt;/input&gt;
    &lt;input type=&quot;button&quot; id='style1' value=&quot;Change Css&quot; onclick=&quot;javascritpt:colorChanger();&quot;&gt;
&lt;/body&gt;

&lt;/html&gt; ````
</code></pre>
",3
65095421,"<p><code>forEach</code> returns nothing so <code>locations</code> should be <code>undefined</code>. You shouldn't pass return value of <code>forEach</code> to <code>locations</code></p>
<pre class=""lang-js prettyprint-override""><code>events.forEach(location =&gt; {
  const coords = {};
  coords.latitude = location.latitude;
  coords.longitude = location.longitude;
  locations.push(coords);
});
console.log(&quot;Coordinates list: &quot; + locations);
</code></pre>
<p>Also you can use <code>map</code> function.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const events = [
  { location: 'Emergency Shelter', latitude: '37.5434', longitude: '-77.4435' }
];
const locations = events.map(({ latitude, longitude }) =&gt; ({
  latitude,
  longitude
}));

console.log(locations);</code></pre>
</div>
</div>
</p>
",3
65134321,"<p>Try applying class <code>z-top</code> to the header:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;q-header elevated class=&quot;bg-black text-grey-8 z-top&quot; height-hint=&quot;64&quot;&gt;
</code></pre>
<p>From the <a href=""https://quasar.dev/style/visibility"" rel=""nofollow noreferrer"">Quasar Visibility docs</a>:</p>
<blockquote>
<p>[z-top] Positions your element on top of any other component, but behind Popovers, Tooltips, Notifications.</p>
</blockquote>
",3
65155646,"<p>Following the steps in the <a href=""https://tc39.es/ecma262/#sec-abstract-relational-comparison"" rel=""nofollow noreferrer"">Abstract Relational Comparison algorithm</a>:</p>
<ul>
<li><code>[1,2,3] &gt; null</code> - Step 1 (a,b): Apply ToPrimitive to both sides</li>
<li><code>&quot;1,2,3&quot; &gt; null</code> - Step 4 (d, e): Apply ToNumeric to both sides</li>
</ul>
<p>Now we have <code>NaN &gt; 0</code>, which is <code>false</code>, because any time <code>NaN</code> is involved in any relational operation, the result is <code>false</code>.</p>
<p>In a comment on the question you asked:</p>
<blockquote>
<p>But why returns false without comparison.</p>
</blockquote>
<p><code>&gt;</code> <strong>is</strong> a comparison. I think you mean &quot;without a branching operation or expression&quot; (like <code>if</code> or the conditional operator, <code>? :</code>). If so, it's because expressions (including relational expressions) have result values whether or not you use those results for branching. The result of a <code>&gt;</code> expression is <code>true</code> or <code>false</code>. If you use that in an <code>if</code>, that's fine, but you don't have to:</p>
<pre><code>const a = 1 &gt; 2;
console.log(a); // false
</code></pre>
",3
65156238,"<p>I slightly rewrote your creation routine; seems working well like this. The essence here is that shape + label are grouped together and global [scaled] position is applied to those groups, not individual graphic elements.</p>
<p>Code:</p>
<pre><code>    const tableLayer = new Konva.Layer();
    
    const scale = 1.0; // position scale factor
    
    const mockData = [
        {
            label: &quot;45&quot;,
            shape: &quot;circle&quot;,
            x: 100,
            y: 150,
            w: 100,
            h: 100,
            r: 0
        },
        {
            label: &quot;46&quot;,
            shape: &quot;rect&quot;,
            x: 200,
            y: 170,
            w: 150,
            h: 100,
            r: -30
        },
        {
            label: &quot;47&quot;,
            shape: &quot;rect&quot;,
            x: 70,
            y: 200,
            w: 50,
            h: 100,
            r: 15
        },
        {
            label: &quot;48&quot;,
            shape: &quot;ellipse&quot;,
            x: 400,
            y: 300,
            w: 250,
            h: 150,
            r: 30
        }
    ];


    function createShapeElement( data ) {
        // Create container group
        let element = new Konva.Group( {
            x: data.x * scale,
            y: data.y * scale,
            draggable: true,
            listening: true,
        } );

        // Create background shape
        let shape;
        switch ( data.shape ) {
            case &quot;circle&quot;: // fall-through
            case &quot;ellipse&quot;: // fall-through
            case &quot;longellipse&quot;:
                shape = new Konva.Ellipse( {
                    x: 0,
                    y: 0,
                    radiusX: data.w * 0.5,
                    radiusY: data.h * 0.5,
                    rotation: data.r,
                    fill: &quot;gray&quot;,
                    stroke: &quot;black&quot;,
                    strokeWidth: 4,
                    draggable: false,
                    listening: true
                } );
                break;

            default:
                shape = new Konva.Rect( {
                    x: 0,
                    y: 0,
                    offsetX: data.w * 0.5,
                    offsetY: data.h * 0.5,
                    width: data.w,
                    height: data.h,
                    rotation: data.r,
                    fill: &quot;gray&quot;,
                    stroke: &quot;black&quot;,
                    strokeWidth: 4,
                    draggable: false,
                    listening: true
                } );
                break;
        } // End switch

        // Create label
        let label = new Konva.Text( {
            x: data.w * -0.5,
            y: data.h * -0.5,
            width: data.w,
            height: data.h,
            text: data.label,
            fontSize: 24,
            fill: &quot;black&quot;,
            align: &quot;center&quot;,
            verticalAlign: &quot;middle&quot;,
            draggable: false,
            listening: false
        } );

        element.add( shape, label );

        return element;
    }


    // Loop your data and call the creation method for each data item.
    mockData.forEach( itemData =&gt; {
        tableLayer.add( createShapeElement( itemData ) );
    } );
</code></pre>
",3
65137209,"<p>You can use regex to accomplish this. The regex <code>/(?:\[.*?\]|[\[\]])/g</code> will work (by searching for both paired brackets with text inside and unpaired brackets)</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function stripBrackets(text) {
  return text.replace(/(?:\[.*?\]|[\[\]])/g, """")
}
console.log(stripBrackets(""Hell[o] [W[orl]d[!!""));
console.log(stripBrackets(""Hell[]o] [W[orl]d[!!]""));</code></pre>
</div>
</div>
</p>
",3
65155082,"<p><code>style</code> presents the inline style for the selected element</p>
<p>if you want to get CSS value, you need to get the computed style, using <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle"" rel=""nofollow noreferrer""><code>getComputedStyle</code></a></p>
<blockquote>
<p>The <code>Window.getComputedStyle()</code> method returns an object containing the values of all CSS properties of an element, <em><strong>after applying active stylesheets and resolving any basic computation those values may contain</strong></em></p>
</blockquote>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const speed = document.querySelector('.speed');
const bar = speed.querySelector('.speed-bar');
const video = document.querySelector('.flex');

console.log(getComputedStyle(bar).height);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;!DOCTYPE html&gt;
&lt;html lang=""en""&gt;

&lt;head&gt;
  &lt;meta charset=""UTF-8""&gt;
  &lt;title&gt;Video Speed Scrubber&lt;/title&gt;
  &lt;style&gt;
    body {
      margin: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 100vh;
      background: #4C4C4C url('https://unsplash.it/1500/900?image=1021');
      background-size: cover;
      font-family: sans-serif;
    }
    
    .wrapper {
      width: 850px;
      display: flex;
    }
    
    video {
      box-shadow: 0 0 1px 3px rgba(0, 0, 0, 0.1);
    }
    
    .speed {
      background: #efefef;
      flex: 1;
      display: flex;
      align-items: flex-start;
      margin: 10px;
      border-radius: 50px;
      box-shadow: 0 0 1px 3px rgba(0, 0, 0, 0.1);
      overflow: hidden;
    }
    
    .speed-bar {
      width: 100%;
      background: linear-gradient(-170deg, #2376ae 0%, #c16ecf 100%);
      text-shadow: 1px 1px 0 rgba(0, 0, 0, 0.2);
      display: flex;
      align-items: center;
      justify-content: center;
      padding: 2px;
      color: white;
      height: 16.3%;
    }
  &lt;/style&gt;
&lt;/head&gt;

&lt;body&gt;

  &lt;div class=""wrapper""&gt;
    &lt;video class=""flex"" width=""765"" height=""430"" src=""http://clips.vorwaerts-gmbh.de/VfE_html5.mp4"" loop controls&gt;&lt;/video&gt;
    &lt;div class=""speed""&gt;
      &lt;div class=""speed-bar""&gt;1×&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;


&lt;/body&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",3
65128579,"<p>You can use group by like this:</p>
<pre><code>_.groupBy(a1, &quot;status.posicao&quot;)
</code></pre>
<p>To specify that you need to group them by status.posicao, take a look at this sandbox it will return an object with the three groups.</p>
<p><a href=""https://codesandbox.io/s/strange-sanne-icdy3?file=/src/index.js"" rel=""nofollow noreferrer"">https://codesandbox.io/s/strange-sanne-icdy3?file=/src/index.js</a></p>
",3
65112970,"<p>Firstly note that applying your own non-standard attributes in HTML can lead to rendering and styling issues. Thankfully you can use <code>data</code> attributes instead to attach your own custom metadata to an element.</p>
<p>From there you can simply use the <code>prev()</code> method of jQuery to target the <code>div</code> related to the clicked button:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('button').on('click', e =&gt; {
  let $button = $(e.target);
  $button.prev('div').fadeOut('slow');

  console.log($button.data('prod-id'));      
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div data-prod-id=""123""&gt;123&lt;/div&gt;
&lt;button data-prod-id=""123""&gt;Click me&lt;/button&gt;

&lt;div data-prod-id=""456""&gt;456&lt;/div&gt;
&lt;button data-prod-id=""456""&gt;Click me&lt;/button&gt;

&lt;div data-prod-id=""789""&gt;789&lt;/div&gt;
&lt;button data-prod-id=""789""&gt;Click me&lt;/button&gt;</code></pre>
</div>
</div>
</p>
<p>If you did still want to target the element by its data attribute, you can use an attribute selector. You simply need to concatenate the value in to the selector:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$('button').on('click', e =&gt; {
  let prodId = $(e.target).data('prod-id');
  $(`div[data-prod-id=""${prodId}""]`).fadeOut('slow');
});</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;div data-prod-id=""123""&gt;123&lt;/div&gt;
&lt;button data-prod-id=""123""&gt;Click me&lt;/button&gt;

&lt;div data-prod-id=""456""&gt;456&lt;/div&gt;
&lt;button data-prod-id=""456""&gt;Click me&lt;/button&gt;

&lt;div data-prod-id=""789""&gt;789&lt;/div&gt;
&lt;button data-prod-id=""789""&gt;Click me&lt;/button&gt;</code></pre>
</div>
</div>
</p>
",3
65098077,"<p>Put the timeout ID returned by <code>setTimeout</code> into state or a ref or something so that you can reference it in the other function:</p>
<pre><code>redTimeout = () =&gt; {
  const timeoutId = setTimeout(() =&gt; {
    this.props.redBoxScore();
    this.setState({
      overlayContainer: 'none'
    });

  }, 5000);
  this.setState({ timeoutId });
}
handleTerminate = () =&gt; {
  clearTimeout(this.state.timeoutId);
}
</code></pre>
",3
65122083,"<p>If you redefine client_select.onchange, your will only have one in the end. Unless you have the need to support old version of IE, I would advise to use addEventListenner.</p>
<p>I think that Promise.all is the way to go there:</p>
<pre><code>let site_select = document.getElementById('sites');
let contact_select = document.getElementById('client_contact');
let client_select = document.getElementById('client');

const fetchClientSites = (client) =&gt; {
  return fetch('/client-sites/' + client)
    .then(response =&gt; response.json())
    .then(function(data) {
      let optionHTML = '';

      for (let csite of data.client_sites) {
        optionHTML += '&lt;option value=&quot;' + csite.id + '&quot;&gt;' + csite.name + '&lt;/option&gt;';
      }

      site_select.innerHTML = optionHTML;
    });
};

const fetchContacts = (client) =&gt; {
  return fetch('/contacts/' + client)
    .then(response =&gt; response.json())
    .then(function(data) {
      let optionHTML = '';

      for (let con of data.contacts) {
        optionHTML += '&lt;option value=&quot;' + con.id + '&quot;&gt;' + con.name + '&lt;/option&gt;';
      }

      contact_select.innerHTML = optionHTML;
    });
};

client_select.addEventListener('change', () =&gt; {
  const client = client_select.value;

  Promise.all(
    fetchClientSites(client),
    fetchContacts(client),
  );
});

</code></pre>
",3
65097949,"<p>If you wrap your code in a function and call that function on load as well as in setInterval it works.</p>
<p>I also updated your code to delete any previously added boxes.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var h = window.innerHeight;
var w = window.innerWidth;

function create() {
  var boxPosition = {
    left: Math.random() * w,
    top: Math.random() * h
  };
  
  box = document.querySelector(""#box"")
  
  if(box)box.remove();

  document.write(
    '&lt;div id=""box"" style=""width: 64px; height:64px;background-color:blue; left: ' +
      boxPosition.left +
      ""px; top: "" +
      boxPosition.top +
      'px;position: absolute""&gt;&lt;/div&gt;'
  );
}

create();
setInterval(create, 5000);</code></pre>
</div>
</div>
</p>
",3
65152386,"<blockquote>
<p>So the question: is filtering the array from any unwanted strings (names) safe enough to counter the eval's exploitability?</p>
</blockquote>
<p>No.  This is not safe. In fact, it does basically nothing to safeguard you because the cookie names you allow are still completely unguarded and unsanitized.  What you have is potentially unsafe because a malicious client can put anything they want in that cookie and you're &quot;hoping&quot; that they can't find something that will break out of the string delimiter you have.  But, it is possible to break out of that string delimiter by just terminating the string and then adding a function call.  This would potentially allow an attacker to execute arbitrary code on your server.</p>
<p>The ONLY thing you should ever use <code>eval()</code> with is a trusted string from your own server-side code or a completely sanitized string form the outside.  But, nearly always, you don't need <code>eval()</code> as there is another and safer way to code it.</p>
<p>Here, you don't need to use <code>eval()</code> at all.  You can just create a lookup table for the legal functions to call and then pass the function directly to it:</p>
<pre><code>try {
    res.locals[cookie] = validateCookie[cookie](req.cookies[cookie]);
} catch(e) {
    // either invalid cookie or exception in the function
    // handle that here
}
</code></pre>
<p>And, of course, your <code>validateCookie[cookie]()</code> function also has to be coded defensively to know that it may be passed anything.  You don't show us the code for that function to be able to comment on it further.</p>
<p>In this case, <code>validateCookie</code> is a lookup table that contains the valid <code>cookie</code> names and their corresponding functions:</p>
<pre><code> // cookie processing lookup table
 const validateCookie = {
      cookieName1: validateCookieName1,
      cookieName2: validateCookieName2
 };
</code></pre>
<p>Lookup tables like this are often how you avoid trying to manufacture a function name and a string and use <code>eval()</code> to call it.  This also adds the safety feature that this code can't call any function that is not in your lookup table.</p>
",3
65117779,"<p>Wrap it in another function that selects a random function each time the click happens.</p>
<p>Also, your functions don't use <code>params</code>, so it's not needed.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const btn = document.querySelector('#START')

const randomFunc = [
  multiplication,
  division,
  addition,
  subtraction,
]

btn.addEventListener(
  'click',
  function() {
    randomFunc[Math.floor(Math.random() * randomFunc.length)]();
  }
)

function multiplication() {
  let num1 = Math.floor(Math.random() * 13);
  let num2 = Math.floor(Math.random() * 13);
  let problemResult = num1 * num2;
  console.log(num1, '*', num2, '=', problemResult);
  document.getElementById('mathProblem').innerHTML = (`${num1} * ${num2} =`);
}

function division() {
  let num1 = Math.floor(Math.random() * 13);
  let num2 = Math.floor(Math.random() * 12) + 1;
  let problemResult = (num2 * num1) / num2;
  console.log(num1, '/', num2, '=', problemResult);
  document.getElementById('mathProblem').innerHTML = (`${num1} / ${num2} =`);
}

function addition() {
  let num1 = Math.floor(Math.random() * 13);
  let num2 = Math.floor(Math.random() * 13);
  let problemResult = num1 + num2;
  console.log(num1, '+', num2, '=', problemResult);
  document.getElementById('mathProblem').innerHTML = (`${num1} + ${num2} =`);
}

function subtraction() {
  let num1 = Math.floor(Math.random() * 13);
  let num2 = Math.floor(Math.random() * 13);
  let numList = [num1, num2];
  numList.sort(function(a, b) {
    return b - a
  });
  let problemResult = numList[0] - numList[1];
  console.log(numList[0], '-', numList[1], '=', problemResult);
  document.getElementById('mathProblem').innerHTML =
    (`${numList[0]} - ${numList[1]} =`);
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;
  &lt;button type=""button"" class=""btn btn-primary btn-lg"" id=""START""&gt;Press here for your first problem&lt;/button&gt;
  &lt;script src={% static 'js/game_logic.js' %}&gt;&lt;/script&gt;
  &lt;p id=""mathProblem""&gt;Your problem will appear here&lt;/p&gt;
  &lt;form action=""""&gt;
    &lt;input type=""text"" placeholder=""Type your answer here""&gt;
  &lt;/form&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",3
65150648,"<p>You can use the subscript operator (<code>[]</code>) to get a specific element of the array. Then, you can use the subscript operator again to get a specific character from a string:</p>
<pre><code>const result = names[0][1];
</code></pre>
<p>Note that both array indexes and string indexes are zero-based.</p>
",3
65142368,"<p>This might be a better fit for <a href=""https://codereview.stackexchange.com"">codereview</a> but if the question is just 'How to make this more concise' I would suggest something like following:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const shelf = [{
  ""categoryPrice"": ""2"",
  ""categoryTitle"": ""Flyer"",
  ""articleList"": [{
    ""id"": ""1"",
    ""articleTitle"": ""Green"",
  }, {
    ""id"": ""2"",
    ""articleTitle"": ""Blue"",
  }],
}, {
  ""categoryPrice"": ""3"",
  ""categoryTitle"": ""Post card"",
  ""articleList"": [{
    ""id"": ""3"",
    ""articleTitle"": ""Purple""
  }, {
    ""id"": ""4"",
    ""articleTitle"": ""Yellow"",
  }]
}]

const findItem = function(shelves, id) {
  return shelves.flatMap((shelf) =&gt; shelf.articleList).find((article) =&gt; article.id == id) || null;
}

console.log(findItem(shelf, 1));
console.log(findItem(shelf, 3));</code></pre>
</div>
</div>
</p>
<p>The above example concatenate all the list of articles and then searches that array for the article with the supplied ID.</p>
<p>Performance wise? Not the best, but you asked for something concise and this is about as concise as one can hope for with the given data structure.</p>
",3
65131392,"<p>The constructors for the strategies don't have any relevance for whether something <em>is</em> or <em>isn't</em> a strategy. The goal of the strategy pattern is to extract an operation to be independant from the class and to allow you to determine <em>how</em> a class behaves, without altering it.</p>
<p>Consider the following, we want to make a trivial &quot;calculator&quot; that takes two values and operates with them. It then displays that result in some way. We want to extract the logic for:</p>
<ul>
<li>the calculation - <em>how</em> two numbers are handled</li>
<li>the display - how the result is shown</li>
</ul>
<p>This would mean that we can change how the calculator works without altering the class itself. So, we extract two strategies:</p>
<pre class=""lang-typescript prettyprint-override""><code>interface CalculationStrategy {
    doMaths: (a: number, b: number) =&gt; number
}

interface DisplayStrategy {
    show: (num: number) =&gt; void
}
</code></pre>
<p>And we could supply multiple implementations:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>//calculation strategies
class AddStrategy {
  doMaths(a, b) {
    return a + b;
  }
}

class MultiplyByConstantStrategy {
  constructor(x) {
    this.x = x;
  }

  doMaths(a, b) {
    return (a + b) * this.x;
  }
}

//display strategies
class ConsoleDisplayStrategy {
  show(num) {
    console.log(num.toFixed(2))
  }
}

class HTMLDisplayStrategy {
  constructor(elementSelector) {
    this.inputElement = document.querySelector(elementSelector);
  }

  show(num) {
    this.inputElement.value = num;
  }
}

//calculate class
class Calculate {
  constructor(operationHandler, displayHandler) {
    this.operationHandler = operationHandler;
    this.displayHandler = displayHandler;
  }

  calculate(a, b) {
    const result = this.operationHandler.doMaths(a, b);
    this.displayHandler.show(result);
  }
}


/*     usage     */

//calculate the total for a bill + tip
const tip = new Calculate(
  new MultiplyByConstantStrategy(1.15), 
  new HTMLDisplayStrategy(""#totalWithTip"")
);
document.querySelector(""#billTotal"")
  .addEventListener(""click"", () =&gt; {
    const coffee = Number(document.querySelector(""#coffeePrice"").value);
    const bagel = Number(document.querySelector(""#bagelPrice"").value);
    
    tip.calculate(coffee, bagel);
  });
  
//just display a calculation on the page
const showAdd = new Calculate(
  new AddStrategy(),
  new HTMLDisplayStrategy(""#addResult"")
);
showAdd.calculate(2, 8);


//print a sum
const printAdd = new Calculate(
  new AddStrategy(),
  new ConsoleDisplayStrategy()
);

document.querySelector(""#printSum"")
  .addEventListener(""click"", () =&gt; {
    const a = Number(document.querySelector(""#a"").value);
    const b = Number(document.querySelector(""#b"").value);
    
    printAdd.calculate(a, b);
  });</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper {
    /* prevent the console output from covering the page */
    position: initial !important; 
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;pre&gt;MultiplyByConstantStrategy + HTMLDisplayStrategy&lt;/pre&gt;

&lt;div&gt;
  &lt;label for=""coffeePrice""&gt;Price for coffee:&lt;/label&gt;
  &lt;input id=""coffeePrice"" value=""2"" type=""number"" /&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;label for=""bagelPrice""&gt;Price for bagel:&lt;/label&gt;
  &lt;input id=""bagelPrice"" value=""8"" type=""number"" /&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;label for=""totalWithTip""&gt;You owe:&lt;/label&gt;
  &lt;input id=""totalWithTip"" readonly/&gt;
&lt;/div&gt;
&lt;button id=""billTotal""&gt;Bill please!&lt;/button&gt;

&lt;hr/&gt;

&lt;pre&gt;AddStrategy + HTMLDisplayStrategy&lt;/pre&gt;

&lt;div&gt;
  &lt;label for=""addResult""&gt;2 + 8 = &lt;/label&gt;
  &lt;input id=""addResult"" readonly/&gt;
&lt;/div&gt;

&lt;hr/&gt;

&lt;pre&gt;AddStrategy + ConsoleDisplayStrategy&lt;/pre&gt;

&lt;div&gt;
  &lt;input id=""a"" value=""2"" type=""number"" /&gt;
  +
  &lt;input id=""b"" value=""8"" type=""number"" /&gt;
&lt;/div&gt;
&lt;button id=""printSum""&gt;print the sum&lt;/button&gt;</code></pre>
</div>
</div>
</p>
<p>The goal is reached here. We've successfully decoupled the calculation and display. We can alter each one without having to change the other or the <code>Calculate</code> class. And this is what the strategy pattern tries to solve. The fact that the strategies are constructed with different parameters is irrelevant for this outcome.</p>
",3
65136063,"<p><a href=""https://docs.cypress.io/api/utilities/minimatch.html"" rel=""nofollow noreferrer"">Cypress.minimatch</a> is a tool that can be used for checking the route matchers.</p>
<blockquote>
<p>By default Cypress uses minimatch to test glob patterns against request URLs.</p>
<p>If you’re struggling with writing the correct pattern you can iterate much faster by testing directly in your Developer Tools console.</p>
</blockquote>
<p>The two routes you show in the question actually pass the minimatch test.</p>
<pre class=""lang-js prettyprint-override""><code>const url = 'http://example/student/details.php?viewDetails=project&amp;stdCount=1&amp;sectionID=1&amp;openHash=5fc8329a76e73&amp;ajaxCall=true';

const pattern1 = '**/student/details.php?viewDetails=project&amp;stdCount=1&amp;sectionID=1&amp;openHash=**';
console.log( Cypress.minimatch(url, pattern1) );  // true

const pattern2 = '**/student/details.php?viewDetails=project&amp;stdCount=1&amp;sectionID=1&amp;openHash=**&amp;ajaxCall=true**';
console.log( Cypress.minimatch(url, pattern2) );  // true
</code></pre>
<hr />
<p>Here is a <a href=""https://github.com/cypress-io/cypress-fiddle"" rel=""nofollow noreferrer"">Cypress fiddle</a> that shows how to use the new intercept method to handle query parameters.</p>
<pre class=""lang-js prettyprint-override""><code>/// &lt;reference types=&quot;@cypress/fiddle&quot; /&gt;

const test = {
  html: `
    &lt;p class=&quot;text-lg&quot;&gt;&lt;/p&gt;
    &lt;script&gt;
      setTimeout(() =&gt; {
        const url = 'http://example/student/details.php?viewDetails=project&amp;stdCount=1&amp;sectionID=1&amp;openHash=5fc8329a76e73&amp;ajaxCall=true';
        window.fetch(url, { method: 'POST'});
      }, 1000);
    &lt;/script&gt;
  `,
  test: `
  cy.intercept({
    method: 'POST',
    url: '/student/details.php',
    query: {
      viewDetails: 'project',   // whatever query parts you care about
      stdCount: '1',
      sectionID: '1'
    }
  }, {})                 // Added an empty stub here, as my url does not actually exist
  .as('getStudentTabDetails');
  cy.wait('@getStudentTabDetails')
  `
}

it('', () =&gt; {
  cy.runExample(test)
});
</code></pre>
<p>The <strong>POST</strong> is made with native fetch(), which would not be captured in the old <code>cy.route()</code> method without using a <a href=""https://www.cypress.io/blog/2020/06/29/experimental-fetch-polyfill/"" rel=""nofollow noreferrer"">polyfill</a>.</p>
",3
65108971,"<p>You are iterating <code>filters.items</code> which is an array that holds one object that has multiple properties. Instead, iterate that one object.</p>
<p>So write this instead:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>       &lt;li v-for=""item in filters.items[0]"" :key=""item.id""&gt;
           &lt;Checkbox v-bind:data.sync=""item"" /&gt;
         &lt;/li&gt;</code></pre>
</div>
</div>
</p>
<p>This way you are actually iterating the object properties and not the array.</p>
",3
65104785,"<p>For the colour change part, I suggest you use CSS, instead of JavaScript:</p>
<pre><code>/* change the font-weight and color when a mouse hovers over the element */
.tp-cu-po:hover {
   font-weight: bold;
   color: #0064ff;
}

/* once the mouse leaves, element reverts back */
</code></pre>
<p><em><strong>EDIT</strong></em>: if you don't want to use CSS, then perhaps you can try using <code>eventListeners</code>. Something like:</p>
<pre><code>var requiredClass = document.getElementsByClassName(&quot;tp-cu-po&quot;);

// function for mouseover
function titlep(elem) {
  const aVal = document.getElementById('in02').textContent;
  const elemVal = elem.textContent.replace(/[^0-9]/g, '');
  elem.style=&quot;font-weight: bold;color: #0064ff;&quot;
  elem.title = Number(aVal) * Number(elemVal);
};

// function for mouseleave
function un_titlep(elem) {
  const aVal = document.getElementById('in02').textContent;
  const elemVal = elem.textContent.replace(/[^0-9]/g, '');
  elem.style=&quot;font-weight: unser;color: black;&quot; // set this to whatever you want it to be
  
}

for(var j = 0; j &lt; requiredClass.length; j++){
    // when you mouse over
    requiredClass[j].addEventListener(&quot;mouseover&quot;, function(){
        titlep(this);
    });
    // when you leave
    requiredClass[j].addEventListener(&quot;mouseout&quot;, function(){
        un_titlep(this);
    });
}
</code></pre>
<p>But of course, this requires more lines of code (and more possibility of error)</p>
",3
65135796,"<p>This can be done with CSS only with <a href=""https://developer.mozilla.org/en-US/docs/Web/CSS/animation"" rel=""nofollow noreferrer""><code>animation</code></a> you can specify a duration as well as a delay (in your case x). Paradoxically to make an element slide from the right it easier to positioned it with the <code>left</code> property. Like so…</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.taskbox {
  width: 230px;
  padding: 15px;
  left: 100%;
  position: absolute;
  top: 25px;
  background-color: black;
  color: white;
  font-family: courier new;
  font-size: 20px;
  animation: slide-from-right .4s 2s forwards; /* x = 2s */
}

@keyframes slide-from-right {
  to {
    left: calc(100% - 230px - 30px - 25px);
    /* 100% = total width, 230px = element width, 30px = left and right padding, 25px = distance from right border */
  }
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""taskbox""&gt;Evidently, the pandemic has taken a toll on the economy! You should find a way to financially stay afloat. Humans have something called 'stipends' to aide in a situation like this. We should &lt;a href=""a2_page_3.html""&gt;investigate&lt;/a&gt;!&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",3
65116126,"<p>To clone an object you can use the <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax"" rel=""nofollow noreferrer"">spread syntax</a> <code>{...x}</code>.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let users=[{""firstName"":""John"", ""lastName"":""Doe""},
  {""firstName"":""Anna"", ""lastName"":""Smith""},
  {""firstName"":""Peter"", ""lastName"":""Jones""}];

const newThing = {...users[0]}; // we clone the object
newThing.firstName = 'New name'

console.log(newThing, users);
// ^-- newThing has the new firstName but users remains untouched</code></pre>
</div>
</div>
</p>
<p>So your example code would look like this:</p>
<pre class=""lang-js prettyprint-override""><code>let users=[{&quot;firstName&quot;:&quot;John&quot;, &quot;lastName&quot;:&quot;Doe&quot;},
  {&quot;firstName&quot;:&quot;Anna&quot;, &quot;lastName&quot;:&quot;Smith&quot;},
  {&quot;firstName&quot;:&quot;Peter&quot;, &quot;lastName&quot;:&quot;Jones&quot;}];

const [selectedUser, setselectedUser] = useState(undefined);

setselectedUser({...users[0]}); // &lt;-- I changed this

var a = selectedUser;
a.firstName = &quot;XYZ&quot;
setselectedUser(a);
</code></pre>
",3
65136145,"<p>First, you'll want to collect all students by name, then start combining properties based on that <code>ItemNumber</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const current = [
{ studentName: 'Name', ItemNumber: 1, Score: 0 }, 
{ studentName: 'Name', ItemNumber: 2, Score: 1 }]

const map = current.reduce((map, { studentName, ItemNumber, ...props }) =&gt; {
  // collect by studentName
  return map.set(studentName, {
    ...(map.get(studentName) ?? {}), // merge any previously found entries
    ...Object.fromEntries(Object.entries(props).map(([ key, val ]) =&gt;
      [ `Item${ItemNumber}${key}`, val ]))
  })
}, new Map())

const needed = Array.from(map, ([ studentName, data ]) =&gt; ({
  studentName,
  ...data
}))

console.info(needed)</code></pre>
</div>
</div>
</p>
<p>This takes any property that is not <code>studentName</code> or <code>ItemNumber</code> and prefixes it with <em>&quot;Item&lt;ItemNumber&gt;&quot;</em> so if you have properties other that <code>Score</code>, it will also work for those.</p>
",3
65124274,"<ol>
<li><p>Inside your <code>index.html file</code> in your <code>public folder</code> you should have a code like this <code>&lt;div id='root'&gt;&lt;/div&gt;</code> where <code>root</code> targets your unique <code>div</code> element.</p>
</li>
<li><p>And in your <code>index.js file</code> you should not call a collection with <code>document.querySelectorAll('#root')</code> because it returns a collection even if only one occurence matches the <code>selector</code>.</p>
</li>
</ol>
<p>Use instead <code>document.querySelector('#root')</code> to target the first <code>selector</code> that is found.</p>
<p>Technically speaking you can event change the <code>id property</code> name into <code>mammy</code> inside your <code>index.html file</code> like this <code>&lt;div id='mammy'&gt;&lt;/div&gt;</code>.As it <code>mammy</code> in your <code>index.js</code> it will be <code>document.querySelector('#mammy')</code>.It just to help you understand how things really work</p>
<p>I hope that it helped</p>
",3
65090674,"<p>I would use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce"" rel=""nofollow noreferrer"">reduce</a></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const data = [ 
{ fieldname: 'files0', originalname: 'Screenshot from 2020-05-23 01-52-30.png', },
{ fieldname: 'files0', originalname: 'Screenshot from 2020-05-22 08-44-05.png', },
{ fieldname: 'files1', originalname: 'Screenshot from 2020-05-30 11-36-42.png', },
{ fieldname: 'files1', originalname: 'Screenshot from 2020-05-30 11-36-36.png', },
{ fieldname: 'files1', originalname: 'Screenshot from 2020-05-30 11-36-31.png', }],
arr = data.reduce((acc, cur) =&gt; {
  const idx = cur.fieldname.replace(""files"",""""); // get 0, 1
  if (acc[idx]) acc[idx].push(cur); // if already there, just push
  else acc[idx] = [cur];            // otherwise initialise
  return acc;
},[]) 

console.log(arr)</code></pre>
</div>
</div>
</p>
<p>NOTE: <em>The groups can be between 0 to 9, depending on the user input.</em></p>
<p>I assume there are no holes since that could result in a sparse array so</p>
<pre><code>data = [ 
     { fieldname : 'files0' },
     { fieldname : 'files0' },
     { fieldname : 'files3' },
     { fieldname : 'files3' },
 }
</code></pre>
<p>would create an array of</p>
<pre><code>[
  [ { fieldname : 'files0' }, { fieldname : 'files0' } ],
  null,
  null,
  [ { fieldname : 'files3' }, { fieldname : 'files3' } ],
]
</code></pre>
",3
65099671,"<p>You can either use <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent"" rel=""nofollow noreferrer""><code>textContent</code></a> or <a href=""https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML"" rel=""nofollow noreferrer""><code>innerHTML</code></a>.</p>
<p>Here's an example using <code>textContent</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function add() {
  var input1 = parseInt(document.getElementById(""t1"").value);
  var input2 = parseInt(document.getElementById(""t2"").value);
  var result = input1 + input2;
  document.getElementById('add-result').textContent = result;
}

function divide() {
  var input1 = parseInt(document.getElementById(""t3"").value);
  var input2 = parseInt(document.getElementById(""t4"").value);
  var result = Math.floor(input1 / input2);
  var remainder = input1 % input2
  document.getElementById('divide-result').textContent = result;
  document.getElementById('divide-remainder').textContent = remainder;
}

function multiply() {
  var input1 = parseInt(document.getElementById(""t5"").value);
  var input2 = parseInt(document.getElementById(""t6"").value);
  var result = input1 * input2;
  document.getElementById('multiply-result').textContent = result;
}

function subtract() {
  var input1 = parseInt(document.getElementById(""t7"").value);
  var input2 = parseInt(document.getElementById(""t8"").value);
  var result = input1 - input2;
  document.getElementById('subtract-result').textContent = result;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;
  &lt;h1&gt;Addition&lt;/h1&gt;
  &lt;input type=""text"" id=""t1"" name=""t1""&gt; +
  &lt;input type=""text"" id=""t2"" name=""t2""&gt;
  &lt;input type=""button"" id=""add"" value=""="" onClick=""add();""&gt;
  &lt;span id=""add-result""&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;h1&gt;Subtraction&lt;/h1&gt;
  &lt;input type=""text"" id=""t7"" name=""t7""&gt; -
  &lt;input type=""text"" id=""t8"" name=""t8""&gt;
  &lt;input type=""button"" id=""subtract"" value=""="" onClick=""subtract();""&gt;
  &lt;span id=""subtract-result""&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;h1&gt;Multiplication&lt;/h1&gt;
  &lt;input type=""text"" id=""t5"" name=""t5""&gt; *
  &lt;input type=""text"" id=""t6"" name=""t6""&gt;
  &lt;input type=""button"" id=""multiply"" value=""="" onClick=""multiply();""&gt;
  &lt;span id=""multiply-result""&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;h1&gt;Division&lt;/h1&gt;
  &lt;input type=""text"" id=""t3"" name=""t3""&gt; ÷
  &lt;input type=""text"" id=""t4"" name=""t4""&gt;
  &lt;input type=""button"" id=""divide"" value=""="" onClick=""divide();""&gt;
  &lt;span id=""divide-result""&gt;&lt;/span&gt; | 
  &lt;span id=""divide-remainder""&gt;&lt;/span&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<hr />
<p>With <code>textContent</code> you can only set text, with <code>innerHTML</code> you can set HTML:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function add() {
  var input1 = parseInt(document.getElementById(""t1"").value);
  var input2 = parseInt(document.getElementById(""t2"").value);
  var result = input1 + input2;
  document.getElementById('add-result').innerHTML = `&lt;i style=""color: blue""&gt;${result}&lt;/i&gt;`;
}

function divide() {
  var input1 = parseInt(document.getElementById(""t3"").value);
  var input2 = parseInt(document.getElementById(""t4"").value);
  var result = Math.floor(input1 / input2);
  var remainder = input1 % input2
  document.getElementById('divide-result').innerHTML = `&lt;i style=""color: blue""&gt;${result}&lt;/i&gt;`;
  document.getElementById('divide-remainder').innerHTML = `&lt;i style=""color: blue""&gt;${remainder}&lt;/i&gt;`;
}

function multiply() {
  var input1 = parseInt(document.getElementById(""t5"").value);
  var input2 = parseInt(document.getElementById(""t6"").value);
  var result = input1 * input2;
  document.getElementById('multiply-result').innerHTML = `&lt;i style=""color: blue""&gt;${result}&lt;/i&gt;`;
}

function subtract() {
  var input1 = parseInt(document.getElementById(""t7"").value);
  var input2 = parseInt(document.getElementById(""t8"").value);
  var result = input1 - input2;
  document.getElementById('subtract-result').innerHTML = `&lt;i style=""color: blue""&gt;${result}&lt;/i&gt;`;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div&gt;
  &lt;h1&gt;Addition&lt;/h1&gt;
  &lt;input type=""text"" id=""t1"" name=""t1""&gt; +
  &lt;input type=""text"" id=""t2"" name=""t2""&gt;
  &lt;input type=""button"" id=""add"" value=""="" onClick=""add();""&gt;
  &lt;span id=""add-result""&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;h1&gt;Subtraction&lt;/h1&gt;
  &lt;input type=""text"" id=""t7"" name=""t7""&gt; -
  &lt;input type=""text"" id=""t8"" name=""t8""&gt;
  &lt;input type=""button"" id=""subtract"" value=""="" onClick=""subtract();""&gt;
  &lt;span id=""subtract-result""&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;h1&gt;Multiplication&lt;/h1&gt;
  &lt;input type=""text"" id=""t5"" name=""t5""&gt; *
  &lt;input type=""text"" id=""t6"" name=""t6""&gt;
  &lt;input type=""button"" id=""multiply"" value=""="" onClick=""multiply();""&gt;
  &lt;span id=""multiply-result""&gt;&lt;/span&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;h1&gt;Division&lt;/h1&gt;
  &lt;input type=""text"" id=""t3"" name=""t3""&gt; ÷
  &lt;input type=""text"" id=""t4"" name=""t4""&gt;
  &lt;input type=""button"" id=""divide"" value=""="" onClick=""divide();""&gt;
  &lt;span id=""divide-result""&gt;&lt;/span&gt; |
  &lt;span id=""divide-remainder""&gt;&lt;/span&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
<p>It's worth noting, with <code>innerHTML</code> there are security concerns as mentioned here:</p>
<blockquote>
<p>...there are ways to execute JavaScript without using  elements, so there is still a security risk whenever you use innerHTML to set strings over which you have no control. For example:</p>
</blockquote>
<pre><code>const name = &quot;&lt;img src='x' onerror='alert(1)'&gt;&quot;;
el.innerHTML = name; // shows the alert
</code></pre>
<blockquote>
<p>For that reason, it is recommended that you do not use innerHTML when inserting plain text; instead, use Node.textContent. This doesn't parse the passed content as HTML, but instead inserts it as raw text.</p>
</blockquote>
<hr />
<p>Here are some other methods used to manipulate the DOM:</p>
<ul>
<li><a href=""https://www.w3schools.com/jsref/met_node_insertadjacentelement.asp"" rel=""nofollow noreferrer"">insertAdjacentElement</a></li>
<li><a href=""https://www.w3schools.com/jsref/prop_node_innertext.asp"" rel=""nofollow noreferrer"">innerText</a></li>
<li><a href=""https://www.w3schools.com/jsref/met_node_insertadjacenthtml.asp"" rel=""nofollow noreferrer"">insertAdjacentHTML</a></li>
<li><a href=""https://www.w3schools.com/jsref/met_node_insertadjacenttext.asp"" rel=""nofollow noreferrer"">insertAdjacentText</a></li>
<li><a href=""https://www.w3schools.com/jsref/met_node_insertbefore.asp"" rel=""nofollow noreferrer"">insertBefore</a></li>
<li><a href=""https://www.w3schools.com/jsref/met_node_appendchild.asp"" rel=""nofollow noreferrer"">appendChild</a></li>
<li><a href=""https://www.w3schools.com/jsref/met_node_replacechild.asp"" rel=""nofollow noreferrer"">replaceChild</a></li>
<li><a href=""https://www.w3schools.com/jsref/met_node_removechild.asp"" rel=""nofollow noreferrer"">removeChild</a></li>
<li><a href=""https://www.w3schools.com/jsref/prop_node_nodevalue.asp"" rel=""nofollow noreferrer"">nodeValue</a></li>
<li><a href=""https://www.w3schools.com/jsref/prop_html_outerhtml.asp"" rel=""nofollow noreferrer"">outerHTML</a></li>
<li><a href=""https://www.w3schools.com/jsref/prop_node_outertext.asp"" rel=""nofollow noreferrer"">outerText</a></li>
<li><a href=""https://www.w3schools.com/jsref/met_element_remove.asp"" rel=""nofollow noreferrer"">remove</a></li>
</ul>
<p>See the full list <a href=""https://www.w3schools.com/jsref/dom_obj_all.asp"" rel=""nofollow noreferrer"">here</a>.</p>
",3
65145259,"<p>You just have to <code>map()</code> on <code>snippet.tags</code> like this :</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const snippets = [{
    id: 1,
    title: ""Loop through an array"",
    tags: [""array"", ""map"", ""foreach""]
},
{
    id: 2,
    title: ""Loop through another array"",
    tags: [""foo"", ""bar"", ""ham""]
}
];

ReactDOM.render(
  &lt;div&gt;
    {snippets.map(snippet =&gt; (
        &lt;p key={snippet.id}&gt;
          &lt;div&gt;
            &lt;strong&gt;{snippet.title}&lt;/strong&gt;
          &lt;/div&gt;
          
          {snippet.tags.map(tag =&gt; (
            &lt;button&gt;{tag}&lt;/button&gt;
          ))}
        &lt;/p&gt;
      ))}
  &lt;/div&gt;,
  document.getElementById('root')
);</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react/16.6.3/umd/react.production.min.js""&gt;&lt;/script&gt;
&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/react-dom/16.6.3/umd/react-dom.production.min.js""&gt;&lt;/script&gt;

&lt;div id=""root""&gt;&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",3
65084039,"<p>I think you need something like this</p>
<pre><code>function loadFormData(customerObj) {

    $.each(customerObj, function(id,value){
    
        $( &quot;#&quot;+id ).val( value );
    
    });
    
}
</code></pre>
",3
65157253,"<p>You can make a function like this that selects columns based on an array of indices:</p>
<pre><code>const getColumns = (arr, indices) =&gt; arr.map(row =&gt; indices.map(i =&gt; row[i]));
getColumns(arr, [0, 1]);    // returns the first two columns
</code></pre>
<p>If the ultimate aim is to split the array into equal size chunks you could do it like this:</p>
<pre><code>const splitIntoColumnGroups = (arr, width) =&gt; 
  [...Array(Math.ceil(arr[0].length/width)).keys()].map(i =&gt; 
    arr.map(row =&gt; 
      row.slice(i * width, (i + 1) * width)));
</code></pre>
",3
65101516,"<p>I don't think there is a built-in or out-of-the-box solution that generates unique id in react that persist automatically. You have two problems to solve.</p>
<ul>
<li>How to generate unique id. Which was already solved by using the <a href=""http://npmjs.com/package/uuid"" rel=""nofollow noreferrer"">uuid</a>.</li>
<li>And how to persist it.</li>
</ul>
<p>There are plenty of storage you can use depend on your need. Here's few of them where you can persist your data assuming you want it to be stored in <strong>client side</strong>.</p>
<ul>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage"" rel=""nofollow noreferrer"">LocalStorage</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/Window/sessionStorage"" rel=""nofollow noreferrer"">SessionStorage</a></li>
<li><a href=""https://sabe.io/classes/javascript/cookies"" rel=""nofollow noreferrer"">Cookie</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API"" rel=""nofollow noreferrer"">IndexedDB API</a></li>
<li><a href=""https://developer.mozilla.org/en-US/docs/Web/API/FileSystem"" rel=""nofollow noreferrer"">FileSystem</a></li>
</ul>
<p>Again, it depends on your use case. So, carefully check them out which one fits on your requirement.</p>
",3
65118151,"<p>You can use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"" rel=""nofollow noreferrer""><code>map()</code></a> with <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf"" rel=""nofollow noreferrer""><code>indexOf()</code></a>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const part = [""So 2545"", ""Cool 1123"", ""Mos 1999""];
const full = [""So 2545"", ""Fun 1023"", ""Loss 2009"", ""Cool 1123"", ""Mos 1999""];

const indexes = part.map(v =&gt; full.indexOf(v));

console.log(indexes);</code></pre>
</div>
</div>
</p>
<p>If you are dealing with large arrays, the overhead of building a lookup table (as suggested in other answers) might become worth it.</p>
",3
65087204,"<p>You can check if the <code>user.favorite</code> array includes the <code>ids._id</code> value.</p>
<pre><code>{Searchfile.filter((ids) =&gt; user.favorite.includes(ids._id)).map(
  (item, index) =&gt; (
    &lt;div
      className=&quot;row-queue&quot;
      key={index}
      // onClick={() =&gt; handleClick(item, index)}
    &gt;
      &lt;div className=&quot;column1-queue&quot;&gt;{index + 1}&lt;/div&gt;
      &lt;div className=&quot;column2-queue&quot;&gt;{item.title}&lt;/div&gt;
      &lt;div className=&quot;column3-queue&quot;&gt;{item.singer}&lt;/div&gt;
    &lt;/div&gt;
  )
)}
</code></pre>
",3
65128982,"<p>You need to use <code>require</code> when binding to an asset variable image.  For example:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;img :src=&quot;url&quot;&gt;
</code></pre>
<pre class=""lang-js prettyprint-override""><code>url: require('@/assets/icon.png')
</code></pre>
<p>If your json contains only the filename, you can place <code>require</code> in the template:</p>
<pre class=""lang-html prettyprint-override""><code>&lt;img :src=&quot;require('@/assets/' + url)&quot;&gt;
</code></pre>
<pre class=""lang-js prettyprint-override""><code>url: 'icon.png'
</code></pre>
",3
65093606,"<p><strong>Enable onClick</strong> <br/>
Set <code>body</code> <code>element</code> to the full size of the page so the <code>onClick</code> is received. Add a <code>width: 100%;</code> and <code>height: 100%;</code> to the <code>body</code>. <em>If this handled by appending content to the body, this step can be skipped.</em></p>
<p><strong>Moveable Blue Circle</strong> <br/>
In order to move the cursor on the screen you need to create a singular DOM element, then move it during the <code>onclick</code> event. This is achieved by creating a circle outside of the <code>onclick</code> and updating the CSS properties inside the <code>onclick</code>.</p>
<p><strong>Add White Box</strong> <br/>
As for the white box container, you can use the same code as for the circle; just offset the <code>top</code> and <code>left</code> css styling.</p>
<p><strong>Example</strong> <br/></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>$(function(){
  
    // Create a new circle once.
    var circle=$('&lt;div class=""circle""&gt;&lt;/div&gt;');
    var container=$('&lt;div class=""container""&gt;&lt;/div&gt;');
    
    // Retrieve the body and add on click parameter.
    var body = $('body');
    body.append(circle);
    body.append(container);
    body.click(function(e){
    
          // Move circle here.
          circle.css('top', e.pageY - 15);
          circle.css('left', e.pageX - 15)
          if (circle.css('display') == 'none')
            circle.css('display', 'block');
          
          // Move container here.
          container.css('top', e.pageY + 20);
          container.css('left', e.pageX - 15);
          if (container.css('display') == 'none') {
            container.css('display', 'block');
            container.click(function(e) {
              e.stopPropagation(); // Prevents moving circle when clicking on the container.
            })
          }
    })
  })</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>html, body {
  width: 100%;
  height: 100%;
  background-color: grey;
}

.circle {
  display: none;
  position: absolute;
  width: 30px;
  height: 30px;
  background-color: blue;
  border-radius: 20px;
}
.container {
  display: none;
  position: absolute;
  background: white;
  border: 1px solid black;
  height: 200px;
  width: 300px;
  border-radius: 20px;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;</code></pre>
</div>
</div>
</p>
",3
65106445,"<p>just set <strong>.dropdown-content</strong>  position <code>absolute</code> and <code>width:100%</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function filterFunction() {
  let isInputAvail = false;
  var input, filter, ul, li, a, i;
  input = document.getElementById(""myInput"");
  filter = input.value.toLowerCase();
  if (filter.length &gt; 0) {
    document.getElementById(""myDropdown"").classList.add(""show"");
  } else {
    document.getElementById(""myDropdown"").classList.remove(""show"");
  }
  div = document.getElementById(""myDropdown"");
  a = div.getElementsByTagName(""a"");
  for (i = 0; i &lt; a.length; i++) {
    txtValue = a[i].innerText;
    filter = filter.replace(/\s/g, '')
    txtValue = txtValue.replace(/\s/g, '')
    if (txtValue.toLowerCase().indexOf(filter) &gt; -1) {
      isInputAvail = true;
      a[i].style.display = ""block"";
    } else {
      a[i].style.display = ""none"";
    }
  }
  if (!isInputAvail) {
    document.getElementById(""noMatches"").classList.add('show');
  } else {
    document.getElementById(""noMatches"").classList.remove('show');
  }
}</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>body {
  margin: 0;
}

* {
  box-sizing: border-box;
}

.s01 {
  min-height: 100vh;
  display: -ms-flexbox;
  display: flex;
  -ms-flex-pack: center;
  justify-content: center;
  -ms-flex-align: center;
  align-items: center;
  font-family: 'Poppins', sans-serif;
  background: url(""../images/Search_001.png"");
  background-size: cover;
  background-position: center center;
  padding: 15px;
}

.div {
  display: none;
  background-color: #0000D6;
}

.dropbtn {
  padding: 16px;
  font-size: 16px;
  border: none;
  cursor: pointer;
  border-radius: 10px;
}

input {
  background: url(""images/search/searchicon.png"") top left no-repeat;
  padding-left: 25px;
}

#myInput {
  box-sizing: border-box;
  background-position: 14px 12px;
  background-repeat: no-repeat;
  color: #000000;
  font-size: 18px;
  font-family: Tahoma, Geneva, sans-serif;
  padding: 14px 20px 12px 45px;
  border: 3px solid #000000;
  border-radius: 10px;
  background-color: #C4C6C3;
}

#myInput:focus {
  outline: none;
  border-color: #171313;
  background-color: #FFFFFF;
  border: 5px solid #000000;
  color: #000000;
}

.dropdown {
  position: relative;
  display: inline-block;
}

.dropdown-content {
  max-height: 215px;
  display: none;
  position: absolute; 
  width:100%;
  background-color: #A3A3A3;
  min-width: 230px;
  overflow-y: scroll;
  border: none;
  z-index: 1;
  border-radius: 10px;
}

.dropdown-content a {
  color: black;
  padding: 12px 16px;
  text-decoration: none;
  display: block;
}

.dropdown a:hover {
  background-color: #ddd;
}

.show {
  display: block;
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;div class=""s01""&gt;

  &lt;div class=""dropdown""&gt;
    &lt;input type=""text"" class=""dropbtn"" placeholder=""Search Here..."" id=""myInput"" onInput=""filterFunction()""&gt;
    &lt;div id=""myDropdown"" class=""dropdown-content""&gt;
      &lt;a href="""" target=""_parent""&gt;Search 1&lt;/a&gt;
      &lt;a href="""" target=""_parent""&gt;Search 2&lt;/a&gt;
      &lt;a href="""" target=""_parent""&gt;Search 3&lt;/a&gt;
      &lt;a href="""" target=""_parent""&gt;Search 1&lt;/a&gt;
      &lt;a href="""" target=""_parent""&gt;Search 1&lt;/a&gt;
      &lt;a href="""" target=""_parent""&gt;Search 5&lt;/a&gt;
      &lt;a href="""" target=""_parent""&gt;Search 5&lt;/a&gt;
      &lt;a href="""" target=""_parent""&gt;Search 5&lt;/a&gt;
    &lt;/div&gt;
    &lt;div id=""noMatches"" class=""dropdown-content""&gt;
      &lt;a href="""" target=""_parent""&gt;&lt;b&gt;No Matches?&lt;/b&gt; Perform custom search&lt;/a&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",3
65148357,"<p>You could check if the flag is set, then take the value from <code>roles</code> with the index or return an empty array.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const
    roles = [""Learner"", ""Manager"", ""ClientAdmin""],
    data = [[true, false, false], [true, true, false], [true, true, true], [false, false, false]],
    result = data.map(a =&gt; a.flatMap((f, i) =&gt; f ? roles[i] : []));
    
console.log(result);</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>
</div>
</div>
</p>
",3
65101187,"<p>When you set the value of an input element through code it doesn't call the <code>onchange</code> function. I'm not sure if this is all browsers or only some, but it seems like all. If you want to call the change event, call the function <code>myFunction</code> inside your button click functions. Or call the input's <code>change</code> function.</p>
<p>Either of the following works:</p>
<pre><code> minusButton.addEventListener('click', event =&gt; {
        const currentValue = Number(inputField.value);
        inputField.value = currentValue - 1;
        myFunction();
    });
</code></pre>
<p>Or</p>
<pre><code> minusButton.addEventListener('click', event =&gt; {
        const currentValue = Number(inputField.value);
        inputField.value = currentValue - 1;
        inputField.onchange();
    });
</code></pre>
",3
65107860,"<p>You can use simply swap the values of the two keys and then using <code>Array#map</code> to make the transformation over all the objects in the array:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const myArray = [{ 'a': {'x': ['Bob', 'Rob', 'Mike'], 'y': [4, 5, 6],'name': 'a' }},{'b': {'x': ['Kris', 'Elen', 'Hanna'],'y': [10, 11, 12],'name': 'b'}}];

const switchKey = (obj, key1, key2) =&gt; {
  const {[key1]: a, [key2]: b} = obj;
  //swap here
  return {...obj, [key1]: b, [key2]: a}
}

const switched = myArray.map(o =&gt; {
  let [key, value] = Object.entries(o)[0];
  return {[key] : switchKey(value, ""x"", ""y"")};
});
console.log(switched);</code></pre>
</div>
</div>
</p>
",4
65156234,"<p>You can use <code>.map</code> to iterate over <code>arr1</code> and <code>.includes</code> to check if the item's <code>id</code> is in <code>arr2</code>:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const arr1 = [
  {id: 1, favorite: false}, 
  {id: 2, favorite: false}, 
  {id: 3, favorite: false}
];
const arr2 = [1, 3];

const res = arr1.map(e =&gt; 
  ({...e, favorite: arr2.includes(e.id)})
);

console.log(res);</code></pre>
</div>
</div>
</p>
",4
65119900,"<p>The statement <code>if (message.content === '!help' || '!command') {</code> has two blocks: <code>message.content === '!help'</code> and <code>'!command'</code>. The <code>||</code> or operator says: &quot;either of those things should be true&quot;.</p>
<p>So it ignores the first block because the second block will always be <a href=""https://developer.mozilla.org/en-US/docs/Glossary/Truthy"" rel=""nofollow noreferrer"">truthy</a>.</p>
<p>What you're trying to do is this:</p>
<pre class=""lang-js prettyprint-override""><code>client.on('message', (message) =&gt; {
  let targetMember = message.member.user;
  if (message.content === '!help' || message.content === '!command') {
    message.channel.send(
      `Hello ${targetMember}! This bot is currently used for testing only. Features will be added in the future, however for more info, please contact &lt;@248030367666274304&gt;.`
    );
  }
});
</code></pre>
",4
65153608,"<p>The parameters to the function are also named <code>x</code> and <code>y</code>, so they are shadowing the global variables. In this particular case, it seems that you only want to use the global variables, so you can simply remove the parameters from both functions.</p>
<pre><code>var x = 10;
var y = 7;
var destX = 5;
var destY = 5;
function simulate() {
    while (x !== destX &amp;&amp; y !== destY) {
        move();
    }
    console.log(&quot;arrived&quot;)
}
function move() {
        if (x !== destX) {
            if (destY &gt; y) {
                y = y + 1;
            } else {
                y = y - 1;
            }
        } else {
            if (destX &gt; x) {
                x = x + 1;
            } else {
                x = x - 1;
            }
        }
}
simulate();
</code></pre>
",4
65103995,"<p>Since you are using the modern Glimmer components (imported from <code>@glimmer/component</code>),</p>
<ol>
<li><p>The arguments have to be accessed via the <a href=""https://guides.emberjs.com/release/upgrading/current-edition/glimmer-components/#toc_arguments"" rel=""nofollow noreferrer""><code>args</code> property</a> inside the js class, like, <code>this.args.auction</code>.</p>
</li>
<li><p>The arguments (<code>auction</code> and <code>products</code>) are not mutable inside the component. To change the value of an argument, we can <a href=""https://guides.emberjs.com/release/upgrading/current-edition/glimmer-components/#toc_one-way-data-flow"" rel=""nofollow noreferrer"">send an action to the parent</a> to change the value.</p>
</li>
<li><p>The <code>get</code> and <code>set</code> methods are not available in glimmer components. Those methods are part of the classic ember component. You can access the properties of a class just using the dot [.] notation like: <code>this.auction</code> and reassign values using the assignment statement like <code>this.property = 'value'</code></p>
</li>
<li><p>Since you are using native class syntax, <code>action: computed(..)</code> is not a valid declaration.</p>
</li>
<li><p>To bind events, it's recommended to use <a href=""https://guides.emberjs.com/release/upgrading/current-edition/action-on-and-fn/"" rel=""nofollow noreferrer""><code>on</code> modifier and <code>fn</code> helper</a></p>
</li>
</ol>
<p>By combining all the points,</p>
<pre class=""lang-js prettyprint-override""><code>import Component from '@glimmer/component';
import { action } from '@ember/object';

export default class AuctionFormComponent extends Component {
    @action 
    selectProduct(event) {
        // This `updateProduct` has to be implemented in parent class 
        // which mutates the `auction` object.
        this.args.updateProduct(event.target.value); // -&gt; `on` modifier will capture the native event
    }

    @action 
    save(auction) {
        auction.save();
    }
}
</code></pre>
<pre><code>&lt;div class=&quot;row&quot;&gt;
    &lt;label for=&quot;product&quot;&gt;Produto&lt;/label&gt;
    &lt;select name=&quot;product&quot; {{on &quot;change&quot; this.selectProduct}}&gt;
        &lt;option value=&quot;&quot; selected='selected' disabled='disabled'&gt;-------&lt;/option&gt;
        {{#each @products as |product|}}
            &lt;option value=&quot;{{product.id}}&quot; selected={{if (equalstr product.id @auction.product.id) 'selected'}}&gt;{{product.name}}&lt;/option&gt;
        {{/each}}
    &lt;/select&gt;
&lt;/div&gt;
</code></pre>
<p>and the invocation would be like,</p>
<pre><code>&lt;AuctionForm 
    @auction={{@model.auction}}
    @products={{@model.products}}
    @updateProduct={{this.updateProduct}}
/&gt;
</code></pre>
<p>Here, <code>updateProduct</code> needs to be implemented properly to update the product.</p>
<hr />
<p><strong>EDIT:</strong> As @BPorto mentioned in a comment, this <a href=""https://ember-learn.github.io/ember-octane-vs-classic-cheat-sheet/"" rel=""nofollow noreferrer"">Ember octane migration cheat sheet</a> will be handy while migrating the codebase from classic ember model to Octane model.</p>
",4
65085060,"<p>I added a <code>z-index: 9999</code> rule for the <code>preload</code> class to overlap the main content for the duration of the animation. And also, adjust the <code>z-index</code> for the <code>header</code> tag - <code>z-index: 9990</code>. For the <code>body</code> tag, I set <code>overflow: hidden</code> to hide the scrollbar for the duration of the animation, and at the end of the animation, this scrollbar appears again, thanks to the adjustment of the jquery code:</p>
<pre><code>$('body').css('overflow', 'visible');
</code></pre>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>window.addEventListener(""scroll"", function() {
    var header = document.querySelector(""header"");
    header.classList.toggle(""sticky"", window.scrollY &gt; 0);
})

$(window).on('load', function() {
  $('.preload').delay(5000).fadeOut(1000, function() {
    $('body').css('overflow', 'visible');
  });
});</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}
html {
    scroll-behavior: smooth;
}
body {
    min-height: 200vh;
    background-color: #d7a4d9;
    overflow: hidden;
}
h3 {
    color: #3F69CA
}

 /* Preloader Code */ 

  .preload {
    position: fixed;
    top: 0;
    width: 100%;
    height: 100vh;
    background: #77b3d4;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: opacity 0.5 ease;
    z-index: 9999;
  }
  
  .cloud1,
  .cloud2,
  .cloud3{
    height: 100px;
    position: absolute;
    right: 0%;
    z-index: -1;
  }
  
  .cloud1 {
    top: 25%;
    transform: translate(100%, -25%);
    animation: clouds 3s ease infinite;
  }
  
  .cloud2 {
    top: 50%;
    transform: translate(100%, -50%);
    animation: clouds 3s ease infinite 2s;
  }
  
  .cloud3 {
    top: 75%;
    transform: translate(100%, -75%);
    animation: clouds 3s ease infinite 4s;
  }

  
  .airplane {
    height: 200px;
    animation: airplane 1s ease infinite alternate;
  }
  
  @keyframes airplane {
    from {
      transform: translateY(0px);
    }
    to {
      transform: translateY(50px);
    }
  }
  
  @keyframes clouds {
    from {
      right: 0%;
    }
    to {
      right: 130%;
    }
  }
  
  .preload .land {
    position: absolute;
    top: 75%;
    transform: translateY(-75%);
    color: white;
    font-size: 30px;
    font-family: sans-serif;
  }

/* Navbar */

header {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    display: flex;
    justify-content: space-between;
    align-items: center;
    transition: 0.6s;
    padding: 40px 100px;
    z-index: 9990;
    font-family: ""Hind"";
}
header.sticky {
    padding: 5px 100px;
    background: #F5F5F5;
    font-family: ""Hind"";
}
header .logo {
    position: relative;
    font-weight: 700;
    color: #F5F5F5;
    text-decoration: none;
    font-size: 2em;
    text-transform: uppercase;
    letter-spacing: 2px;
    transition: 0.6s;
    font-family: ""Hind"";
}
header ul {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    font-family: ""Hind"";
}
header ul li {
    position: relative;
    list-style: none;
    font-family: ""Hind"";
}
header ul li a {
    position: relative;
    margin: 0 15px;
    text-decoration: none;
    color: #F5F5F5;
    letter-spacing: 2px;
    font-weight: 500px;
    transition: 0.6s;
    font-family: ""Hind"";
    font-size: 20px;
}
header ul li a:hover {
    text-decoration: underline;
    color: black;
}
header.sticky .logo, header.sticky ul li a {
    color: #000;
    font-family: ""Hind"";
}
.dropdown {
    position: relative;
    display: inline-block;
}
.dropdown-content {
    display: none;
    position: absolute;
    background-color: #f1f1f1;
    max-width: 100px;
    box-shadow: 0px 8px 16px 0px rgba(0, 0, 0, 0.2);
    z-index: 1;
}
.dropdown-content a {
    color: black;
    padding: 12px 16px;
    text-decoration: none;
    display: block;
}
.dropdown:hover .dropdown-content {
    display: block;
}
.ddtext1 {
    position: relative;
    left: -5px;
}
.ddtext1:hover {
    color: #00B800;
}
.ddtext2 {
    position: relative;
    left: -15px;
}
.ddtext2:hover {
    color: #14adb3
}
.ddtext3 {
    position: relative;
    left: -20px;
}
.ddtext3:hover {
    color: #E0A800;
}
.information {
    background: linear-gradient( rgb(24, 23, 23, 0.4), rgb(24, 23, 23, 0.4)), url(""blackbg.jpg"");
    background-size: cover;
    height: 100vh;
}
.name {
    position: relative;
    top: 300px;
    right: 200px;
    text-align: center;
    color: #20A4F3;
    font-family: ""Hind"";
    animation: fadeIn ease 4s;
    font-size: 80px;
}
.text {
    position: relative;
    top: 300px;
    text-align: center;
    font-family: ""Hind"";
    text-transform: uppercase;
}
.text h1 {
    font-size: 50px;
    color: #222;
}
.text span {
    font-size: 50px;
    animation: light 2s linear infinite;
}
/* Carousel */

#slider {
    overflow: hidden;
}
#slider figure {
    position: relative;
    width: 500%;
    margin: 0;
    left: 0;
    animation: 25s slider infinite;
}
#slider figure img {
    width: 20%;
    float: left;
}
@keyframes slider {
    0% {
        left: 0;
    }
    20% {
        left: 0;
    }
    25% {
        left: -100%;
    }
    45% {
        left: -100%;
    }
    50% {
        left: -200%;
    }
    70% {
        left: -200%;
    }
    75% {
        left: -300%;
    }
    95% {
        left: -300%;
    }
    100% {
        left: -400%;
    }
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;script src=""https://cdnjs.cloudflare.com/ajax/libs/jquery/3.3.1/jquery.min.js""&gt;&lt;/script&gt;
&lt;!DOCTYPE html&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;meta charset=""utf-8""&gt;
    &lt;meta name=""viewport"" content=""width=device-width""&gt;
    &lt;title&gt;Home&lt;/title&gt;
    &lt;link href=""style.css"" rel=""stylesheet"" type=""text/css"" /&gt;
    &lt;link href=""https://fonts.googleapis.com/css2?family=Hind&amp;display=swap"" rel=""stylesheet""&gt;
  &lt;/head&gt;
  &lt;body&gt;
   &lt;div class = ""load""&gt;
      &lt;div class=""preload""&gt;
        &lt;img class=""airplane"" src=""https://uce0f26a244f3c0cca3e7d07a830.previews.dropboxusercontent.com/p/thumb/AA-n6na-kOCtw8Bb8oYMYS7ujTjaqw6NiVJNq9sN_9JhpI8IQpbBvBOqyHRHI_05vuXhm-wajT-mh3XDkby6-4ModecGbJfeDEhXSRXt964rcuz4HhhTPGfQb0WJEEQuL0UuRXmzMm57ErG0SqIdWwLad21j_AglpMM8xfsMhXC-NzLfAoH7O9xsXhpzshhB3dsWYG--obRcwjaCpRh7eDxmxvRrXfa86VS3cmyh0a69vAPc8C6GFSje2oYY-M7Qykor8-mgfLHjLk3V42CvKyhiawUJKzcLwiNkyAW_veON8JZ0iBOcAGlL9429_3TcjwPTJQpn2Vk64ZfTjtBtZhDgtki9HqYz7CUCYeMAZIaEAQ/p.png?size=178x178&amp;size_mode=1"" alt=""airplane"" /&gt;
        &lt;h3 class = ""land""&gt;Landing on the website...&lt;/h3&gt;
        &lt;img src=""https://uced21f913a097d93229a4d305a6.previews.dropboxusercontent.com/p/thumb/AA-h9fXSjZiT_JeqBnoUIIjfqcAs8QJIGSX9cUfQv2MKpJvn4EEnaxZGTgfUHiP2sgqoFLtVMOddWJLpjovKwNycGuBsSTPvfVi4-rT4Vl7pI55sfCwYAwFhRpYTuDarv0cYMXvt_rqNuN5XO63h_Ko44v4vGPs0WNlD_UrD-59-5xSYd4ve5BGwwXqI8U1iOb1ieoqSRPsv6CZApkWlD4GERrmewKAwnubLsONTyT3SG60kHd490r9pBmHkjok6a4YD4fcviIMsFJl25THm7JmEYkK-LbMamygbnpPXOc_p3VX-WhkS7w1Pz97e5XqrpM9VoxXulwMZhRpDcun6-lHNO0J7ehREbwLJzjfluce3Cw/p.png?size=178x178&amp;size_mode=1"" alt=""cloud1"" class=""cloud1"" /&gt;
        &lt;img src=""https://uced21f913a097d93229a4d305a6.previews.dropboxusercontent.com/p/thumb/AA-h9fXSjZiT_JeqBnoUIIjfqcAs8QJIGSX9cUfQv2MKpJvn4EEnaxZGTgfUHiP2sgqoFLtVMOddWJLpjovKwNycGuBsSTPvfVi4-rT4Vl7pI55sfCwYAwFhRpYTuDarv0cYMXvt_rqNuN5XO63h_Ko44v4vGPs0WNlD_UrD-59-5xSYd4ve5BGwwXqI8U1iOb1ieoqSRPsv6CZApkWlD4GERrmewKAwnubLsONTyT3SG60kHd490r9pBmHkjok6a4YD4fcviIMsFJl25THm7JmEYkK-LbMamygbnpPXOc_p3VX-WhkS7w1Pz97e5XqrpM9VoxXulwMZhRpDcun6-lHNO0J7ehREbwLJzjfluce3Cw/p.png?size=178x178&amp;size_mode=1"" alt=""cloud2"" class=""cloud2"" /&gt;
        &lt;img src=""https://uced21f913a097d93229a4d305a6.previews.dropboxusercontent.com/p/thumb/AA-h9fXSjZiT_JeqBnoUIIjfqcAs8QJIGSX9cUfQv2MKpJvn4EEnaxZGTgfUHiP2sgqoFLtVMOddWJLpjovKwNycGuBsSTPvfVi4-rT4Vl7pI55sfCwYAwFhRpYTuDarv0cYMXvt_rqNuN5XO63h_Ko44v4vGPs0WNlD_UrD-59-5xSYd4ve5BGwwXqI8U1iOb1ieoqSRPsv6CZApkWlD4GERrmewKAwnubLsONTyT3SG60kHd490r9pBmHkjok6a4YD4fcviIMsFJl25THm7JmEYkK-LbMamygbnpPXOc_p3VX-WhkS7w1Pz97e5XqrpM9VoxXulwMZhRpDcun6-lHNO0J7ehREbwLJzjfluce3Cw/p.png?size=178x178&amp;size_mode=1"" alt=""cloud3"" class=""cloud3"" /&gt;
      &lt;/div&gt;
   &lt;/div&gt;
    &lt;!--Navbar--&gt;
    &lt;header&gt;
      &lt;a class="""" href=""#""&gt;&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;
          &lt;a href=""index.html""&gt;Home&lt;/a&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;div class=""dropdown""&gt;
            &lt;a class=""dropbtn"" href=""gallery.html""&gt;Gallery&lt;/a&gt;
            &lt;div class=""dropdown-content""&gt;
              &lt;a class=""ddtext1"" href=""asia.html""&gt;Asia&lt;/a&gt; &lt;a class=""ddtext2"" href=""europe.html""&gt;Europe&lt;/a&gt; &lt;a class=""ddtext3"" href=""na.html""&gt;America&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/li&gt;
        &lt;li&gt;
          &lt;a href=""contact.html""&gt;Contact&lt;/a&gt;
        &lt;/li&gt;
      &lt;/ul&gt;
    &lt;/header&gt;
    
  &lt;!--Home Page--&gt;
    &lt;div id=""information""&gt;
        &lt;div id=""slider""&gt;
    &lt;figure&gt;
      &lt;img src=""https://c4.wallpaperflare.com/wallpaper/906/767/707/polygon-triangles-geometric-patterns-wallpaper-preview.jpg""&gt;
      &lt;img src=""https://c4.wallpaperflare.com/wallpaper/906/767/707/polygon-triangles-geometric-patterns-wallpaper-preview.jpg""&gt;
      &lt;img src=""https://c4.wallpaperflare.com/wallpaper/906/767/707/polygon-triangles-geometric-patterns-wallpaper-preview.jpg""&gt;
      &lt;img src=""https://c4.wallpaperflare.com/wallpaper/906/767/707/polygon-triangles-geometric-patterns-wallpaper-preview.jpg""&gt;
      &lt;img src=""https://c4.wallpaperflare.com/wallpaper/906/767/707/polygon-triangles-geometric-patterns-wallpaper-preview.jpg""&gt;
    &lt;/figure&gt;
  &lt;/div&gt;
    &lt;/div&gt;

    &lt;script src=""script.js""&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",4
65118832,"<p>You can use <code>.indexOf(i)</code> and check whether it is in your <code>indexArray</code> variable.</p>
<pre><code>&lt;div *ngFor=&quot;let item of items; index as i&quot;&gt;
  &lt;table *ngIf=&quot;indexArray.indexOf(i)&gt; -1&quot;&gt; 
  &lt;!-- REST OF THE CODE --&gt;
</code></pre>
",4
65123017,"<p>You need to check <code>test</code> and update the value, if necessary.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const
    array = [{ name: 'a', amount: 10, serviceId: '23a', test: 'SUCCESS' }, { name: 'a', amount: 9, test: 'FAIL' }, { name: 'b', amount: 15, serviceId: '23b', test: 'SUCCESS' }],
    result = Object.values(array.reduce((r, { name, amount, test }) =&gt; {
        if (!r[name]) r[name] = { name, amount: 0, test };
        r[name].amount += amount;
        if (test === 'FAIL') r[name].test = 'FAIL';
        return r;
    }, {}));

console.log(result);</code></pre>
<pre class=""snippet-code-css lang-css prettyprint-override""><code>.as-console-wrapper { max-height: 100% !important; top: 0; }</code></pre>
</div>
</div>
</p>
",4
65103480,"<p>The problem is that you are hiding an element called &quot;person&quot; but you have multiple elements with the same ID (you should not have multiple elements with the same ID attribute). You want to hide the element that is clicked.</p>
<p>Code that could work for you.
<div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;html&gt;
&lt;head&gt;
    &lt;style&gt;

        .image1 {
            position: relative;
            border: 1px solid red;
        }

        .image2 {
            position: absolute;
            border: 1px solid green;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;img class=""image2""  src=""https://via.placeholder.com/150"" onclick=""myFunction(this)""&gt;
    &lt;img class=""image2""  src=""https://via.placeholder.com/170"" onclick=""myFunction(this)""&gt;
    &lt;img class=""image2""  src=""https://via.placeholder.com/190"" onclick=""myFunction(this)""&gt;
    &lt;img class=""image2""  src=""https://via.placeholder.com/210"" onclick=""myFunction(this)""&gt;
    &lt;img class=""image1""  src=""https://via.placeholder.com/230"" onclick=""myFunction(this)""&gt;
&lt;/body&gt;
&lt;script&gt;
    function myFunction(img) {
        img.style.display = ""none"";
    }
&lt;/script&gt;

&lt;/html&gt;</code></pre>
</div>
</div>
</p>
",4
65127376,"<p>From the jQuery Documentation of <a href=""https://api.jquery.com/val/"" rel=""nofollow noreferrer"">.val()</a> (emphasis added)</p>
<blockquote>
<p>The .val() method is primarily used to get the values of form elements such as input, select and textarea. When called on an empty collection, it returns <strong>undefined</strong>.</p>
</blockquote>
<p>You do not check for <code>undefined</code>, you check for empty string or <code>null</code>.</p>
<pre><code>if (fields[key] === &quot;&quot; || fields[key] === undefined) {
  emptyFields.push(key);
}
</code></pre>
<p>Here is a stripped down version with the <code>undefined</code> fix, a value with <code>&quot;&quot;</code> and a value with <code>undefined</code></p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let umbrellaCount = ""1""
let siteStatus = """"
let servicesRendered = ""1""
let afterServiceStatus = undefined

const fields = {
  ""Umbrella Count"": umbrellaCount,
  ""Site Status"": siteStatus,
  ""Services Rendered"": servicesRendered,
  ""After Service Status"": afterServiceStatus
}

console.log(JSON.stringify(fields, null, 2))

var emptyFields = [];
Object.keys(fields).forEach((key) =&gt; {
  if (fields[key] === """" || fields[key] === undefined) {
    emptyFields.push(key);
  }
});

console.log(emptyFields)

if (!emptyFields.length) {
  console.log(true);
} else {
  console.log(false);
}</code></pre>
</div>
</div>
</p>
",4
65162379,"<p>Use <code>.map</code> instead, if you can - return the <code>.replace</code> call in the callback:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arr = ['he123llo', 'cats', 'wor123ld', 'dogs'];

const result = arr.map(x =&gt; x.replace('123', ''));
console.log(result);</code></pre>
</div>
</div>
</p>
<p>If you have to mutate the array in-place, then take the index as well, and assign the <code>.replace</code> call back to that index in the array:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>let arr = ['he123llo', 'cats', 'wor123ld', 'dogs'];

arr.forEach((x, i) =&gt; arr[i] = x.replace('123', ''));
console.log(arr);</code></pre>
</div>
</div>
</p>
",4
65086706,"<p>You can do this with either css or Javascript.</p>
<p><strong>CSS</strong></p>
<pre><code>[data-value*=&quot;-en&quot;] {
  display: none;
}
</code></pre>
<p>And if you wanted to do it based on classes.</p>
<pre><code>[class*=&quot;-en&quot;] {
  display: none;
}
</code></pre>
<p><strong>JS</strong></p>
<pre><code>document.querySelectorAll('[data-value*=&quot;-en&quot;]').forEach((elem) =&gt; elem.style.display = 'none');
</code></pre>
",4
65140021,"<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""true"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const x1 = ['US', 'UK', 'China'];
const y1 = [1, 2, 3];
const name1 = 'CO2';

const x2 = ['US', 'UK', 'China'];
const y2 = [4, 5, 6];
const name2 = 'GHG';

const result = x1.map((country, index) =&gt; ({
  country,
  [name1]: y1[index],
  [name2]: y2[index]
}));

console.log(result);</code></pre>
</div>
</div>
</p>
",4
65117603,"<p>You can find the index of an element in an array while using these array iteration functions by adding extra parameters (index is the second parameter with forEach):</p>
<pre class=""lang-js prettyprint-override""><code>document.querySelectorAll(&quot;.select&quot;).forEach((item, index) =&gt; { // here
      item.addEventListener('click', arrow =&gt; {
      document.body.style.backgroundImage = `url(&quot;${background_list[index]}&quot;)`
})})
</code></pre>
",4
65123935,"<p>You could use <a href=""https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/race"" rel=""nofollow noreferrer""><code>Promise.race</code></a> on the original promise and a timeout promise that rejects, e.g.:</p>
<pre><code>await Promise.allSettled(
    promises.map(promise =&gt; Promise.race([promise, rejectAfterDelay(5000)])) // **
)
.then(result =&gt; result.forEach(d =&gt; {
  if (d.status === 'fulfilled') {
    data.push(d.value)
  }
}));
</code></pre>
<p>...where <code>rejectAfterDelay</code> is something like:</p>
<pre><code>const rejectAfterDelay = ms =&gt; new Promise((_, reject) =&gt; {
    setTimeout(reject, ms, new Error(&quot;timeout&quot;));
};
</code></pre>
<hr />
<p>Side note: You could use <code>filter</code> to filter out the rejected promises:</p>
<pre><code>data.push(...
    await Promise.allSettled(
        promises.map(promise =&gt; Promise.race([promise, rejectAfterDelay(5000)]))
    ).then(result =&gt; result.filter(({status}) =&gt; status === &quot;fulfilled&quot;))
);
</code></pre>
<p>...although I think I'd refactor the &quot;<code>allSettled</code> within timeout&quot; part into a utility function, e.g.:</p>
<pre><code>const fulfilledWithinTimeout = async (promises, timeout) =&gt; {
    promises = Array.isArray(promises) ? promises : [...promises];
    const all = await Promise.allSettled(promises.map(promise =&gt; Promise.race([promise, rejectAfterDelay(timeout)]));
    return all.filter(({status}) =&gt; status === &quot;fulfilled&quot;);
};
</code></pre>
<p>then</p>
<pre><code>data.push(...await fulfilledWithinTimeout(promises, 5000));
</code></pre>
",4
65086828,"<p>Your updated question completely changes the nature of the inputs. If the inputs are that varied, you'll need to match just about any &quot;word&quot; that doesn't start with a digit that isn't <code>and</code>, <code>or</code>, or <code>not</code> (but that fits with your original attempt, so I guess that makes sense):</p>
<pre><code>const regex = /(?!and|or|not)\b[A-Z]\w*/gi;
</code></pre>
<p>Live Example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const tests = [
    {
        str: ""(Value1==6) and or not (Value2==0)?1:0"",
        expect: [""Value1"", ""Value2""]
    },
    {
        str: ""Value_1"",
        expect: [""Value_1""]
    },
    {
        str: ""(Value_1 * Value_2)"",
        expect: [""Value_1"", ""Value_2""]
    },
    {
        str: ""Value_Machine_Outcome==4?1:0"",
        expect: [""Value_Machine_Outcome""] // Note I put this in an array
    }
];

const regex = /(?!and|or|not)\b[A-Z]\w*/gi;
for (const {str, expect} of tests) {
    const result = str.match(regex);
    const good = result.length === expect.length &amp;&amp; result.every((v, i) =&gt; v === expect[i]);
    console.log(JSON.stringify(result), good ? ""Ok"" : ""&lt;== ERROR"");
}</code></pre>
</div>
</div>
</p>
<p>That works by disallowing <code>and</code>, <code>or</code>, and <code>not</code>, and requiring a match at a word boundary (<code>\b</code>).
Note that in the tests, I changed the expected result of the <code>Value_Machine_Outcome==4?1:0</code> string to be an array, not just a string, like all the others.</p>
<hr />
<p><strong>Original Answer</strong> before the question completely changed the inputs:</p>
<p>If you want to use <code>String.prototype.match</code>, you can use a positive look-behind (since ES2018) for a <code>(</code> and match everything prior to a <code>=</code> following it:</p>
<pre><code>const regex = /(?&lt;=\()[^=]+/g;
</code></pre>
<p>Live Example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const paragraph = '(Value1==6) and (Value2==0)?1:0';
const regex = /(?&lt;=\()[^=]+/g;
const found = paragraph.match(regex);

console.log(found);

// expected output: Array [""Value1"", ""Value2""]</code></pre>
</div>
</div>
</p>
<p>If you're okay with a loop, you can avoid the lookbehind (since they were only added in ES2018) by using a capture group:</p>
<pre><code>const regex = /\(([^=]+)/g;
const found = [];
let match;
while (!!(match = regex.exec(paragraph))) {
    found.push(match[1]);
}
</code></pre>
<p>Live Example:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const paragraph = '(Value1==6) and (Value2==0)?1:0';
const regex = /\(([^=]+)/g;
const found = [];
let match;
while (!!(match = regex.exec(paragraph))) {
    found.push(match[1]);
}

console.log(found);

// expected output: Array [""Value1"", ""Value2""]</code></pre>
</div>
</div>
</p>
<hr />
<p>In a comment you asked:</p>
<blockquote>
<p>My expression can also contain underscore. like it could be value_1, value_2. Will it work there ?</p>
</blockquote>
<p>and I said it would because both of the above match anything but a <code>=</code>.</p>
<p>Later you said:</p>
<blockquote>
<p>when my structure contain 'Value_1' it ignores</p>
</blockquote>
<p>Again, both of the above work just fine with <code>Value_1</code> and <code>Value_2</code>:</p>
<p>First:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const paragraph = '(Value_1==6) and (Value_2==0)?1:0';
const regex = /(?&lt;=\()[^=]+/g;
const found = paragraph.match(regex);

console.log(found);

// expected output: Array [""Value1"", ""Value2""]</code></pre>
</div>
</div>
</p>
<p>Second:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const paragraph = '(Value_1==6) and (Value_2==0)?1:0';
const regex = /\(([^=]+)/g;
const found = [];
let match;
while (!!(match = regex.exec(paragraph))) {
    found.push(match[1]);
}

console.log(found);

// expected output: Array [""Value1"", ""Value2""]</code></pre>
</div>
</div>
</p>
",4
65091855,"<p>Basically, you have a global variable somewhere <code>totalSeconds</code> which you need to also set back to zero when you reset.</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>var totalSeconds = 0; // reset this to zero when you reset as below
var secondsLabel = document.getElementById(""seconds"");
var minutesLabel = document.getElementById(""minutes"");
document.getElementById(""reset"").addEventListener(""click"",resertTimer);

setInterval(setTime, 1000);

function setTime(){
    ++totalSeconds;
    secondsLabel.innerHTML = pad(totalSeconds%60);
    minutesLabel.innerHTML = pad(parseInt(totalSeconds/60));
}

function pad(val){
    var valString = val + """";
    if(valString.length &lt; 2)
    {
        return ""0"" + valString;
    }
    else
    {
        return valString;
    }
}

// reset() function
function resertTimer(){
    document.getElementById(""minutes"").innerHTML = ""00"";
    document.getElementById(""seconds"").innerHTML = ""00"";
    totalSeconds = 0
}</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;label id=""minutes""&gt;00&lt;/label&gt;
&lt;label id=""colon""&gt;:&lt;/label&gt;
&lt;label id=""seconds""&gt;00&lt;/label&gt;

&lt;button id=""reset""&gt;Reset&lt;/button&gt;</code></pre>
</div>
</div>
</p>
",4
65122375,"<p>Actually, the recommended way of doing this in TypeScript is only by type casting like this:</p>
<pre><code>private messageSubject = new BehaviorSubject&lt;any&gt;(undefined);

public messages$: Observable&lt;any&gt; = this.messageSubject;
</code></pre>
<p>This way it's TypeScript compiler who won't let you call <code>next()</code>, <code>error()</code> or <code>complete()</code>. Using <code>asObservable()</code> is recommened only when using RxJS in pure JavaScript. For example, internally in RxJS source code it never uses <code>asObservable()</code> even though it uses and exposes Subjects =&gt; Observables a lot.</p>
<p>For more info see discussion: <a href=""https://github.com/ReactiveX/rxjs/pull/2408"" rel=""nofollow noreferrer"">https://github.com/ReactiveX/rxjs/pull/2408</a></p>
",4
65101768,"<p>There are many ways to do this. A simple way that requires little math, and lets Three.js handle the heavy-lifting is to use an <a href=""https://threejs.org/docs/#api/en/core/Object3D"" rel=""nofollow noreferrer"">Object3D</a> nested inside another: the child object is the &quot;ring&quot;, and the parent object moves the ring to the midpoint and &quot;looks&quot; down the line to make it perpendicular.</p>
<pre class=""lang-js prettyprint-override""><code>// Create end vectors
var v1 = new THREE.Vector3(1, 3, 5);
var v2 = new THREE.Vector3(7, 8, 10);

// Get midpoint
var mid = new THREE.Vector3();
mid.addVectors(v1, v2);
mid.multiplyScalar(0.5);

// Nest child object inside parent
var parent = new THREE.Object3D();
var child = new THREE.Object3D();
parent.add(child);

// Set child position to any point in the XY plane with radius = 1
// This is a point in your &quot;disc&quot;
child.position.set(0, 1, 0);

// Move parent to midpoint
parent.position.copy(mid);

// Rotate parent to look towards end of the line
// This makes the &quot;disc&quot; perpendicular to the line
parent.lookAt(v1);

// Get world position of child 
var discPoint = new THREE.Vector3();
child.getWorldPosition(discPoint);
console.log(discPoint);
</code></pre>
<p>The local position of <code>child</code> is still <code>[0, 1, 0]</code>, but the world position, after translating and rotating the parent, is the answer you're looking for. Alternatively, you could simply use <a href=""https://threejs.org/docs/#api/en/core/Object3D.localToWorld"" rel=""nofollow noreferrer"">Object3D.localToWorld</a>, but I thought this parent/child example would illustrate the process more clearly.</p>
",4
65104856,"<p>Localhost isn't the actual origin. The origin ip address is 127.0.0.1 and so change the origin from <code>http://localhost:3001</code> to <code>http://127.0.0.1:3001</code>.</p>
<pre class=""lang-js prettyprint-override""><code>const io = socketIo(server, {
      cors: {
        origin: &quot;http://127.0.0.1:3001&quot;,
        methods: [&quot;GET&quot;, &quot;POST&quot;]
      }
})
</code></pre>
",-1
65129553,"<p>The best way to achieve this is to use the <a href=""https://fullcalendar.io/docs/v3/events-json-feed"" rel=""nofollow noreferrer"">events as JSON feed</a> pattern described in the fullCalendar documentation.</p>
<p>Essentially it works like this: if you tell fullCalendar the URL of your controller action, it will automatically make a new request to the server whenever the date range changes in the calendar (and it does not already have downloaded events for that date range). It will also automatically append &quot;start&quot; and &quot;end&quot; date parameters to the request - so then all your server has to do is read those parameters and use them in your database query to filter the results being returned to the calendar. You can also, optionally, append other relevant data to the request as well - such as your other filter options.</p>
<p>So in your case you would end up with code something like this:</p>
<p>JavaScript - fullCalendar events configuration:</p>
<pre><code>events: {
  type: &quot;POST&quot;,
  url: &quot;/home/GetEvents&quot;,
  data: function () { // a function that returns an object
  return {
    //your filter object goes here
  };
}
</code></pre>
<p>Controller:</p>
<pre><code>[HttpPost]
public JsonResult GetEvents(FiltModel model) {
   //...where the FiltModel class includes start and end parameters - ideally these should be DateTime objects, not strings.

   //... then, query the database using the filter options in the model, and return JSON in the format required by fullCalendar
}
</code></pre>
",-1
65099150,"<p>Try Deep Copying instead of Shallow</p>
<p><code>const newCopy = JSON.parse(JSON.stringify(old));</code></p>
<p>or simply</p>
<p><code>const newCopy = {...old}</code></p>
",-1
65117736,"<p>Make sure that the <code>MainUI.js</code> <code>script</code> is referenced correctly and that it is referenced prior to the <code>test.js</code> <code>script</code> that will use it.</p>
",-1
65120625,"<p>Here's a way to write the algorithm with a while loop. Since we're working with async code via Promises, we won't be blocking the main thread.</p>
<pre class=""lang-js prettyprint-override""><code>async function poll(params) {
    while (true) {
        await new Promise(resolve =&gt; setTimeout(resolve, 1000)) // perhaps sleep a bit between polls
        const returned_promise = read_from_backend(some_url, some_params);
        const r = await returned_promise.then(some_process_func)
    }
}

poll(starting_params);
</code></pre>
",-1
65092937,"<p>Probably because you reassign the Action[&quot;trackid&quot;] on the same object.</p>
<p>Do something like:</p>
<pre><code>{
for(var i =0; i&lt; selectrows.length; i++){
   const action = { ...Action }
   action[&quot;trackid&quot;] = selectrows[i].innerText.replace(/(^\d+)(.+$)/i, '$1');

   researchService.postExecuteAction(action)
     .then(function(result){
     },function error(result){
     });
}
}
</code></pre>
",-1
65100950,"<p>I think this is a good opportunity to learn about modules. It will help if you first write a <code>zoo</code> module which handles operations on your data. The <code>zoo.add</code> function makes it easy to add a new animal or update an existing one. Functions <code>fromString</code> and <code>toString</code> make it easy to jump between representations -</p>
<pre class=""lang-js prettyprint-override""><code>// zoo.js

const empty = _ =&gt;
  new Map
  
const fromString = (s = &quot;&quot;) =&gt;
  new Map
    ( s
        .split(&quot;, &quot;)
        .map(_ =&gt; _.split(&quot; is &quot;))
        .map(([ k, _ ]) =&gt; [ k, Number(_) ])
    )
  
const toString = (t = empty()) =&gt;
  Array.from
    ( t.entries()
    , ([ animal, qty ]) =&gt; `${animal} is ${qty}` 
    )
    .join(&quot;, &quot;)
  
const add = (t = empty(), a = &quot;&quot;, q = 0) =&gt;
  t.has(a)
    ? t.set(a, t.get(a) + q)
    : t.set(a, q)

export { add, empty, fromString, toString }
</code></pre>
<p>Now we write our <code>main</code> module -</p>
<pre class=""lang-js prettyprint-override""><code>// main.js

import { fromString, add, toString } from &quot;./zoo.js&quot;

const input =
  'Dog is 5, Cat is 7, Rabbit is 2'

const result =
  toString(add(fromString(input), &quot;Dog&quot;, 3))
  
console.log(result)
</code></pre>
<pre class=""lang-none prettyprint-override""><code>Dog is 8, Cat is 7, Rabbit is 2
</code></pre>
<p>As we can see, our <code>zoo</code> module makes it easy to manage our animal inventory -</p>
<pre class=""lang-js prettyprint-override""><code>// main.js

import { empty, add, toString } from &quot;./zoo.js&quot;

const z =
  empty()

add(z, &quot;dog&quot;, 1)
add(z, &quot;cat&quot;, 2)
add(z, &quot;rabbit&quot;, 3)
add(z, &quot;mouse&quot;, 4)
add(z, &quot;dog&quot;, 5)
add(z, &quot;rabbit&quot;, 6)
  
console.log(toString(z))
</code></pre>
<pre class=""lang-none prettyprint-override""><code>dog is 6, cat is 2, rabbit is 9, mouse is 4
</code></pre>
<p>Expand the snippet below to verify the results in your own browser -</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""true"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code snippet-currently-hidden"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>// zoo.js
const empty = _ =&gt;
  new Map
  
const fromString = (s = """") =&gt;
  new Map
    ( s
        .split("", "")
        .map(_ =&gt; _.split("" is ""))
        .map(([ k, _ ]) =&gt; [ k, Number(_) ])
    )
  
const toString = (t = empty()) =&gt;
  Array.from
    ( t.entries()
    , ([ animal, qty ]) =&gt; `${animal} is ${qty}` 
    )
    .join("", "")
  
const add = (t = empty(), a = """", q = 0) =&gt;
  t.has(a)
    ? t.set(a, t.get(a) + q)
    : t.set(a, q)

// main.js
const input =
  'Dog is 5, Cat is 7, Rabbit is 2'

const result =
  toString(add(fromString(input), ""Dog"", 3))
  
console.log(result)</code></pre>
</div>
</div>
</p>
",-1
65138595,"<p>You can do:</p>
<pre><code>const new_arr = []

for (const [key, value] of Object.entries(data[0])) {
    new_arr.push({name: key, number: value})
}

console.log(new_arr)
</code></pre>
",-1
65099989,"<p>This can be accomplished much simpler using a single Regex expression:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>function transform(value) {
  return String(value).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
}

// Works with string
console.log(transform(""0123456789""));

// And numbers
console.log(transform(1234567890));</code></pre>
</div>
</div>
</p>
<p>This regex will look in the string for any point that has 3 digits in a row after it and will make sure that point only has exactly multiples of 3 digits.</p>
<hr />
<p>This was discovered in the first part of a post:
<a href=""https://stackoverflow.com/questions/2901102/how-to-print-a-number-with-commas-as-thousands-separators-in-javascript"">How to print a number with commas as thousands separators in JavaScript</a></p>
",-1
65109332,"<p>since the date value will be always in first 10 characters ,you can take the first 10 characters form the string</p>
<pre><code>&lt;td&gt;{records.record_date.substring(0 , 9)}&lt;/td&gt;
</code></pre>
<p>or if its not always 10 characters you can do this</p>
<pre><code>&lt;td&gt;{records.record_date.substring(0 , records.record_date.indexOf(&quot;T&quot;))}&lt;/td&gt;
</code></pre>
",-1
65149095,"<p>In the try block, you can use jQuery's <code>.submit()</code> with the form's ID:</p>
<p><code>$(&quot;#ID&quot;).submit();</code></p>
<p>or vanilla JS:</p>
<p><code>document.getElementById(&quot;myForm&quot;).submit();</code></p>
",-1
65093223,"<p>You could replace <code>&lt;strong&gt;</code> and <code>&lt;/strong&gt;</code> to anything lik <code>&lt;$NOT$S$TRON$&gt;</code> and <code>&lt;/$NOT$S$TRON$&gt;</code> then replace your &quot;strong&quot; and then replace your <code>&lt;$NOT$S$TRON$&gt;</code>'s back.</p>
",-1
65104680,"<p>You're using the incorrect CSS selector. <code>input:checked ~ label</code> should be <code>input:checked + label</code>. The latter only affects the label directly after the input, while the former affects <em>every</em> label after it.</p>
",-1
65098968,"<p>The sharp image package might be useful for this scenario. More specifically the <a href=""https://sharp.pixelplumbing.com/api-resize#extract"" rel=""nofollow noreferrer"">extract method</a>.</p>
<p>I've added a link to the documentation but here's a possible implementation to split up the image.</p>
<pre class=""lang-js prettyprint-override""><code>const sharp = require(&quot;sharp&quot;);

const originalFilename = &quot;image.jpg&quot;;


const image = sharp(originalFilename);

// this is just a placeholder
const imageWidth = 500;

image
  .extract({ left: 0, top: 0, width: imageWidth, height: 25000 })
  .toFile(&quot;top.jpg&quot;, function(err) {
    // Save the top of the image to a file named &quot;top.jpg&quot;
  });

image
  .extract({ left: 0, top: 25000, width: imageWidth, height: 25000 })
  .toFile(&quot;bottom.jpg&quot;, function(err) {
    // Save the bottom of the image to a file named &quot;bottom.jpg&quot;
  });
</code></pre>
<p>I'm assuming you can reuse the original sharp image object to call the extract function twice. If not you might need to call the sharp constructor again.</p>
",-1
65141857,"<p>The docs for <a href=""https://discord.js.org/#/docs/main/stable/class/GuildMember?scrollTo=ban"" rel=""nofollow noreferrer""><code>&lt;GuildMember.ban()&gt;</code></a>, state that the options you can provide should be an options object.</p>
<p>so change your code to</p>
<pre><code>await member.ban({reason: reason})
</code></pre>
",-1
65122605,"<p>You need to save your file somewhere and you need to be able to read it again.</p>
<p>For now, to just be able to show a list, you can do this</p>
<pre><code>document.getElementById(&quot;itemlist&quot;).innerHTML += '&lt;li&gt;' + result + '&lt;/li&gt;'
</code></pre>
<p>or something more savable:</p>
<p><div class=""snippet"" data-lang=""js"" data-hide=""false"" data-console=""true"" data-babel=""false"">
<div class=""snippet-code"">
<pre class=""snippet-code-js lang-js prettyprint-override""><code>const links = [];
document.getElementById(""urlForm"").addEventListener(""submit"", function(e) {
  e.preventDefault();
  var strText = document.getElementById(""url_descrip"").value;
  var strText1 = document.getElementById(""url"").value;
  links.push(strText.link(strText1)); // url address        
  document.getElementById(""itemlist"").innerHTML = `&lt;li&gt;${links.join(""&lt;/li&gt;&lt;li&gt;"")}&lt;/li&gt;`
})</code></pre>
<pre class=""snippet-code-html lang-html prettyprint-override""><code>&lt;form id=""urlForm""&gt;
  &lt;input type=""text"" name=""Descrip"" id=""url_descrip"" placeholder=""Descrip""&gt;
  &lt;input type=""text"" name=""URL"" id=""url"" placeholder=""URL""&gt;
  &lt;input type=""submit"" value=""Submit""&gt;
&lt;/form&gt;
&lt;div&gt;
  &lt;ol id=""itemlist""&gt;&lt;/ol&gt;
&lt;/div&gt;</code></pre>
</div>
</div>
</p>
",-1
