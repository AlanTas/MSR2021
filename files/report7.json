[{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65107368.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":1,"column":1}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<div *ngFor=\"let form of myForm.controls;\">\r\n    <ng-container [formGroup]=\"form\">\r\n      <div>\r\n        <label>Name</label\r\n        ><input type=\"text\" required formControlName=\"firstName\" />\r\n      </div>\r\n      <span class=\"text-danger\" *ngIf=\"isInValidFormControl(form,'firstName')\">\r\n        Name is required\r\n      </span>\r\n      <div>\r\n        <label>Value</label><input type=\"text\" formControlName=\"value\" />\r\n      </div>\r\n    </ng-container>\r\n</div>\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65107499.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'sleep' is defined but never used.","line":26,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":26,"endColumn":15}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"var typeString = ['• I\\'m Mr. Frits\\n• and I love Pakistan...:)'];\r\n\r\nvar i = 0;\r\nvar count = 0\r\nvar selectedText = '';\r\nvar text = '';\r\n(function type() {\r\n  if (count == typeString.length) {\r\n    count = 0;\r\n  }\r\n  selectedText = typeString[count];\r\n  text = selectedText.slice(0, ++i);\r\n  document.getElementById('typing').innerHTML = text.fontsize(6);\r\n  document.getElementById('typing').style.fontFamily = \"monospace\";\r\n  document.getElementById(\"typing\").style.color = \"black\";\r\n  document.getElementById(\"typing\").style.fontWeight = \"normal\";\r\n\r\n  if (text.length === selectedText.length) {\r\n    count++;\r\n    i = 0;\r\n\r\n  }\r\n  setTimeout(type, 300);\r\n}());\r\n\r\nfunction sleep(milliseconds) {\r\n  var start = new Date().getTime();\r\n  for (var i = 0; i < 1e7; i++) {\r\n    if ((new Date().getTime() - start) > milliseconds) {\r\n      break;\r\n    }\r\n  }\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65107860.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token ...","line":6,"column":11}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const myArray = [{ 'a': {'x': ['Bob', 'Rob', 'Mike'], 'y': [4, 5, 6],'name': 'a' }},{'b': {'x': ['Kris', 'Elen', 'Hanna'],'y': [10, 11, 12],'name': 'b'}}];\r\n\r\nconst switchKey = (obj, key1, key2) => {\r\n  const {[key1]: a, [key2]: b} = obj;\r\n  //swap here\r\n  return {...obj, [key1]: b, [key2]: a}\r\n}\r\n\r\nconst switched = myArray.map(o => {\r\n  let [key, value] = Object.entries(o)[0];\r\n  return {[key] : switchKey(value, \"x\", \"y\")};\r\n});\r\nconsole.log(switched);","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65107974.js","messages":[{"ruleId":"valid-typeof","severity":2,"message":"Invalid typeof comparison value.","line":108,"column":76,"nodeType":"Literal","messageId":"invalidValue","endLine":108,"endColumn":83},{"ruleId":"no-undef","severity":2,"message":"'data' is not defined.","line":120,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":120,"endColumn":13}],"errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"[\r\n  {\r\n    \"name\": \"data.0.id.no\",\r\n    \"value\": null\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.uid\",\r\n    \"value\": null\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.area\",\r\n    \"value\": \"Universe\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.place\",\r\n    \"value\": \"LMN\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.code\",\r\n    \"value\": \"abc\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.group\",\r\n    \"value\": \"xyz\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.0.definition.type\",\r\n    \"value\": \"up\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.0.definition.features.featurekey\",\r\n    \"value\": \"ABC\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.0.definition.features.featureValues\",\r\n    \"value\": null\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.0.definition.mandatory\",\r\n    \"value\": true\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.0.cost.currency\",\r\n    \"value\": \"USD\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.0.cost.value\",\r\n    \"value\": 1\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.1.definition.type\",\r\n    \"value\": \"down\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.1.definition.mandatory\",\r\n    \"value\": true\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.1.cost\",\r\n    \"value\": \"100\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.2.definition.type\",\r\n    \"value\": \"left\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.2.definition.value\",\r\n    \"value\": null\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.2.definition.mandatory\",\r\n    \"value\": true\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.information1.0.data.2.cost\",\r\n    \"value\": false\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.hobby.indoor\",\r\n    \"value\": false\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.hobby.outdoor\",\r\n    \"value\": true\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.dataBody.petName\",\r\n    \"value\": \"Tiger\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.details\",\r\n    \"value\": \"detail\"\r\n  },\r\n  {\r\n    \"name\": \"data.0.id.phone\",\r\n    \"value\": \"contact\"\r\n  }\r\n]\r\n\r\nvar output = Array();\r\n\r\nfunction iterate(data, name, output)\r\n{\r\n    for(let key in data)\r\n    {\r\n        let value = data[key];\r\n\r\n        if(value != null && (typeof(value) == \"object\" || typeof(value) == \"array\"))\r\n        {\r\n            iterate(value, name + \".\" + key, output);\r\n        }\r\n        else\r\n        {\r\n            output.push({name:name + \".\" + key, value:value});\r\n        }\r\n    }\r\n}\r\n\r\n\r\niterate(data, \"data\", output);\r\n\r\nconsole.log(\"Output\", JSON.stringify(output, 0, 2));\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65108036.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'client' is not defined.","line":1,"column":1,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":7}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"client.on('voiceStateUpdate', (newState, oldState) => {\r\n if (newState.channelID && !oldState.channelID) {\r\n  console.log('Someone joined');\r\n  // ...\r\n } else if (oldState.channelID && !newState.channelID) {\r\n  console.log('Someone left');\r\n  // ...\r\n } else {\r\n  console.log('Neither of the two actions occured');\r\n  // ...\r\n }\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65108189.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token .","line":5,"column":70}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"hot2.addHook( 'afterChange', function( changes, src ) {\r\n  [\r\n    [row, prop, oldVal, newVal] \r\n  ] = changes;\r\n  if ( prop == 0 && hot2.getDataAtRowProp( row, prop + 1 ) && newVal?.length > 0 ) {\r\n    // delete value of cell 2 if cell 1 has a value\r\n    hot2.setDataAtCell( row, prop + 1, '' );\r\n  } else if ( prop == 1 && hot.getDataAtRowProp( row, prop - 1 ) && newVal?.length > 0 ) {\r\n    // delete value of cell 1 if cell 2 has a value\r\n    hot2.setDataAtCell( row, prop -1, '' );\r\n  }\r\n})\r\n\r\n\r\nhot2.updateSettings( {\r\n   cells: function ( row, col, prop ) {\r\n     cellProperties = {};\r\n\r\n     if ( prop == 1 && hot2.getDataAtRowProp( row, prop - 1 ) ) {\r\n       // this disables cell 2 if cell 1 has a value\r\n       cellProperties.readOnly = true;\r\n     } else if ( prop == 0 && hot2.getDataAtRowProp( row, prop + 1 ) ) {\r\n       // this disables cell 1 if cell 2 has a value\r\n       cellProperties.readOnly = true;\r\n     } else {\r\n       cellProperties.readOnly = false;\r\n     }\r\n     return cellProperties;\r\n   }\r\n})\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65108520.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65108907.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'current' is not defined.","line":1,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":1,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'progress' is not defined.","line":2,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'current' is not defined.","line":2,"column":43,"nodeType":"Identifier","messageId":"undef","endLine":2,"endColumn":50},{"ruleId":"no-undef","severity":2,"message":"'progress' is not defined.","line":3,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":32},{"ruleId":"no-undef","severity":2,"message":"'next' is not defined.","line":4,"column":7,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":11},{"ruleId":"no-undef","severity":2,"message":"'progress' is not defined.","line":4,"column":14,"nodeType":"Identifier","messageId":"undef","endLine":4,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'current' is not defined.","line":6,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":6,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'current' is not defined.","line":7,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":7,"endColumn":12},{"ruleId":"no-undef","severity":2,"message":"'next' is not defined.","line":9,"column":10,"nodeType":"Identifier","messageId":"undef","endLine":9,"endColumn":14},{"ruleId":"no-undef","severity":2,"message":"'$' is not defined.","line":10,"column":6,"nodeType":"Identifier","messageId":"undef","endLine":10,"endColumn":7}],"errorCount":10,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"if (current) {\r\n    const currentIndex = progress.indexOf(current);\r\n    if (currentIndex < progress.length) {\r\n      next = progress[currentIndex+1];\r\n    }\r\n    current.classList.remove('active');\r\n    current.classList.add('passed');\r\n    \r\n    if (!next) {\r\n     $('.progress-container div').addClass('passed');\r\n      return;\r\n   }\r\n  } \r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65109168.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token {","line":1,"column":22}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  constructor(props) {\r\n    ...\r\n    this.handleToggle = this.handleToggle.bind(this);\r\n  }\r\n\r\n  handleToggle() {\r\n    this.setState({ toggled: !this.state.toggled });\r\n    this.props.onToggle();\r\n  }\r\n\r\n  render() {\r\n    ...\r\n    <div>\r\n      <button onClick={this.handleToggle}>Toggle</button>\r\n    </div>\r\n    ...\r\n  }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65109541.js","messages":[],"errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65109857.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token {","line":1,"column":6}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"body {\r\n  display: inline;\r\n  font-family: \"Bradley's Hand\", cursive\r\n}\r\n\r\n#left {\r\n  float: left;\r\n  width: 40%;\r\n  line-height: 450px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n#right {\r\n  float: right;\r\n  width: 40%;\r\n  line-height: 450px;\r\n  box-sizing: border-box;\r\n}\r\n\r\n#input {\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 18%;\r\n  box-sizing: border-box;\r\n}\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width\">\r\n  <title>repl.it</title>\r\n  <link href=\"html.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n</head>\r\n\r\n<body>\r\n  <br>\r\n  <div style=\"position: relative\">\r\n  <fieldset id=\"left\">\r\n    <p id=\"output\">TEST</p>\r\n  </fieldset>\r\n  <fieldset id=\"right\">\r\n    <p id=\"lesson\">TEST</p>\r\n  </fieldset>\r\n  <div id=\"input\">\r\n    <input type=\"button\" id=\"doctype\" value=\"<!DOCTYPE html>\">\r\n    <input type=\"button\" id=\"html\" value=\"<html>\">\r\n    <input type=\"button\" id=\"head\" value=\"<head>\">\r\n    <input type=\"button\" id=\"title\" value=\"<title>\">\r\n    <input type=\"button\" id=\"css\" value=\"<link rel='stylesheet'>\">\r\n  </div>\r\n  </div>\r\n  \r\n  <script src=\"html.js\"></script>\r\n</body>\r\n\r\n</html>\r\nbody {\r\n  display: inline;\r\n  font-family: \"Bradley's Hand\", cursive\r\n}\r\n\r\n#columns {\r\n  display: flex;\r\n}\r\n\r\n#left {\r\n  flex: 1;\r\n  min-width: 40%;\r\n  line-height: 450px;\r\n}\r\n\r\n#right {\r\n  flex: 1;\r\n  min-width: 40%;\r\n  line-height: 450px;\r\n}\r\n\r\n#input {\r\n  flex: 1;\r\n  flex-direction: column;\r\n  width: 18%;\r\n  box-sizing: border-box;\r\n}\r\n\r\n#input input {\r\nflex: 1;\r\nwidth: 100%;\r\n}\r\n<!DOCTYPE html>\r\n<html>\r\n\r\n<head>\r\n  <meta charset=\"utf-8\">\r\n  <meta name=\"viewport\" content=\"width=device-width\">\r\n  <title>repl.it</title>\r\n  <link href=\"html.css\" rel=\"stylesheet\" type=\"text/css\" />\r\n</head>\r\n\r\n<body>\r\n  <br>\r\n  <div id=\"columns\">\r\n  <fieldset id=\"left\">\r\n    <p id=\"output\">TEST</p>\r\n  </fieldset>\r\n  <div id=\"input\">\r\n    <input type=\"button\" id=\"doctype\" value=\"<!DOCTYPE html>\">\r\n    <input type=\"button\" id=\"html\" value=\"<html>\">\r\n    <input type=\"button\" id=\"head\" value=\"<head>\">\r\n    <input type=\"button\" id=\"title\" value=\"<title>\">\r\n    <input type=\"button\" id=\"css\" value=\"<link rel='stylesheet'>\">\r\n  </div>\r\n  <fieldset id=\"right\">\r\n    <p id=\"lesson\">TEST</p>\r\n  </fieldset>\r\n  </div>\r\n  <script src=\"html.js\"></script>\r\n</body>\r\n\r\n</html>","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65110118.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token {","line":1,"column":21}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"solve(puzzleString) {\r\n    var board = this.boardParser(puzzleString)\r\n    var emptySpot = this.getDot(board);\r\n    var row = emptySpot[0];\r\n    var column = emptySpot[1];\r\n\r\n    // full board condition\r\n    if (this.solved(board)) {\r\n      return puzzleString;\r\n    }\r\n\r\n    for (var i = 1; i <= 9; i++) {\r\n      if (this.checkvalue(board, row, column, i)) {\r\n        board[row][column] = i;\r\n        var boardString = this.stringifyBoard(board);\r\n        var result = this.solve(boardString);\r\n        if(result !== false){\r\n            return result;\r\n        }\r\n      }\r\n    }\r\n\r\n    // if board is unsolvable return false\r\n    return false;\r\n  }\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65110339.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React from \"react\";\r\nimport \"./styles.css\";\r\nimport {\r\n  Button,\r\n  Container,\r\n  CssBaseline,\r\n  Grid,\r\n  TextField,\r\n  Typography\r\n} from \"@material-ui/core\";\r\nimport { BrowserRouter, Route, Switch, useParams } from \"react-router-dom\";\r\n\r\nconst BasicTextFields = () => {\r\n  const { rowId } = useParams();\r\n  const testVar = 55;\r\n\r\n  const selectedOfficeListRow = [{ id: 1 }, { id: 2 }].find(\r\n    (i) => i.id === parseInt(rowId)\r\n  );\r\n\r\n  const handleSubmit = (event) => {\r\n    console.log(rowId, testVar);\r\n    event.preventDefault();\r\n  };\r\n\r\n  return (\r\n    <Container component=\"main\" maxWidth=\"sm\">\r\n      <CssBaseline />\r\n      <div>\r\n        <Typography component=\"h1\" variant=\"h5\">\r\n          Sign up\r\n        </Typography>\r\n        <form noValidate onSubmit={handleSubmit}>\r\n          <Grid container spacing={2}>\r\n            <Grid item xs={12}>\r\n              <TextField\r\n                autoComplete=\"fname\"\r\n                name=\"firstName\"\r\n                variant=\"outlined\"\r\n                required\r\n                fullWidth\r\n                id=\"firstName\"\r\n                label=\"First Name\"\r\n                autoFocus\r\n                defaultValue={selectedOfficeListRow.town}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\">\r\n            Sign Up\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Hello CodeSandbox</h1>\r\n      <h2>Start editing to see some magic happen!</h2>\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path=\"/:rowId\" component={BasicTextFields} />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65110341.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import http from \"k6/http\";\r\nimport { parseHTML } from \"k6/html\";\r\n\r\nexport default function() {\r\n    const res = http.get(\"https://top-tuning.ru/\"); \r\n    const doc = parseHTML(res.body); \r\n    const pageTitle = doc.find('head title').text(); \r\n    const langAttr = doc.find('html').attr('lang');\r\n    doc.find(\"img\").toArray().forEach(function (idx) {\r\n        console.log(idx.attr(\"src\"));\r\n    });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65111017.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token :","line":1,"column":22}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"getDocument(requestId: string, documentId: DocumentID, requestService: IRequestService): Promise<GetDocumentResult> {\r\n  if (this.storageKey in sessionStorage) {\r\n    const documentsMap: Map<DocumentID, GetDocumentResult> = new Map(JSON.parse(sessionStorage.getItem(this.storageKey)!));\r\n    const document = documentsMap.get(documentId);\r\n    if (document !== undefined) {\r\n      return Promise.resolve(document);\r\n    }\r\n  }\r\n\r\n  return requestService.getDocument(requestId, documentId).then(value => {\r\n    this.setDocument(documentId, value);\r\n    return value;\r\n//  ^^^^^^^^^^^^\r\n  });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65111366.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Identifier 'checkedItems' has already been declared","line":43,"column":7}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"function* filter(predicate, it) {\r\n  for (const item of it) {\r\n    if (predicate(item))\r\n      yield item;\r\n  }\r\n}\r\n\r\nfunction* map(fn, it) {\r\n  for (const item of it) {\r\n    yield fn(item);\r\n  }\r\n}\r\n\r\n\r\nconst checkedItems = new Map()\r\n  .set(\"1\"  , true)\r\n  .set(\"1.5\", true)\r\n  .set(\"2\"  , false);\r\n  \r\nconst iterator = checkedItems.entries();\r\nconst onlyTrue = filter(([key, value]) => value, iterator);\r\nconst onlyTrueKeys = map(([key]) => key, onlyTrue);\r\n\r\nconsole.log(Array.from(onlyTrueKeys));\r\nfunction* filter(predicate, it) {\r\n  for (const item of it) {\r\n    if (predicate(item))\r\n      yield item;\r\n  }\r\n}\r\n\r\nfunction* map(fn, it) {\r\n  for (const item of it) {\r\n    yield fn(item);\r\n  }\r\n}\r\n\r\nfunction transform(iterator, ...transformers) {\r\n  return transformers.reduce((it, transform) => transform(it), iterator);\r\n}\r\n\r\n\r\nconst checkedItems = new Map()\r\n  .set(\"1\"  , true)\r\n  .set(\"1.5\", true)\r\n  .set(\"2\"  , false);\r\n\r\nconst onlyTrueKeys = transform(\r\n  checkedItems.entries(),\r\n  \r\n  filter.bind(null, ([key, value]) => value),\r\n  map.bind(null, ([key]) => key),\r\n  Array.from\r\n);\r\n\r\nconsole.log(onlyTrueKeys);\r\nfunction* filter(it, pred) {\r\n  for (const item of it) {\r\n    if (pred(item))\r\n      yield item;\r\n  }\r\n}\r\n\r\nfunction* map(it, fn) {\r\n  for (const item of it) {\r\n    yield fn(item);\r\n  }\r\n}\r\n\r\nclass LazyTransformer {\r\n  constructor(iterator) {\r\n    this.iterator = iterator;\r\n  }\r\n  \r\n  filter(predicate) {\r\n    this.iterator = filter(this.iterator, predicate);\r\n    return this;\r\n  }\r\n  \r\n  map(fn) {\r\n    this.iterator = map(this.iterator, fn);\r\n    return this;\r\n  }\r\n  \r\n  toArray() {\r\n    return Array.from(this.iterator);\r\n  }\r\n}\r\n\r\n\r\nconst checkedItems = new Map()\r\n  .set(\"1\"  , true)\r\n  .set(\"1.5\", true)\r\n  .set(\"2\"  , false);\r\n\r\nconst transformer = new LazyTransformer(checkedItems.entries());\r\n\r\ntransformer\r\n  .filter(([key, value]) => value)\r\n  .map(([key]) => key);\r\n\r\nconsole.log(transformer.toArray());","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65111849.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token {","line":20,"column":6}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"$.fn.parallax = function(resistance, mouse) {\r\n  $e = $(this);\r\n  gsap.to($e, 0.2, {\r\n    x: -((mouse.clientX - window.innerWidth / 2) / resistance),\r\n    y: -((mouse.clientY - window.innerHeight / 2) / resistance)\r\n  });\r\n};\r\n\r\n\r\n$('body').mousemove(function(e) {\r\n  $('.mouse-with img').parallax(-10, e);\r\n});\r\n$('body').mouseout(function(e) {\r\n  if (!$(e.relatedTarget).closest('body').is(this))\r\n  gsap.to($('.mouse-with img'), 0.5, {\r\n    x: 0,\r\n    y: 0\r\n  });\r\n});\r\nhtml {\r\n  font-size: 16px;\r\n  height: 100%;\r\n}\r\n\r\nbody {\r\n  font-size: 1em;\r\n  font-family: Arial, Helvetica, Sans-serif;\r\n  color: #000;\r\n  line-height: 100%;\r\n  min-height: 100%;\r\n  margin: 0px;\r\n  position: relative;\r\n  overflow: hidden;\r\n  overflow-y: auto;\r\n}\r\n\r\n.mouse-with {\r\n  margin: -150px 0 0 -200px;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n}\r\n\r\na {\r\n  position: fixed;\r\n  top: 10px;\r\n  right: 10px;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65112156.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":1,"column":1}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"<td>\r\n    input  type=\"checkbox\" id=\"vehicle2\" name=\"vehicle2\" \r\n      (change)=\"addCheckValue(i,list.isTicked)\"\r\n      [checked]=\"list.isTicked\"\r\n      [disabled]=\"list.isDisabled\">\r\n  </td>\r\n\r\n\r\n  <td *ngIf=\"list.isDisabled\">\r\n            Already disabled\r\n    </td>\r\n\r\n\r\n\r\naddCheckValue(index,isChecked){\r\n    if(isChecked === undefined){\r\n      isChecked = true\r\n    }\r\n    this.listes[index].isTicked = isChecked;\r\n\r\n  }\r\n\r\n\r\n\r\n//disabled checked boxes on close \r\nthis.listes = this.listes.map(e => {\r\n      if (e.isTicked === true) {\r\n        e.isDisabled = true;\r\n      }\r\n      return e;\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65112302.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'points' is defined but never used.","line":15,"column":25,"nodeType":"Identifier","messageId":"unusedVar","endLine":15,"endColumn":31},{"ruleId":"no-unused-vars","severity":2,"message":"'date' is defined but never used.","line":16,"column":26,"nodeType":"Identifier","messageId":"unusedVar","endLine":16,"endColumn":30}],"errorCount":2,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"let obj = { \r\n    \"expHistory\": {\r\n        \"2020-11-26\": 84825,\r\n        \"2020-11-25\": 87219,\r\n        \"2020-11-24\": 44447,\r\n        \"2020-11-23\": 14849,\r\n        \"2020-11-22\": 57379,\r\n        \"2020-11-21\": 32364,\r\n        \"2020-11-20\": 42295\r\n    }\r\n}\r\n            \r\nfunction getTotal(thresholdDate, expHistory) {\r\n    let result = Object.entries(expHistory)\r\n        .filter(([date, points]) => date > thresholdDate)\r\n        .reduce((total, [date, points]) => total + points, 0);\r\n    return result;\r\n}\r\n \r\nconst thresholdDate = \"2020-11-20\";\r\nconsole.log(`Total (from ${thresholdDate}):`, getTotal(thresholdDate, obj.expHistory));","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65112383.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":116,"column":1}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"  const Cinemas = \r\n      [ { branchName: \"City Cinema - New York\"\r\n        , movies: \r\n          [ { id: 1, shows: \r\n              [ { index: 1, datetime: \"8 Nov, Sun - 9:00am\",   house: 3 } \r\n              , { index: 2, datetime: \"10 Nov, Tue - 11:00am\", house: 3 } \r\n              ] \r\n            } \r\n          , { id: 2, shows: \r\n              [ { index: 3, datetime: \"9 Nov, Mon - 2:00pm\",   house: 1 } \r\n          ] } ] \r\n        } \r\n      , { branchName: \"City Cinema - Los Angeles\"\r\n        , movies: \r\n          [ { id: 2, shows: \r\n              [ { index: 4, datetime: \"11 Nov, Wed - 9:00am\",  house: 4 } \r\n              , { index: 5, datetime: \"11 Nov, Wed - 11:00am\", house: 2 } \r\n          ] } ] \r\n        } \r\n      , { branchName: \"City Cinema - Wisconsin\"\r\n        , movies:\r\n          [ { id: 1, shows: \r\n              [ { index: 6, datetime: \"11 Nov, Wed - 9:00am\", house: 4} \r\n      ] } ] } ] \r\n\r\n\r\n  const Movies = \r\n    [ { id        : 1\r\n      , type      : \"now\"\r\n      , thumbnail : \"../xx.png\"\r\n      , src       : \"../yy.mp4\"\r\n      , name      : \"Casablanca\"\r\n      , cast      : \"Humphrey Bogart, Ingrid Bergmen\"\r\n      , director  : \"Michael Curtiz\"\r\n      , duration  : 120\r\n      } \r\n    , { id        : 2\r\n      , type      : \"now\"\r\n      , thumbnail : \"../xx.png\"\r\n      , src       : \"../xx.mp4\"\r\n      , name      : \"Chocalate\"\r\n      , cast      : \"Christiano Roland, Wayne Beckman\"\r\n      , director  : \"Alex Curtis\"\r\n      , duration  : 110\r\n      } \r\n    , { id        : 3\r\n      , type      : \"now\"\r\n      , thumbnail : \"../xx.png\"\r\n      , src       : \"../xx.mp4\"\r\n      , name      : \"Wildlife\"\r\n      , cast      : \"Marcus Randford\"\r\n      , director  : \"David De Geek\"\r\n      , duration  : 100\r\n      } \r\n    , { id        : 4\r\n      , type      : \"upcoming\"\r\n      , thumbnail : \"../xx.png\"\r\n      , src       : \"../xx.mp4\"\r\n      , name      : \"Barbecue\"\r\n      , cast      : \"Taylor Watson\"\r\n      , director  : \"Rolando Broom\"\r\n      , duration  : 105\r\n      } \r\n    , { id        : 5\r\n      , type      : \"upcoming\"\r\n      , thumbnail : \"../xx.png\"\r\n      , src       : \"../xx.mp4\"\r\n      , name      : \"BigBuck\"\r\n      , cast      : \"Mark Hughes\"\r\n      , director  : \"Tim Carlton\"\r\n      , duration  : 115\r\n      } \r\n    , { id        : 6               // <--\r\n      , type      : \"upcoming\"\r\n      , thumbnail : \"../xx.png\"     // <--\r\n      , src       : \"../xx.mp4\"\r\n      , name      : \"Nature\"\r\n      , cast      : \"Benjamin Crook\"\r\n      , director  : \"Memphis Delan\"\r\n      , duration  : 100\r\n      } \r\n    ] \r\n\r\nconst DomParser  = new DOMParser()\r\n  ,   cinemaSlct = document.getElementById(\"cinemaSelect\")\r\n  ,   div_lm     = document.querySelector('div#lm')\r\n\r\nCinemas.forEach((cinema,index) =>\r\n  { cinemaSlct.add( new Option( cinema.branchName, index )) });\r\n\r\ncinemaSlct.onchange = () =>\r\n  {\r\n  div_lm.innerHTML = \"\"\r\n  Cinemas[cinemaSlct.value].movies.forEach(movieC=>\r\n    {\r\n    movieC.shows.forEach(show=>\r\n      {\r\n      let movie = Movies.find(x=>x.id===show.index)\r\n      if (!movie) throw 'no movie reference' \r\n\r\n      let newSection = `\r\n  <section>\r\n    <hr>\r\n    <img src=\"${movie.thumbnail}\" alt=\"${movie.name}\">\r\n    <p>name : ${movie.name} <br>\r\n      cast : ${movie.cast} <br>\r\n      director : ${movie.director} </p>\r\n    <hr>\r\n    <p> datetime:${show.datetime} <br>   house:${show.house} </p>\r\n    <hr>\r\n  </section>`;\r\n      div_lm.appendChild( (DomParser.parseFromString( newSection, 'text/html')).body.firstChild )\r\n      })\r\n    })\r\n  }\r\n<div id=\"Cinema\">\r\n  <form id=\"cin\" method=\"get\" action=\"\">\r\n    <fieldset>\r\n      <legend>Cinema</legend>\r\n      <select id=\"cinemaSelect\">\r\n        <option value=\"\" selected disabled> select one</option>\r\n      </select>\r\n    </fieldset>\r\n  </form>\r\n</div>\r\n<div id=\"lm\"></div>","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65112460.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: 'import' and 'export' may appear only with 'sourceType: module'","line":1,"column":1}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import React, { useEffect, useState } from 'react';\r\nimport {\r\n  ActivityIndicator,\r\n  FlatList,\r\n  StyleSheet,\r\n  View,\r\n  Text,\r\n  Button,\r\n  TouchableOpacity,\r\n  TextInput,\r\n  Clipboard,\r\n} from 'react-native';\r\n\r\nconst App = () => {\r\n  const [isLoading, setLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [refetch, setRefetch] = useState(false);\r\n  const [selectedText, setSelectedText] = useState('');\r\n\r\n  const [copiedText, setCopiedText] = useState(\r\n    'Nothing to show, copy by clicking on FlatList Text, and paste it by clicking Paste button'\r\n  );\r\n\r\n  const copyToClipboard = (text) => {\r\n    Clipboard.setString(text);\r\n    console.log('copied to Clipboard');\r\n    fetchCopiedText();\r\n    console.log('copied text: ', copiedText);\r\n  };\r\n\r\n  const fetchCopiedText = async () => {\r\n    const text = await Clipboard.getString();\r\n    setCopiedText(text);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch('https://jsonplaceholder.typicode.com/posts')\r\n      .then((response) => response.json())\r\n      .then((json) => setData(json))\r\n      .catch((error) => console.error(error))\r\n      .finally(() => setLoading(false));\r\n  }, [refetch]);\r\n\r\n  return (\r\n    <>\r\n      <View style={styles.container}>\r\n        <TextInput\r\n          style={{\r\n            padding: 10,\r\n            backgroundColor: 'white',\r\n            width: 300,\r\n            color: 'black',\r\n            height: 100,\r\n          }}\r\n        />\r\n        {isLoading ? (\r\n          <ActivityIndicator />\r\n        ) : (\r\n          <FlatList\r\n            data={data}\r\n            keyExtractor={({ id }, index) => id}\r\n            renderItem={({ item }) => (\r\n              <TouchableOpacity\r\n                onPress={() => {\r\n                  Clipboard.setString(item.title);\r\n                  console.log('selected text:', selectedText);\r\n                }}>\r\n                <Text style={styles.content}>❝ {item.title} ❞</Text>\r\n              </TouchableOpacity>\r\n            )}\r\n          />\r\n        )}\r\n      </View>\r\n      <View style={{ width: 300, height: 100 }}>\r\n        <Text>{copiedText}</Text>\r\n      </View>\r\n      <View>\r\n        <View style={styles.buttonStyle}>\r\n          <Button\r\n            title=\"New\"\r\n            onPress={() => setRefetch(!refetch)}\r\n            style={styles.buttonCopy}\r\n            color=\"#134074\"\r\n          />\r\n        </View>\r\n        <View style={styles.buttonStyle}>\r\n          <Button\r\n            title=\"Paste\"\r\n            onPress={() => {\r\n              fetchCopiedText();\r\n            }}\r\n            style={styles.buttonCopy}\r\n            color=\"#aa4465\"\r\n          />\r\n        </View>\r\n      </View>\r\n    </>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    justifyContent: 'center',\r\n    backgroundColor: '#001524',\r\n    padding: 30,\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  content: {\r\n    fontSize: 25,\r\n    textAlign: 'left',\r\n    color: '#ffecd1',\r\n  },\r\n  QuotesMark: {\r\n    color: '#ffffff',\r\n    fontSize: 10,\r\n  },\r\n  buttonStyle: {\r\n    padding: 10,\r\n    alignItems: 'center',\r\n    backgroundColor: '#001524',\r\n  },\r\n});\r\n\r\nexport default App;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65112800.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'log' is defined but never used.","line":3,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"no-redeclare","severity":2,"message":"'hobbies' is already defined.","line":14,"column":5,"nodeType":"Identifier","messageId":"redeclared","endLine":14,"endColumn":12},{"ruleId":"no-redeclare","severity":2,"message":"'log' is already defined.","line":26,"column":10,"nodeType":"Identifier","messageId":"redeclared","endLine":26,"endColumn":13}],"errorCount":3,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"var hobbies = [\"Sample 1\", \"Sample 2\", \"Sample 3\"];\r\n\r\nfunction log(){\r\n  const elem = document.getElementById(\"demo\");\r\n  const startStr = \"I only like\";\r\n\r\n  hobbies.forEach((hobby,i) => {\r\n    setTimeout(() => {\r\n      elem.innerHTML = `<p>${startStr} ${hobby}</p>`\r\n    }, i * 3000);\r\n  })\r\n}\r\n\r\nvar hobbies = [\"Sample 1\", \"Sample 2\", \"Sample 3\"];\r\n\r\nfunction loop(delayTime) {\r\n  const elem = document.getElementById(\"demo\");\r\n  const startStr = \"I only like\";\r\n  hobbies.forEach((hobby,i) => {\r\n    setTimeout(() => {\r\n      elem.innerHTML = `<p>${startStr} ${hobby}</p>`\r\n    }, i * delayTime);\r\n  })\r\n}\r\n\r\nfunction log(){\r\n  const delayTime = 3000;\r\n  loop(delayTime)\r\n  setInterval(function() {\r\n    loop(delayTime)\r\n  }, hobbies.length * delayTime);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65112848.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token <","line":7,"column":9}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"const UseEffectCounter1 = () => {\r\n    const [count, setCount] = useState(0);\r\n    useEffect(() => {\r\n        document.title = 'You clicked 0 times';\r\n    }, []);\r\n    return (\r\n        <div>\r\n            <button onClick={() => {setCount(count + 1)}}>+1</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst UseEffectCounter1 = () => {\r\n    const initCount = 0;\r\n    const [count, setCount] = useState(initCount);\r\n    useEffect(() => {\r\n        document.title = `You clicked ${initCount} times`;\r\n    }, [initCount]);\r\n    return (\r\n        <div>\r\n            <button onClick={() => {setCount(count + 1)}}>+1</button>\r\n        </div>\r\n    )\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65112870.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token =","line":2,"column":9}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"class App extends Component {\r\n  state = {\r\n    data: [{ id: 1, type: \"A\" }, { id: 1, type: \"B\" }, { id: 1, type: \"C\" }]\r\n  };\r\n  handleChange = e => {\r\n    console.log(e.target.value);\r\n  };\r\n  render() {\r\n    return (\r\n      <div>\r\n        <select className=\"form-control\" onChange={this.handleChange}>\r\n          <option>Select data</option>\r\n          {this.state.data.map((i, h) => (\r\n            <option key={h} value={i.type}>\r\n              {i.type}\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\vbntb-07\\PycharmProjects\\MSR\\files\\65112906.js","messages":[{"ruleId":null,"fatal":true,"severity":2,"message":"Parsing error: Unexpected token id","line":13,"column":8}],"errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"window.onload = function() {\r\nvar tr = document.querySelectorAll('#productTable tbody tr');\r\n\r\nArray.from(tr).forEach(function(trArray, index) {\r\n  var button = document.createElement('button');\r\n  var th = document.createElement('th');\r\n  button.innerText = 'buy';\r\n  button.className = 'btn_buy';\r\n  th.append(button);\r\n  tr[index].append(th);    \r\n});\r\n}\r\n<table id=\"productTable\" class=\"table table-bordered table-condensed table-striped\">\r\n <thead>\r\n   <tr>\r\n      <th>Product Name</th>\r\n      <th>Description</th>\r\n      <th>Price</th>\r\n   </tr>\r\n </thead>\r\n\r\n <tbody>\r\n   <tr>\r\n      <th>Soap</th>\r\n      <th>good for babies</th>\r\n      <th>75</th>\r\n   </tr>\r\n   \r\n   <tr>\r\n      <th>Milk</th>\r\n      <th>manufactured</th>\r\n      <th>100</th>\r\n   </tr>\r\n   \r\n    <tr>\r\n      <th>Rice</th>\r\n      <th>red rice 1kg pack</th>\r\n      <th>130</th>\r\n   </tr>\r\n </tbody>\r\n</table>","usedDeprecatedRules":[]}]